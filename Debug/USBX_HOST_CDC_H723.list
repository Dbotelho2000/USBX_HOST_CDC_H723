
USBX_HOST_CDC_H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125b0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08012880  08012880  00022880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012b60  08012b60  00022b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012b68  08012b68  00022b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012b6c  08012b6c  00022b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000cc  24000000  08012b70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005e90  240000cc  08012c3c  000300cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24005f5c  08012c3c  00035f5c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300fa  2**0
                  CONTENTS, READONLY
 11 .debug_info   000910d0  00000000  00000000  0003013d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00012556  00000000  00000000  000c120d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000029c8  00000000  00000000  000d3768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001c92  00000000  00000000  000d6130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004ec37  00000000  00000000  000d7dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0006f612  00000000  00000000  001269f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00165633  00000000  00000000  0019600b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007fdc  00000000  00000000  002fb640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000108  00000000  00000000  0030361c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000cc 	.word	0x240000cc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08012868 	.word	0x08012868

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000d0 	.word	0x240000d0
 800030c:	08012868 	.word	0x08012868

08000310 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000310:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000312:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000316:	4919      	ldr	r1, [pc, #100]	; (800037c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000318:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800031c:	4818      	ldr	r0, [pc, #96]	; (8000380 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800031e:	4917      	ldr	r1, [pc, #92]	; (800037c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000320:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000322:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000324:	4817      	ldr	r0, [pc, #92]	; (8000384 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000326:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000328:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800032c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800032e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000332:	4915      	ldr	r1, [pc, #84]	; (8000388 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000334:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000336:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800033a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800033c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000340:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000344:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000348:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800034c:	490f      	ldr	r1, [pc, #60]	; (800038c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800034e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000352:	4770      	bx	lr

08000354 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000354:	f7ff bffe 	b.w	8000354 <__tx_BadHandler>

08000358 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000358:	f7ff bffe 	b.w	8000358 <__tx_HardfaultHandler>

0800035c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800035c:	f7ff bffe 	b.w	800035c <__tx_SVCallHandler>

08000360 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000360:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000362:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000366:	4770      	bx	lr

08000368 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000368:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800036a:	f000 f891 	bl	8000490 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800036e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000372:	4770      	bx	lr

08000374 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000374:	f7ff bffe 	b.w	8000374 <__tx_NMIHandler>

08000378 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000378:	f7ff bffe 	b.w	8000378 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800037c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000380:	24005170 	.word	0x24005170
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000384:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000388:	004f587f 	.word	0x004f587f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800038c:	40ff0000 	.word	0x40ff0000

08000390 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000390:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000394:	4a2a      	ldr	r2, [pc, #168]	; (8000440 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000396:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000398:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800039c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80003a0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80003a4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80003a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80003aa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80003ae:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80003b2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80003b6:	f3bf 8f6f 	isb	sy

080003ba <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80003ba:	e7fe      	b.n	80003ba <__tx_wait_here>

080003bc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003bc:	4821      	ldr	r0, [pc, #132]	; (8000444 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003be:	4a22      	ldr	r2, [pc, #136]	; (8000448 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80003c0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80003c4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80003c6:	b191      	cbz	r1, 80003ee <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80003c8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80003ca:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80003ce:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003d2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003d6:	d101      	bne.n	80003dc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003d8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003dc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003dc:	4c1b      	ldr	r4, [pc, #108]	; (800044c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003de:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003e2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003e4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003e8:	b10d      	cbz	r5, 80003ee <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ea:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003ec:	6023      	str	r3, [r4, #0]

080003ee <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003ee:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003f0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003f2:	b1b1      	cbz	r1, 8000422 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003f4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003f6:	b662      	cpsie	i

080003f8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003f8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003fa:	4c14      	ldr	r4, [pc, #80]	; (800044c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003fc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003fe:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000402:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000404:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000406:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800040a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800040e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000412:	d101      	bne.n	8000418 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000414:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000418 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000418:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800041c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000420:	4770      	bx	lr

08000422 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000422:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000424:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000426:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000428:	b909      	cbnz	r1, 800042e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800042a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800042c:	e7f9      	b.n	8000422 <__tx_ts_wait>

0800042e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800042e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000432:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000436:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800043a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800043c:	e7dc      	b.n	80003f8 <__tx_ts_restore>

0800043e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800043e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000440:	2400520c 	.word	0x2400520c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000444:	24005174 	.word	0x24005174
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000448:	24005178 	.word	0x24005178
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800044c:	24005778 	.word	0x24005778

08000450 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000450:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000452:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000456:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800045a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800045e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000460:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000464:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000466:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000468:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800046a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800046c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800046e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000470:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000472:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000474:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000476:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000478:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800047a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800047c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800047e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000482:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000484:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000486:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800048a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800048c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800048e:	4770      	bx	lr

08000490 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000490:	4922      	ldr	r1, [pc, #136]	; (800051c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000492:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000494:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000498:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800049a:	4b21      	ldr	r3, [pc, #132]	; (8000520 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800049c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800049e:	b13a      	cbz	r2, 80004b0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80004a0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80004a4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80004a6:	b91a      	cbnz	r2, 80004b0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a8:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80004aa:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80004ae:	6018      	str	r0, [r3, #0]

080004b0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004b0:	491d      	ldr	r1, [pc, #116]	; (8000528 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80004b2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80004b4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80004b6:	b122      	cbz	r2, 80004c2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80004ba:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80004be:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80004c0:	e008      	b.n	80004d4 <__tx_timer_done>

080004c2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80004c2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004c6:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80004c8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80004ca:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80004cc:	d101      	bne.n	80004d2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004ce:	4b19      	ldr	r3, [pc, #100]	; (8000534 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004d0:	6818      	ldr	r0, [r3, #0]

080004d2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004d2:	6008      	str	r0, [r1, #0]

080004d4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004d4:	4b13      	ldr	r3, [pc, #76]	; (8000524 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004d6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004d8:	b912      	cbnz	r2, 80004e0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004da:	4914      	ldr	r1, [pc, #80]	; (800052c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004dc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004de:	b1d0      	cbz	r0, 8000516 <__tx_timer_nothing_expired>

080004e0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004e0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004e4:	4911      	ldr	r1, [pc, #68]	; (800052c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004e6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004e8:	b108      	cbz	r0, 80004ee <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ea:	f00b f8ad 	bl	800b648 <_tx_timer_expiration_process>

080004ee <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004f0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004f2:	b172      	cbz	r2, 8000512 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004f4:	f00b f81a 	bl	800b52c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004f8:	480f      	ldr	r0, [pc, #60]	; (8000538 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004fa:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004fc:	b949      	cbnz	r1, 8000512 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004fe:	480f      	ldr	r0, [pc, #60]	; (800053c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000500:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000502:	4a0f      	ldr	r2, [pc, #60]	; (8000540 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000504:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000506:	480f      	ldr	r0, [pc, #60]	; (8000544 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800050c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800050e:	d000      	beq.n	8000512 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000510:	6002      	str	r2, [r0, #0]

08000512 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000512:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000516 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000516:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800051a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800051c:	24005218 	.word	0x24005218
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000520:	24005778 	.word	0x24005778
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000524:	2400521c 	.word	0x2400521c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000528:	240052a8 	.word	0x240052a8
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800052c:	240052ac 	.word	0x240052ac
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000530:	240052a4 	.word	0x240052a4
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000534:	240052a0 	.word	0x240052a0
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000538:	2400520c 	.word	0x2400520c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800053c:	24005174 	.word	0x24005174
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000540:	24005178 	.word	0x24005178
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000544:	e000ed04 	.word	0xe000ed04
	...

08000550 <memchr>:
 8000550:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000554:	2a10      	cmp	r2, #16
 8000556:	db2b      	blt.n	80005b0 <memchr+0x60>
 8000558:	f010 0f07 	tst.w	r0, #7
 800055c:	d008      	beq.n	8000570 <memchr+0x20>
 800055e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000562:	3a01      	subs	r2, #1
 8000564:	428b      	cmp	r3, r1
 8000566:	d02d      	beq.n	80005c4 <memchr+0x74>
 8000568:	f010 0f07 	tst.w	r0, #7
 800056c:	b342      	cbz	r2, 80005c0 <memchr+0x70>
 800056e:	d1f6      	bne.n	800055e <memchr+0xe>
 8000570:	b4f0      	push	{r4, r5, r6, r7}
 8000572:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000576:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800057a:	f022 0407 	bic.w	r4, r2, #7
 800057e:	f07f 0700 	mvns.w	r7, #0
 8000582:	2300      	movs	r3, #0
 8000584:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000588:	3c08      	subs	r4, #8
 800058a:	ea85 0501 	eor.w	r5, r5, r1
 800058e:	ea86 0601 	eor.w	r6, r6, r1
 8000592:	fa85 f547 	uadd8	r5, r5, r7
 8000596:	faa3 f587 	sel	r5, r3, r7
 800059a:	fa86 f647 	uadd8	r6, r6, r7
 800059e:	faa5 f687 	sel	r6, r5, r7
 80005a2:	b98e      	cbnz	r6, 80005c8 <memchr+0x78>
 80005a4:	d1ee      	bne.n	8000584 <memchr+0x34>
 80005a6:	bcf0      	pop	{r4, r5, r6, r7}
 80005a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80005ac:	f002 0207 	and.w	r2, r2, #7
 80005b0:	b132      	cbz	r2, 80005c0 <memchr+0x70>
 80005b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80005b6:	3a01      	subs	r2, #1
 80005b8:	ea83 0301 	eor.w	r3, r3, r1
 80005bc:	b113      	cbz	r3, 80005c4 <memchr+0x74>
 80005be:	d1f8      	bne.n	80005b2 <memchr+0x62>
 80005c0:	2000      	movs	r0, #0
 80005c2:	4770      	bx	lr
 80005c4:	3801      	subs	r0, #1
 80005c6:	4770      	bx	lr
 80005c8:	2d00      	cmp	r5, #0
 80005ca:	bf06      	itte	eq
 80005cc:	4635      	moveq	r5, r6
 80005ce:	3803      	subeq	r0, #3
 80005d0:	3807      	subne	r0, #7
 80005d2:	f015 0f01 	tst.w	r5, #1
 80005d6:	d107      	bne.n	80005e8 <memchr+0x98>
 80005d8:	3001      	adds	r0, #1
 80005da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80005de:	bf02      	ittt	eq
 80005e0:	3001      	addeq	r0, #1
 80005e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005e6:	3001      	addeq	r0, #1
 80005e8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ea:	3801      	subs	r0, #1
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_uldivmod>:
 80005f0:	b953      	cbnz	r3, 8000608 <__aeabi_uldivmod+0x18>
 80005f2:	b94a      	cbnz	r2, 8000608 <__aeabi_uldivmod+0x18>
 80005f4:	2900      	cmp	r1, #0
 80005f6:	bf08      	it	eq
 80005f8:	2800      	cmpeq	r0, #0
 80005fa:	bf1c      	itt	ne
 80005fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000600:	f04f 30ff 	movne.w	r0, #4294967295
 8000604:	f000 b970 	b.w	80008e8 <__aeabi_idiv0>
 8000608:	f1ad 0c08 	sub.w	ip, sp, #8
 800060c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000610:	f000 f806 	bl	8000620 <__udivmoddi4>
 8000614:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800061c:	b004      	add	sp, #16
 800061e:	4770      	bx	lr

08000620 <__udivmoddi4>:
 8000620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000624:	9e08      	ldr	r6, [sp, #32]
 8000626:	460d      	mov	r5, r1
 8000628:	4604      	mov	r4, r0
 800062a:	460f      	mov	r7, r1
 800062c:	2b00      	cmp	r3, #0
 800062e:	d14a      	bne.n	80006c6 <__udivmoddi4+0xa6>
 8000630:	428a      	cmp	r2, r1
 8000632:	4694      	mov	ip, r2
 8000634:	d965      	bls.n	8000702 <__udivmoddi4+0xe2>
 8000636:	fab2 f382 	clz	r3, r2
 800063a:	b143      	cbz	r3, 800064e <__udivmoddi4+0x2e>
 800063c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000640:	f1c3 0220 	rsb	r2, r3, #32
 8000644:	409f      	lsls	r7, r3
 8000646:	fa20 f202 	lsr.w	r2, r0, r2
 800064a:	4317      	orrs	r7, r2
 800064c:	409c      	lsls	r4, r3
 800064e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000652:	fa1f f58c 	uxth.w	r5, ip
 8000656:	fbb7 f1fe 	udiv	r1, r7, lr
 800065a:	0c22      	lsrs	r2, r4, #16
 800065c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000660:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000664:	fb01 f005 	mul.w	r0, r1, r5
 8000668:	4290      	cmp	r0, r2
 800066a:	d90a      	bls.n	8000682 <__udivmoddi4+0x62>
 800066c:	eb1c 0202 	adds.w	r2, ip, r2
 8000670:	f101 37ff 	add.w	r7, r1, #4294967295
 8000674:	f080 811c 	bcs.w	80008b0 <__udivmoddi4+0x290>
 8000678:	4290      	cmp	r0, r2
 800067a:	f240 8119 	bls.w	80008b0 <__udivmoddi4+0x290>
 800067e:	3902      	subs	r1, #2
 8000680:	4462      	add	r2, ip
 8000682:	1a12      	subs	r2, r2, r0
 8000684:	b2a4      	uxth	r4, r4
 8000686:	fbb2 f0fe 	udiv	r0, r2, lr
 800068a:	fb0e 2210 	mls	r2, lr, r0, r2
 800068e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000692:	fb00 f505 	mul.w	r5, r0, r5
 8000696:	42a5      	cmp	r5, r4
 8000698:	d90a      	bls.n	80006b0 <__udivmoddi4+0x90>
 800069a:	eb1c 0404 	adds.w	r4, ip, r4
 800069e:	f100 32ff 	add.w	r2, r0, #4294967295
 80006a2:	f080 8107 	bcs.w	80008b4 <__udivmoddi4+0x294>
 80006a6:	42a5      	cmp	r5, r4
 80006a8:	f240 8104 	bls.w	80008b4 <__udivmoddi4+0x294>
 80006ac:	4464      	add	r4, ip
 80006ae:	3802      	subs	r0, #2
 80006b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006b4:	1b64      	subs	r4, r4, r5
 80006b6:	2100      	movs	r1, #0
 80006b8:	b11e      	cbz	r6, 80006c2 <__udivmoddi4+0xa2>
 80006ba:	40dc      	lsrs	r4, r3
 80006bc:	2300      	movs	r3, #0
 80006be:	e9c6 4300 	strd	r4, r3, [r6]
 80006c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d908      	bls.n	80006dc <__udivmoddi4+0xbc>
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	f000 80ed 	beq.w	80008aa <__udivmoddi4+0x28a>
 80006d0:	2100      	movs	r1, #0
 80006d2:	e9c6 0500 	strd	r0, r5, [r6]
 80006d6:	4608      	mov	r0, r1
 80006d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006dc:	fab3 f183 	clz	r1, r3
 80006e0:	2900      	cmp	r1, #0
 80006e2:	d149      	bne.n	8000778 <__udivmoddi4+0x158>
 80006e4:	42ab      	cmp	r3, r5
 80006e6:	d302      	bcc.n	80006ee <__udivmoddi4+0xce>
 80006e8:	4282      	cmp	r2, r0
 80006ea:	f200 80f8 	bhi.w	80008de <__udivmoddi4+0x2be>
 80006ee:	1a84      	subs	r4, r0, r2
 80006f0:	eb65 0203 	sbc.w	r2, r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	4617      	mov	r7, r2
 80006f8:	2e00      	cmp	r6, #0
 80006fa:	d0e2      	beq.n	80006c2 <__udivmoddi4+0xa2>
 80006fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000700:	e7df      	b.n	80006c2 <__udivmoddi4+0xa2>
 8000702:	b902      	cbnz	r2, 8000706 <__udivmoddi4+0xe6>
 8000704:	deff      	udf	#255	; 0xff
 8000706:	fab2 f382 	clz	r3, r2
 800070a:	2b00      	cmp	r3, #0
 800070c:	f040 8090 	bne.w	8000830 <__udivmoddi4+0x210>
 8000710:	1a8a      	subs	r2, r1, r2
 8000712:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000716:	fa1f fe8c 	uxth.w	lr, ip
 800071a:	2101      	movs	r1, #1
 800071c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000720:	fb07 2015 	mls	r0, r7, r5, r2
 8000724:	0c22      	lsrs	r2, r4, #16
 8000726:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800072a:	fb0e f005 	mul.w	r0, lr, r5
 800072e:	4290      	cmp	r0, r2
 8000730:	d908      	bls.n	8000744 <__udivmoddi4+0x124>
 8000732:	eb1c 0202 	adds.w	r2, ip, r2
 8000736:	f105 38ff 	add.w	r8, r5, #4294967295
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x122>
 800073c:	4290      	cmp	r0, r2
 800073e:	f200 80cb 	bhi.w	80008d8 <__udivmoddi4+0x2b8>
 8000742:	4645      	mov	r5, r8
 8000744:	1a12      	subs	r2, r2, r0
 8000746:	b2a4      	uxth	r4, r4
 8000748:	fbb2 f0f7 	udiv	r0, r2, r7
 800074c:	fb07 2210 	mls	r2, r7, r0, r2
 8000750:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000754:	fb0e fe00 	mul.w	lr, lr, r0
 8000758:	45a6      	cmp	lr, r4
 800075a:	d908      	bls.n	800076e <__udivmoddi4+0x14e>
 800075c:	eb1c 0404 	adds.w	r4, ip, r4
 8000760:	f100 32ff 	add.w	r2, r0, #4294967295
 8000764:	d202      	bcs.n	800076c <__udivmoddi4+0x14c>
 8000766:	45a6      	cmp	lr, r4
 8000768:	f200 80bb 	bhi.w	80008e2 <__udivmoddi4+0x2c2>
 800076c:	4610      	mov	r0, r2
 800076e:	eba4 040e 	sub.w	r4, r4, lr
 8000772:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000776:	e79f      	b.n	80006b8 <__udivmoddi4+0x98>
 8000778:	f1c1 0720 	rsb	r7, r1, #32
 800077c:	408b      	lsls	r3, r1
 800077e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000782:	ea4c 0c03 	orr.w	ip, ip, r3
 8000786:	fa05 f401 	lsl.w	r4, r5, r1
 800078a:	fa20 f307 	lsr.w	r3, r0, r7
 800078e:	40fd      	lsrs	r5, r7
 8000790:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000794:	4323      	orrs	r3, r4
 8000796:	fbb5 f8f9 	udiv	r8, r5, r9
 800079a:	fa1f fe8c 	uxth.w	lr, ip
 800079e:	fb09 5518 	mls	r5, r9, r8, r5
 80007a2:	0c1c      	lsrs	r4, r3, #16
 80007a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007a8:	fb08 f50e 	mul.w	r5, r8, lr
 80007ac:	42a5      	cmp	r5, r4
 80007ae:	fa02 f201 	lsl.w	r2, r2, r1
 80007b2:	fa00 f001 	lsl.w	r0, r0, r1
 80007b6:	d90b      	bls.n	80007d0 <__udivmoddi4+0x1b0>
 80007b8:	eb1c 0404 	adds.w	r4, ip, r4
 80007bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80007c0:	f080 8088 	bcs.w	80008d4 <__udivmoddi4+0x2b4>
 80007c4:	42a5      	cmp	r5, r4
 80007c6:	f240 8085 	bls.w	80008d4 <__udivmoddi4+0x2b4>
 80007ca:	f1a8 0802 	sub.w	r8, r8, #2
 80007ce:	4464      	add	r4, ip
 80007d0:	1b64      	subs	r4, r4, r5
 80007d2:	b29d      	uxth	r5, r3
 80007d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80007d8:	fb09 4413 	mls	r4, r9, r3, r4
 80007dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80007e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80007e4:	45a6      	cmp	lr, r4
 80007e6:	d908      	bls.n	80007fa <__udivmoddi4+0x1da>
 80007e8:	eb1c 0404 	adds.w	r4, ip, r4
 80007ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80007f0:	d26c      	bcs.n	80008cc <__udivmoddi4+0x2ac>
 80007f2:	45a6      	cmp	lr, r4
 80007f4:	d96a      	bls.n	80008cc <__udivmoddi4+0x2ac>
 80007f6:	3b02      	subs	r3, #2
 80007f8:	4464      	add	r4, ip
 80007fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000802:	eba4 040e 	sub.w	r4, r4, lr
 8000806:	42ac      	cmp	r4, r5
 8000808:	46c8      	mov	r8, r9
 800080a:	46ae      	mov	lr, r5
 800080c:	d356      	bcc.n	80008bc <__udivmoddi4+0x29c>
 800080e:	d053      	beq.n	80008b8 <__udivmoddi4+0x298>
 8000810:	b156      	cbz	r6, 8000828 <__udivmoddi4+0x208>
 8000812:	ebb0 0208 	subs.w	r2, r0, r8
 8000816:	eb64 040e 	sbc.w	r4, r4, lr
 800081a:	fa04 f707 	lsl.w	r7, r4, r7
 800081e:	40ca      	lsrs	r2, r1
 8000820:	40cc      	lsrs	r4, r1
 8000822:	4317      	orrs	r7, r2
 8000824:	e9c6 7400 	strd	r7, r4, [r6]
 8000828:	4618      	mov	r0, r3
 800082a:	2100      	movs	r1, #0
 800082c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000830:	f1c3 0120 	rsb	r1, r3, #32
 8000834:	fa02 fc03 	lsl.w	ip, r2, r3
 8000838:	fa20 f201 	lsr.w	r2, r0, r1
 800083c:	fa25 f101 	lsr.w	r1, r5, r1
 8000840:	409d      	lsls	r5, r3
 8000842:	432a      	orrs	r2, r5
 8000844:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000848:	fa1f fe8c 	uxth.w	lr, ip
 800084c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000850:	fb07 1510 	mls	r5, r7, r0, r1
 8000854:	0c11      	lsrs	r1, r2, #16
 8000856:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800085a:	fb00 f50e 	mul.w	r5, r0, lr
 800085e:	428d      	cmp	r5, r1
 8000860:	fa04 f403 	lsl.w	r4, r4, r3
 8000864:	d908      	bls.n	8000878 <__udivmoddi4+0x258>
 8000866:	eb1c 0101 	adds.w	r1, ip, r1
 800086a:	f100 38ff 	add.w	r8, r0, #4294967295
 800086e:	d22f      	bcs.n	80008d0 <__udivmoddi4+0x2b0>
 8000870:	428d      	cmp	r5, r1
 8000872:	d92d      	bls.n	80008d0 <__udivmoddi4+0x2b0>
 8000874:	3802      	subs	r0, #2
 8000876:	4461      	add	r1, ip
 8000878:	1b49      	subs	r1, r1, r5
 800087a:	b292      	uxth	r2, r2
 800087c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000880:	fb07 1115 	mls	r1, r7, r5, r1
 8000884:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000888:	fb05 f10e 	mul.w	r1, r5, lr
 800088c:	4291      	cmp	r1, r2
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0x282>
 8000890:	eb1c 0202 	adds.w	r2, ip, r2
 8000894:	f105 38ff 	add.w	r8, r5, #4294967295
 8000898:	d216      	bcs.n	80008c8 <__udivmoddi4+0x2a8>
 800089a:	4291      	cmp	r1, r2
 800089c:	d914      	bls.n	80008c8 <__udivmoddi4+0x2a8>
 800089e:	3d02      	subs	r5, #2
 80008a0:	4462      	add	r2, ip
 80008a2:	1a52      	subs	r2, r2, r1
 80008a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80008a8:	e738      	b.n	800071c <__udivmoddi4+0xfc>
 80008aa:	4631      	mov	r1, r6
 80008ac:	4630      	mov	r0, r6
 80008ae:	e708      	b.n	80006c2 <__udivmoddi4+0xa2>
 80008b0:	4639      	mov	r1, r7
 80008b2:	e6e6      	b.n	8000682 <__udivmoddi4+0x62>
 80008b4:	4610      	mov	r0, r2
 80008b6:	e6fb      	b.n	80006b0 <__udivmoddi4+0x90>
 80008b8:	4548      	cmp	r0, r9
 80008ba:	d2a9      	bcs.n	8000810 <__udivmoddi4+0x1f0>
 80008bc:	ebb9 0802 	subs.w	r8, r9, r2
 80008c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008c4:	3b01      	subs	r3, #1
 80008c6:	e7a3      	b.n	8000810 <__udivmoddi4+0x1f0>
 80008c8:	4645      	mov	r5, r8
 80008ca:	e7ea      	b.n	80008a2 <__udivmoddi4+0x282>
 80008cc:	462b      	mov	r3, r5
 80008ce:	e794      	b.n	80007fa <__udivmoddi4+0x1da>
 80008d0:	4640      	mov	r0, r8
 80008d2:	e7d1      	b.n	8000878 <__udivmoddi4+0x258>
 80008d4:	46d0      	mov	r8, sl
 80008d6:	e77b      	b.n	80007d0 <__udivmoddi4+0x1b0>
 80008d8:	3d02      	subs	r5, #2
 80008da:	4462      	add	r2, ip
 80008dc:	e732      	b.n	8000744 <__udivmoddi4+0x124>
 80008de:	4608      	mov	r0, r1
 80008e0:	e70a      	b.n	80006f8 <__udivmoddi4+0xd8>
 80008e2:	4464      	add	r4, ip
 80008e4:	3802      	subs	r0, #2
 80008e6:	e742      	b.n	800076e <__udivmoddi4+0x14e>

080008e8 <__aeabi_idiv0>:
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80008f8:	2334      	movs	r3, #52	; 0x34
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000900:	4a15      	ldr	r2, [pc, #84]	; (8000958 <tx_application_define+0x6c>)
 8000902:	4916      	ldr	r1, [pc, #88]	; (800095c <tx_application_define+0x70>)
 8000904:	4816      	ldr	r0, [pc, #88]	; (8000960 <tx_application_define+0x74>)
 8000906:	f00b f949 	bl	800bb9c <_txe_byte_pool_create>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d109      	bne.n	8000924 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <tx_application_define+0x74>)
 8000912:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000914:	68b8      	ldr	r0, [r7, #8]
 8000916:	f000 f82b 	bl	8000970 <App_ThreadX_Init>
 800091a:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d000      	beq.n	8000924 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000922:	e7fe      	b.n	8000922 <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&ux_host_app_byte_pool, "Ux App memory pool", ux_host_byte_pool_buffer, UX_HOST_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000924:	2334      	movs	r3, #52	; 0x34
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <tx_application_define+0x78>)
 800092e:	490e      	ldr	r1, [pc, #56]	; (8000968 <tx_application_define+0x7c>)
 8000930:	480e      	ldr	r0, [pc, #56]	; (800096c <tx_application_define+0x80>)
 8000932:	f00b f933 	bl	800bb9c <_txe_byte_pool_create>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d109      	bne.n	8000950 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN UX_HOST_Byte_Pool_Success */

    /* USER CODE END UX_HOST_Byte_Pool_Success */

    memory_ptr = (VOID *)&ux_host_app_byte_pool;
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <tx_application_define+0x80>)
 800093e:	60bb      	str	r3, [r7, #8]
    status = MX_USBX_Host_Init(memory_ptr);
 8000940:	68b8      	ldr	r0, [r7, #8]
 8000942:	f010 fd53 	bl	80113ec <MX_USBX_Host_Init>
 8000946:	60f8      	str	r0, [r7, #12]
    if (status != UX_SUCCESS)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d000      	beq.n	8000950 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_USBX_Host_Init_Error */
      while(1)
 800094e:	e7fe      	b.n	800094e <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	240000e8 	.word	0x240000e8
 800095c:	08012880 	.word	0x08012880
 8000960:	240004e8 	.word	0x240004e8
 8000964:	2400051c 	.word	0x2400051c
 8000968:	08012894 	.word	0x08012894
 800096c:	24004d1c 	.word	0x24004d1c

08000970 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 800097c:	68fb      	ldr	r3, [r7, #12]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 800098e:	f008 fddf 	bl	8009550 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <MX_GPIO_Init+0xa4>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	4a21      	ldr	r2, [pc, #132]	; (8000a3c <MX_GPIO_Init+0xa4>)
 80009b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009be:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <MX_GPIO_Init+0xa4>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_GPIO_Init+0xa4>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	4a1a      	ldr	r2, [pc, #104]	; (8000a3c <MX_GPIO_Init+0xa4>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_GPIO_Init+0xa4>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	f003 0308 	and.w	r3, r3, #8
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_GPIO_Init+0xa4>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <MX_GPIO_Init+0xa4>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_GPIO_Init+0xa4>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PWR_EN_GPIO_Port, USB_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0e:	480c      	ldr	r0, [pc, #48]	; (8000a40 <MX_GPIO_Init+0xa8>)
 8000a10:	f000 ff08 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PWR_EN_Pin;
 8000a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USB_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_GPIO_Init+0xa8>)
 8000a2e:	f000 fd51 	bl	80014d4 <HAL_GPIO_Init>

}
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	58024400 	.word	0x58024400
 8000a40:	58020c00 	.word	0x58020c00

08000a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a48:	f000 fbe4 	bl	8001214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4c:	f000 f808 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a50:	f7ff ffa2 	bl	8000998 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a54:	f000 fa56 	bl	8000f04 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000a58:	f7ff ff97 	bl	800098a <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <main+0x18>
	...

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b09c      	sub	sp, #112	; 0x70
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	224c      	movs	r2, #76	; 0x4c
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f011 f93e 	bl	8011cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2220      	movs	r2, #32
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f011 f938 	bl	8011cf0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a80:	2002      	movs	r0, #2
 8000a82:	f002 fbdf 	bl	8003244 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b2b      	ldr	r3, [pc, #172]	; (8000b38 <SystemClock_Config+0xd8>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <SystemClock_Config+0xd8>)
 8000a90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a94:	6193      	str	r3, [r2, #24]
 8000a96:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <SystemClock_Config+0xd8>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aa2:	bf00      	nop
 8000aa4:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <SystemClock_Config+0xd8>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ab0:	d1f8      	bne.n	8000aa4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ab6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abc:	2302      	movs	r3, #2
 8000abe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 260;
 8000ac8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000acc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000ada:	2304      	movs	r3, #4
 8000adc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 fbf4 	bl	80032d8 <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000af6:	f000 f833 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	233f      	movs	r3, #63	; 0x3f
 8000afc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afe:	2303      	movs	r3, #3
 8000b00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b06:	2308      	movs	r3, #8
 8000b08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b0a:	2340      	movs	r3, #64	; 0x40
 8000b0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b16:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b18:	2340      	movs	r3, #64	; 0x40
 8000b1a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2103      	movs	r1, #3
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 ffb3 	bl	8003a8c <HAL_RCC_ClockConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b2c:	f000 f818 	bl	8000b60 <Error_Handler>
  }
}
 8000b30:	bf00      	nop
 8000b32:	3770      	adds	r7, #112	; 0x70
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	58024800 	.word	0x58024800

08000b3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d101      	bne.n	8000b52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b4e:	f000 fb9d 	bl	800128c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40001000 	.word	0x40001000

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_MspInit+0x30>)
 8000b74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b78:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x30>)
 8000b7a:	f043 0302 	orr.w	r3, r3, #2
 8000b7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x30>)
 8000b84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	58024400 	.word	0x58024400

08000ba0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b090      	sub	sp, #64	; 0x40
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b0f      	cmp	r3, #15
 8000bac:	d827      	bhi.n	8000bfe <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	6879      	ldr	r1, [r7, #4]
 8000bb2:	2036      	movs	r0, #54	; 0x36
 8000bb4:	f000 fc66 	bl	8001484 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bb8:	2036      	movs	r0, #54	; 0x36
 8000bba:	f000 fc7d 	bl	80014b8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000bbe:	4a29      	ldr	r2, [pc, #164]	; (8000c64 <HAL_InitTick+0xc4>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bc4:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <HAL_InitTick+0xc8>)
 8000bc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bca:	4a27      	ldr	r2, [pc, #156]	; (8000c68 <HAL_InitTick+0xc8>)
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bd4:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <HAL_InitTick+0xc8>)
 8000bd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000be2:	f107 0210 	add.w	r2, r7, #16
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f003 fad9 	bl	80041a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d106      	bne.n	8000c0a <HAL_InitTick+0x6a>
 8000bfc:	e001      	b.n	8000c02 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e02b      	b.n	8000c5a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c02:	f003 faa3 	bl	800414c <HAL_RCC_GetPCLK1Freq>
 8000c06:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000c08:	e004      	b.n	8000c14 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c0a:	f003 fa9f 	bl	800414c <HAL_RCC_GetPCLK1Freq>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c16:	4a15      	ldr	r2, [pc, #84]	; (8000c6c <HAL_InitTick+0xcc>)
 8000c18:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1c:	0c9b      	lsrs	r3, r3, #18
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <HAL_InitTick+0xd0>)
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <HAL_InitTick+0xd4>)
 8000c26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_InitTick+0xd0>)
 8000c2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c2e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c30:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <HAL_InitTick+0xd0>)
 8000c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c34:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_InitTick+0xd0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_InitTick+0xd0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c42:	480b      	ldr	r0, [pc, #44]	; (8000c70 <HAL_InitTick+0xd0>)
 8000c44:	f005 f8b2 	bl	8005dac <HAL_TIM_Base_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d104      	bne.n	8000c58 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c4e:	4808      	ldr	r0, [pc, #32]	; (8000c70 <HAL_InitTick+0xd0>)
 8000c50:	f005 f90e 	bl	8005e70 <HAL_TIM_Base_Start_IT>
 8000c54:	4603      	mov	r3, r0
 8000c56:	e000      	b.n	8000c5a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3740      	adds	r7, #64	; 0x40
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	24000008 	.word	0x24000008
 8000c68:	58024400 	.word	0x58024400
 8000c6c:	431bde83 	.word	0x431bde83
 8000c70:	24004d50 	.word	0x24004d50
 8000c74:	40001000 	.word	0x40001000

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x4>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <TIM6_DAC_IRQHandler+0x10>)
 8000caa:	f005 f967 	bl	8005f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	24004d50 	.word	0x24004d50

08000cb8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <OTG_HS_IRQHandler+0x10>)
 8000cbe:	f001 f835 	bl	8001d2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	24004e34 	.word	0x24004e34

08000ccc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	e00a      	b.n	8000cf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cde:	f3af 8000 	nop.w
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	60ba      	str	r2, [r7, #8]
 8000cea:	b2ca      	uxtb	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dbf0      	blt.n	8000cde <_read+0x12>
  }

  return len;
 8000cfc:	687b      	ldr	r3, [r7, #4]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	e009      	b.n	8000d2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	60ba      	str	r2, [r7, #8]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f010 fce1 	bl	80116e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dbf1      	blt.n	8000d18 <_write+0x12>
  }
  return len;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <_close>:

int _close(int file)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d66:	605a      	str	r2, [r3, #4]
  return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <_isatty>:

int _isatty(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f010 ffd8 	bl	8011d8c <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	24050000 	.word	0x24050000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	24004d9c 	.word	0x24004d9c
 8000e10:	24005f60 	.word	0x24005f60

08000e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e18:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <SystemInit+0xd0>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a31      	ldr	r2, [pc, #196]	; (8000ee4 <SystemInit+0xd0>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e28:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <SystemInit+0xd4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 030f 	and.w	r3, r3, #15
 8000e30:	2b06      	cmp	r3, #6
 8000e32:	d807      	bhi.n	8000e44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e34:	4b2c      	ldr	r3, [pc, #176]	; (8000ee8 <SystemInit+0xd4>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f023 030f 	bic.w	r3, r3, #15
 8000e3c:	4a2a      	ldr	r2, [pc, #168]	; (8000ee8 <SystemInit+0xd4>)
 8000e3e:	f043 0307 	orr.w	r3, r3, #7
 8000e42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e44:	4b29      	ldr	r3, [pc, #164]	; (8000eec <SystemInit+0xd8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a28      	ldr	r2, [pc, #160]	; (8000eec <SystemInit+0xd8>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e50:	4b26      	ldr	r3, [pc, #152]	; (8000eec <SystemInit+0xd8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e56:	4b25      	ldr	r3, [pc, #148]	; (8000eec <SystemInit+0xd8>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4924      	ldr	r1, [pc, #144]	; (8000eec <SystemInit+0xd8>)
 8000e5c:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <SystemInit+0xdc>)
 8000e5e:	4013      	ands	r3, r2
 8000e60:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <SystemInit+0xd4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d007      	beq.n	8000e7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <SystemInit+0xd4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f023 030f 	bic.w	r3, r3, #15
 8000e76:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <SystemInit+0xd4>)
 8000e78:	f043 0307 	orr.w	r3, r3, #7
 8000e7c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <SystemInit+0xd8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <SystemInit+0xd8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <SystemInit+0xd8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <SystemInit+0xd8>)
 8000e92:	4a18      	ldr	r2, [pc, #96]	; (8000ef4 <SystemInit+0xe0>)
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <SystemInit+0xd8>)
 8000e98:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <SystemInit+0xe4>)
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <SystemInit+0xd8>)
 8000e9e:	4a17      	ldr	r2, [pc, #92]	; (8000efc <SystemInit+0xe8>)
 8000ea0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <SystemInit+0xd8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <SystemInit+0xd8>)
 8000eaa:	4a14      	ldr	r2, [pc, #80]	; (8000efc <SystemInit+0xe8>)
 8000eac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <SystemInit+0xd8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <SystemInit+0xd8>)
 8000eb6:	4a11      	ldr	r2, [pc, #68]	; (8000efc <SystemInit+0xe8>)
 8000eb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <SystemInit+0xd8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <SystemInit+0xd8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a09      	ldr	r2, [pc, #36]	; (8000eec <SystemInit+0xd8>)
 8000ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <SystemInit+0xd8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <SystemInit+0xec>)
 8000ed4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ed8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00
 8000ee8:	52002000 	.word	0x52002000
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ef4:	02020200 	.word	0x02020200
 8000ef8:	01ff0000 	.word	0x01ff0000
 8000efc:	01010280 	.word	0x01010280
 8000f00:	52004000 	.word	0x52004000

08000f04 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f0a:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f16:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f4c:	4811      	ldr	r0, [pc, #68]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f4e:	f005 fa21 	bl	8006394 <HAL_UART_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f58:	f7ff fe02 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	480d      	ldr	r0, [pc, #52]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f60:	f006 fbb5 	bl	80076ce <HAL_UARTEx_SetTxFifoThreshold>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f6a:	f7ff fdf9 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4808      	ldr	r0, [pc, #32]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f72:	f006 fbea 	bl	800774a <HAL_UARTEx_SetRxFifoThreshold>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f7c:	f7ff fdf0 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f82:	f006 fb6b 	bl	800765c <HAL_UARTEx_DisableFifoMode>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f8c:	f7ff fde8 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	24004da0 	.word	0x24004da0
 8000f98:	40004800 	.word	0x40004800

08000f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0b8      	sub	sp, #224	; 0xe0
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	22b8      	movs	r2, #184	; 0xb8
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f010 fe97 	bl	8011cf0 <memset>
  if(uartHandle->Instance==USART3)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a27      	ldr	r2, [pc, #156]	; (8001064 <HAL_UART_MspInit+0xc8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d146      	bne.n	800105a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fcc:	f04f 0202 	mov.w	r2, #2
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fde:	f107 0310 	add.w	r3, r7, #16
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 f920 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fee:	f7ff fdb7 	bl	8000b60 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <HAL_UART_MspInit+0xcc>)
 8000ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ff8:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <HAL_UART_MspInit+0xcc>)
 8000ffa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ffe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_UART_MspInit+0xcc>)
 8001004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_UART_MspInit+0xcc>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001016:	4a14      	ldr	r2, [pc, #80]	; (8001068 <HAL_UART_MspInit+0xcc>)
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_UART_MspInit+0xcc>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800102e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001032:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001048:	2307      	movs	r3, #7
 800104a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800104e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <HAL_UART_MspInit+0xd0>)
 8001056:	f000 fa3d 	bl	80014d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800105a:	bf00      	nop
 800105c:	37e0      	adds	r7, #224	; 0xe0
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40004800 	.word	0x40004800
 8001068:	58024400 	.word	0x58024400
 800106c:	58020c00 	.word	0x58020c00

08001070 <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001076:	4a11      	ldr	r2, [pc, #68]	; (80010bc <MX_USB_OTG_HS_HCD_Init+0x4c>)
 8001078:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_USB_OTG_HS_HCD_Init+0x48>)
 800107c:	2210      	movs	r2, #16
 800107e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001082:	2201      	movs	r2, #1
 8001084:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <MX_USB_OTG_HS_HCD_Init+0x48>)
 800108e:	2202      	movs	r2, #2
 8001090:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <MX_USB_OTG_HS_HCD_Init+0x48>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_USB_OTG_HS_HCD_Init+0x48>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_USB_OTG_HS_HCD_Init+0x48>)
 80010a6:	f000 fbd6 	bl	8001856 <HAL_HCD_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_USB_OTG_HS_HCD_Init+0x44>
  {
    Error_Handler();
 80010b0:	f7ff fd56 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	24004e34 	.word	0x24004e34
 80010bc:	40040000 	.word	0x40040000

080010c0 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b0b8      	sub	sp, #224	; 0xe0
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	22b8      	movs	r2, #184	; 0xb8
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f010 fe05 	bl	8011cf0 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a32      	ldr	r2, [pc, #200]	; (80011b4 <HAL_HCD_MspInit+0xf4>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d15c      	bne.n	80011aa <HAL_HCD_MspInit+0xea>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 48;
 8001100:	2330      	movs	r3, #48	; 0x30
 8001102:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001104:	2302      	movs	r3, #2
 8001106:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001108:	2304      	movs	r3, #4
 800110a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800110c:	2302      	movs	r3, #2
 800110e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001110:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001114:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001116:	2300      	movs	r3, #0
 8001118:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800111e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001122:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	4618      	mov	r0, r3
 800112c:	f003 f87c 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_HCD_MspInit+0x7a>
    {
      Error_Handler();
 8001136:	f7ff fd13 	bl	8000b60 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800113a:	f002 f8bd 	bl	80032b8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <HAL_HCD_MspInit+0xf8>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <HAL_HCD_MspInit+0xf8>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <HAL_HCD_MspInit+0xf8>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800115c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001160:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001174:	4619      	mov	r1, r3
 8001176:	4811      	ldr	r0, [pc, #68]	; (80011bc <HAL_HCD_MspInit+0xfc>)
 8001178:	f000 f9ac 	bl	80014d4 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_HCD_MspInit+0xf8>)
 800117e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001182:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <HAL_HCD_MspInit+0xf8>)
 8001184:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001188:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_HCD_MspInit+0xf8>)
 800118e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	204d      	movs	r0, #77	; 0x4d
 80011a0:	f000 f970 	bl	8001484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80011a4:	204d      	movs	r0, #77	; 0x4d
 80011a6:	f000 f987 	bl	80014b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80011aa:	bf00      	nop
 80011ac:	37e0      	adds	r7, #224	; 0xe0
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40040000 	.word	0x40040000
 80011b8:	58024400 	.word	0x58024400
 80011bc:	58020000 	.word	0x58020000

080011c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011c4:	f7ff fe26 	bl	8000e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ca:	490d      	ldr	r1, [pc, #52]	; (8001200 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e0:	4c0a      	ldr	r4, [pc, #40]	; (800120c <LoopFillZerobss+0x22>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ee:	f010 fdd3 	bl	8011d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f2:	f7ff fc27 	bl	8000a44 <main>
  bx  lr
 80011f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80011fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001200:	240000cc 	.word	0x240000cc
  ldr r2, =_sidata
 8001204:	08012b70 	.word	0x08012b70
  ldr r2, =_sbss
 8001208:	240000cc 	.word	0x240000cc
  ldr r4, =_ebss
 800120c:	24005f5c 	.word	0x24005f5c

08001210 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC3_IRQHandler>
	...

08001214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121a:	2003      	movs	r0, #3
 800121c:	f000 f927 	bl	800146e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001220:	f002 fdea 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8001224:	4602      	mov	r2, r0
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_Init+0x68>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	0a1b      	lsrs	r3, r3, #8
 800122c:	f003 030f 	and.w	r3, r3, #15
 8001230:	4913      	ldr	r1, [pc, #76]	; (8001280 <HAL_Init+0x6c>)
 8001232:	5ccb      	ldrb	r3, [r1, r3]
 8001234:	f003 031f 	and.w	r3, r3, #31
 8001238:	fa22 f303 	lsr.w	r3, r2, r3
 800123c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_Init+0x68>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <HAL_Init+0x6c>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	f003 031f 	and.w	r3, r3, #31
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	fa22 f303 	lsr.w	r3, r2, r3
 8001254:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <HAL_Init+0x70>)
 8001256:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001258:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <HAL_Init+0x74>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125e:	200f      	movs	r0, #15
 8001260:	f7ff fc9e 	bl	8000ba0 <HAL_InitTick>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e002      	b.n	8001274 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800126e:	f7ff fc7d 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	58024400 	.word	0x58024400
 8001280:	08012af4 	.word	0x08012af4
 8001284:	24000004 	.word	0x24000004
 8001288:	24000000 	.word	0x24000000

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	2400000c 	.word	0x2400000c
 80012b0:	24005138 	.word	0x24005138

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	24005138 	.word	0x24005138

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff ffee 	bl	80012b4 <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d005      	beq.n	80012f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_Delay+0x44>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012f2:	bf00      	nop
 80012f4:	f7ff ffde 	bl	80012b4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d8f7      	bhi.n	80012f4 <HAL_Delay+0x28>
  {
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2400000c 	.word	0x2400000c

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <__NVIC_SetPriorityGrouping+0x40>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	4313      	orrs	r3, r2
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <__NVIC_SetPriorityGrouping+0x40>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00
 8001358:	05fa0000 	.word	0x05fa0000

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4907      	ldr	r1, [pc, #28]	; (80013b0 <__NVIC_EnableIRQ+0x38>)
 8001392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	; (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ff4c 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001492:	f7ff ff63 	bl	800135c <__NVIC_GetPriorityGrouping>
 8001496:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	6978      	ldr	r0, [r7, #20]
 800149e:	f7ff ffb3 	bl	8001408 <NVIC_EncodePriority>
 80014a2:	4602      	mov	r2, r0
 80014a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff82 	bl	80013b4 <__NVIC_SetPriority>
}
 80014b0:	bf00      	nop
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff56 	bl	8001378 <__NVIC_EnableIRQ>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014e2:	4b86      	ldr	r3, [pc, #536]	; (80016fc <HAL_GPIO_Init+0x228>)
 80014e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014e6:	e18c      	b.n	8001802 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 817e 	beq.w	80017fc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b01      	cmp	r3, #1
 800150a:	d005      	beq.n	8001518 <HAL_GPIO_Init+0x44>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d130      	bne.n	800157a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800154e:	2201      	movs	r2, #1
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	f003 0201 	and.w	r2, r3, #1
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b03      	cmp	r3, #3
 8001584:	d017      	beq.n	80015b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d123      	bne.n	800160a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	220f      	movs	r2, #15
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	691a      	ldr	r2, [r3, #16]
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	08da      	lsrs	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	69b9      	ldr	r1, [r7, #24]
 8001606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0203 	and.w	r2, r3, #3
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 80d8 	beq.w	80017fc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164c:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <HAL_GPIO_Init+0x22c>)
 800164e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001652:	4a2b      	ldr	r2, [pc, #172]	; (8001700 <HAL_GPIO_Init+0x22c>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <HAL_GPIO_Init+0x22c>)
 800165e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800166a:	4a26      	ldr	r2, [pc, #152]	; (8001704 <HAL_GPIO_Init+0x230>)
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3302      	adds	r3, #2
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	220f      	movs	r2, #15
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <HAL_GPIO_Init+0x234>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d04a      	beq.n	800172c <HAL_GPIO_Init+0x258>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a1c      	ldr	r2, [pc, #112]	; (800170c <HAL_GPIO_Init+0x238>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d02b      	beq.n	80016f6 <HAL_GPIO_Init+0x222>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <HAL_GPIO_Init+0x23c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d025      	beq.n	80016f2 <HAL_GPIO_Init+0x21e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <HAL_GPIO_Init+0x240>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d01f      	beq.n	80016ee <HAL_GPIO_Init+0x21a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a19      	ldr	r2, [pc, #100]	; (8001718 <HAL_GPIO_Init+0x244>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d019      	beq.n	80016ea <HAL_GPIO_Init+0x216>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a18      	ldr	r2, [pc, #96]	; (800171c <HAL_GPIO_Init+0x248>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <HAL_GPIO_Init+0x212>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a17      	ldr	r2, [pc, #92]	; (8001720 <HAL_GPIO_Init+0x24c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00d      	beq.n	80016e2 <HAL_GPIO_Init+0x20e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a16      	ldr	r2, [pc, #88]	; (8001724 <HAL_GPIO_Init+0x250>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d007      	beq.n	80016de <HAL_GPIO_Init+0x20a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a15      	ldr	r2, [pc, #84]	; (8001728 <HAL_GPIO_Init+0x254>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_GPIO_Init+0x206>
 80016d6:	2309      	movs	r3, #9
 80016d8:	e029      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016da:	230a      	movs	r3, #10
 80016dc:	e027      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016de:	2307      	movs	r3, #7
 80016e0:	e025      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016e2:	2306      	movs	r3, #6
 80016e4:	e023      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016e6:	2305      	movs	r3, #5
 80016e8:	e021      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016ea:	2304      	movs	r3, #4
 80016ec:	e01f      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e01d      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e01b      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e019      	b.n	800172e <HAL_GPIO_Init+0x25a>
 80016fa:	bf00      	nop
 80016fc:	58000080 	.word	0x58000080
 8001700:	58024400 	.word	0x58024400
 8001704:	58000400 	.word	0x58000400
 8001708:	58020000 	.word	0x58020000
 800170c:	58020400 	.word	0x58020400
 8001710:	58020800 	.word	0x58020800
 8001714:	58020c00 	.word	0x58020c00
 8001718:	58021000 	.word	0x58021000
 800171c:	58021400 	.word	0x58021400
 8001720:	58021800 	.word	0x58021800
 8001724:	58021c00 	.word	0x58021c00
 8001728:	58022400 	.word	0x58022400
 800172c:	2300      	movs	r3, #0
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	f002 0203 	and.w	r2, r2, #3
 8001734:	0092      	lsls	r2, r2, #2
 8001736:	4093      	lsls	r3, r2
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800173e:	4938      	ldr	r1, [pc, #224]	; (8001820 <HAL_GPIO_Init+0x34c>)
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	3302      	adds	r3, #2
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800174c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001772:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800177a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	3301      	adds	r3, #1
 8001800:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa22 f303 	lsr.w	r3, r2, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	f47f ae6b 	bne.w	80014e8 <HAL_GPIO_Init+0x14>
  }
}
 8001812:	bf00      	nop
 8001814:	bf00      	nop
 8001816:	3724      	adds	r7, #36	; 0x24
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	58000400 	.word	0x58000400

08001824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
 8001830:	4613      	mov	r3, r2
 8001832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001834:	787b      	ldrb	r3, [r7, #1]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001840:	e003      	b.n	800184a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001842:	887b      	ldrh	r3, [r7, #2]
 8001844:	041a      	lsls	r2, r3, #16
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	619a      	str	r2, [r3, #24]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001856:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001858:	b08f      	sub	sp, #60	; 0x3c
 800185a:	af0a      	add	r7, sp, #40	; 0x28
 800185c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e054      	b.n	8001912 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d106      	bne.n	8001888 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fc1c 	bl	80010c0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2203      	movs	r2, #3
 800188c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001898:	2b00      	cmp	r3, #0
 800189a:	d102      	bne.n	80018a2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f006 f85b 	bl	8007962 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	687e      	ldr	r6, [r7, #4]
 80018b4:	466d      	mov	r5, sp
 80018b6:	f106 0410 	add.w	r4, r6, #16
 80018ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80018ca:	1d33      	adds	r3, r6, #4
 80018cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ce:	6838      	ldr	r0, [r7, #0]
 80018d0:	f005 ffc8 	bl	8007864 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2101      	movs	r1, #1
 80018da:	4618      	mov	r0, r3
 80018dc:	f006 f852 	bl	8007984 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	687e      	ldr	r6, [r7, #4]
 80018e8:	466d      	mov	r5, sp
 80018ea:	f106 0410 	add.w	r4, r6, #16
 80018ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80018fe:	1d33      	adds	r3, r6, #4
 8001900:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001902:	6838      	ldr	r0, [r7, #0]
 8001904:	f006 f9fa 	bl	8007cfc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800191a <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800191a:	b590      	push	{r4, r7, lr}
 800191c:	b089      	sub	sp, #36	; 0x24
 800191e:	af04      	add	r7, sp, #16
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	4608      	mov	r0, r1
 8001924:	4611      	mov	r1, r2
 8001926:	461a      	mov	r2, r3
 8001928:	4603      	mov	r3, r0
 800192a:	70fb      	strb	r3, [r7, #3]
 800192c:	460b      	mov	r3, r1
 800192e:	70bb      	strb	r3, [r7, #2]
 8001930:	4613      	mov	r3, r2
 8001932:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_HCD_HC_Init+0x28>
 800193e:	2302      	movs	r3, #2
 8001940:	e076      	b.n	8001a30 <HAL_HCD_HC_Init+0x116>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	212c      	movs	r1, #44	; 0x2c
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	4413      	add	r3, r2
 8001956:	333d      	adds	r3, #61	; 0x3d
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	212c      	movs	r1, #44	; 0x2c
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	3338      	adds	r3, #56	; 0x38
 800196a:	787a      	ldrb	r2, [r7, #1]
 800196c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	212c      	movs	r1, #44	; 0x2c
 8001974:	fb01 f303 	mul.w	r3, r1, r3
 8001978:	4413      	add	r3, r2
 800197a:	3340      	adds	r3, #64	; 0x40
 800197c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800197e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	212c      	movs	r1, #44	; 0x2c
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	4413      	add	r3, r2
 800198c:	3339      	adds	r3, #57	; 0x39
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	212c      	movs	r1, #44	; 0x2c
 8001998:	fb01 f303 	mul.w	r3, r1, r3
 800199c:	4413      	add	r3, r2
 800199e:	333f      	adds	r3, #63	; 0x3f
 80019a0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80019a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	78ba      	ldrb	r2, [r7, #2]
 80019aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019ae:	b2d0      	uxtb	r0, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	212c      	movs	r1, #44	; 0x2c
 80019b4:	fb01 f303 	mul.w	r3, r1, r3
 80019b8:	4413      	add	r3, r2
 80019ba:	333a      	adds	r3, #58	; 0x3a
 80019bc:	4602      	mov	r2, r0
 80019be:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80019c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	da09      	bge.n	80019dc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	212c      	movs	r1, #44	; 0x2c
 80019ce:	fb01 f303 	mul.w	r3, r1, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	333b      	adds	r3, #59	; 0x3b
 80019d6:	2201      	movs	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	e008      	b.n	80019ee <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	212c      	movs	r1, #44	; 0x2c
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	333b      	adds	r3, #59	; 0x3b
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	212c      	movs	r1, #44	; 0x2c
 80019f4:	fb01 f303 	mul.w	r3, r1, r3
 80019f8:	4413      	add	r3, r2
 80019fa:	333c      	adds	r3, #60	; 0x3c
 80019fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a00:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	787c      	ldrb	r4, [r7, #1]
 8001a08:	78ba      	ldrb	r2, [r7, #2]
 8001a0a:	78f9      	ldrb	r1, [r7, #3]
 8001a0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a0e:	9302      	str	r3, [sp, #8]
 8001a10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	4623      	mov	r3, r4
 8001a1e:	f006 faef 	bl	8008000 <USB_HC_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd90      	pop	{r4, r7, pc}

08001a38 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_HCD_HC_Halt+0x1e>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e00f      	b.n	8001a76 <HAL_HCD_HC_Halt+0x3e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	78fa      	ldrb	r2, [r7, #3]
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f006 fd41 	bl	80084ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	4608      	mov	r0, r1
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4603      	mov	r3, r0
 8001a90:	70fb      	strb	r3, [r7, #3]
 8001a92:	460b      	mov	r3, r1
 8001a94:	70bb      	strb	r3, [r7, #2]
 8001a96:	4613      	mov	r3, r2
 8001a98:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	212c      	movs	r1, #44	; 0x2c
 8001aa0:	fb01 f303 	mul.w	r3, r1, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	333b      	adds	r3, #59	; 0x3b
 8001aa8:	78ba      	ldrb	r2, [r7, #2]
 8001aaa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	212c      	movs	r1, #44	; 0x2c
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	333f      	adds	r3, #63	; 0x3f
 8001aba:	787a      	ldrb	r2, [r7, #1]
 8001abc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001abe:	7c3b      	ldrb	r3, [r7, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d112      	bne.n	8001aea <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	212c      	movs	r1, #44	; 0x2c
 8001aca:	fb01 f303 	mul.w	r3, r1, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	3342      	adds	r3, #66	; 0x42
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ad6:	78fb      	ldrb	r3, [r7, #3]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	212c      	movs	r1, #44	; 0x2c
 8001adc:	fb01 f303 	mul.w	r3, r1, r3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	333d      	adds	r3, #61	; 0x3d
 8001ae4:	7f3a      	ldrb	r2, [r7, #28]
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	e008      	b.n	8001afc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	212c      	movs	r1, #44	; 0x2c
 8001af0:	fb01 f303 	mul.w	r3, r1, r3
 8001af4:	4413      	add	r3, r2
 8001af6:	3342      	adds	r3, #66	; 0x42
 8001af8:	2202      	movs	r2, #2
 8001afa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001afc:	787b      	ldrb	r3, [r7, #1]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	f200 80c6 	bhi.w	8001c90 <HAL_HCD_HC_SubmitRequest+0x210>
 8001b04:	a201      	add	r2, pc, #4	; (adr r2, 8001b0c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0a:	bf00      	nop
 8001b0c:	08001b1d 	.word	0x08001b1d
 8001b10:	08001c7d 	.word	0x08001c7d
 8001b14:	08001b81 	.word	0x08001b81
 8001b18:	08001bff 	.word	0x08001bff
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b1c:	7c3b      	ldrb	r3, [r7, #16]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	f040 80b8 	bne.w	8001c94 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b24:	78bb      	ldrb	r3, [r7, #2]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f040 80b4 	bne.w	8001c94 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b2c:	8b3b      	ldrh	r3, [r7, #24]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d108      	bne.n	8001b44 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	212c      	movs	r1, #44	; 0x2c
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3355      	adds	r3, #85	; 0x55
 8001b40:	2201      	movs	r2, #1
 8001b42:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	212c      	movs	r1, #44	; 0x2c
 8001b4a:	fb01 f303 	mul.w	r3, r1, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	3355      	adds	r3, #85	; 0x55
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d109      	bne.n	8001b6c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	212c      	movs	r1, #44	; 0x2c
 8001b5e:	fb01 f303 	mul.w	r3, r1, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	3342      	adds	r3, #66	; 0x42
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b6a:	e093      	b.n	8001c94 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	212c      	movs	r1, #44	; 0x2c
 8001b72:	fb01 f303 	mul.w	r3, r1, r3
 8001b76:	4413      	add	r3, r2
 8001b78:	3342      	adds	r3, #66	; 0x42
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	701a      	strb	r2, [r3, #0]
      break;
 8001b7e:	e089      	b.n	8001c94 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b80:	78bb      	ldrb	r3, [r7, #2]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d11d      	bne.n	8001bc2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	212c      	movs	r1, #44	; 0x2c
 8001b8c:	fb01 f303 	mul.w	r3, r1, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	3355      	adds	r3, #85	; 0x55
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	212c      	movs	r1, #44	; 0x2c
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3342      	adds	r3, #66	; 0x42
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001bac:	e073      	b.n	8001c96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	212c      	movs	r1, #44	; 0x2c
 8001bb4:	fb01 f303 	mul.w	r3, r1, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	3342      	adds	r3, #66	; 0x42
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	701a      	strb	r2, [r3, #0]
      break;
 8001bc0:	e069      	b.n	8001c96 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	212c      	movs	r1, #44	; 0x2c
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3354      	adds	r3, #84	; 0x54
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	212c      	movs	r1, #44	; 0x2c
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	3342      	adds	r3, #66	; 0x42
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
      break;
 8001be8:	e055      	b.n	8001c96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	212c      	movs	r1, #44	; 0x2c
 8001bf0:	fb01 f303 	mul.w	r3, r1, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3342      	adds	r3, #66	; 0x42
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	701a      	strb	r2, [r3, #0]
      break;
 8001bfc:	e04b      	b.n	8001c96 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001bfe:	78bb      	ldrb	r3, [r7, #2]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d11d      	bne.n	8001c40 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	212c      	movs	r1, #44	; 0x2c
 8001c0a:	fb01 f303 	mul.w	r3, r1, r3
 8001c0e:	4413      	add	r3, r2
 8001c10:	3355      	adds	r3, #85	; 0x55
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	212c      	movs	r1, #44	; 0x2c
 8001c1e:	fb01 f303 	mul.w	r3, r1, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	3342      	adds	r3, #66	; 0x42
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c2a:	e034      	b.n	8001c96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	212c      	movs	r1, #44	; 0x2c
 8001c32:	fb01 f303 	mul.w	r3, r1, r3
 8001c36:	4413      	add	r3, r2
 8001c38:	3342      	adds	r3, #66	; 0x42
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	701a      	strb	r2, [r3, #0]
      break;
 8001c3e:	e02a      	b.n	8001c96 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	212c      	movs	r1, #44	; 0x2c
 8001c46:	fb01 f303 	mul.w	r3, r1, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3354      	adds	r3, #84	; 0x54
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	212c      	movs	r1, #44	; 0x2c
 8001c5a:	fb01 f303 	mul.w	r3, r1, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	3342      	adds	r3, #66	; 0x42
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
      break;
 8001c66:	e016      	b.n	8001c96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	212c      	movs	r1, #44	; 0x2c
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	3342      	adds	r3, #66	; 0x42
 8001c76:	2202      	movs	r2, #2
 8001c78:	701a      	strb	r2, [r3, #0]
      break;
 8001c7a:	e00c      	b.n	8001c96 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	212c      	movs	r1, #44	; 0x2c
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	3342      	adds	r3, #66	; 0x42
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
      break;
 8001c8e:	e002      	b.n	8001c96 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001c90:	bf00      	nop
 8001c92:	e000      	b.n	8001c96 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001c94:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	212c      	movs	r1, #44	; 0x2c
 8001c9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3344      	adds	r3, #68	; 0x44
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	8b3a      	ldrh	r2, [r7, #24]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	202c      	movs	r0, #44	; 0x2c
 8001cb0:	fb00 f303 	mul.w	r3, r0, r3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	334c      	adds	r3, #76	; 0x4c
 8001cb8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	212c      	movs	r1, #44	; 0x2c
 8001cc0:	fb01 f303 	mul.w	r3, r1, r3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3360      	adds	r3, #96	; 0x60
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	212c      	movs	r1, #44	; 0x2c
 8001cd2:	fb01 f303 	mul.w	r3, r1, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3350      	adds	r3, #80	; 0x50
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	212c      	movs	r1, #44	; 0x2c
 8001ce4:	fb01 f303 	mul.w	r3, r1, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	3339      	adds	r3, #57	; 0x39
 8001cec:	78fa      	ldrb	r2, [r7, #3]
 8001cee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	212c      	movs	r1, #44	; 0x2c
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3361      	adds	r3, #97	; 0x61
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	222c      	movs	r2, #44	; 0x2c
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	3338      	adds	r3, #56	; 0x38
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	18d1      	adds	r1, r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f006 fa94 	bl	8008248 <USB_HC_StartXfer>
 8001d20:	4603      	mov	r3, r0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop

08001d2c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f005 ff98 	bl	8007c78 <USB_GetMode>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	f040 80fa 	bne.w	8001f44 <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f005 ff5b 	bl	8007c10 <USB_ReadInterrupts>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80f0 	beq.w	8001f42 <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f005 ff52 	bl	8007c10 <USB_ReadInterrupts>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d76:	d104      	bne.n	8001d82 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f005 ff42 	bl	8007c10 <USB_ReadInterrupts>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d96:	d104      	bne.n	8001da2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001da0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f005 ff32 	bl	8007c10 <USB_ReadInterrupts>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001db2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001db6:	d104      	bne.n	8001dc2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f005 ff22 	bl	8007c10 <USB_ReadInterrupts>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d103      	bne.n	8001dde <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f005 ff14 	bl	8007c10 <USB_ReadInterrupts>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001df2:	d120      	bne.n	8001e36 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001dfc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d113      	bne.n	8001e36 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e0e:	2110      	movs	r1, #16
 8001e10:	6938      	ldr	r0, [r7, #16]
 8001e12:	f005 fe03 	bl	8007a1c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e16:	6938      	ldr	r0, [r7, #16]
 8001e18:	f005 fe34 	bl	8007a84 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d105      	bne.n	8001e30 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f006 f820 	bl	8007e70 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f00e f87f 	bl	800ff34 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f005 fee8 	bl	8007c10 <USB_ReadInterrupts>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4a:	d102      	bne.n	8001e52 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f001 f986 	bl	800315e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f005 feda 	bl	8007c10 <USB_ReadInterrupts>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d106      	bne.n	8001e74 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f00e fa26 	bl	80102b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2208      	movs	r2, #8
 8001e72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f005 fec9 	bl	8007c10 <USB_ReadInterrupts>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b10      	cmp	r3, #16
 8001e86:	d101      	bne.n	8001e8c <HAL_HCD_IRQHandler+0x160>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <HAL_HCD_IRQHandler+0x162>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d012      	beq.n	8001eb8 <HAL_HCD_IRQHandler+0x18c>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	699a      	ldr	r2, [r3, #24]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0210 	bic.w	r2, r2, #16
 8001ea0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f001 f889 	bl	8002fba <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699a      	ldr	r2, [r3, #24]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0210 	orr.w	r2, r2, #16
 8001eb6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f005 fea7 	bl	8007c10 <USB_ReadInterrupts>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ecc:	d13a      	bne.n	8001f44 <HAL_HCD_IRQHandler+0x218>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f006 fafa 	bl	80084cc <USB_HC_ReadInterrupt>
 8001ed8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	e025      	b.n	8001f2c <HAL_HCD_IRQHandler+0x200>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d018      	beq.n	8001f26 <HAL_HCD_IRQHandler+0x1fa>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f0a:	d106      	bne.n	8001f1a <HAL_HCD_IRQHandler+0x1ee>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	4619      	mov	r1, r3
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f88e 	bl	8002034 <HCD_HC_IN_IRQHandler>
 8001f18:	e005      	b.n	8001f26 <HAL_HCD_IRQHandler+0x1fa>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	4619      	mov	r1, r3
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fc98 	bl	8002856 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d3d4      	bcc.n	8001ee0 <HAL_HCD_IRQHandler+0x1b4>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f3e:	615a      	str	r2, [r3, #20]
 8001f40:	e000      	b.n	8001f44 <HAL_HCD_IRQHandler+0x218>
      return;
 8001f42:	bf00      	nop
    }
  }
}
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_HCD_Start+0x16>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e013      	b.n	8001fb0 <HAL_HCD_Start+0x3e>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2101      	movs	r1, #1
 8001f96:	4618      	mov	r0, r3
 8001f98:	f005 ffd1 	bl	8007f3e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f005 fccd 	bl	8007940 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f005 ff90 	bl	8007eea <USB_ResetPort>
 8001fca:	4603      	mov	r3, r0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	212c      	movs	r1, #44	; 0x2c
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	3350      	adds	r3, #80	; 0x50
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f005 ffe8 	bl	8007fde <USB_GetCurrentFrame>
 800200e:	4603      	mov	r3, r0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f005 ffc3 	bl	8007fb0 <USB_GetHostSpeed>
 800202a:	4603      	mov	r3, r0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	78fa      	ldrb	r2, [r7, #3]
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f005 fdef 	bl	8007c36 <USB_ReadChInterrupts>
 8002058:	4603      	mov	r3, r0
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b04      	cmp	r3, #4
 8002060:	d119      	bne.n	8002096 <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206e:	461a      	mov	r2, r3
 8002070:	2304      	movs	r3, #4
 8002072:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	3361      	adds	r3, #97	; 0x61
 8002082:	2207      	movs	r2, #7
 8002084:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f006 fa2d 	bl	80084ee <USB_HC_Halt>
 8002094:	e09a      	b.n	80021cc <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	78fa      	ldrb	r2, [r7, #3]
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f005 fdc9 	bl	8007c36 <USB_ReadChInterrupts>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ae:	d11a      	bne.n	80020e6 <HCD_HC_IN_IRQHandler+0xb2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020bc:	461a      	mov	r2, r3
 80020be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	3361      	adds	r3, #97	; 0x61
 80020d2:	2208      	movs	r2, #8
 80020d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f006 fa05 	bl	80084ee <USB_HC_Halt>
 80020e4:	e072      	b.n	80021cc <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	78fa      	ldrb	r2, [r7, #3]
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f005 fda1 	bl	8007c36 <USB_ReadChInterrupts>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d119      	bne.n	8002132 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	461a      	mov	r2, r3
 800210c:	2308      	movs	r3, #8
 800210e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	3361      	adds	r3, #97	; 0x61
 800211e:	2206      	movs	r2, #6
 8002120:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	78fa      	ldrb	r2, [r7, #3]
 8002128:	4611      	mov	r1, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f006 f9df 	bl	80084ee <USB_HC_Halt>
 8002130:	e04c      	b.n	80021cc <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	78fa      	ldrb	r2, [r7, #3]
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f005 fd7b 	bl	8007c36 <USB_ReadChInterrupts>
 8002140:	4603      	mov	r3, r0
 8002142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214a:	d11a      	bne.n	8002182 <HCD_HC_IN_IRQHandler+0x14e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4413      	add	r3, r2
 8002154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002158:	461a      	mov	r2, r3
 800215a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800215e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	3361      	adds	r3, #97	; 0x61
 800216e:	2209      	movs	r2, #9
 8002170:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f006 f9b7 	bl	80084ee <USB_HC_Halt>
 8002180:	e024      	b.n	80021cc <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	78fa      	ldrb	r2, [r7, #3]
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f005 fd53 	bl	8007c36 <USB_ReadChInterrupts>
 8002190:	4603      	mov	r3, r0
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	2b80      	cmp	r3, #128	; 0x80
 8002198:	d118      	bne.n	80021cc <HCD_HC_IN_IRQHandler+0x198>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a6:	461a      	mov	r2, r3
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	212c      	movs	r1, #44	; 0x2c
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	3361      	adds	r3, #97	; 0x61
 80021ba:	2207      	movs	r2, #7
 80021bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f006 f991 	bl	80084ee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f005 fd2e 	bl	8007c36 <USB_ReadChInterrupts>
 80021da:	4603      	mov	r3, r0
 80021dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e4:	d111      	bne.n	800220a <HCD_HC_IN_IRQHandler+0x1d6>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f006 f97d 	bl	80084ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002200:	461a      	mov	r2, r3
 8002202:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002206:	6093      	str	r3, [r2, #8]
 8002208:	e322      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f005 fd0f 	bl	8007c36 <USB_ReadChInterrupts>
 8002218:	4603      	mov	r3, r0
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b01      	cmp	r3, #1
 8002220:	f040 80f0 	bne.w	8002404 <HCD_HC_IN_IRQHandler+0x3d0>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4413      	add	r3, r2
 800222c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002230:	461a      	mov	r2, r3
 8002232:	2320      	movs	r3, #32
 8002234:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d019      	beq.n	8002272 <HCD_HC_IN_IRQHandler+0x23e>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	3348      	adds	r3, #72	; 0x48
 800224c:	6819      	ldr	r1, [r3, #0]
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4413      	add	r3, r2
 8002256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	1a8a      	subs	r2, r1, r2
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	202c      	movs	r0, #44	; 0x2c
 8002268:	fb00 f303 	mul.w	r3, r0, r3
 800226c:	440b      	add	r3, r1
 800226e:	3350      	adds	r3, #80	; 0x50
 8002270:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	3361      	adds	r3, #97	; 0x61
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	335c      	adds	r3, #92	; 0x5c
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4413      	add	r3, r2
 800229e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a2:	461a      	mov	r2, r3
 80022a4:	2301      	movs	r3, #1
 80022a6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	212c      	movs	r1, #44	; 0x2c
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	333f      	adds	r3, #63	; 0x3f
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d009      	beq.n	80022d0 <HCD_HC_IN_IRQHandler+0x29c>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	333f      	adds	r3, #63	; 0x3f
 80022ca:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d110      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0x2be>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	78fa      	ldrb	r2, [r7, #3]
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f006 f908 	bl	80084ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80022de:	78fb      	ldrb	r3, [r7, #3]
 80022e0:	015a      	lsls	r2, r3, #5
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ea:	461a      	mov	r2, r3
 80022ec:	2310      	movs	r3, #16
 80022ee:	6093      	str	r3, [r2, #8]
 80022f0:	e039      	b.n	8002366 <HCD_HC_IN_IRQHandler+0x332>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	333f      	adds	r3, #63	; 0x3f
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b03      	cmp	r3, #3
 8002304:	d009      	beq.n	800231a <HCD_HC_IN_IRQHandler+0x2e6>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	333f      	adds	r3, #63	; 0x3f
 8002314:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002316:	2b01      	cmp	r3, #1
 8002318:	d125      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0x332>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4413      	add	r3, r2
 8002322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	0151      	lsls	r1, r2, #5
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	440a      	add	r2, r1
 8002330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002334:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002338:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	212c      	movs	r1, #44	; 0x2c
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	4413      	add	r3, r2
 8002346:	3360      	adds	r3, #96	; 0x60
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	3360      	adds	r3, #96	; 0x60
 800235a:	781a      	ldrb	r2, [r3, #0]
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	4619      	mov	r1, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f00d fe0f 	bl	800ff84 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d135      	bne.n	80023da <HCD_HC_IN_IRQHandler+0x3a6>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800236e:	78fb      	ldrb	r3, [r7, #3]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	3350      	adds	r3, #80	; 0x50
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	202c      	movs	r0, #44	; 0x2c
 8002384:	fb00 f202 	mul.w	r2, r0, r2
 8002388:	440a      	add	r2, r1
 800238a:	3240      	adds	r2, #64	; 0x40
 800238c:	8812      	ldrh	r2, [r2, #0]
 800238e:	4413      	add	r3, r2
 8002390:	3b01      	subs	r3, #1
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	202c      	movs	r0, #44	; 0x2c
 8002398:	fb00 f202 	mul.w	r2, r0, r2
 800239c:	440a      	add	r2, r1
 800239e:	3240      	adds	r2, #64	; 0x40
 80023a0:	8812      	ldrh	r2, [r2, #0]
 80023a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8250 	beq.w	8002850 <HCD_HC_IN_IRQHandler+0x81c>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	3354      	adds	r3, #84	; 0x54
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	f082 0201 	eor.w	r2, r2, #1
 80023c6:	b2d0      	uxtb	r0, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	3354      	adds	r3, #84	; 0x54
 80023d4:	4602      	mov	r2, r0
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	e23a      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x81c>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	3354      	adds	r3, #84	; 0x54
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f082 0201 	eor.w	r2, r2, #1
 80023f0:	b2d0      	uxtb	r0, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	3354      	adds	r3, #84	; 0x54
 80023fe:	4602      	mov	r2, r0
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	e225      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x81c>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f005 fc12 	bl	8007c36 <USB_ReadChInterrupts>
 8002412:	4603      	mov	r3, r0
 8002414:	f003 0320 	and.w	r3, r3, #32
 8002418:	2b20      	cmp	r3, #32
 800241a:	d109      	bne.n	8002430 <HCD_HC_IN_IRQHandler+0x3fc>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4413      	add	r3, r2
 8002424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002428:	461a      	mov	r2, r3
 800242a:	2320      	movs	r3, #32
 800242c:	6093      	str	r3, [r2, #8]
 800242e:	e20f      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f005 fbfc 	bl	8007c36 <USB_ReadChInterrupts>
 800243e:	4603      	mov	r3, r0
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b02      	cmp	r3, #2
 8002446:	f040 8168 	bne.w	800271a <HCD_HC_IN_IRQHandler+0x6e6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4413      	add	r3, r2
 8002452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002456:	461a      	mov	r2, r3
 8002458:	2302      	movs	r3, #2
 800245a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	3361      	adds	r3, #97	; 0x61
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d112      	bne.n	8002496 <HCD_HC_IN_IRQHandler+0x462>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	212c      	movs	r1, #44	; 0x2c
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4413      	add	r3, r2
 800247c:	3361      	adds	r3, #97	; 0x61
 800247e:	2202      	movs	r2, #2
 8002480:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	212c      	movs	r1, #44	; 0x2c
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	3360      	adds	r3, #96	; 0x60
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	e133      	b.n	80026fe <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	3361      	adds	r3, #97	; 0x61
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d112      	bne.n	80024d0 <HCD_HC_IN_IRQHandler+0x49c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	212c      	movs	r1, #44	; 0x2c
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	3361      	adds	r3, #97	; 0x61
 80024b8:	2202      	movs	r2, #2
 80024ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	212c      	movs	r1, #44	; 0x2c
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	3360      	adds	r3, #96	; 0x60
 80024ca:	2205      	movs	r2, #5
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e116      	b.n	80026fe <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	3361      	adds	r3, #97	; 0x61
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b07      	cmp	r3, #7
 80024e2:	d009      	beq.n	80024f8 <HCD_HC_IN_IRQHandler+0x4c4>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	3361      	adds	r3, #97	; 0x61
 80024f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80024f4:	2b09      	cmp	r3, #9
 80024f6:	d158      	bne.n	80025aa <HCD_HC_IN_IRQHandler+0x576>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	212c      	movs	r1, #44	; 0x2c
 80024fe:	fb01 f303 	mul.w	r3, r1, r3
 8002502:	4413      	add	r3, r2
 8002504:	3361      	adds	r3, #97	; 0x61
 8002506:	2202      	movs	r2, #2
 8002508:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	222c      	movs	r2, #44	; 0x2c
 8002510:	fb03 f202 	mul.w	r2, r3, r2
 8002514:	440a      	add	r2, r1
 8002516:	325c      	adds	r2, #92	; 0x5c
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	3201      	adds	r2, #1
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	202c      	movs	r0, #44	; 0x2c
 8002520:	fb00 f303 	mul.w	r3, r0, r3
 8002524:	440b      	add	r3, r1
 8002526:	335c      	adds	r3, #92	; 0x5c
 8002528:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	212c      	movs	r1, #44	; 0x2c
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	4413      	add	r3, r2
 8002536:	335c      	adds	r3, #92	; 0x5c
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d912      	bls.n	8002564 <HCD_HC_IN_IRQHandler+0x530>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	212c      	movs	r1, #44	; 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	335c      	adds	r3, #92	; 0x5c
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	3360      	adds	r3, #96	; 0x60
 800255e:	2204      	movs	r2, #4
 8002560:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002562:	e0cc      	b.n	80026fe <HCD_HC_IN_IRQHandler+0x6ca>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	3360      	adds	r3, #96	; 0x60
 8002572:	2202      	movs	r2, #2
 8002574:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002576:	78fb      	ldrb	r3, [r7, #3]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800258c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002594:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4413      	add	r3, r2
 800259e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a2:	461a      	mov	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025a8:	e0a9      	b.n	80026fe <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80025aa:	78fb      	ldrb	r3, [r7, #3]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	212c      	movs	r1, #44	; 0x2c
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	3361      	adds	r3, #97	; 0x61
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b05      	cmp	r3, #5
 80025bc:	d109      	bne.n	80025d2 <HCD_HC_IN_IRQHandler+0x59e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	212c      	movs	r1, #44	; 0x2c
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	3361      	adds	r3, #97	; 0x61
 80025cc:	2202      	movs	r2, #2
 80025ce:	701a      	strb	r2, [r3, #0]
 80025d0:	e095      	b.n	80026fe <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	212c      	movs	r1, #44	; 0x2c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4413      	add	r3, r2
 80025de:	3361      	adds	r3, #97	; 0x61
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d109      	bne.n	80025fa <HCD_HC_IN_IRQHandler+0x5c6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3361      	adds	r3, #97	; 0x61
 80025f4:	2202      	movs	r2, #2
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	e081      	b.n	80026fe <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	3361      	adds	r3, #97	; 0x61
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b04      	cmp	r3, #4
 800260c:	d13f      	bne.n	800268e <HCD_HC_IN_IRQHandler+0x65a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	3361      	adds	r3, #97	; 0x61
 800261c:	2202      	movs	r2, #2
 800261e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	212c      	movs	r1, #44	; 0x2c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	3360      	adds	r3, #96	; 0x60
 800262e:	2202      	movs	r2, #2
 8002630:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	212c      	movs	r1, #44	; 0x2c
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	4413      	add	r3, r2
 800263e:	333f      	adds	r3, #63	; 0x3f
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HCD_HC_IN_IRQHandler+0x626>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	212c      	movs	r1, #44	; 0x2c
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	333f      	adds	r3, #63	; 0x3f
 8002654:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002656:	2b02      	cmp	r3, #2
 8002658:	d151      	bne.n	80026fe <HCD_HC_IN_IRQHandler+0x6ca>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4413      	add	r3, r2
 8002662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002670:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002678:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800267a:	78fb      	ldrb	r3, [r7, #3]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	461a      	mov	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	e037      	b.n	80026fe <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	212c      	movs	r1, #44	; 0x2c
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	4413      	add	r3, r2
 800269a:	3361      	adds	r3, #97	; 0x61
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d122      	bne.n	80026e8 <HCD_HC_IN_IRQHandler+0x6b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	212c      	movs	r1, #44	; 0x2c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	3361      	adds	r3, #97	; 0x61
 80026b0:	2202      	movs	r2, #2
 80026b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	222c      	movs	r2, #44	; 0x2c
 80026ba:	fb03 f202 	mul.w	r2, r3, r2
 80026be:	440a      	add	r2, r1
 80026c0:	325c      	adds	r2, #92	; 0x5c
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	3201      	adds	r2, #1
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	202c      	movs	r0, #44	; 0x2c
 80026ca:	fb00 f303 	mul.w	r3, r0, r3
 80026ce:	440b      	add	r3, r1
 80026d0:	335c      	adds	r3, #92	; 0x5c
 80026d2:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	212c      	movs	r1, #44	; 0x2c
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	3360      	adds	r3, #96	; 0x60
 80026e2:	2204      	movs	r2, #4
 80026e4:	701a      	strb	r2, [r3, #0]
 80026e6:	e00a      	b.n	80026fe <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	3361      	adds	r3, #97	; 0x61
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	f000 80a8 	beq.w	800284e <HCD_HC_IN_IRQHandler+0x81a>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	3360      	adds	r3, #96	; 0x60
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	4619      	mov	r1, r3
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f00d fc36 	bl	800ff84 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002718:	e09a      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x81c>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f005 fa87 	bl	8007c36 <USB_ReadChInterrupts>
 8002728:	4603      	mov	r3, r0
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	2b40      	cmp	r3, #64	; 0x40
 8002730:	d122      	bne.n	8002778 <HCD_HC_IN_IRQHandler+0x744>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	461a      	mov	r2, r3
 8002740:	2340      	movs	r3, #64	; 0x40
 8002742:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	3361      	adds	r3, #97	; 0x61
 8002752:	2205      	movs	r2, #5
 8002754:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	335c      	adds	r3, #92	; 0x5c
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f005 febc 	bl	80084ee <USB_HC_Halt>
 8002776:	e06b      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	78fa      	ldrb	r2, [r7, #3]
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f005 fa58 	bl	8007c36 <USB_ReadChInterrupts>
 8002786:	4603      	mov	r3, r0
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	2b10      	cmp	r3, #16
 800278e:	d15f      	bne.n	8002850 <HCD_HC_IN_IRQHandler+0x81c>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	212c      	movs	r1, #44	; 0x2c
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	4413      	add	r3, r2
 800279c:	333f      	adds	r3, #63	; 0x3f
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d119      	bne.n	80027d8 <HCD_HC_IN_IRQHandler+0x7a4>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	335c      	adds	r3, #92	; 0x5c
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	3361      	adds	r3, #97	; 0x61
 80027c4:	2204      	movs	r2, #4
 80027c6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f005 fe8c 	bl	80084ee <USB_HC_Halt>
 80027d6:	e030      	b.n	800283a <HCD_HC_IN_IRQHandler+0x806>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	212c      	movs	r1, #44	; 0x2c
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	333f      	adds	r3, #63	; 0x3f
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d009      	beq.n	8002800 <HCD_HC_IN_IRQHandler+0x7cc>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	212c      	movs	r1, #44	; 0x2c
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	333f      	adds	r3, #63	; 0x3f
 80027fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d11c      	bne.n	800283a <HCD_HC_IN_IRQHandler+0x806>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	335c      	adds	r3, #92	; 0x5c
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <HCD_HC_IN_IRQHandler+0x806>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	3361      	adds	r3, #97	; 0x61
 8002828:	2204      	movs	r2, #4
 800282a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f005 fe5a 	bl	80084ee <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800283a:	78fb      	ldrb	r3, [r7, #3]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002846:	461a      	mov	r2, r3
 8002848:	2310      	movs	r3, #16
 800284a:	6093      	str	r3, [r2, #8]
 800284c:	e000      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x81c>
        return;
 800284e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	460b      	mov	r3, r1
 8002860:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	4611      	mov	r1, r2
 8002874:	4618      	mov	r0, r3
 8002876:	f005 f9de 	bl	8007c36 <USB_ReadChInterrupts>
 800287a:	4603      	mov	r3, r0
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b04      	cmp	r3, #4
 8002882:	d119      	bne.n	80028b8 <HCD_HC_OUT_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	461a      	mov	r2, r3
 8002892:	2304      	movs	r3, #4
 8002894:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	212c      	movs	r1, #44	; 0x2c
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	3361      	adds	r3, #97	; 0x61
 80028a4:	2207      	movs	r2, #7
 80028a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f005 fe1c 	bl	80084ee <USB_HC_Halt>
 80028b6:	e37d      	b.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f005 f9b8 	bl	8007c36 <USB_ReadChInterrupts>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d136      	bne.n	800293e <HCD_HC_OUT_IRQHandler+0xe8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	461a      	mov	r2, r3
 80028de:	2320      	movs	r3, #32
 80028e0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	333d      	adds	r3, #61	; 0x3d
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	f040 835e 	bne.w	8002fb4 <HCD_HC_OUT_IRQHandler+0x75e>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	333d      	adds	r3, #61	; 0x3d
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	3360      	adds	r3, #96	; 0x60
 8002918:	2202      	movs	r2, #2
 800291a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	3361      	adds	r3, #97	; 0x61
 800292a:	2203      	movs	r2, #3
 800292c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f005 fdd9 	bl	80084ee <USB_HC_Halt>
 800293c:	e33a      	b.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x75e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f005 f975 	bl	8007c36 <USB_ReadChInterrupts>
 800294c:	4603      	mov	r3, r0
 800294e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002956:	d111      	bne.n	800297c <HCD_HC_OUT_IRQHandler+0x126>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	461a      	mov	r2, r3
 8002966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800296a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f005 fdba 	bl	80084ee <USB_HC_Halt>
 800297a:	e31b      	b.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f005 f956 	bl	8007c36 <USB_ReadChInterrupts>
 800298a:	4603      	mov	r3, r0
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d140      	bne.n	8002a16 <HCD_HC_OUT_IRQHandler+0x1c0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	335c      	adds	r3, #92	; 0x5c
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f005 f941 	bl	8007c36 <USB_ReadChInterrupts>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ba:	2b40      	cmp	r3, #64	; 0x40
 80029bc:	d111      	bne.n	80029e2 <HCD_HC_OUT_IRQHandler+0x18c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	333d      	adds	r3, #61	; 0x3d
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	461a      	mov	r2, r3
 80029de:	2340      	movs	r3, #64	; 0x40
 80029e0:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ee:	461a      	mov	r2, r3
 80029f0:	2301      	movs	r3, #1
 80029f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3361      	adds	r3, #97	; 0x61
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f005 fd6d 	bl	80084ee <USB_HC_Halt>
 8002a14:	e2ce      	b.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f005 f909 	bl	8007c36 <USB_ReadChInterrupts>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2a:	2b40      	cmp	r3, #64	; 0x40
 8002a2c:	d12b      	bne.n	8002a86 <HCD_HC_OUT_IRQHandler+0x230>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3361      	adds	r3, #97	; 0x61
 8002a3c:	2205      	movs	r2, #5
 8002a3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].do_ping = 1U;
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	333d      	adds	r3, #61	; 0x3d
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	212c      	movs	r1, #44	; 0x2c
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	335c      	adds	r3, #92	; 0x5c
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f005 fd3e 	bl	80084ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2340      	movs	r3, #64	; 0x40
 8002a82:	6093      	str	r3, [r2, #8]
 8002a84:	e296      	b.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f005 f8d1 	bl	8007c36 <USB_ReadChInterrupts>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d119      	bne.n	8002ad2 <HCD_HC_OUT_IRQHandler+0x27c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2308      	movs	r3, #8
 8002aae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3361      	adds	r3, #97	; 0x61
 8002abe:	2206      	movs	r2, #6
 8002ac0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	4611      	mov	r1, r2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f005 fd0f 	bl	80084ee <USB_HC_Halt>
 8002ad0:	e270      	b.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f005 f8ab 	bl	8007c36 <USB_ReadChInterrupts>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b10      	cmp	r3, #16
 8002ae8:	d13f      	bne.n	8002b6a <HCD_HC_OUT_IRQHandler+0x314>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	335c      	adds	r3, #92	; 0x5c
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	3361      	adds	r3, #97	; 0x61
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	333d      	adds	r3, #61	; 0x3d
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d112      	bne.n	8002b48 <HCD_HC_OUT_IRQHandler+0x2f2>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	333c      	adds	r3, #60	; 0x3c
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d108      	bne.n	8002b48 <HCD_HC_OUT_IRQHandler+0x2f2>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	333d      	adds	r3, #61	; 0x3d
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f005 fccc 	bl	80084ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b62:	461a      	mov	r2, r3
 8002b64:	2310      	movs	r3, #16
 8002b66:	6093      	str	r3, [r2, #8]
 8002b68:	e224      	b.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f005 f85f 	bl	8007c36 <USB_ReadChInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	2b80      	cmp	r3, #128	; 0x80
 8002b80:	d161      	bne.n	8002c46 <HCD_HC_OUT_IRQHandler+0x3f0>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d110      	bne.n	8002bac <HCD_HC_OUT_IRQHandler+0x356>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	212c      	movs	r1, #44	; 0x2c
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	3361      	adds	r3, #97	; 0x61
 8002b98:	2207      	movs	r2, #7
 8002b9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f005 fca2 	bl	80084ee <USB_HC_Halt>
 8002baa:	e042      	b.n	8002c32 <HCD_HC_OUT_IRQHandler+0x3dc>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	222c      	movs	r2, #44	; 0x2c
 8002bb2:	fb03 f202 	mul.w	r2, r3, r2
 8002bb6:	440a      	add	r2, r1
 8002bb8:	325c      	adds	r2, #92	; 0x5c
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	3201      	adds	r2, #1
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	202c      	movs	r0, #44	; 0x2c
 8002bc2:	fb00 f303 	mul.w	r3, r0, r3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	335c      	adds	r3, #92	; 0x5c
 8002bca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	335c      	adds	r3, #92	; 0x5c
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d91f      	bls.n	8002c20 <HCD_HC_OUT_IRQHandler+0x3ca>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	335c      	adds	r3, #92	; 0x5c
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3360      	adds	r3, #96	; 0x60
 8002c00:	2204      	movs	r2, #4
 8002c02:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3360      	adds	r3, #96	; 0x60
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	4619      	mov	r1, r3
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f00d f9b3 	bl	800ff84 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c1e:	e008      	b.n	8002c32 <HCD_HC_OUT_IRQHandler+0x3dc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	212c      	movs	r1, #44	; 0x2c
 8002c26:	fb01 f303 	mul.w	r3, r1, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3360      	adds	r3, #96	; 0x60
 8002c2e:	2202      	movs	r2, #2
 8002c30:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	6093      	str	r3, [r2, #8]
 8002c44:	e1b6      	b.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f004 fff1 	bl	8007c36 <USB_ReadChInterrupts>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5e:	d11a      	bne.n	8002c96 <HCD_HC_OUT_IRQHandler+0x440>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	212c      	movs	r1, #44	; 0x2c
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3361      	adds	r3, #97	; 0x61
 8002c6e:	2209      	movs	r2, #9
 8002c70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f005 fc37 	bl	80084ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c92:	6093      	str	r3, [r2, #8]
 8002c94:	e18e      	b.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f004 ffc9 	bl	8007c36 <USB_ReadChInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	f040 8182 	bne.w	8002fb4 <HCD_HC_OUT_IRQHandler+0x75e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	3361      	adds	r3, #97	; 0x61
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	f040 8087 	bne.w	8002de6 <HCD_HC_OUT_IRQHandler+0x590>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	212c      	movs	r1, #44	; 0x2c
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3361      	adds	r3, #97	; 0x61
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3360      	adds	r3, #96	; 0x60
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	333f      	adds	r3, #63	; 0x3f
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d00a      	beq.n	8002d26 <HCD_HC_OUT_IRQHandler+0x4d0>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	333f      	adds	r3, #63	; 0x3f
 8002d1e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	f040 8138 	bne.w	8002f96 <HCD_HC_OUT_IRQHandler+0x740>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d113      	bne.n	8002d56 <HCD_HC_OUT_IRQHandler+0x500>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3355      	adds	r3, #85	; 0x55
 8002d3c:	781a      	ldrb	r2, [r3, #0]
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	f082 0201 	eor.w	r2, r2, #1
 8002d44:	b2d0      	uxtb	r0, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3355      	adds	r3, #85	; 0x55
 8002d52:	4602      	mov	r2, r0
 8002d54:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	f040 811b 	bne.w	8002f96 <HCD_HC_OUT_IRQHandler+0x740>
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	334c      	adds	r3, #76	; 0x4c
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8110 	beq.w	8002f96 <HCD_HC_OUT_IRQHandler+0x740>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	334c      	adds	r3, #76	; 0x4c
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	202c      	movs	r0, #44	; 0x2c
 8002d8c:	fb00 f202 	mul.w	r2, r0, r2
 8002d90:	440a      	add	r2, r1
 8002d92:	3240      	adds	r2, #64	; 0x40
 8002d94:	8812      	ldrh	r2, [r2, #0]
 8002d96:	4413      	add	r3, r2
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	202c      	movs	r0, #44	; 0x2c
 8002da0:	fb00 f202 	mul.w	r2, r0, r2
 8002da4:	440a      	add	r2, r1
 8002da6:	3240      	adds	r2, #64	; 0x40
 8002da8:	8812      	ldrh	r2, [r2, #0]
 8002daa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dae:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80ed 	beq.w	8002f96 <HCD_HC_OUT_IRQHandler+0x740>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	212c      	movs	r1, #44	; 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3355      	adds	r3, #85	; 0x55
 8002dca:	781a      	ldrb	r2, [r3, #0]
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	f082 0201 	eor.w	r2, r2, #1
 8002dd2:	b2d0      	uxtb	r0, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	212c      	movs	r1, #44	; 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	3355      	adds	r3, #85	; 0x55
 8002de0:	4602      	mov	r2, r0
 8002de2:	701a      	strb	r2, [r3, #0]
 8002de4:	e0d7      	b.n	8002f96 <HCD_HC_OUT_IRQHandler+0x740>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002de6:	78fb      	ldrb	r3, [r7, #3]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	3361      	adds	r3, #97	; 0x61
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d109      	bne.n	8002e0e <HCD_HC_OUT_IRQHandler+0x5b8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	212c      	movs	r1, #44	; 0x2c
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	3361      	adds	r3, #97	; 0x61
 8002e08:	2202      	movs	r2, #2
 8002e0a:	701a      	strb	r2, [r3, #0]
 8002e0c:	e0c3      	b.n	8002f96 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	212c      	movs	r1, #44	; 0x2c
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	4413      	add	r3, r2
 8002e1a:	3361      	adds	r3, #97	; 0x61
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d112      	bne.n	8002e48 <HCD_HC_OUT_IRQHandler+0x5f2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	212c      	movs	r1, #44	; 0x2c
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3361      	adds	r3, #97	; 0x61
 8002e30:	2202      	movs	r2, #2
 8002e32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3360      	adds	r3, #96	; 0x60
 8002e42:	2202      	movs	r2, #2
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	e0a6      	b.n	8002f96 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	212c      	movs	r1, #44	; 0x2c
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	4413      	add	r3, r2
 8002e54:	3361      	adds	r3, #97	; 0x61
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d112      	bne.n	8002e82 <HCD_HC_OUT_IRQHandler+0x62c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	3361      	adds	r3, #97	; 0x61
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	3360      	adds	r3, #96	; 0x60
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	e089      	b.n	8002f96 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3361      	adds	r3, #97	; 0x61
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b06      	cmp	r3, #6
 8002e94:	d112      	bne.n	8002ebc <HCD_HC_OUT_IRQHandler+0x666>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3361      	adds	r3, #97	; 0x61
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3360      	adds	r3, #96	; 0x60
 8002eb6:	2205      	movs	r2, #5
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	e06c      	b.n	8002f96 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	212c      	movs	r1, #44	; 0x2c
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3361      	adds	r3, #97	; 0x61
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b07      	cmp	r3, #7
 8002ece:	d009      	beq.n	8002ee4 <HCD_HC_OUT_IRQHandler+0x68e>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3361      	adds	r3, #97	; 0x61
 8002ede:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ee0:	2b09      	cmp	r3, #9
 8002ee2:	d166      	bne.n	8002fb2 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	212c      	movs	r1, #44	; 0x2c
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	3361      	adds	r3, #97	; 0x61
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	222c      	movs	r2, #44	; 0x2c
 8002efc:	fb03 f202 	mul.w	r2, r3, r2
 8002f00:	440a      	add	r2, r1
 8002f02:	325c      	adds	r2, #92	; 0x5c
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	3201      	adds	r2, #1
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	202c      	movs	r0, #44	; 0x2c
 8002f0c:	fb00 f303 	mul.w	r3, r0, r3
 8002f10:	440b      	add	r3, r1
 8002f12:	335c      	adds	r3, #92	; 0x5c
 8002f14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	335c      	adds	r3, #92	; 0x5c
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d912      	bls.n	8002f50 <HCD_HC_OUT_IRQHandler+0x6fa>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	212c      	movs	r1, #44	; 0x2c
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	335c      	adds	r3, #92	; 0x5c
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	3360      	adds	r3, #96	; 0x60
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f4e:	e021      	b.n	8002f94 <HCD_HC_OUT_IRQHandler+0x73e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	212c      	movs	r1, #44	; 0x2c
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3360      	adds	r3, #96	; 0x60
 8002f5e:	2202      	movs	r2, #2
 8002f60:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f78:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f80:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f94:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3360      	adds	r3, #96	; 0x60
 8002fa4:	781a      	ldrb	r2, [r3, #0]
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f00c ffea 	bl	800ff84 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fb0:	e000      	b.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x75e>
      return;
 8002fb2:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b08a      	sub	sp, #40	; 0x28
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	0c5b      	lsrs	r3, r3, #17
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fee:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d004      	beq.n	8003000 <HCD_RXQLVL_IRQHandler+0x46>
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	f000 80a9 	beq.w	8003150 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ffe:	e0aa      	b.n	8003156 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 80a6 	beq.w	8003154 <HCD_RXQLVL_IRQHandler+0x19a>
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	212c      	movs	r1, #44	; 0x2c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	3344      	adds	r3, #68	; 0x44
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 809b 	beq.w	8003154 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	212c      	movs	r1, #44	; 0x2c
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	4413      	add	r3, r2
 800302a:	3350      	adds	r3, #80	; 0x50
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	441a      	add	r2, r3
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	202c      	movs	r0, #44	; 0x2c
 8003038:	fb00 f303 	mul.w	r3, r0, r3
 800303c:	440b      	add	r3, r1
 800303e:	334c      	adds	r3, #76	; 0x4c
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d87a      	bhi.n	800313c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	212c      	movs	r1, #44	; 0x2c
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	4413      	add	r3, r2
 8003056:	3344      	adds	r3, #68	; 0x44
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	b292      	uxth	r2, r2
 800305e:	4619      	mov	r1, r3
 8003060:	f004 fd7e 	bl	8007b60 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	212c      	movs	r1, #44	; 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	3344      	adds	r3, #68	; 0x44
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	441a      	add	r2, r3
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	202c      	movs	r0, #44	; 0x2c
 800307e:	fb00 f303 	mul.w	r3, r0, r3
 8003082:	440b      	add	r3, r1
 8003084:	3344      	adds	r3, #68	; 0x44
 8003086:	601a      	str	r2, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	3350      	adds	r3, #80	; 0x50
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	441a      	add	r2, r3
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	202c      	movs	r0, #44	; 0x2c
 80030a2:	fb00 f303 	mul.w	r3, r0, r3
 80030a6:	440b      	add	r3, r1
 80030a8:	3350      	adds	r3, #80	; 0x50
 80030aa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	0cdb      	lsrs	r3, r3, #19
 80030bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030c0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	212c      	movs	r1, #44	; 0x2c
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	3340      	adds	r3, #64	; 0x40
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	461a      	mov	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d13c      	bne.n	8003154 <HCD_RXQLVL_IRQHandler+0x19a>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d039      	beq.n	8003154 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030f6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030fe:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	4413      	add	r3, r2
 8003108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310c:	461a      	mov	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	212c      	movs	r1, #44	; 0x2c
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	3354      	adds	r3, #84	; 0x54
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	f083 0301 	eor.w	r3, r3, #1
 8003126:	b2d8      	uxtb	r0, r3
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3354      	adds	r3, #84	; 0x54
 8003136:	4602      	mov	r2, r0
 8003138:	701a      	strb	r2, [r3, #0]
      break;
 800313a:	e00b      	b.n	8003154 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	212c      	movs	r1, #44	; 0x2c
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	4413      	add	r3, r2
 8003148:	3360      	adds	r3, #96	; 0x60
 800314a:	2204      	movs	r2, #4
 800314c:	701a      	strb	r2, [r3, #0]
      break;
 800314e:	e001      	b.n	8003154 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003150:	bf00      	nop
 8003152:	e000      	b.n	8003156 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003154:	bf00      	nop
  }
}
 8003156:	bf00      	nop
 8003158:	3728      	adds	r7, #40	; 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b086      	sub	sp, #24
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800318a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b02      	cmp	r3, #2
 8003194:	d10b      	bne.n	80031ae <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b01      	cmp	r3, #1
 800319e:	d102      	bne.n	80031a6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f00c fe9f 	bl	800fee4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f043 0302 	orr.w	r3, r3, #2
 80031ac:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d132      	bne.n	800321e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f043 0308 	orr.w	r3, r3, #8
 80031be:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d126      	bne.n	8003218 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d113      	bne.n	80031fa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80031d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031dc:	d106      	bne.n	80031ec <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2102      	movs	r1, #2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f004 fe43 	bl	8007e70 <USB_InitFSLSPClkSel>
 80031ea:	e011      	b.n	8003210 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2101      	movs	r1, #1
 80031f2:	4618      	mov	r0, r3
 80031f4:	f004 fe3c 	bl	8007e70 <USB_InitFSLSPClkSel>
 80031f8:	e00a      	b.n	8003210 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d106      	bne.n	8003210 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003208:	461a      	mov	r2, r3
 800320a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800320e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fe fe9a 	bl	8001f4a <HAL_HCD_PortEnabled_Callback>
 8003216:	e002      	b.n	800321e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7fe fea0 	bl	8001f5e <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b20      	cmp	r3, #32
 8003226:	d103      	bne.n	8003230 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f043 0320 	orr.w	r3, r3, #32
 800322e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003236:	461a      	mov	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	6013      	str	r3, [r2, #0]
}
 800323c:	bf00      	nop
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800324c:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <HAL_PWREx_ConfigSupply+0x70>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b04      	cmp	r3, #4
 8003256:	d00a      	beq.n	800326e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003258:	4b16      	ldr	r3, [pc, #88]	; (80032b4 <HAL_PWREx_ConfigSupply+0x70>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	429a      	cmp	r2, r3
 8003264:	d001      	beq.n	800326a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e01f      	b.n	80032aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	e01d      	b.n	80032aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800326e:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <HAL_PWREx_ConfigSupply+0x70>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f023 0207 	bic.w	r2, r3, #7
 8003276:	490f      	ldr	r1, [pc, #60]	; (80032b4 <HAL_PWREx_ConfigSupply+0x70>)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4313      	orrs	r3, r2
 800327c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800327e:	f7fe f819 	bl	80012b4 <HAL_GetTick>
 8003282:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003284:	e009      	b.n	800329a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003286:	f7fe f815 	bl	80012b4 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003294:	d901      	bls.n	800329a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e007      	b.n	80032aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_PWREx_ConfigSupply+0x70>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a6:	d1ee      	bne.n	8003286 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	58024800 	.word	0x58024800

080032b8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80032c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032c6:	60d3      	str	r3, [r2, #12]
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	58024800 	.word	0x58024800

080032d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08c      	sub	sp, #48	; 0x30
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e3c8      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8087 	beq.w	8003406 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f8:	4b88      	ldr	r3, [pc, #544]	; (800351c <HAL_RCC_OscConfig+0x244>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003302:	4b86      	ldr	r3, [pc, #536]	; (800351c <HAL_RCC_OscConfig+0x244>)
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330a:	2b10      	cmp	r3, #16
 800330c:	d007      	beq.n	800331e <HAL_RCC_OscConfig+0x46>
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	2b18      	cmp	r3, #24
 8003312:	d110      	bne.n	8003336 <HAL_RCC_OscConfig+0x5e>
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d10b      	bne.n	8003336 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331e:	4b7f      	ldr	r3, [pc, #508]	; (800351c <HAL_RCC_OscConfig+0x244>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d06c      	beq.n	8003404 <HAL_RCC_OscConfig+0x12c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d168      	bne.n	8003404 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e3a2      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333e:	d106      	bne.n	800334e <HAL_RCC_OscConfig+0x76>
 8003340:	4b76      	ldr	r3, [pc, #472]	; (800351c <HAL_RCC_OscConfig+0x244>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a75      	ldr	r2, [pc, #468]	; (800351c <HAL_RCC_OscConfig+0x244>)
 8003346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	e02e      	b.n	80033ac <HAL_RCC_OscConfig+0xd4>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10c      	bne.n	8003370 <HAL_RCC_OscConfig+0x98>
 8003356:	4b71      	ldr	r3, [pc, #452]	; (800351c <HAL_RCC_OscConfig+0x244>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a70      	ldr	r2, [pc, #448]	; (800351c <HAL_RCC_OscConfig+0x244>)
 800335c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b6e      	ldr	r3, [pc, #440]	; (800351c <HAL_RCC_OscConfig+0x244>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a6d      	ldr	r2, [pc, #436]	; (800351c <HAL_RCC_OscConfig+0x244>)
 8003368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	e01d      	b.n	80033ac <HAL_RCC_OscConfig+0xd4>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0xbc>
 800337a:	4b68      	ldr	r3, [pc, #416]	; (800351c <HAL_RCC_OscConfig+0x244>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a67      	ldr	r2, [pc, #412]	; (800351c <HAL_RCC_OscConfig+0x244>)
 8003380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b65      	ldr	r3, [pc, #404]	; (800351c <HAL_RCC_OscConfig+0x244>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a64      	ldr	r2, [pc, #400]	; (800351c <HAL_RCC_OscConfig+0x244>)
 800338c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0xd4>
 8003394:	4b61      	ldr	r3, [pc, #388]	; (800351c <HAL_RCC_OscConfig+0x244>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a60      	ldr	r2, [pc, #384]	; (800351c <HAL_RCC_OscConfig+0x244>)
 800339a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b5e      	ldr	r3, [pc, #376]	; (800351c <HAL_RCC_OscConfig+0x244>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a5d      	ldr	r2, [pc, #372]	; (800351c <HAL_RCC_OscConfig+0x244>)
 80033a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d013      	beq.n	80033dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fd ff7e 	bl	80012b4 <HAL_GetTick>
 80033b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fd ff7a 	bl	80012b4 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e356      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033ce:	4b53      	ldr	r3, [pc, #332]	; (800351c <HAL_RCC_OscConfig+0x244>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0xe4>
 80033da:	e014      	b.n	8003406 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fd ff6a 	bl	80012b4 <HAL_GetTick>
 80033e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fd ff66 	bl	80012b4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e342      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033f6:	4b49      	ldr	r3, [pc, #292]	; (800351c <HAL_RCC_OscConfig+0x244>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x10c>
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 808c 	beq.w	800352c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003414:	4b41      	ldr	r3, [pc, #260]	; (800351c <HAL_RCC_OscConfig+0x244>)
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800341c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800341e:	4b3f      	ldr	r3, [pc, #252]	; (800351c <HAL_RCC_OscConfig+0x244>)
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003422:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d007      	beq.n	800343a <HAL_RCC_OscConfig+0x162>
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	2b18      	cmp	r3, #24
 800342e:	d137      	bne.n	80034a0 <HAL_RCC_OscConfig+0x1c8>
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d132      	bne.n	80034a0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800343a:	4b38      	ldr	r3, [pc, #224]	; (800351c <HAL_RCC_OscConfig+0x244>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_RCC_OscConfig+0x17a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e314      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003452:	4b32      	ldr	r3, [pc, #200]	; (800351c <HAL_RCC_OscConfig+0x244>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 0219 	bic.w	r2, r3, #25
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	492f      	ldr	r1, [pc, #188]	; (800351c <HAL_RCC_OscConfig+0x244>)
 8003460:	4313      	orrs	r3, r2
 8003462:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fd ff26 	bl	80012b4 <HAL_GetTick>
 8003468:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346c:	f7fd ff22 	bl	80012b4 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e2fe      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800347e:	4b27      	ldr	r3, [pc, #156]	; (800351c <HAL_RCC_OscConfig+0x244>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348a:	4b24      	ldr	r3, [pc, #144]	; (800351c <HAL_RCC_OscConfig+0x244>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	061b      	lsls	r3, r3, #24
 8003498:	4920      	ldr	r1, [pc, #128]	; (800351c <HAL_RCC_OscConfig+0x244>)
 800349a:	4313      	orrs	r3, r2
 800349c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800349e:	e045      	b.n	800352c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d026      	beq.n	80034f6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034a8:	4b1c      	ldr	r3, [pc, #112]	; (800351c <HAL_RCC_OscConfig+0x244>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 0219 	bic.w	r2, r3, #25
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4919      	ldr	r1, [pc, #100]	; (800351c <HAL_RCC_OscConfig+0x244>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ba:	f7fd fefb 	bl	80012b4 <HAL_GetTick>
 80034be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c2:	f7fd fef7 	bl	80012b4 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e2d3      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034d4:	4b11      	ldr	r3, [pc, #68]	; (800351c <HAL_RCC_OscConfig+0x244>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e0:	4b0e      	ldr	r3, [pc, #56]	; (800351c <HAL_RCC_OscConfig+0x244>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	061b      	lsls	r3, r3, #24
 80034ee:	490b      	ldr	r1, [pc, #44]	; (800351c <HAL_RCC_OscConfig+0x244>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]
 80034f4:	e01a      	b.n	800352c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f6:	4b09      	ldr	r3, [pc, #36]	; (800351c <HAL_RCC_OscConfig+0x244>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a08      	ldr	r2, [pc, #32]	; (800351c <HAL_RCC_OscConfig+0x244>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003502:	f7fd fed7 	bl	80012b4 <HAL_GetTick>
 8003506:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350a:	f7fd fed3 	bl	80012b4 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d903      	bls.n	8003520 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e2af      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
 800351c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003520:	4b96      	ldr	r3, [pc, #600]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1ee      	bne.n	800350a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b00      	cmp	r3, #0
 8003536:	d06a      	beq.n	800360e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003538:	4b90      	ldr	r3, [pc, #576]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003540:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003542:	4b8e      	ldr	r3, [pc, #568]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b08      	cmp	r3, #8
 800354c:	d007      	beq.n	800355e <HAL_RCC_OscConfig+0x286>
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	2b18      	cmp	r3, #24
 8003552:	d11b      	bne.n	800358c <HAL_RCC_OscConfig+0x2b4>
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d116      	bne.n	800358c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800355e:	4b87      	ldr	r3, [pc, #540]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <HAL_RCC_OscConfig+0x29e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	2b80      	cmp	r3, #128	; 0x80
 8003570:	d001      	beq.n	8003576 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e282      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003576:	4b81      	ldr	r3, [pc, #516]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	061b      	lsls	r3, r3, #24
 8003584:	497d      	ldr	r1, [pc, #500]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 8003586:	4313      	orrs	r3, r2
 8003588:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800358a:	e040      	b.n	800360e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d023      	beq.n	80035dc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003594:	4b79      	ldr	r3, [pc, #484]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a78      	ldr	r2, [pc, #480]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 800359a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800359e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fd fe88 	bl	80012b4 <HAL_GetTick>
 80035a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80035a8:	f7fd fe84 	bl	80012b4 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e260      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035ba:	4b70      	ldr	r3, [pc, #448]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035c6:	4b6d      	ldr	r3, [pc, #436]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	061b      	lsls	r3, r3, #24
 80035d4:	4969      	ldr	r1, [pc, #420]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60cb      	str	r3, [r1, #12]
 80035da:	e018      	b.n	800360e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80035dc:	4b67      	ldr	r3, [pc, #412]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a66      	ldr	r2, [pc, #408]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 80035e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fd fe64 	bl	80012b4 <HAL_GetTick>
 80035ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80035f0:	f7fd fe60 	bl	80012b4 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e23c      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003602:	4b5e      	ldr	r3, [pc, #376]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d036      	beq.n	8003688 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d019      	beq.n	8003656 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003622:	4b56      	ldr	r3, [pc, #344]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 8003624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003626:	4a55      	ldr	r2, [pc, #340]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362e:	f7fd fe41 	bl	80012b4 <HAL_GetTick>
 8003632:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003636:	f7fd fe3d 	bl	80012b4 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e219      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003648:	4b4c      	ldr	r3, [pc, #304]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 800364a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x35e>
 8003654:	e018      	b.n	8003688 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003656:	4b49      	ldr	r3, [pc, #292]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 8003658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365a:	4a48      	ldr	r2, [pc, #288]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003662:	f7fd fe27 	bl	80012b4 <HAL_GetTick>
 8003666:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800366a:	f7fd fe23 	bl	80012b4 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1ff      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800367c:	4b3f      	ldr	r3, [pc, #252]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 800367e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f0      	bne.n	800366a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b00      	cmp	r3, #0
 8003692:	d036      	beq.n	8003702 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d019      	beq.n	80036d0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800369c:	4b37      	ldr	r3, [pc, #220]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a36      	ldr	r2, [pc, #216]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 80036a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036a8:	f7fd fe04 	bl	80012b4 <HAL_GetTick>
 80036ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b0:	f7fd fe00 	bl	80012b4 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e1dc      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036c2:	4b2e      	ldr	r3, [pc, #184]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0x3d8>
 80036ce:	e018      	b.n	8003702 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036d0:	4b2a      	ldr	r3, [pc, #168]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a29      	ldr	r2, [pc, #164]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 80036d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036dc:	f7fd fdea 	bl	80012b4 <HAL_GetTick>
 80036e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036e4:	f7fd fde6 	bl	80012b4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e1c2      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036f6:	4b21      	ldr	r3, [pc, #132]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 8086 	beq.w	800381c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_RCC_OscConfig+0x4a8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1a      	ldr	r2, [pc, #104]	; (8003780 <HAL_RCC_OscConfig+0x4a8>)
 8003716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800371c:	f7fd fdca 	bl	80012b4 <HAL_GetTick>
 8003720:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003724:	f7fd fdc6 	bl	80012b4 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e1a2      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003736:	4b12      	ldr	r3, [pc, #72]	; (8003780 <HAL_RCC_OscConfig+0x4a8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d106      	bne.n	8003758 <HAL_RCC_OscConfig+0x480>
 800374a:	4b0c      	ldr	r3, [pc, #48]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374e:	4a0b      	ldr	r2, [pc, #44]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	6713      	str	r3, [r2, #112]	; 0x70
 8003756:	e032      	b.n	80037be <HAL_RCC_OscConfig+0x4e6>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d111      	bne.n	8003784 <HAL_RCC_OscConfig+0x4ac>
 8003760:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	4a05      	ldr	r2, [pc, #20]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	4a02      	ldr	r2, [pc, #8]	; (800377c <HAL_RCC_OscConfig+0x4a4>)
 8003772:	f023 0304 	bic.w	r3, r3, #4
 8003776:	6713      	str	r3, [r2, #112]	; 0x70
 8003778:	e021      	b.n	80037be <HAL_RCC_OscConfig+0x4e6>
 800377a:	bf00      	nop
 800377c:	58024400 	.word	0x58024400
 8003780:	58024800 	.word	0x58024800
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b05      	cmp	r3, #5
 800378a:	d10c      	bne.n	80037a6 <HAL_RCC_OscConfig+0x4ce>
 800378c:	4b83      	ldr	r3, [pc, #524]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	4a82      	ldr	r2, [pc, #520]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 8003792:	f043 0304 	orr.w	r3, r3, #4
 8003796:	6713      	str	r3, [r2, #112]	; 0x70
 8003798:	4b80      	ldr	r3, [pc, #512]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 800379a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379c:	4a7f      	ldr	r2, [pc, #508]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	6713      	str	r3, [r2, #112]	; 0x70
 80037a4:	e00b      	b.n	80037be <HAL_RCC_OscConfig+0x4e6>
 80037a6:	4b7d      	ldr	r3, [pc, #500]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	4a7c      	ldr	r2, [pc, #496]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 80037ac:	f023 0301 	bic.w	r3, r3, #1
 80037b0:	6713      	str	r3, [r2, #112]	; 0x70
 80037b2:	4b7a      	ldr	r3, [pc, #488]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	4a79      	ldr	r2, [pc, #484]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 80037b8:	f023 0304 	bic.w	r3, r3, #4
 80037bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d015      	beq.n	80037f2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c6:	f7fd fd75 	bl	80012b4 <HAL_GetTick>
 80037ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037cc:	e00a      	b.n	80037e4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f7fd fd71 	bl	80012b4 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037dc:	4293      	cmp	r3, r2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e14b      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037e4:	4b6d      	ldr	r3, [pc, #436]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0ee      	beq.n	80037ce <HAL_RCC_OscConfig+0x4f6>
 80037f0:	e014      	b.n	800381c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f2:	f7fd fd5f 	bl	80012b4 <HAL_GetTick>
 80037f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037f8:	e00a      	b.n	8003810 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fa:	f7fd fd5b 	bl	80012b4 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	f241 3288 	movw	r2, #5000	; 0x1388
 8003808:	4293      	cmp	r3, r2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e135      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003810:	4b62      	ldr	r3, [pc, #392]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1ee      	bne.n	80037fa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 812a 	beq.w	8003a7a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003826:	4b5d      	ldr	r3, [pc, #372]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800382e:	2b18      	cmp	r3, #24
 8003830:	f000 80ba 	beq.w	80039a8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	2b02      	cmp	r3, #2
 800383a:	f040 8095 	bne.w	8003968 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383e:	4b57      	ldr	r3, [pc, #348]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a56      	ldr	r2, [pc, #344]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 8003844:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384a:	f7fd fd33 	bl	80012b4 <HAL_GetTick>
 800384e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003852:	f7fd fd2f 	bl	80012b4 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e10b      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003864:	4b4d      	ldr	r3, [pc, #308]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1f0      	bne.n	8003852 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003870:	4b4a      	ldr	r3, [pc, #296]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 8003872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003874:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <HAL_RCC_OscConfig+0x6c8>)
 8003876:	4013      	ands	r3, r2
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003880:	0112      	lsls	r2, r2, #4
 8003882:	430a      	orrs	r2, r1
 8003884:	4945      	ldr	r1, [pc, #276]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 8003886:	4313      	orrs	r3, r2
 8003888:	628b      	str	r3, [r1, #40]	; 0x28
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	3b01      	subs	r3, #1
 8003890:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003898:	3b01      	subs	r3, #1
 800389a:	025b      	lsls	r3, r3, #9
 800389c:	b29b      	uxth	r3, r3
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	3b01      	subs	r3, #1
 80038a6:	041b      	lsls	r3, r3, #16
 80038a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b2:	3b01      	subs	r3, #1
 80038b4:	061b      	lsls	r3, r3, #24
 80038b6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80038ba:	4938      	ldr	r1, [pc, #224]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80038c0:	4b36      	ldr	r3, [pc, #216]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	4a35      	ldr	r2, [pc, #212]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 80038c6:	f023 0301 	bic.w	r3, r3, #1
 80038ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80038cc:	4b33      	ldr	r3, [pc, #204]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 80038ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d0:	4b34      	ldr	r3, [pc, #208]	; (80039a4 <HAL_RCC_OscConfig+0x6cc>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038d8:	00d2      	lsls	r2, r2, #3
 80038da:	4930      	ldr	r1, [pc, #192]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80038e0:	4b2e      	ldr	r3, [pc, #184]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	f023 020c 	bic.w	r2, r3, #12
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	492b      	ldr	r1, [pc, #172]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80038f2:	4b2a      	ldr	r3, [pc, #168]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	f023 0202 	bic.w	r2, r3, #2
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	4927      	ldr	r1, [pc, #156]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 8003900:	4313      	orrs	r3, r2
 8003902:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003904:	4b25      	ldr	r3, [pc, #148]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	4a24      	ldr	r2, [pc, #144]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 800390a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003910:	4b22      	ldr	r3, [pc, #136]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	4a21      	ldr	r2, [pc, #132]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 8003916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800391a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800391c:	4b1f      	ldr	r3, [pc, #124]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	4a1e      	ldr	r2, [pc, #120]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 8003922:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003926:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003928:	4b1c      	ldr	r3, [pc, #112]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	4a1b      	ldr	r2, [pc, #108]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003934:	4b19      	ldr	r3, [pc, #100]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a18      	ldr	r2, [pc, #96]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 800393a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800393e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fd fcb8 	bl	80012b4 <HAL_GetTick>
 8003944:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003948:	f7fd fcb4 	bl	80012b4 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e090      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800395a:	4b10      	ldr	r3, [pc, #64]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0x670>
 8003966:	e088      	b.n	8003a7a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0b      	ldr	r2, [pc, #44]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 800396e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fd fc9e 	bl	80012b4 <HAL_GetTick>
 8003978:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397c:	f7fd fc9a 	bl	80012b4 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e076      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800398e:	4b03      	ldr	r3, [pc, #12]	; (800399c <HAL_RCC_OscConfig+0x6c4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x6a4>
 800399a:	e06e      	b.n	8003a7a <HAL_RCC_OscConfig+0x7a2>
 800399c:	58024400 	.word	0x58024400
 80039a0:	fffffc0c 	.word	0xfffffc0c
 80039a4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80039a8:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <HAL_RCC_OscConfig+0x7ac>)
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80039ae:	4b35      	ldr	r3, [pc, #212]	; (8003a84 <HAL_RCC_OscConfig+0x7ac>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d031      	beq.n	8003a20 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f003 0203 	and.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d12a      	bne.n	8003a20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d122      	bne.n	8003a20 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d11a      	bne.n	8003a20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	0a5b      	lsrs	r3, r3, #9
 80039ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d111      	bne.n	8003a20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	0c1b      	lsrs	r3, r3, #16
 8003a00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d108      	bne.n	8003a20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	0e1b      	lsrs	r3, r3, #24
 8003a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e02b      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003a24:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <HAL_RCC_OscConfig+0x7ac>)
 8003a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a28:	08db      	lsrs	r3, r3, #3
 8003a2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a2e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d01f      	beq.n	8003a7a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_RCC_OscConfig+0x7ac>)
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	4a11      	ldr	r2, [pc, #68]	; (8003a84 <HAL_RCC_OscConfig+0x7ac>)
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a46:	f7fd fc35 	bl	80012b4 <HAL_GetTick>
 8003a4a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003a4c:	bf00      	nop
 8003a4e:	f7fd fc31 	bl	80012b4 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d0f9      	beq.n	8003a4e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <HAL_RCC_OscConfig+0x7ac>)
 8003a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <HAL_RCC_OscConfig+0x7b0>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a66:	00d2      	lsls	r2, r2, #3
 8003a68:	4906      	ldr	r1, [pc, #24]	; (8003a84 <HAL_RCC_OscConfig+0x7ac>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003a6e:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <HAL_RCC_OscConfig+0x7ac>)
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	4a04      	ldr	r2, [pc, #16]	; (8003a84 <HAL_RCC_OscConfig+0x7ac>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3730      	adds	r7, #48	; 0x30
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	58024400 	.word	0x58024400
 8003a88:	ffff0007 	.word	0xffff0007

08003a8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e19c      	b.n	8003dda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa0:	4b8a      	ldr	r3, [pc, #552]	; (8003ccc <HAL_RCC_ClockConfig+0x240>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d910      	bls.n	8003ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aae:	4b87      	ldr	r3, [pc, #540]	; (8003ccc <HAL_RCC_ClockConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 020f 	bic.w	r2, r3, #15
 8003ab6:	4985      	ldr	r1, [pc, #532]	; (8003ccc <HAL_RCC_ClockConfig+0x240>)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b83      	ldr	r3, [pc, #524]	; (8003ccc <HAL_RCC_ClockConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e184      	b.n	8003dda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d010      	beq.n	8003afe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	4b7b      	ldr	r3, [pc, #492]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d908      	bls.n	8003afe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003aec:	4b78      	ldr	r3, [pc, #480]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	4975      	ldr	r1, [pc, #468]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d010      	beq.n	8003b2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	4b70      	ldr	r3, [pc, #448]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d908      	bls.n	8003b2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b1a:	4b6d      	ldr	r3, [pc, #436]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	496a      	ldr	r1, [pc, #424]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d010      	beq.n	8003b5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699a      	ldr	r2, [r3, #24]
 8003b3c:	4b64      	ldr	r3, [pc, #400]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d908      	bls.n	8003b5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b48:	4b61      	ldr	r3, [pc, #388]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	495e      	ldr	r1, [pc, #376]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d010      	beq.n	8003b88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	4b59      	ldr	r3, [pc, #356]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d908      	bls.n	8003b88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b76:	4b56      	ldr	r3, [pc, #344]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	4953      	ldr	r1, [pc, #332]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d010      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	4b4d      	ldr	r3, [pc, #308]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d908      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba4:	4b4a      	ldr	r3, [pc, #296]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f023 020f 	bic.w	r2, r3, #15
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4947      	ldr	r1, [pc, #284]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d055      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003bc2:	4b43      	ldr	r3, [pc, #268]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	4940      	ldr	r1, [pc, #256]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d107      	bne.n	8003bec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bdc:	4b3c      	ldr	r3, [pc, #240]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d121      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0f6      	b.n	8003dda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d107      	bne.n	8003c04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bf4:	4b36      	ldr	r3, [pc, #216]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d115      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0ea      	b.n	8003dda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d107      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c0c:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0de      	b.n	8003dda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c1c:	4b2c      	ldr	r3, [pc, #176]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0d6      	b.n	8003dda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c2c:	4b28      	ldr	r3, [pc, #160]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	f023 0207 	bic.w	r2, r3, #7
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	4925      	ldr	r1, [pc, #148]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c3e:	f7fd fb39 	bl	80012b4 <HAL_GetTick>
 8003c42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c44:	e00a      	b.n	8003c5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c46:	f7fd fb35 	bl	80012b4 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e0be      	b.n	8003dda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5c:	4b1c      	ldr	r3, [pc, #112]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d1eb      	bne.n	8003c46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d010      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d208      	bcs.n	8003c9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c8a:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f023 020f 	bic.w	r2, r3, #15
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	490e      	ldr	r1, [pc, #56]	; (8003cd0 <HAL_RCC_ClockConfig+0x244>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_RCC_ClockConfig+0x240>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d214      	bcs.n	8003cd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003caa:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <HAL_RCC_ClockConfig+0x240>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 020f 	bic.w	r2, r3, #15
 8003cb2:	4906      	ldr	r1, [pc, #24]	; (8003ccc <HAL_RCC_ClockConfig+0x240>)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cba:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <HAL_RCC_ClockConfig+0x240>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e086      	b.n	8003dda <HAL_RCC_ClockConfig+0x34e>
 8003ccc:	52002000 	.word	0x52002000
 8003cd0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d010      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	4b3f      	ldr	r3, [pc, #252]	; (8003de4 <HAL_RCC_ClockConfig+0x358>)
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d208      	bcs.n	8003d02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003cf0:	4b3c      	ldr	r3, [pc, #240]	; (8003de4 <HAL_RCC_ClockConfig+0x358>)
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	4939      	ldr	r1, [pc, #228]	; (8003de4 <HAL_RCC_ClockConfig+0x358>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d010      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	4b34      	ldr	r3, [pc, #208]	; (8003de4 <HAL_RCC_ClockConfig+0x358>)
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d208      	bcs.n	8003d30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d1e:	4b31      	ldr	r3, [pc, #196]	; (8003de4 <HAL_RCC_ClockConfig+0x358>)
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	492e      	ldr	r1, [pc, #184]	; (8003de4 <HAL_RCC_ClockConfig+0x358>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d010      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699a      	ldr	r2, [r3, #24]
 8003d40:	4b28      	ldr	r3, [pc, #160]	; (8003de4 <HAL_RCC_ClockConfig+0x358>)
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d208      	bcs.n	8003d5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d4c:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <HAL_RCC_ClockConfig+0x358>)
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	4922      	ldr	r1, [pc, #136]	; (8003de4 <HAL_RCC_ClockConfig+0x358>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d010      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <HAL_RCC_ClockConfig+0x358>)
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d208      	bcs.n	8003d8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <HAL_RCC_ClockConfig+0x358>)
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4917      	ldr	r1, [pc, #92]	; (8003de4 <HAL_RCC_ClockConfig+0x358>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d8c:	f000 f834 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8003d90:	4602      	mov	r2, r0
 8003d92:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <HAL_RCC_ClockConfig+0x358>)
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	4912      	ldr	r1, [pc, #72]	; (8003de8 <HAL_RCC_ClockConfig+0x35c>)
 8003d9e:	5ccb      	ldrb	r3, [r1, r3]
 8003da0:	f003 031f 	and.w	r3, r3, #31
 8003da4:	fa22 f303 	lsr.w	r3, r2, r3
 8003da8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003daa:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <HAL_RCC_ClockConfig+0x358>)
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	4a0d      	ldr	r2, [pc, #52]	; (8003de8 <HAL_RCC_ClockConfig+0x35c>)
 8003db4:	5cd3      	ldrb	r3, [r2, r3]
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc0:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <HAL_RCC_ClockConfig+0x360>)
 8003dc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003dc4:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <HAL_RCC_ClockConfig+0x364>)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003dca:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <HAL_RCC_ClockConfig+0x368>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fc fee6 	bl	8000ba0 <HAL_InitTick>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	58024400 	.word	0x58024400
 8003de8:	08012af4 	.word	0x08012af4
 8003dec:	24000004 	.word	0x24000004
 8003df0:	24000000 	.word	0x24000000
 8003df4:	24000008 	.word	0x24000008

08003df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b089      	sub	sp, #36	; 0x24
 8003dfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dfe:	4bb3      	ldr	r3, [pc, #716]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e06:	2b18      	cmp	r3, #24
 8003e08:	f200 8155 	bhi.w	80040b6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003e0c:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e12:	bf00      	nop
 8003e14:	08003e79 	.word	0x08003e79
 8003e18:	080040b7 	.word	0x080040b7
 8003e1c:	080040b7 	.word	0x080040b7
 8003e20:	080040b7 	.word	0x080040b7
 8003e24:	080040b7 	.word	0x080040b7
 8003e28:	080040b7 	.word	0x080040b7
 8003e2c:	080040b7 	.word	0x080040b7
 8003e30:	080040b7 	.word	0x080040b7
 8003e34:	08003e9f 	.word	0x08003e9f
 8003e38:	080040b7 	.word	0x080040b7
 8003e3c:	080040b7 	.word	0x080040b7
 8003e40:	080040b7 	.word	0x080040b7
 8003e44:	080040b7 	.word	0x080040b7
 8003e48:	080040b7 	.word	0x080040b7
 8003e4c:	080040b7 	.word	0x080040b7
 8003e50:	080040b7 	.word	0x080040b7
 8003e54:	08003ea5 	.word	0x08003ea5
 8003e58:	080040b7 	.word	0x080040b7
 8003e5c:	080040b7 	.word	0x080040b7
 8003e60:	080040b7 	.word	0x080040b7
 8003e64:	080040b7 	.word	0x080040b7
 8003e68:	080040b7 	.word	0x080040b7
 8003e6c:	080040b7 	.word	0x080040b7
 8003e70:	080040b7 	.word	0x080040b7
 8003e74:	08003eab 	.word	0x08003eab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e78:	4b94      	ldr	r3, [pc, #592]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d009      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e84:	4b91      	ldr	r3, [pc, #580]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	08db      	lsrs	r3, r3, #3
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	4a90      	ldr	r2, [pc, #576]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
 8003e94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003e96:	e111      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e98:	4b8d      	ldr	r3, [pc, #564]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e9a:	61bb      	str	r3, [r7, #24]
      break;
 8003e9c:	e10e      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003e9e:	4b8d      	ldr	r3, [pc, #564]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ea0:	61bb      	str	r3, [r7, #24]
      break;
 8003ea2:	e10b      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003ea4:	4b8c      	ldr	r3, [pc, #560]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ea6:	61bb      	str	r3, [r7, #24]
      break;
 8003ea8:	e108      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003eaa:	4b88      	ldr	r3, [pc, #544]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003eb4:	4b85      	ldr	r3, [pc, #532]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ebe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ec0:	4b82      	ldr	r3, [pc, #520]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003eca:	4b80      	ldr	r3, [pc, #512]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ece:	08db      	lsrs	r3, r3, #3
 8003ed0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	ee07 3a90 	vmov	s15, r3
 8003ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 80e1 	beq.w	80040b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	f000 8083 	beq.w	8003ffc <HAL_RCC_GetSysClockFreq+0x204>
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	f200 80a1 	bhi.w	8004040 <HAL_RCC_GetSysClockFreq+0x248>
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0x114>
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d056      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f0a:	e099      	b.n	8004040 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f0c:	4b6f      	ldr	r3, [pc, #444]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d02d      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f18:	4b6c      	ldr	r3, [pc, #432]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	08db      	lsrs	r3, r3, #3
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	4a6b      	ldr	r2, [pc, #428]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
 8003f28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	ee07 3a90 	vmov	s15, r3
 8003f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f42:	4b62      	ldr	r3, [pc, #392]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f56:	eddf 5a61 	vldr	s11, [pc, #388]	; 80040dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003f72:	e087      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	ee07 3a90 	vmov	s15, r3
 8003f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80040e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f86:	4b51      	ldr	r3, [pc, #324]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f9a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80040dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fb6:	e065      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	ee07 3a90 	vmov	s15, r3
 8003fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80040e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fca:	4b40      	ldr	r3, [pc, #256]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd2:	ee07 3a90 	vmov	s15, r3
 8003fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fde:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80040dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ffa:	e043      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004006:	eddf 6a38 	vldr	s13, [pc, #224]	; 80040e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800400a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800400e:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800401e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004022:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80040dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800402a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800402e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800403e:	e021      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	ee07 3a90 	vmov	s15, r3
 8004046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800404a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80040e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800404e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004052:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405a:	ee07 3a90 	vmov	s15, r3
 800405e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004062:	ed97 6a02 	vldr	s12, [r7, #8]
 8004066:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80040dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800406a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800406e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800407a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800407e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004082:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004084:	4b11      	ldr	r3, [pc, #68]	; (80040cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	0a5b      	lsrs	r3, r3, #9
 800408a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800408e:	3301      	adds	r3, #1
 8004090:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	ee07 3a90 	vmov	s15, r3
 8004098:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800409c:	edd7 6a07 	vldr	s13, [r7, #28]
 80040a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040a8:	ee17 3a90 	vmov	r3, s15
 80040ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80040ae:	e005      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61bb      	str	r3, [r7, #24]
      break;
 80040b4:	e002      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80040b6:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80040b8:	61bb      	str	r3, [r7, #24]
      break;
 80040ba:	bf00      	nop
  }

  return sysclockfreq;
 80040bc:	69bb      	ldr	r3, [r7, #24]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3724      	adds	r7, #36	; 0x24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	58024400 	.word	0x58024400
 80040d0:	03d09000 	.word	0x03d09000
 80040d4:	003d0900 	.word	0x003d0900
 80040d8:	007a1200 	.word	0x007a1200
 80040dc:	46000000 	.word	0x46000000
 80040e0:	4c742400 	.word	0x4c742400
 80040e4:	4a742400 	.word	0x4a742400
 80040e8:	4af42400 	.word	0x4af42400

080040ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80040f2:	f7ff fe81 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 80040f6:	4602      	mov	r2, r0
 80040f8:	4b10      	ldr	r3, [pc, #64]	; (800413c <HAL_RCC_GetHCLKFreq+0x50>)
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	0a1b      	lsrs	r3, r3, #8
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	490f      	ldr	r1, [pc, #60]	; (8004140 <HAL_RCC_GetHCLKFreq+0x54>)
 8004104:	5ccb      	ldrb	r3, [r1, r3]
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	fa22 f303 	lsr.w	r3, r2, r3
 800410e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004110:	4b0a      	ldr	r3, [pc, #40]	; (800413c <HAL_RCC_GetHCLKFreq+0x50>)
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	4a09      	ldr	r2, [pc, #36]	; (8004140 <HAL_RCC_GetHCLKFreq+0x54>)
 800411a:	5cd3      	ldrb	r3, [r2, r3]
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	fa22 f303 	lsr.w	r3, r2, r3
 8004126:	4a07      	ldr	r2, [pc, #28]	; (8004144 <HAL_RCC_GetHCLKFreq+0x58>)
 8004128:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800412a:	4a07      	ldr	r2, [pc, #28]	; (8004148 <HAL_RCC_GetHCLKFreq+0x5c>)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <HAL_RCC_GetHCLKFreq+0x58>)
 8004132:	681b      	ldr	r3, [r3, #0]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	58024400 	.word	0x58024400
 8004140:	08012af4 	.word	0x08012af4
 8004144:	24000004 	.word	0x24000004
 8004148:	24000000 	.word	0x24000000

0800414c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004150:	f7ff ffcc 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 8004154:	4602      	mov	r2, r0
 8004156:	4b06      	ldr	r3, [pc, #24]	; (8004170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	4904      	ldr	r1, [pc, #16]	; (8004174 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004162:	5ccb      	ldrb	r3, [r1, r3]
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	58024400 	.word	0x58024400
 8004174:	08012af4 	.word	0x08012af4

08004178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800417c:	f7ff ffb6 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 8004180:	4602      	mov	r2, r0
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	0a1b      	lsrs	r3, r3, #8
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	4904      	ldr	r1, [pc, #16]	; (80041a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800418e:	5ccb      	ldrb	r3, [r1, r3]
 8004190:	f003 031f 	and.w	r3, r3, #31
 8004194:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004198:	4618      	mov	r0, r3
 800419a:	bd80      	pop	{r7, pc}
 800419c:	58024400 	.word	0x58024400
 80041a0:	08012af4 	.word	0x08012af4

080041a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	223f      	movs	r2, #63	; 0x3f
 80041b2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041b4:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <HAL_RCC_GetClockConfig+0x7c>)
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f003 0207 	and.w	r2, r3, #7
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80041c0:	4b17      	ldr	r3, [pc, #92]	; (8004220 <HAL_RCC_GetClockConfig+0x7c>)
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80041cc:	4b14      	ldr	r3, [pc, #80]	; (8004220 <HAL_RCC_GetClockConfig+0x7c>)
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	f003 020f 	and.w	r2, r3, #15
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80041d8:	4b11      	ldr	r3, [pc, #68]	; (8004220 <HAL_RCC_GetClockConfig+0x7c>)
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80041e4:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <HAL_RCC_GetClockConfig+0x7c>)
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_RCC_GetClockConfig+0x7c>)
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80041fc:	4b08      	ldr	r3, [pc, #32]	; (8004220 <HAL_RCC_GetClockConfig+0x7c>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004208:	4b06      	ldr	r3, [pc, #24]	; (8004224 <HAL_RCC_GetClockConfig+0x80>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 020f 	and.w	r2, r3, #15
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	601a      	str	r2, [r3, #0]
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	58024400 	.word	0x58024400
 8004224:	52002000 	.word	0x52002000

08004228 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800422c:	b0c6      	sub	sp, #280	; 0x118
 800422e:	af00      	add	r7, sp, #0
 8004230:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004234:	2300      	movs	r3, #0
 8004236:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800423a:	2300      	movs	r3, #0
 800423c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004248:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800424c:	2500      	movs	r5, #0
 800424e:	ea54 0305 	orrs.w	r3, r4, r5
 8004252:	d049      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800425a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800425e:	d02f      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004260:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004264:	d828      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004266:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800426a:	d01a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800426c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004270:	d822      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800427a:	d007      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800427c:	e01c      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800427e:	4bab      	ldr	r3, [pc, #684]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004282:	4aaa      	ldr	r2, [pc, #680]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004288:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800428a:	e01a      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800428c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004290:	3308      	adds	r3, #8
 8004292:	2102      	movs	r1, #2
 8004294:	4618      	mov	r0, r3
 8004296:	f001 fc25 	bl	8005ae4 <RCCEx_PLL2_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80042a0:	e00f      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042a6:	3328      	adds	r3, #40	; 0x28
 80042a8:	2102      	movs	r1, #2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f001 fccc 	bl	8005c48 <RCCEx_PLL3_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80042b6:	e004      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80042be:	e000      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80042c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10a      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80042ca:	4b98      	ldr	r3, [pc, #608]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80042d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042d8:	4a94      	ldr	r2, [pc, #592]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042da:	430b      	orrs	r3, r1
 80042dc:	6513      	str	r3, [r2, #80]	; 0x50
 80042de:	e003      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80042f4:	f04f 0900 	mov.w	r9, #0
 80042f8:	ea58 0309 	orrs.w	r3, r8, r9
 80042fc:	d047      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80042fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004304:	2b04      	cmp	r3, #4
 8004306:	d82a      	bhi.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004308:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800430a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430e:	bf00      	nop
 8004310:	08004325 	.word	0x08004325
 8004314:	08004333 	.word	0x08004333
 8004318:	08004349 	.word	0x08004349
 800431c:	08004367 	.word	0x08004367
 8004320:	08004367 	.word	0x08004367
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004324:	4b81      	ldr	r3, [pc, #516]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	4a80      	ldr	r2, [pc, #512]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800432a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800432e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004330:	e01a      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004336:	3308      	adds	r3, #8
 8004338:	2100      	movs	r1, #0
 800433a:	4618      	mov	r0, r3
 800433c:	f001 fbd2 	bl	8005ae4 <RCCEx_PLL2_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004346:	e00f      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800434c:	3328      	adds	r3, #40	; 0x28
 800434e:	2100      	movs	r1, #0
 8004350:	4618      	mov	r0, r3
 8004352:	f001 fc79 	bl	8005c48 <RCCEx_PLL3_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800435c:	e004      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004364:	e000      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004368:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004370:	4b6e      	ldr	r3, [pc, #440]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004374:	f023 0107 	bic.w	r1, r3, #7
 8004378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	4a6b      	ldr	r2, [pc, #428]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004380:	430b      	orrs	r3, r1
 8004382:	6513      	str	r3, [r2, #80]	; 0x50
 8004384:	e003      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004386:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800438a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800438e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800439a:	f04f 0b00 	mov.w	fp, #0
 800439e:	ea5a 030b 	orrs.w	r3, sl, fp
 80043a2:	d05b      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80043a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043ac:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80043b0:	d03b      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80043b2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80043b6:	d834      	bhi.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80043b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043bc:	d037      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80043be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043c2:	d82e      	bhi.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80043c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043c8:	d033      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80043ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043ce:	d828      	bhi.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80043d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d4:	d01a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80043d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043da:	d822      	bhi.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80043e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043e4:	d007      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80043e6:	e01c      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043e8:	4b50      	ldr	r3, [pc, #320]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	4a4f      	ldr	r2, [pc, #316]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043f4:	e01e      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043fa:	3308      	adds	r3, #8
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f001 fb70 	bl	8005ae4 <RCCEx_PLL2_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800440a:	e013      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800440c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004410:	3328      	adds	r3, #40	; 0x28
 8004412:	2100      	movs	r1, #0
 8004414:	4618      	mov	r0, r3
 8004416:	f001 fc17 	bl	8005c48 <RCCEx_PLL3_Config>
 800441a:	4603      	mov	r3, r0
 800441c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004420:	e008      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004428:	e004      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800442a:	bf00      	nop
 800442c:	e002      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800442e:	bf00      	nop
 8004430:	e000      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004432:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004434:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10b      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800443c:	4b3b      	ldr	r3, [pc, #236]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800443e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004440:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004448:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800444c:	4a37      	ldr	r2, [pc, #220]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800444e:	430b      	orrs	r3, r1
 8004450:	6593      	str	r3, [r2, #88]	; 0x58
 8004452:	e003      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004454:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004458:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800445c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004468:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800446c:	2300      	movs	r3, #0
 800446e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004472:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004476:	460b      	mov	r3, r1
 8004478:	4313      	orrs	r3, r2
 800447a:	d05d      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800447c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004480:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004484:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004488:	d03b      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800448a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800448e:	d834      	bhi.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004490:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004494:	d037      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004496:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800449a:	d82e      	bhi.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800449c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044a0:	d033      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80044a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044a6:	d828      	bhi.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80044a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044ac:	d01a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80044ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044b2:	d822      	bhi.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80044b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044bc:	d007      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80044be:	e01c      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c0:	4b1a      	ldr	r3, [pc, #104]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	4a19      	ldr	r2, [pc, #100]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044cc:	e01e      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044d2:	3308      	adds	r3, #8
 80044d4:	2100      	movs	r1, #0
 80044d6:	4618      	mov	r0, r3
 80044d8:	f001 fb04 	bl	8005ae4 <RCCEx_PLL2_Config>
 80044dc:	4603      	mov	r3, r0
 80044de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80044e2:	e013      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044e8:	3328      	adds	r3, #40	; 0x28
 80044ea:	2100      	movs	r1, #0
 80044ec:	4618      	mov	r0, r3
 80044ee:	f001 fbab 	bl	8005c48 <RCCEx_PLL3_Config>
 80044f2:	4603      	mov	r3, r0
 80044f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044f8:	e008      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004500:	e004      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004502:	bf00      	nop
 8004504:	e002      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004506:	bf00      	nop
 8004508:	e000      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800450a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800450c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10d      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004518:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800451c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004520:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004524:	4a01      	ldr	r2, [pc, #4]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004526:	430b      	orrs	r3, r1
 8004528:	6593      	str	r3, [r2, #88]	; 0x58
 800452a:	e005      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800452c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004530:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004534:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004544:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004548:	2300      	movs	r3, #0
 800454a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800454e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004552:	460b      	mov	r3, r1
 8004554:	4313      	orrs	r3, r2
 8004556:	d03a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800455c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455e:	2b30      	cmp	r3, #48	; 0x30
 8004560:	d01f      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004562:	2b30      	cmp	r3, #48	; 0x30
 8004564:	d819      	bhi.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004566:	2b20      	cmp	r3, #32
 8004568:	d00c      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800456a:	2b20      	cmp	r3, #32
 800456c:	d815      	bhi.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d019      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004572:	2b10      	cmp	r3, #16
 8004574:	d111      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004576:	4baa      	ldr	r3, [pc, #680]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	4aa9      	ldr	r2, [pc, #676]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800457c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004580:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004582:	e011      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004588:	3308      	adds	r3, #8
 800458a:	2102      	movs	r1, #2
 800458c:	4618      	mov	r0, r3
 800458e:	f001 faa9 	bl	8005ae4 <RCCEx_PLL2_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004598:	e006      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80045a0:	e002      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80045a2:	bf00      	nop
 80045a4:	e000      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80045a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10a      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80045b0:	4b9b      	ldr	r3, [pc, #620]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80045b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045be:	4a98      	ldr	r2, [pc, #608]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045c0:	430b      	orrs	r3, r1
 80045c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045c4:	e003      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80045ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80045da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045de:	2300      	movs	r3, #0
 80045e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80045e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80045e8:	460b      	mov	r3, r1
 80045ea:	4313      	orrs	r3, r2
 80045ec:	d051      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80045ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045f8:	d035      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80045fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045fe:	d82e      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004600:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004604:	d031      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004606:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800460a:	d828      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800460c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004610:	d01a      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004616:	d822      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800461c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004620:	d007      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004622:	e01c      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004624:	4b7e      	ldr	r3, [pc, #504]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	4a7d      	ldr	r2, [pc, #500]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800462a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800462e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004630:	e01c      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004636:	3308      	adds	r3, #8
 8004638:	2100      	movs	r1, #0
 800463a:	4618      	mov	r0, r3
 800463c:	f001 fa52 	bl	8005ae4 <RCCEx_PLL2_Config>
 8004640:	4603      	mov	r3, r0
 8004642:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004646:	e011      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800464c:	3328      	adds	r3, #40	; 0x28
 800464e:	2100      	movs	r1, #0
 8004650:	4618      	mov	r0, r3
 8004652:	f001 faf9 	bl	8005c48 <RCCEx_PLL3_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800465c:	e006      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004664:	e002      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004666:	bf00      	nop
 8004668:	e000      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800466a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800466c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004674:	4b6a      	ldr	r3, [pc, #424]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004678:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800467c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004682:	4a67      	ldr	r2, [pc, #412]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004684:	430b      	orrs	r3, r1
 8004686:	6513      	str	r3, [r2, #80]	; 0x50
 8004688:	e003      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800468e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800469e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046a2:	2300      	movs	r3, #0
 80046a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046a8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4313      	orrs	r3, r2
 80046b0:	d053      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80046b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046bc:	d033      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80046be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c2:	d82c      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80046c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046c8:	d02f      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80046ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046ce:	d826      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80046d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046d4:	d02b      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80046d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046da:	d820      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80046dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046e0:	d012      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80046e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046e6:	d81a      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d022      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80046ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f0:	d115      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046f6:	3308      	adds	r3, #8
 80046f8:	2101      	movs	r1, #1
 80046fa:	4618      	mov	r0, r3
 80046fc:	f001 f9f2 	bl	8005ae4 <RCCEx_PLL2_Config>
 8004700:	4603      	mov	r3, r0
 8004702:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004706:	e015      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800470c:	3328      	adds	r3, #40	; 0x28
 800470e:	2101      	movs	r1, #1
 8004710:	4618      	mov	r0, r3
 8004712:	f001 fa99 	bl	8005c48 <RCCEx_PLL3_Config>
 8004716:	4603      	mov	r3, r0
 8004718:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800471c:	e00a      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004724:	e006      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004726:	bf00      	nop
 8004728:	e004      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800472a:	bf00      	nop
 800472c:	e002      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800472e:	bf00      	nop
 8004730:	e000      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004734:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800473c:	4b38      	ldr	r3, [pc, #224]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800473e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004740:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474a:	4a35      	ldr	r2, [pc, #212]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800474c:	430b      	orrs	r3, r1
 800474e:	6513      	str	r3, [r2, #80]	; 0x50
 8004750:	e003      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004752:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004756:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800475a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004766:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800476a:	2300      	movs	r3, #0
 800476c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004770:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004774:	460b      	mov	r3, r1
 8004776:	4313      	orrs	r3, r2
 8004778:	d058      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800477a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800477e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004786:	d033      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800478c:	d82c      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004792:	d02f      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004798:	d826      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800479a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800479e:	d02b      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80047a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047a4:	d820      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80047a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047aa:	d012      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80047ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047b0:	d81a      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d022      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80047b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ba:	d115      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047c0:	3308      	adds	r3, #8
 80047c2:	2101      	movs	r1, #1
 80047c4:	4618      	mov	r0, r3
 80047c6:	f001 f98d 	bl	8005ae4 <RCCEx_PLL2_Config>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80047d0:	e015      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047d6:	3328      	adds	r3, #40	; 0x28
 80047d8:	2101      	movs	r1, #1
 80047da:	4618      	mov	r0, r3
 80047dc:	f001 fa34 	bl	8005c48 <RCCEx_PLL3_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80047e6:	e00a      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80047ee:	e006      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80047f0:	bf00      	nop
 80047f2:	e004      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80047f4:	bf00      	nop
 80047f6:	e002      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80047f8:	bf00      	nop
 80047fa:	e000      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80047fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10e      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004806:	4b06      	ldr	r3, [pc, #24]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800480e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004812:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004816:	4a02      	ldr	r2, [pc, #8]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004818:	430b      	orrs	r3, r1
 800481a:	6593      	str	r3, [r2, #88]	; 0x58
 800481c:	e006      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800481e:	bf00      	nop
 8004820:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004824:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004828:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800482c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004838:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800483c:	2300      	movs	r3, #0
 800483e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004842:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004846:	460b      	mov	r3, r1
 8004848:	4313      	orrs	r3, r2
 800484a:	d037      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800484c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004856:	d00e      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800485c:	d816      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d018      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004862:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004866:	d111      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004868:	4bc4      	ldr	r3, [pc, #784]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	4ac3      	ldr	r2, [pc, #780]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800486e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004874:	e00f      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800487a:	3308      	adds	r3, #8
 800487c:	2101      	movs	r1, #1
 800487e:	4618      	mov	r0, r3
 8004880:	f001 f930 	bl	8005ae4 <RCCEx_PLL2_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800488a:	e004      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004892:	e000      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004896:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800489e:	4bb7      	ldr	r3, [pc, #732]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80048a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ac:	4ab3      	ldr	r2, [pc, #716]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048ae:	430b      	orrs	r3, r1
 80048b0:	6513      	str	r3, [r2, #80]	; 0x50
 80048b2:	e003      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80048bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80048c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048cc:	2300      	movs	r3, #0
 80048ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80048d6:	460b      	mov	r3, r1
 80048d8:	4313      	orrs	r3, r2
 80048da:	d039      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80048dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d81c      	bhi.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80048e6:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	08004929 	.word	0x08004929
 80048f0:	080048fd 	.word	0x080048fd
 80048f4:	0800490b 	.word	0x0800490b
 80048f8:	08004929 	.word	0x08004929
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048fc:	4b9f      	ldr	r3, [pc, #636]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	4a9e      	ldr	r2, [pc, #632]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004906:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004908:	e00f      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800490a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800490e:	3308      	adds	r3, #8
 8004910:	2102      	movs	r1, #2
 8004912:	4618      	mov	r0, r3
 8004914:	f001 f8e6 	bl	8005ae4 <RCCEx_PLL2_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800491e:	e004      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004926:	e000      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800492a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10a      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004932:	4b92      	ldr	r3, [pc, #584]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004936:	f023 0103 	bic.w	r1, r3, #3
 800493a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800493e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004940:	4a8e      	ldr	r2, [pc, #568]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004942:	430b      	orrs	r3, r1
 8004944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004946:	e003      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004948:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800494c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800495c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004960:	2300      	movs	r3, #0
 8004962:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004966:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800496a:	460b      	mov	r3, r1
 800496c:	4313      	orrs	r3, r2
 800496e:	f000 8099 	beq.w	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004972:	4b83      	ldr	r3, [pc, #524]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a82      	ldr	r2, [pc, #520]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800497e:	f7fc fc99 	bl	80012b4 <HAL_GetTick>
 8004982:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004986:	e00b      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004988:	f7fc fc94 	bl	80012b4 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b64      	cmp	r3, #100	; 0x64
 8004996:	d903      	bls.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800499e:	e005      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049a0:	4b77      	ldr	r3, [pc, #476]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0ed      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80049ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d173      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80049b4:	4b71      	ldr	r3, [pc, #452]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049c0:	4053      	eors	r3, r2
 80049c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d015      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049ca:	4b6c      	ldr	r3, [pc, #432]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049d6:	4b69      	ldr	r3, [pc, #420]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	4a68      	ldr	r2, [pc, #416]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049e2:	4b66      	ldr	r3, [pc, #408]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	4a65      	ldr	r2, [pc, #404]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80049ee:	4a63      	ldr	r2, [pc, #396]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80049f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a02:	d118      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fc fc56 	bl	80012b4 <HAL_GetTick>
 8004a08:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a0c:	e00d      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0e:	f7fc fc51 	bl	80012b4 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a18:	1ad2      	subs	r2, r2, r3
 8004a1a:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d903      	bls.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8004a28:	e005      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a2a:	4b54      	ldr	r3, [pc, #336]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0eb      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004a36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d129      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a4e:	d10e      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004a50:	4b4a      	ldr	r3, [pc, #296]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a60:	091a      	lsrs	r2, r3, #4
 8004a62:	4b48      	ldr	r3, [pc, #288]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	4a45      	ldr	r2, [pc, #276]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	6113      	str	r3, [r2, #16]
 8004a6c:	e005      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004a6e:	4b43      	ldr	r3, [pc, #268]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	4a42      	ldr	r2, [pc, #264]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a78:	6113      	str	r3, [r2, #16]
 8004a7a:	4b40      	ldr	r3, [pc, #256]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a7c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a8a:	4a3c      	ldr	r2, [pc, #240]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a90:	e008      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a96:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8004a9a:	e003      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004aa0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	f002 0301 	and.w	r3, r2, #1
 8004ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004aba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f000 808f 	beq.w	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004acc:	2b28      	cmp	r3, #40	; 0x28
 8004ace:	d871      	bhi.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004ad0:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad6:	bf00      	nop
 8004ad8:	08004bbd 	.word	0x08004bbd
 8004adc:	08004bb5 	.word	0x08004bb5
 8004ae0:	08004bb5 	.word	0x08004bb5
 8004ae4:	08004bb5 	.word	0x08004bb5
 8004ae8:	08004bb5 	.word	0x08004bb5
 8004aec:	08004bb5 	.word	0x08004bb5
 8004af0:	08004bb5 	.word	0x08004bb5
 8004af4:	08004bb5 	.word	0x08004bb5
 8004af8:	08004b89 	.word	0x08004b89
 8004afc:	08004bb5 	.word	0x08004bb5
 8004b00:	08004bb5 	.word	0x08004bb5
 8004b04:	08004bb5 	.word	0x08004bb5
 8004b08:	08004bb5 	.word	0x08004bb5
 8004b0c:	08004bb5 	.word	0x08004bb5
 8004b10:	08004bb5 	.word	0x08004bb5
 8004b14:	08004bb5 	.word	0x08004bb5
 8004b18:	08004b9f 	.word	0x08004b9f
 8004b1c:	08004bb5 	.word	0x08004bb5
 8004b20:	08004bb5 	.word	0x08004bb5
 8004b24:	08004bb5 	.word	0x08004bb5
 8004b28:	08004bb5 	.word	0x08004bb5
 8004b2c:	08004bb5 	.word	0x08004bb5
 8004b30:	08004bb5 	.word	0x08004bb5
 8004b34:	08004bb5 	.word	0x08004bb5
 8004b38:	08004bbd 	.word	0x08004bbd
 8004b3c:	08004bb5 	.word	0x08004bb5
 8004b40:	08004bb5 	.word	0x08004bb5
 8004b44:	08004bb5 	.word	0x08004bb5
 8004b48:	08004bb5 	.word	0x08004bb5
 8004b4c:	08004bb5 	.word	0x08004bb5
 8004b50:	08004bb5 	.word	0x08004bb5
 8004b54:	08004bb5 	.word	0x08004bb5
 8004b58:	08004bbd 	.word	0x08004bbd
 8004b5c:	08004bb5 	.word	0x08004bb5
 8004b60:	08004bb5 	.word	0x08004bb5
 8004b64:	08004bb5 	.word	0x08004bb5
 8004b68:	08004bb5 	.word	0x08004bb5
 8004b6c:	08004bb5 	.word	0x08004bb5
 8004b70:	08004bb5 	.word	0x08004bb5
 8004b74:	08004bb5 	.word	0x08004bb5
 8004b78:	08004bbd 	.word	0x08004bbd
 8004b7c:	58024400 	.word	0x58024400
 8004b80:	58024800 	.word	0x58024800
 8004b84:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	2101      	movs	r1, #1
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 ffa7 	bl	8005ae4 <RCCEx_PLL2_Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004b9c:	e00f      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ba2:	3328      	adds	r3, #40	; 0x28
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f001 f84e 	bl	8005c48 <RCCEx_PLL3_Config>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004bb2:	e004      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004bba:	e000      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10a      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004bc6:	4bbf      	ldr	r3, [pc, #764]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bd4:	4abb      	ldr	r2, [pc, #748]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	6553      	str	r3, [r2, #84]	; 0x54
 8004bda:	e003      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004be0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	f002 0302 	and.w	r3, r2, #2
 8004bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bfa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4313      	orrs	r3, r2
 8004c02:	d041      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c0a:	2b05      	cmp	r3, #5
 8004c0c:	d824      	bhi.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004c0e:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c14:	08004c61 	.word	0x08004c61
 8004c18:	08004c2d 	.word	0x08004c2d
 8004c1c:	08004c43 	.word	0x08004c43
 8004c20:	08004c61 	.word	0x08004c61
 8004c24:	08004c61 	.word	0x08004c61
 8004c28:	08004c61 	.word	0x08004c61
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c30:	3308      	adds	r3, #8
 8004c32:	2101      	movs	r1, #1
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 ff55 	bl	8005ae4 <RCCEx_PLL2_Config>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c40:	e00f      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c46:	3328      	adds	r3, #40	; 0x28
 8004c48:	2101      	movs	r1, #1
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fffc 	bl	8005c48 <RCCEx_PLL3_Config>
 8004c50:	4603      	mov	r3, r0
 8004c52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c56:	e004      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c5e:	e000      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10a      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004c6a:	4b96      	ldr	r3, [pc, #600]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6e:	f023 0107 	bic.w	r1, r3, #7
 8004c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c78:	4a92      	ldr	r2, [pc, #584]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	6553      	str	r3, [r2, #84]	; 0x54
 8004c7e:	e003      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	f002 0304 	and.w	r3, r2, #4
 8004c94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c9e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	d044      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb0:	2b05      	cmp	r3, #5
 8004cb2:	d825      	bhi.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004cb4:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004d09 	.word	0x08004d09
 8004cc0:	08004cd5 	.word	0x08004cd5
 8004cc4:	08004ceb 	.word	0x08004ceb
 8004cc8:	08004d09 	.word	0x08004d09
 8004ccc:	08004d09 	.word	0x08004d09
 8004cd0:	08004d09 	.word	0x08004d09
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cd8:	3308      	adds	r3, #8
 8004cda:	2101      	movs	r1, #1
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 ff01 	bl	8005ae4 <RCCEx_PLL2_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ce8:	e00f      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cee:	3328      	adds	r3, #40	; 0x28
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 ffa8 	bl	8005c48 <RCCEx_PLL3_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004cfe:	e004      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004d06:	e000      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10b      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d12:	4b6c      	ldr	r3, [pc, #432]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	f023 0107 	bic.w	r1, r3, #7
 8004d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d22:	4a68      	ldr	r2, [pc, #416]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d24:	430b      	orrs	r3, r1
 8004d26:	6593      	str	r3, [r2, #88]	; 0x58
 8004d28:	e003      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d2e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3a:	f002 0320 	and.w	r3, r2, #32
 8004d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d42:	2300      	movs	r3, #0
 8004d44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004d48:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	d055      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d5e:	d033      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d64:	d82c      	bhi.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6a:	d02f      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d70:	d826      	bhi.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d76:	d02b      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004d78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d7c:	d820      	bhi.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d82:	d012      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d88:	d81a      	bhi.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d022      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004d8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d92:	d115      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d98:	3308      	adds	r3, #8
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fea1 	bl	8005ae4 <RCCEx_PLL2_Config>
 8004da2:	4603      	mov	r3, r0
 8004da4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004da8:	e015      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dae:	3328      	adds	r3, #40	; 0x28
 8004db0:	2102      	movs	r1, #2
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 ff48 	bl	8005c48 <RCCEx_PLL3_Config>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004dbe:	e00a      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004dc6:	e006      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004dc8:	bf00      	nop
 8004dca:	e004      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004dcc:	bf00      	nop
 8004dce:	e002      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004dd0:	bf00      	nop
 8004dd2:	e000      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10b      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dde:	4b39      	ldr	r3, [pc, #228]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dee:	4a35      	ldr	r2, [pc, #212]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004df0:	430b      	orrs	r3, r1
 8004df2:	6553      	str	r3, [r2, #84]	; 0x54
 8004df4:	e003      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004dfa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e06:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004e0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e14:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	d058      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e26:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e2a:	d033      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004e2c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e30:	d82c      	bhi.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e36:	d02f      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e3c:	d826      	bhi.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004e3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e42:	d02b      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004e44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e48:	d820      	bhi.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e4e:	d012      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e54:	d81a      	bhi.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d022      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e5e:	d115      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e64:	3308      	adds	r3, #8
 8004e66:	2100      	movs	r1, #0
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fe3b 	bl	8005ae4 <RCCEx_PLL2_Config>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004e74:	e015      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e7a:	3328      	adds	r3, #40	; 0x28
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fee2 	bl	8005c48 <RCCEx_PLL3_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004e8a:	e00a      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004e92:	e006      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004e94:	bf00      	nop
 8004e96:	e004      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004e98:	bf00      	nop
 8004e9a:	e002      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004e9c:	bf00      	nop
 8004e9e:	e000      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ea2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10e      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004eaa:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eae:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eba:	4a02      	ldr	r2, [pc, #8]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8004ec0:	e006      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004ec2:	bf00      	nop
 8004ec4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ecc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004edc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ee6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004eea:	460b      	mov	r3, r1
 8004eec:	4313      	orrs	r3, r2
 8004eee:	d055      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ef8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004efc:	d033      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004efe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f02:	d82c      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f08:	d02f      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f0e:	d826      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004f10:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f14:	d02b      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004f16:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f1a:	d820      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f20:	d012      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f26:	d81a      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d022      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f30:	d115      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f36:	3308      	adds	r3, #8
 8004f38:	2100      	movs	r1, #0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fdd2 	bl	8005ae4 <RCCEx_PLL2_Config>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f46:	e015      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f4c:	3328      	adds	r3, #40	; 0x28
 8004f4e:	2102      	movs	r1, #2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fe79 	bl	8005c48 <RCCEx_PLL3_Config>
 8004f56:	4603      	mov	r3, r0
 8004f58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f5c:	e00a      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004f64:	e006      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004f66:	bf00      	nop
 8004f68:	e004      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004f6a:	bf00      	nop
 8004f6c:	e002      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004f6e:	bf00      	nop
 8004f70:	e000      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10b      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004f7c:	4ba0      	ldr	r3, [pc, #640]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f80:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f8c:	4a9c      	ldr	r2, [pc, #624]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	6593      	str	r3, [r2, #88]	; 0x58
 8004f92:	e003      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	f002 0308 	and.w	r3, r2, #8
 8004fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fac:	2300      	movs	r3, #0
 8004fae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004fb2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	d01e      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc8:	d10c      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fce:	3328      	adds	r3, #40	; 0x28
 8004fd0:	2102      	movs	r1, #2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fe38 	bl	8005c48 <RCCEx_PLL3_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004fe4:	4b86      	ldr	r3, [pc, #536]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff4:	4a82      	ldr	r2, [pc, #520]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	f002 0310 	and.w	r3, r2, #16
 8005006:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800500a:	2300      	movs	r3, #0
 800500c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005010:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005014:	460b      	mov	r3, r1
 8005016:	4313      	orrs	r3, r2
 8005018:	d01e      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800501a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800501e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005026:	d10c      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800502c:	3328      	adds	r3, #40	; 0x28
 800502e:	2102      	movs	r1, #2
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fe09 	bl	8005c48 <RCCEx_PLL3_Config>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005042:	4b6f      	ldr	r3, [pc, #444]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005046:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800504a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800504e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005052:	4a6b      	ldr	r2, [pc, #428]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005054:	430b      	orrs	r3, r1
 8005056:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005060:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005064:	67bb      	str	r3, [r7, #120]	; 0x78
 8005066:	2300      	movs	r3, #0
 8005068:	67fb      	str	r3, [r7, #124]	; 0x7c
 800506a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800506e:	460b      	mov	r3, r1
 8005070:	4313      	orrs	r3, r2
 8005072:	d03e      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005078:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800507c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005080:	d022      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005082:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005086:	d81b      	bhi.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800508c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005090:	d00b      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005092:	e015      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005098:	3308      	adds	r3, #8
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fd21 	bl	8005ae4 <RCCEx_PLL2_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80050a8:	e00f      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ae:	3328      	adds	r3, #40	; 0x28
 80050b0:	2102      	movs	r1, #2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fdc8 	bl	8005c48 <RCCEx_PLL3_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80050be:	e004      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80050c6:	e000      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80050c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10b      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050d2:	4b4b      	ldr	r3, [pc, #300]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80050da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050e2:	4a47      	ldr	r2, [pc, #284]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050e4:	430b      	orrs	r3, r1
 80050e6:	6593      	str	r3, [r2, #88]	; 0x58
 80050e8:	e003      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80050fe:	673b      	str	r3, [r7, #112]	; 0x70
 8005100:	2300      	movs	r3, #0
 8005102:	677b      	str	r3, [r7, #116]	; 0x74
 8005104:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005108:	460b      	mov	r3, r1
 800510a:	4313      	orrs	r3, r2
 800510c:	d03b      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800510e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005116:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800511a:	d01f      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800511c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005120:	d818      	bhi.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005126:	d003      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005128:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800512c:	d007      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800512e:	e011      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005130:	4b33      	ldr	r3, [pc, #204]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	4a32      	ldr	r2, [pc, #200]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800513a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800513c:	e00f      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800513e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005142:	3328      	adds	r3, #40	; 0x28
 8005144:	2101      	movs	r1, #1
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fd7e 	bl	8005c48 <RCCEx_PLL3_Config>
 800514c:	4603      	mov	r3, r0
 800514e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005152:	e004      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800515a:	e000      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800515c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800515e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10b      	bne.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005166:	4b26      	ldr	r3, [pc, #152]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800516e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005176:	4a22      	ldr	r2, [pc, #136]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005178:	430b      	orrs	r3, r1
 800517a:	6553      	str	r3, [r2, #84]	; 0x54
 800517c:	e003      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005182:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005192:	66bb      	str	r3, [r7, #104]	; 0x68
 8005194:	2300      	movs	r3, #0
 8005196:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005198:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800519c:	460b      	mov	r3, r1
 800519e:	4313      	orrs	r3, r2
 80051a0:	d034      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80051a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80051ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b0:	d007      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80051b2:	e011      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b4:	4b12      	ldr	r3, [pc, #72]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	4a11      	ldr	r2, [pc, #68]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80051c0:	e00e      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c6:	3308      	adds	r3, #8
 80051c8:	2102      	movs	r1, #2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fc8a 	bl	8005ae4 <RCCEx_PLL2_Config>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80051d6:	e003      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80051de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10d      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f6:	4a02      	ldr	r2, [pc, #8]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051f8:	430b      	orrs	r3, r1
 80051fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051fc:	e006      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80051fe:	bf00      	nop
 8005200:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005204:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005208:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800520c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005218:	663b      	str	r3, [r7, #96]	; 0x60
 800521a:	2300      	movs	r3, #0
 800521c:	667b      	str	r3, [r7, #100]	; 0x64
 800521e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005222:	460b      	mov	r3, r1
 8005224:	4313      	orrs	r3, r2
 8005226:	d00c      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800522c:	3328      	adds	r3, #40	; 0x28
 800522e:	2102      	movs	r1, #2
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fd09 	bl	8005c48 <RCCEx_PLL3_Config>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800524e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005250:	2300      	movs	r3, #0
 8005252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005254:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005258:	460b      	mov	r3, r1
 800525a:	4313      	orrs	r3, r2
 800525c:	d036      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800525e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005264:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005268:	d018      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800526a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800526e:	d811      	bhi.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005274:	d014      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800527a:	d80b      	bhi.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800527c:	2b00      	cmp	r3, #0
 800527e:	d011      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005284:	d106      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005286:	4bb7      	ldr	r3, [pc, #732]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	4ab6      	ldr	r2, [pc, #728]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800528c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005290:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005292:	e008      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800529a:	e004      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800529c:	bf00      	nop
 800529e:	e002      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80052a0:	bf00      	nop
 80052a2:	e000      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80052a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10a      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052ae:	4bad      	ldr	r3, [pc, #692]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052bc:	4aa9      	ldr	r2, [pc, #676]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052be:	430b      	orrs	r3, r1
 80052c0:	6553      	str	r3, [r2, #84]	; 0x54
 80052c2:	e003      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80052d8:	653b      	str	r3, [r7, #80]	; 0x50
 80052da:	2300      	movs	r3, #0
 80052dc:	657b      	str	r3, [r7, #84]	; 0x54
 80052de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80052e2:	460b      	mov	r3, r1
 80052e4:	4313      	orrs	r3, r2
 80052e6:	d009      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052e8:	4b9e      	ldr	r3, [pc, #632]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80052f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f6:	4a9b      	ldr	r2, [pc, #620]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052f8:	430b      	orrs	r3, r1
 80052fa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005308:	64bb      	str	r3, [r7, #72]	; 0x48
 800530a:	2300      	movs	r3, #0
 800530c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800530e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005312:	460b      	mov	r3, r1
 8005314:	4313      	orrs	r3, r2
 8005316:	d009      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005318:	4b92      	ldr	r3, [pc, #584]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800531a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800531c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005326:	4a8f      	ldr	r2, [pc, #572]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005328:	430b      	orrs	r3, r1
 800532a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800532c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005334:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005338:	643b      	str	r3, [r7, #64]	; 0x40
 800533a:	2300      	movs	r3, #0
 800533c:	647b      	str	r3, [r7, #68]	; 0x44
 800533e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005342:	460b      	mov	r3, r1
 8005344:	4313      	orrs	r3, r2
 8005346:	d00e      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005348:	4b86      	ldr	r3, [pc, #536]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	4a85      	ldr	r2, [pc, #532]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800534e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005352:	6113      	str	r3, [r2, #16]
 8005354:	4b83      	ldr	r3, [pc, #524]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005356:	6919      	ldr	r1, [r3, #16]
 8005358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800535c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005360:	4a80      	ldr	r2, [pc, #512]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005362:	430b      	orrs	r3, r1
 8005364:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005372:	63bb      	str	r3, [r7, #56]	; 0x38
 8005374:	2300      	movs	r3, #0
 8005376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005378:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800537c:	460b      	mov	r3, r1
 800537e:	4313      	orrs	r3, r2
 8005380:	d009      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005382:	4b78      	ldr	r3, [pc, #480]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005386:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800538a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800538e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005390:	4a74      	ldr	r2, [pc, #464]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005392:	430b      	orrs	r3, r1
 8005394:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80053a2:	633b      	str	r3, [r7, #48]	; 0x30
 80053a4:	2300      	movs	r3, #0
 80053a6:	637b      	str	r3, [r7, #52]	; 0x34
 80053a8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80053ac:	460b      	mov	r3, r1
 80053ae:	4313      	orrs	r3, r2
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053b2:	4b6c      	ldr	r3, [pc, #432]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80053ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c2:	4a68      	ldr	r2, [pc, #416]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80053c4:	430b      	orrs	r3, r1
 80053c6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80053c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	2100      	movs	r1, #0
 80053d2:	62b9      	str	r1, [r7, #40]	; 0x28
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053da:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80053de:	460b      	mov	r3, r1
 80053e0:	4313      	orrs	r3, r2
 80053e2:	d011      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e8:	3308      	adds	r3, #8
 80053ea:	2100      	movs	r1, #0
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fb79 	bl	8005ae4 <RCCEx_PLL2_Config>
 80053f2:	4603      	mov	r3, r0
 80053f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80053f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005400:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005404:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	2100      	movs	r1, #0
 8005412:	6239      	str	r1, [r7, #32]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
 800541a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800541e:	460b      	mov	r3, r1
 8005420:	4313      	orrs	r3, r2
 8005422:	d011      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005428:	3308      	adds	r3, #8
 800542a:	2101      	movs	r1, #1
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fb59 	bl	8005ae4 <RCCEx_PLL2_Config>
 8005432:	4603      	mov	r3, r0
 8005434:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005438:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005440:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005444:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	2100      	movs	r1, #0
 8005452:	61b9      	str	r1, [r7, #24]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800545e:	460b      	mov	r3, r1
 8005460:	4313      	orrs	r3, r2
 8005462:	d011      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005468:	3308      	adds	r3, #8
 800546a:	2102      	movs	r1, #2
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fb39 	bl	8005ae4 <RCCEx_PLL2_Config>
 8005472:	4603      	mov	r3, r0
 8005474:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005478:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005480:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005484:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	2100      	movs	r1, #0
 8005492:	6139      	str	r1, [r7, #16]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800549e:	460b      	mov	r3, r1
 80054a0:	4313      	orrs	r3, r2
 80054a2:	d011      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a8:	3328      	adds	r3, #40	; 0x28
 80054aa:	2100      	movs	r1, #0
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fbcb 	bl	8005c48 <RCCEx_PLL3_Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80054b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80054c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	2100      	movs	r1, #0
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80054de:	460b      	mov	r3, r1
 80054e0:	4313      	orrs	r3, r2
 80054e2:	d011      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e8:	3328      	adds	r3, #40	; 0x28
 80054ea:	2101      	movs	r1, #1
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fbab 	bl	8005c48 <RCCEx_PLL3_Config>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80054f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005500:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005504:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	2100      	movs	r1, #0
 8005512:	6039      	str	r1, [r7, #0]
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	607b      	str	r3, [r7, #4]
 800551a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800551e:	460b      	mov	r3, r1
 8005520:	4313      	orrs	r3, r2
 8005522:	d011      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005528:	3328      	adds	r3, #40	; 0x28
 800552a:	2102      	movs	r1, #2
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fb8b 	bl	8005c48 <RCCEx_PLL3_Config>
 8005532:	4603      	mov	r3, r0
 8005534:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005538:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005540:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005544:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8005548:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005550:	2300      	movs	r3, #0
 8005552:	e000      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
}
 8005556:	4618      	mov	r0, r3
 8005558:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800555c:	46bd      	mov	sp, r7
 800555e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005562:	bf00      	nop
 8005564:	58024400 	.word	0x58024400

08005568 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800556c:	f7fe fdbe 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b06      	ldr	r3, [pc, #24]	; (800558c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	091b      	lsrs	r3, r3, #4
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	4904      	ldr	r1, [pc, #16]	; (8005590 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005588:	4618      	mov	r0, r3
 800558a:	bd80      	pop	{r7, pc}
 800558c:	58024400 	.word	0x58024400
 8005590:	08012af4 	.word	0x08012af4

08005594 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005594:	b480      	push	{r7}
 8005596:	b089      	sub	sp, #36	; 0x24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800559c:	4ba1      	ldr	r3, [pc, #644]	; (8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80055a6:	4b9f      	ldr	r3, [pc, #636]	; (8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	0b1b      	lsrs	r3, r3, #12
 80055ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80055b2:	4b9c      	ldr	r3, [pc, #624]	; (8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	091b      	lsrs	r3, r3, #4
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80055be:	4b99      	ldr	r3, [pc, #612]	; (8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c2:	08db      	lsrs	r3, r3, #3
 80055c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	ee07 3a90 	vmov	s15, r3
 80055d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 8111 	beq.w	8005804 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	f000 8083 	beq.w	80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	f200 80a1 	bhi.w	8005734 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d056      	beq.n	80056ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80055fe:	e099      	b.n	8005734 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005600:	4b88      	ldr	r3, [pc, #544]	; (8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0320 	and.w	r3, r3, #32
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02d      	beq.n	8005668 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800560c:	4b85      	ldr	r3, [pc, #532]	; (8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	08db      	lsrs	r3, r3, #3
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	4a84      	ldr	r2, [pc, #528]	; (8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005618:	fa22 f303 	lsr.w	r3, r2, r3
 800561c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	ee07 3a90 	vmov	s15, r3
 8005624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005636:	4b7b      	ldr	r3, [pc, #492]	; (8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005646:	ed97 6a03 	vldr	s12, [r7, #12]
 800564a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800582c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800564e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800565a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005662:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005666:	e087      	b.n	8005778 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005830 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800567a:	4b6a      	ldr	r3, [pc, #424]	; (8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800568a:	ed97 6a03 	vldr	s12, [r7, #12]
 800568e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800582c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800569a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800569e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056aa:	e065      	b.n	8005778 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	ee07 3a90 	vmov	s15, r3
 80056b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80056ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056be:	4b59      	ldr	r3, [pc, #356]	; (8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80056d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800582c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056ee:	e043      	b.n	8005778 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	ee07 3a90 	vmov	s15, r3
 80056f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80056fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005702:	4b48      	ldr	r3, [pc, #288]	; (8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005712:	ed97 6a03 	vldr	s12, [r7, #12]
 8005716:	eddf 5a45 	vldr	s11, [pc, #276]	; 800582c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800571a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005732:	e021      	b.n	8005778 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005746:	4b37      	ldr	r3, [pc, #220]	; (8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005756:	ed97 6a03 	vldr	s12, [r7, #12]
 800575a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800582c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800575e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800576a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005776:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005778:	4b2a      	ldr	r3, [pc, #168]	; (8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	0a5b      	lsrs	r3, r3, #9
 800577e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800578e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005792:	edd7 6a07 	vldr	s13, [r7, #28]
 8005796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800579a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800579e:	ee17 2a90 	vmov	r2, s15
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80057a6:	4b1f      	ldr	r3, [pc, #124]	; (8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057aa:	0c1b      	lsrs	r3, r3, #16
 80057ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b0:	ee07 3a90 	vmov	s15, r3
 80057b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057cc:	ee17 2a90 	vmov	r2, s15
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80057d4:	4b13      	ldr	r3, [pc, #76]	; (8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	0e1b      	lsrs	r3, r3, #24
 80057da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80057f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057fa:	ee17 2a90 	vmov	r2, s15
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005802:	e008      	b.n	8005816 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	609a      	str	r2, [r3, #8]
}
 8005816:	bf00      	nop
 8005818:	3724      	adds	r7, #36	; 0x24
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	58024400 	.word	0x58024400
 8005828:	03d09000 	.word	0x03d09000
 800582c:	46000000 	.word	0x46000000
 8005830:	4c742400 	.word	0x4c742400
 8005834:	4a742400 	.word	0x4a742400
 8005838:	4af42400 	.word	0x4af42400

0800583c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800583c:	b480      	push	{r7}
 800583e:	b089      	sub	sp, #36	; 0x24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005844:	4ba1      	ldr	r3, [pc, #644]	; (8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005848:	f003 0303 	and.w	r3, r3, #3
 800584c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800584e:	4b9f      	ldr	r3, [pc, #636]	; (8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005852:	0d1b      	lsrs	r3, r3, #20
 8005854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005858:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800585a:	4b9c      	ldr	r3, [pc, #624]	; (8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585e:	0a1b      	lsrs	r3, r3, #8
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005866:	4b99      	ldr	r3, [pc, #612]	; (8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586a:	08db      	lsrs	r3, r3, #3
 800586c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	fb02 f303 	mul.w	r3, r2, r3
 8005876:	ee07 3a90 	vmov	s15, r3
 800587a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 8111 	beq.w	8005aac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	2b02      	cmp	r3, #2
 800588e:	f000 8083 	beq.w	8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b02      	cmp	r3, #2
 8005896:	f200 80a1 	bhi.w	80059dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d056      	beq.n	8005954 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80058a6:	e099      	b.n	80059dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058a8:	4b88      	ldr	r3, [pc, #544]	; (8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d02d      	beq.n	8005910 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058b4:	4b85      	ldr	r3, [pc, #532]	; (8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	08db      	lsrs	r3, r3, #3
 80058ba:	f003 0303 	and.w	r3, r3, #3
 80058be:	4a84      	ldr	r2, [pc, #528]	; (8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80058c0:	fa22 f303 	lsr.w	r3, r2, r3
 80058c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	ee07 3a90 	vmov	s15, r3
 80058cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058de:	4b7b      	ldr	r3, [pc, #492]	; (8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e6:	ee07 3a90 	vmov	s15, r3
 80058ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80058f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800590e:	e087      	b.n	8005a20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800591e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005922:	4b6a      	ldr	r3, [pc, #424]	; (8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592a:	ee07 3a90 	vmov	s15, r3
 800592e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005932:	ed97 6a03 	vldr	s12, [r7, #12]
 8005936:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800593a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800593e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800594e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005952:	e065      	b.n	8005a20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	ee07 3a90 	vmov	s15, r3
 800595a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005adc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005966:	4b59      	ldr	r3, [pc, #356]	; (8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005976:	ed97 6a03 	vldr	s12, [r7, #12]
 800597a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800597e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800598a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800598e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005996:	e043      	b.n	8005a20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80059a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059aa:	4b48      	ldr	r3, [pc, #288]	; (8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80059be:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059da:	e021      	b.n	8005a20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005adc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80059ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ee:	4b37      	ldr	r3, [pc, #220]	; (8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f6:	ee07 3a90 	vmov	s15, r3
 80059fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005a20:	4b2a      	ldr	r3, [pc, #168]	; (8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	0a5b      	lsrs	r3, r3, #9
 8005a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a46:	ee17 2a90 	vmov	r2, s15
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005a4e:	4b1f      	ldr	r3, [pc, #124]	; (8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	0c1b      	lsrs	r3, r3, #16
 8005a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a58:	ee07 3a90 	vmov	s15, r3
 8005a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a68:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a74:	ee17 2a90 	vmov	r2, s15
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005a7c:	4b13      	ldr	r3, [pc, #76]	; (8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	0e1b      	lsrs	r3, r3, #24
 8005a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a86:	ee07 3a90 	vmov	s15, r3
 8005a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aa2:	ee17 2a90 	vmov	r2, s15
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005aaa:	e008      	b.n	8005abe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	609a      	str	r2, [r3, #8]
}
 8005abe:	bf00      	nop
 8005ac0:	3724      	adds	r7, #36	; 0x24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	58024400 	.word	0x58024400
 8005ad0:	03d09000 	.word	0x03d09000
 8005ad4:	46000000 	.word	0x46000000
 8005ad8:	4c742400 	.word	0x4c742400
 8005adc:	4a742400 	.word	0x4a742400
 8005ae0:	4af42400 	.word	0x4af42400

08005ae4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005af2:	4b53      	ldr	r3, [pc, #332]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d101      	bne.n	8005b02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e099      	b.n	8005c36 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005b02:	4b4f      	ldr	r3, [pc, #316]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a4e      	ldr	r2, [pc, #312]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005b08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b0e:	f7fb fbd1 	bl	80012b4 <HAL_GetTick>
 8005b12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b14:	e008      	b.n	8005b28 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b16:	f7fb fbcd 	bl	80012b4 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d901      	bls.n	8005b28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e086      	b.n	8005c36 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b28:	4b45      	ldr	r3, [pc, #276]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1f0      	bne.n	8005b16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005b34:	4b42      	ldr	r3, [pc, #264]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	031b      	lsls	r3, r3, #12
 8005b42:	493f      	ldr	r1, [pc, #252]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	628b      	str	r3, [r1, #40]	; 0x28
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	025b      	lsls	r3, r3, #9
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	041b      	lsls	r3, r3, #16
 8005b66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	061b      	lsls	r3, r3, #24
 8005b74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b78:	4931      	ldr	r1, [pc, #196]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005b7e:	4b30      	ldr	r3, [pc, #192]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	492d      	ldr	r1, [pc, #180]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b90:	4b2b      	ldr	r3, [pc, #172]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	f023 0220 	bic.w	r2, r3, #32
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	4928      	ldr	r1, [pc, #160]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005ba2:	4b27      	ldr	r3, [pc, #156]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	4a26      	ldr	r2, [pc, #152]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005ba8:	f023 0310 	bic.w	r3, r3, #16
 8005bac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005bae:	4b24      	ldr	r3, [pc, #144]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005bb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bb2:	4b24      	ldr	r3, [pc, #144]	; (8005c44 <RCCEx_PLL2_Config+0x160>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	69d2      	ldr	r2, [r2, #28]
 8005bba:	00d2      	lsls	r2, r2, #3
 8005bbc:	4920      	ldr	r1, [pc, #128]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005bc2:	4b1f      	ldr	r3, [pc, #124]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	4a1e      	ldr	r2, [pc, #120]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005bc8:	f043 0310 	orr.w	r3, r3, #16
 8005bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d106      	bne.n	8005be2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005bd4:	4b1a      	ldr	r3, [pc, #104]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	4a19      	ldr	r2, [pc, #100]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005bda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005be0:	e00f      	b.n	8005c02 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d106      	bne.n	8005bf6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005be8:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	4a14      	ldr	r2, [pc, #80]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bf4:	e005      	b.n	8005c02 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005bf6:	4b12      	ldr	r3, [pc, #72]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	4a11      	ldr	r2, [pc, #68]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005bfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005c02:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a0e      	ldr	r2, [pc, #56]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005c08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c0e:	f7fb fb51 	bl	80012b4 <HAL_GetTick>
 8005c12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c14:	e008      	b.n	8005c28 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c16:	f7fb fb4d 	bl	80012b4 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d901      	bls.n	8005c28 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e006      	b.n	8005c36 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c28:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <RCCEx_PLL2_Config+0x15c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0f0      	beq.n	8005c16 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	58024400 	.word	0x58024400
 8005c44:	ffff0007 	.word	0xffff0007

08005c48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c56:	4b53      	ldr	r3, [pc, #332]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d101      	bne.n	8005c66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e099      	b.n	8005d9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005c66:	4b4f      	ldr	r3, [pc, #316]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a4e      	ldr	r2, [pc, #312]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c72:	f7fb fb1f 	bl	80012b4 <HAL_GetTick>
 8005c76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c78:	e008      	b.n	8005c8c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c7a:	f7fb fb1b 	bl	80012b4 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e086      	b.n	8005d9a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c8c:	4b45      	ldr	r3, [pc, #276]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1f0      	bne.n	8005c7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c98:	4b42      	ldr	r3, [pc, #264]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	051b      	lsls	r3, r3, #20
 8005ca6:	493f      	ldr	r1, [pc, #252]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	628b      	str	r3, [r1, #40]	; 0x28
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	025b      	lsls	r3, r3, #9
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	041b      	lsls	r3, r3, #16
 8005cca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	061b      	lsls	r3, r3, #24
 8005cd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005cdc:	4931      	ldr	r1, [pc, #196]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ce2:	4b30      	ldr	r3, [pc, #192]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	492d      	ldr	r1, [pc, #180]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005cf4:	4b2b      	ldr	r3, [pc, #172]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	4928      	ldr	r1, [pc, #160]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005d06:	4b27      	ldr	r3, [pc, #156]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0a:	4a26      	ldr	r2, [pc, #152]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005d12:	4b24      	ldr	r3, [pc, #144]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d16:	4b24      	ldr	r3, [pc, #144]	; (8005da8 <RCCEx_PLL3_Config+0x160>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	69d2      	ldr	r2, [r2, #28]
 8005d1e:	00d2      	lsls	r2, r2, #3
 8005d20:	4920      	ldr	r1, [pc, #128]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005d26:	4b1f      	ldr	r3, [pc, #124]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2a:	4a1e      	ldr	r2, [pc, #120]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d106      	bne.n	8005d46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005d38:	4b1a      	ldr	r3, [pc, #104]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	4a19      	ldr	r2, [pc, #100]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005d3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d44:	e00f      	b.n	8005d66 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d106      	bne.n	8005d5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005d4c:	4b15      	ldr	r3, [pc, #84]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	4a14      	ldr	r2, [pc, #80]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005d52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d58:	e005      	b.n	8005d66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005d5a:	4b12      	ldr	r3, [pc, #72]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5e:	4a11      	ldr	r2, [pc, #68]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005d60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005d66:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a0e      	ldr	r2, [pc, #56]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d72:	f7fb fa9f 	bl	80012b4 <HAL_GetTick>
 8005d76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d78:	e008      	b.n	8005d8c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d7a:	f7fb fa9b 	bl	80012b4 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d901      	bls.n	8005d8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e006      	b.n	8005d9a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d8c:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <RCCEx_PLL3_Config+0x15c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0f0      	beq.n	8005d7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	58024400 	.word	0x58024400
 8005da8:	ffff0007 	.word	0xffff0007

08005dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e049      	b.n	8005e52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f841 	bl	8005e5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3304      	adds	r3, #4
 8005de8:	4619      	mov	r1, r3
 8005dea:	4610      	mov	r0, r2
 8005dec:	f000 fa0e 	bl	800620c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e62:	bf00      	nop
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
	...

08005e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d001      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e05e      	b.n	8005f46 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a2b      	ldr	r2, [pc, #172]	; (8005f54 <HAL_TIM_Base_Start_IT+0xe4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d02c      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x94>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb2:	d027      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x94>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a27      	ldr	r2, [pc, #156]	; (8005f58 <HAL_TIM_Base_Start_IT+0xe8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d022      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x94>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a26      	ldr	r2, [pc, #152]	; (8005f5c <HAL_TIM_Base_Start_IT+0xec>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d01d      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x94>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a24      	ldr	r2, [pc, #144]	; (8005f60 <HAL_TIM_Base_Start_IT+0xf0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d018      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x94>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a23      	ldr	r2, [pc, #140]	; (8005f64 <HAL_TIM_Base_Start_IT+0xf4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d013      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x94>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a21      	ldr	r2, [pc, #132]	; (8005f68 <HAL_TIM_Base_Start_IT+0xf8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00e      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x94>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a20      	ldr	r2, [pc, #128]	; (8005f6c <HAL_TIM_Base_Start_IT+0xfc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d009      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x94>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1e      	ldr	r2, [pc, #120]	; (8005f70 <HAL_TIM_Base_Start_IT+0x100>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d004      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x94>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <HAL_TIM_Base_Start_IT+0x104>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d115      	bne.n	8005f30 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	4b1b      	ldr	r3, [pc, #108]	; (8005f78 <HAL_TIM_Base_Start_IT+0x108>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b06      	cmp	r3, #6
 8005f14:	d015      	beq.n	8005f42 <HAL_TIM_Base_Start_IT+0xd2>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f1c:	d011      	beq.n	8005f42 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0201 	orr.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2e:	e008      	b.n	8005f42 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	e000      	b.n	8005f44 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40010000 	.word	0x40010000
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	40000800 	.word	0x40000800
 8005f60:	40000c00 	.word	0x40000c00
 8005f64:	40010400 	.word	0x40010400
 8005f68:	40001800 	.word	0x40001800
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	4000e000 	.word	0x4000e000
 8005f74:	4000e400 	.word	0x4000e400
 8005f78:	00010007 	.word	0x00010007

08005f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d122      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d11b      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f06f 0202 	mvn.w	r2, #2
 8005fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f905 	bl	80061ce <HAL_TIM_IC_CaptureCallback>
 8005fc4:	e005      	b.n	8005fd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f8f7 	bl	80061ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f908 	bl	80061e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f003 0304 	and.w	r3, r3, #4
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d122      	bne.n	800602c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d11b      	bne.n	800602c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0204 	mvn.w	r2, #4
 8005ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2202      	movs	r2, #2
 8006002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f8db 	bl	80061ce <HAL_TIM_IC_CaptureCallback>
 8006018:	e005      	b.n	8006026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f8cd 	bl	80061ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f8de 	bl	80061e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f003 0308 	and.w	r3, r3, #8
 8006036:	2b08      	cmp	r3, #8
 8006038:	d122      	bne.n	8006080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f003 0308 	and.w	r3, r3, #8
 8006044:	2b08      	cmp	r3, #8
 8006046:	d11b      	bne.n	8006080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0208 	mvn.w	r2, #8
 8006050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2204      	movs	r2, #4
 8006056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f8b1 	bl	80061ce <HAL_TIM_IC_CaptureCallback>
 800606c:	e005      	b.n	800607a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f8a3 	bl	80061ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f8b4 	bl	80061e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f003 0310 	and.w	r3, r3, #16
 800608a:	2b10      	cmp	r3, #16
 800608c:	d122      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f003 0310 	and.w	r3, r3, #16
 8006098:	2b10      	cmp	r3, #16
 800609a:	d11b      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f06f 0210 	mvn.w	r2, #16
 80060a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2208      	movs	r2, #8
 80060aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f887 	bl	80061ce <HAL_TIM_IC_CaptureCallback>
 80060c0:	e005      	b.n	80060ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f879 	bl	80061ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f88a 	bl	80061e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d10e      	bne.n	8006100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d107      	bne.n	8006100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f06f 0201 	mvn.w	r2, #1
 80060f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fa fd1e 	bl	8000b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610a:	2b80      	cmp	r3, #128	; 0x80
 800610c:	d10e      	bne.n	800612c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006118:	2b80      	cmp	r3, #128	; 0x80
 800611a:	d107      	bne.n	800612c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f920 	bl	800636c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800613a:	d10e      	bne.n	800615a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006146:	2b80      	cmp	r3, #128	; 0x80
 8006148:	d107      	bne.n	800615a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f913 	bl	8006380 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006164:	2b40      	cmp	r3, #64	; 0x40
 8006166:	d10e      	bne.n	8006186 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006172:	2b40      	cmp	r3, #64	; 0x40
 8006174:	d107      	bne.n	8006186 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800617e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f838 	bl	80061f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f003 0320 	and.w	r3, r3, #32
 8006190:	2b20      	cmp	r3, #32
 8006192:	d10e      	bne.n	80061b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d107      	bne.n	80061b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f06f 0220 	mvn.w	r2, #32
 80061aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f8d3 	bl	8006358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
	...

0800620c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a44      	ldr	r2, [pc, #272]	; (8006330 <TIM_Base_SetConfig+0x124>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d013      	beq.n	800624c <TIM_Base_SetConfig+0x40>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622a:	d00f      	beq.n	800624c <TIM_Base_SetConfig+0x40>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a41      	ldr	r2, [pc, #260]	; (8006334 <TIM_Base_SetConfig+0x128>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d00b      	beq.n	800624c <TIM_Base_SetConfig+0x40>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a40      	ldr	r2, [pc, #256]	; (8006338 <TIM_Base_SetConfig+0x12c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d007      	beq.n	800624c <TIM_Base_SetConfig+0x40>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a3f      	ldr	r2, [pc, #252]	; (800633c <TIM_Base_SetConfig+0x130>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d003      	beq.n	800624c <TIM_Base_SetConfig+0x40>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a3e      	ldr	r2, [pc, #248]	; (8006340 <TIM_Base_SetConfig+0x134>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d108      	bne.n	800625e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a33      	ldr	r2, [pc, #204]	; (8006330 <TIM_Base_SetConfig+0x124>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d027      	beq.n	80062b6 <TIM_Base_SetConfig+0xaa>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800626c:	d023      	beq.n	80062b6 <TIM_Base_SetConfig+0xaa>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a30      	ldr	r2, [pc, #192]	; (8006334 <TIM_Base_SetConfig+0x128>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d01f      	beq.n	80062b6 <TIM_Base_SetConfig+0xaa>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a2f      	ldr	r2, [pc, #188]	; (8006338 <TIM_Base_SetConfig+0x12c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d01b      	beq.n	80062b6 <TIM_Base_SetConfig+0xaa>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a2e      	ldr	r2, [pc, #184]	; (800633c <TIM_Base_SetConfig+0x130>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d017      	beq.n	80062b6 <TIM_Base_SetConfig+0xaa>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a2d      	ldr	r2, [pc, #180]	; (8006340 <TIM_Base_SetConfig+0x134>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d013      	beq.n	80062b6 <TIM_Base_SetConfig+0xaa>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a2c      	ldr	r2, [pc, #176]	; (8006344 <TIM_Base_SetConfig+0x138>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00f      	beq.n	80062b6 <TIM_Base_SetConfig+0xaa>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a2b      	ldr	r2, [pc, #172]	; (8006348 <TIM_Base_SetConfig+0x13c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00b      	beq.n	80062b6 <TIM_Base_SetConfig+0xaa>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a2a      	ldr	r2, [pc, #168]	; (800634c <TIM_Base_SetConfig+0x140>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d007      	beq.n	80062b6 <TIM_Base_SetConfig+0xaa>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a29      	ldr	r2, [pc, #164]	; (8006350 <TIM_Base_SetConfig+0x144>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d003      	beq.n	80062b6 <TIM_Base_SetConfig+0xaa>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a28      	ldr	r2, [pc, #160]	; (8006354 <TIM_Base_SetConfig+0x148>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d108      	bne.n	80062c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a10      	ldr	r2, [pc, #64]	; (8006330 <TIM_Base_SetConfig+0x124>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d00f      	beq.n	8006314 <TIM_Base_SetConfig+0x108>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a12      	ldr	r2, [pc, #72]	; (8006340 <TIM_Base_SetConfig+0x134>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00b      	beq.n	8006314 <TIM_Base_SetConfig+0x108>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a11      	ldr	r2, [pc, #68]	; (8006344 <TIM_Base_SetConfig+0x138>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d007      	beq.n	8006314 <TIM_Base_SetConfig+0x108>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a10      	ldr	r2, [pc, #64]	; (8006348 <TIM_Base_SetConfig+0x13c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d003      	beq.n	8006314 <TIM_Base_SetConfig+0x108>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a0f      	ldr	r2, [pc, #60]	; (800634c <TIM_Base_SetConfig+0x140>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d103      	bne.n	800631c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	615a      	str	r2, [r3, #20]
}
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40010000 	.word	0x40010000
 8006334:	40000400 	.word	0x40000400
 8006338:	40000800 	.word	0x40000800
 800633c:	40000c00 	.word	0x40000c00
 8006340:	40010400 	.word	0x40010400
 8006344:	40014000 	.word	0x40014000
 8006348:	40014400 	.word	0x40014400
 800634c:	40014800 	.word	0x40014800
 8006350:	4000e000 	.word	0x4000e000
 8006354:	4000e400 	.word	0x4000e400

08006358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e042      	b.n	800642c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d106      	bne.n	80063be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7fa fdef 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2224      	movs	r2, #36	; 0x24
 80063c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0201 	bic.w	r2, r2, #1
 80063d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f8ba 	bl	8006550 <UART_SetConfig>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e022      	b.n	800642c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 ff1a 	bl	8007228 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006412:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 ffa1 	bl	800736c <UART_CheckIdleState>
 800642a:	4603      	mov	r3, r0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08a      	sub	sp, #40	; 0x28
 8006438:	af02      	add	r7, sp, #8
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	4613      	mov	r3, r2
 8006442:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644a:	2b20      	cmp	r3, #32
 800644c:	d17b      	bne.n	8006546 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <HAL_UART_Transmit+0x26>
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e074      	b.n	8006548 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2221      	movs	r2, #33	; 0x21
 800646a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800646e:	f7fa ff21 	bl	80012b4 <HAL_GetTick>
 8006472:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	88fa      	ldrh	r2, [r7, #6]
 8006478:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	88fa      	ldrh	r2, [r7, #6]
 8006480:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648c:	d108      	bne.n	80064a0 <HAL_UART_Transmit+0x6c>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d104      	bne.n	80064a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	61bb      	str	r3, [r7, #24]
 800649e:	e003      	b.n	80064a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064a4:	2300      	movs	r3, #0
 80064a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064a8:	e030      	b.n	800650c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2200      	movs	r2, #0
 80064b2:	2180      	movs	r1, #128	; 0x80
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f001 f803 	bl	80074c0 <UART_WaitOnFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e03d      	b.n	8006548 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10b      	bne.n	80064ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	3302      	adds	r3, #2
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	e007      	b.n	80064fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	781a      	ldrb	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	3301      	adds	r3, #1
 80064f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1c8      	bne.n	80064aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2200      	movs	r2, #0
 8006520:	2140      	movs	r1, #64	; 0x40
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 ffcc 	bl	80074c0 <UART_WaitOnFlagUntilTimeout>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2220      	movs	r2, #32
 8006532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e006      	b.n	8006548 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2220      	movs	r2, #32
 800653e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	e000      	b.n	8006548 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006546:	2302      	movs	r3, #2
  }
}
 8006548:	4618      	mov	r0, r3
 800654a:	3720      	adds	r7, #32
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006554:	b092      	sub	sp, #72	; 0x48
 8006556:	af00      	add	r7, sp, #0
 8006558:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	431a      	orrs	r2, r3
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	431a      	orrs	r2, r3
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	4313      	orrs	r3, r2
 8006576:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	4bbe      	ldr	r3, [pc, #760]	; (8006878 <UART_SetConfig+0x328>)
 8006580:	4013      	ands	r3, r2
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006588:	430b      	orrs	r3, r1
 800658a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4ab3      	ldr	r2, [pc, #716]	; (800687c <UART_SetConfig+0x32c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d004      	beq.n	80065bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065b8:	4313      	orrs	r3, r2
 80065ba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	4baf      	ldr	r3, [pc, #700]	; (8006880 <UART_SetConfig+0x330>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	6812      	ldr	r2, [r2, #0]
 80065ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065cc:	430b      	orrs	r3, r1
 80065ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d6:	f023 010f 	bic.w	r1, r3, #15
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4aa6      	ldr	r2, [pc, #664]	; (8006884 <UART_SetConfig+0x334>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d177      	bne.n	80066e0 <UART_SetConfig+0x190>
 80065f0:	4ba5      	ldr	r3, [pc, #660]	; (8006888 <UART_SetConfig+0x338>)
 80065f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065f8:	2b28      	cmp	r3, #40	; 0x28
 80065fa:	d86d      	bhi.n	80066d8 <UART_SetConfig+0x188>
 80065fc:	a201      	add	r2, pc, #4	; (adr r2, 8006604 <UART_SetConfig+0xb4>)
 80065fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006602:	bf00      	nop
 8006604:	080066a9 	.word	0x080066a9
 8006608:	080066d9 	.word	0x080066d9
 800660c:	080066d9 	.word	0x080066d9
 8006610:	080066d9 	.word	0x080066d9
 8006614:	080066d9 	.word	0x080066d9
 8006618:	080066d9 	.word	0x080066d9
 800661c:	080066d9 	.word	0x080066d9
 8006620:	080066d9 	.word	0x080066d9
 8006624:	080066b1 	.word	0x080066b1
 8006628:	080066d9 	.word	0x080066d9
 800662c:	080066d9 	.word	0x080066d9
 8006630:	080066d9 	.word	0x080066d9
 8006634:	080066d9 	.word	0x080066d9
 8006638:	080066d9 	.word	0x080066d9
 800663c:	080066d9 	.word	0x080066d9
 8006640:	080066d9 	.word	0x080066d9
 8006644:	080066b9 	.word	0x080066b9
 8006648:	080066d9 	.word	0x080066d9
 800664c:	080066d9 	.word	0x080066d9
 8006650:	080066d9 	.word	0x080066d9
 8006654:	080066d9 	.word	0x080066d9
 8006658:	080066d9 	.word	0x080066d9
 800665c:	080066d9 	.word	0x080066d9
 8006660:	080066d9 	.word	0x080066d9
 8006664:	080066c1 	.word	0x080066c1
 8006668:	080066d9 	.word	0x080066d9
 800666c:	080066d9 	.word	0x080066d9
 8006670:	080066d9 	.word	0x080066d9
 8006674:	080066d9 	.word	0x080066d9
 8006678:	080066d9 	.word	0x080066d9
 800667c:	080066d9 	.word	0x080066d9
 8006680:	080066d9 	.word	0x080066d9
 8006684:	080066c9 	.word	0x080066c9
 8006688:	080066d9 	.word	0x080066d9
 800668c:	080066d9 	.word	0x080066d9
 8006690:	080066d9 	.word	0x080066d9
 8006694:	080066d9 	.word	0x080066d9
 8006698:	080066d9 	.word	0x080066d9
 800669c:	080066d9 	.word	0x080066d9
 80066a0:	080066d9 	.word	0x080066d9
 80066a4:	080066d1 	.word	0x080066d1
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ae:	e326      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80066b0:	2304      	movs	r3, #4
 80066b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066b6:	e322      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80066b8:	2308      	movs	r3, #8
 80066ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066be:	e31e      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80066c0:	2310      	movs	r3, #16
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c6:	e31a      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80066c8:	2320      	movs	r3, #32
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ce:	e316      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80066d0:	2340      	movs	r3, #64	; 0x40
 80066d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066d6:	e312      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80066d8:	2380      	movs	r3, #128	; 0x80
 80066da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066de:	e30e      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a69      	ldr	r2, [pc, #420]	; (800688c <UART_SetConfig+0x33c>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d130      	bne.n	800674c <UART_SetConfig+0x1fc>
 80066ea:	4b67      	ldr	r3, [pc, #412]	; (8006888 <UART_SetConfig+0x338>)
 80066ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ee:	f003 0307 	and.w	r3, r3, #7
 80066f2:	2b05      	cmp	r3, #5
 80066f4:	d826      	bhi.n	8006744 <UART_SetConfig+0x1f4>
 80066f6:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <UART_SetConfig+0x1ac>)
 80066f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fc:	08006715 	.word	0x08006715
 8006700:	0800671d 	.word	0x0800671d
 8006704:	08006725 	.word	0x08006725
 8006708:	0800672d 	.word	0x0800672d
 800670c:	08006735 	.word	0x08006735
 8006710:	0800673d 	.word	0x0800673d
 8006714:	2300      	movs	r3, #0
 8006716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800671a:	e2f0      	b.n	8006cfe <UART_SetConfig+0x7ae>
 800671c:	2304      	movs	r3, #4
 800671e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006722:	e2ec      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006724:	2308      	movs	r3, #8
 8006726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800672a:	e2e8      	b.n	8006cfe <UART_SetConfig+0x7ae>
 800672c:	2310      	movs	r3, #16
 800672e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006732:	e2e4      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006734:	2320      	movs	r3, #32
 8006736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800673a:	e2e0      	b.n	8006cfe <UART_SetConfig+0x7ae>
 800673c:	2340      	movs	r3, #64	; 0x40
 800673e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006742:	e2dc      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006744:	2380      	movs	r3, #128	; 0x80
 8006746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800674a:	e2d8      	b.n	8006cfe <UART_SetConfig+0x7ae>
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a4f      	ldr	r2, [pc, #316]	; (8006890 <UART_SetConfig+0x340>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d130      	bne.n	80067b8 <UART_SetConfig+0x268>
 8006756:	4b4c      	ldr	r3, [pc, #304]	; (8006888 <UART_SetConfig+0x338>)
 8006758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675a:	f003 0307 	and.w	r3, r3, #7
 800675e:	2b05      	cmp	r3, #5
 8006760:	d826      	bhi.n	80067b0 <UART_SetConfig+0x260>
 8006762:	a201      	add	r2, pc, #4	; (adr r2, 8006768 <UART_SetConfig+0x218>)
 8006764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006768:	08006781 	.word	0x08006781
 800676c:	08006789 	.word	0x08006789
 8006770:	08006791 	.word	0x08006791
 8006774:	08006799 	.word	0x08006799
 8006778:	080067a1 	.word	0x080067a1
 800677c:	080067a9 	.word	0x080067a9
 8006780:	2300      	movs	r3, #0
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006786:	e2ba      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006788:	2304      	movs	r3, #4
 800678a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678e:	e2b6      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006790:	2308      	movs	r3, #8
 8006792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006796:	e2b2      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006798:	2310      	movs	r3, #16
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679e:	e2ae      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80067a0:	2320      	movs	r3, #32
 80067a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a6:	e2aa      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80067a8:	2340      	movs	r3, #64	; 0x40
 80067aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ae:	e2a6      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80067b0:	2380      	movs	r3, #128	; 0x80
 80067b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067b6:	e2a2      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a35      	ldr	r2, [pc, #212]	; (8006894 <UART_SetConfig+0x344>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d130      	bne.n	8006824 <UART_SetConfig+0x2d4>
 80067c2:	4b31      	ldr	r3, [pc, #196]	; (8006888 <UART_SetConfig+0x338>)
 80067c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	2b05      	cmp	r3, #5
 80067cc:	d826      	bhi.n	800681c <UART_SetConfig+0x2cc>
 80067ce:	a201      	add	r2, pc, #4	; (adr r2, 80067d4 <UART_SetConfig+0x284>)
 80067d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d4:	080067ed 	.word	0x080067ed
 80067d8:	080067f5 	.word	0x080067f5
 80067dc:	080067fd 	.word	0x080067fd
 80067e0:	08006805 	.word	0x08006805
 80067e4:	0800680d 	.word	0x0800680d
 80067e8:	08006815 	.word	0x08006815
 80067ec:	2300      	movs	r3, #0
 80067ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067f2:	e284      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80067f4:	2304      	movs	r3, #4
 80067f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067fa:	e280      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80067fc:	2308      	movs	r3, #8
 80067fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006802:	e27c      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006804:	2310      	movs	r3, #16
 8006806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800680a:	e278      	b.n	8006cfe <UART_SetConfig+0x7ae>
 800680c:	2320      	movs	r3, #32
 800680e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006812:	e274      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006814:	2340      	movs	r3, #64	; 0x40
 8006816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800681a:	e270      	b.n	8006cfe <UART_SetConfig+0x7ae>
 800681c:	2380      	movs	r3, #128	; 0x80
 800681e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006822:	e26c      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a1b      	ldr	r2, [pc, #108]	; (8006898 <UART_SetConfig+0x348>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d142      	bne.n	80068b4 <UART_SetConfig+0x364>
 800682e:	4b16      	ldr	r3, [pc, #88]	; (8006888 <UART_SetConfig+0x338>)
 8006830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	2b05      	cmp	r3, #5
 8006838:	d838      	bhi.n	80068ac <UART_SetConfig+0x35c>
 800683a:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <UART_SetConfig+0x2f0>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	08006859 	.word	0x08006859
 8006844:	08006861 	.word	0x08006861
 8006848:	08006869 	.word	0x08006869
 800684c:	08006871 	.word	0x08006871
 8006850:	0800689d 	.word	0x0800689d
 8006854:	080068a5 	.word	0x080068a5
 8006858:	2300      	movs	r3, #0
 800685a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800685e:	e24e      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006860:	2304      	movs	r3, #4
 8006862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006866:	e24a      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006868:	2308      	movs	r3, #8
 800686a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800686e:	e246      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006870:	2310      	movs	r3, #16
 8006872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006876:	e242      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006878:	cfff69f3 	.word	0xcfff69f3
 800687c:	58000c00 	.word	0x58000c00
 8006880:	11fff4ff 	.word	0x11fff4ff
 8006884:	40011000 	.word	0x40011000
 8006888:	58024400 	.word	0x58024400
 800688c:	40004400 	.word	0x40004400
 8006890:	40004800 	.word	0x40004800
 8006894:	40004c00 	.word	0x40004c00
 8006898:	40005000 	.word	0x40005000
 800689c:	2320      	movs	r3, #32
 800689e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068a2:	e22c      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80068a4:	2340      	movs	r3, #64	; 0x40
 80068a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068aa:	e228      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80068ac:	2380      	movs	r3, #128	; 0x80
 80068ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068b2:	e224      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4ab1      	ldr	r2, [pc, #708]	; (8006b80 <UART_SetConfig+0x630>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d176      	bne.n	80069ac <UART_SetConfig+0x45c>
 80068be:	4bb1      	ldr	r3, [pc, #708]	; (8006b84 <UART_SetConfig+0x634>)
 80068c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068c6:	2b28      	cmp	r3, #40	; 0x28
 80068c8:	d86c      	bhi.n	80069a4 <UART_SetConfig+0x454>
 80068ca:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <UART_SetConfig+0x380>)
 80068cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d0:	08006975 	.word	0x08006975
 80068d4:	080069a5 	.word	0x080069a5
 80068d8:	080069a5 	.word	0x080069a5
 80068dc:	080069a5 	.word	0x080069a5
 80068e0:	080069a5 	.word	0x080069a5
 80068e4:	080069a5 	.word	0x080069a5
 80068e8:	080069a5 	.word	0x080069a5
 80068ec:	080069a5 	.word	0x080069a5
 80068f0:	0800697d 	.word	0x0800697d
 80068f4:	080069a5 	.word	0x080069a5
 80068f8:	080069a5 	.word	0x080069a5
 80068fc:	080069a5 	.word	0x080069a5
 8006900:	080069a5 	.word	0x080069a5
 8006904:	080069a5 	.word	0x080069a5
 8006908:	080069a5 	.word	0x080069a5
 800690c:	080069a5 	.word	0x080069a5
 8006910:	08006985 	.word	0x08006985
 8006914:	080069a5 	.word	0x080069a5
 8006918:	080069a5 	.word	0x080069a5
 800691c:	080069a5 	.word	0x080069a5
 8006920:	080069a5 	.word	0x080069a5
 8006924:	080069a5 	.word	0x080069a5
 8006928:	080069a5 	.word	0x080069a5
 800692c:	080069a5 	.word	0x080069a5
 8006930:	0800698d 	.word	0x0800698d
 8006934:	080069a5 	.word	0x080069a5
 8006938:	080069a5 	.word	0x080069a5
 800693c:	080069a5 	.word	0x080069a5
 8006940:	080069a5 	.word	0x080069a5
 8006944:	080069a5 	.word	0x080069a5
 8006948:	080069a5 	.word	0x080069a5
 800694c:	080069a5 	.word	0x080069a5
 8006950:	08006995 	.word	0x08006995
 8006954:	080069a5 	.word	0x080069a5
 8006958:	080069a5 	.word	0x080069a5
 800695c:	080069a5 	.word	0x080069a5
 8006960:	080069a5 	.word	0x080069a5
 8006964:	080069a5 	.word	0x080069a5
 8006968:	080069a5 	.word	0x080069a5
 800696c:	080069a5 	.word	0x080069a5
 8006970:	0800699d 	.word	0x0800699d
 8006974:	2301      	movs	r3, #1
 8006976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800697a:	e1c0      	b.n	8006cfe <UART_SetConfig+0x7ae>
 800697c:	2304      	movs	r3, #4
 800697e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006982:	e1bc      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006984:	2308      	movs	r3, #8
 8006986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800698a:	e1b8      	b.n	8006cfe <UART_SetConfig+0x7ae>
 800698c:	2310      	movs	r3, #16
 800698e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006992:	e1b4      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006994:	2320      	movs	r3, #32
 8006996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800699a:	e1b0      	b.n	8006cfe <UART_SetConfig+0x7ae>
 800699c:	2340      	movs	r3, #64	; 0x40
 800699e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069a2:	e1ac      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80069a4:	2380      	movs	r3, #128	; 0x80
 80069a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069aa:	e1a8      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a75      	ldr	r2, [pc, #468]	; (8006b88 <UART_SetConfig+0x638>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d130      	bne.n	8006a18 <UART_SetConfig+0x4c8>
 80069b6:	4b73      	ldr	r3, [pc, #460]	; (8006b84 <UART_SetConfig+0x634>)
 80069b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	2b05      	cmp	r3, #5
 80069c0:	d826      	bhi.n	8006a10 <UART_SetConfig+0x4c0>
 80069c2:	a201      	add	r2, pc, #4	; (adr r2, 80069c8 <UART_SetConfig+0x478>)
 80069c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c8:	080069e1 	.word	0x080069e1
 80069cc:	080069e9 	.word	0x080069e9
 80069d0:	080069f1 	.word	0x080069f1
 80069d4:	080069f9 	.word	0x080069f9
 80069d8:	08006a01 	.word	0x08006a01
 80069dc:	08006a09 	.word	0x08006a09
 80069e0:	2300      	movs	r3, #0
 80069e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069e6:	e18a      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80069e8:	2304      	movs	r3, #4
 80069ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ee:	e186      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80069f0:	2308      	movs	r3, #8
 80069f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069f6:	e182      	b.n	8006cfe <UART_SetConfig+0x7ae>
 80069f8:	2310      	movs	r3, #16
 80069fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069fe:	e17e      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006a00:	2320      	movs	r3, #32
 8006a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a06:	e17a      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006a08:	2340      	movs	r3, #64	; 0x40
 8006a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a0e:	e176      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006a10:	2380      	movs	r3, #128	; 0x80
 8006a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a16:	e172      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a5b      	ldr	r2, [pc, #364]	; (8006b8c <UART_SetConfig+0x63c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d130      	bne.n	8006a84 <UART_SetConfig+0x534>
 8006a22:	4b58      	ldr	r3, [pc, #352]	; (8006b84 <UART_SetConfig+0x634>)
 8006a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	2b05      	cmp	r3, #5
 8006a2c:	d826      	bhi.n	8006a7c <UART_SetConfig+0x52c>
 8006a2e:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <UART_SetConfig+0x4e4>)
 8006a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a34:	08006a4d 	.word	0x08006a4d
 8006a38:	08006a55 	.word	0x08006a55
 8006a3c:	08006a5d 	.word	0x08006a5d
 8006a40:	08006a65 	.word	0x08006a65
 8006a44:	08006a6d 	.word	0x08006a6d
 8006a48:	08006a75 	.word	0x08006a75
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a52:	e154      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006a54:	2304      	movs	r3, #4
 8006a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a5a:	e150      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006a5c:	2308      	movs	r3, #8
 8006a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a62:	e14c      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006a64:	2310      	movs	r3, #16
 8006a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a6a:	e148      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006a6c:	2320      	movs	r3, #32
 8006a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a72:	e144      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006a74:	2340      	movs	r3, #64	; 0x40
 8006a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a7a:	e140      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006a7c:	2380      	movs	r3, #128	; 0x80
 8006a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a82:	e13c      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a41      	ldr	r2, [pc, #260]	; (8006b90 <UART_SetConfig+0x640>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	f040 8082 	bne.w	8006b94 <UART_SetConfig+0x644>
 8006a90:	4b3c      	ldr	r3, [pc, #240]	; (8006b84 <UART_SetConfig+0x634>)
 8006a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a98:	2b28      	cmp	r3, #40	; 0x28
 8006a9a:	d86d      	bhi.n	8006b78 <UART_SetConfig+0x628>
 8006a9c:	a201      	add	r2, pc, #4	; (adr r2, 8006aa4 <UART_SetConfig+0x554>)
 8006a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa2:	bf00      	nop
 8006aa4:	08006b49 	.word	0x08006b49
 8006aa8:	08006b79 	.word	0x08006b79
 8006aac:	08006b79 	.word	0x08006b79
 8006ab0:	08006b79 	.word	0x08006b79
 8006ab4:	08006b79 	.word	0x08006b79
 8006ab8:	08006b79 	.word	0x08006b79
 8006abc:	08006b79 	.word	0x08006b79
 8006ac0:	08006b79 	.word	0x08006b79
 8006ac4:	08006b51 	.word	0x08006b51
 8006ac8:	08006b79 	.word	0x08006b79
 8006acc:	08006b79 	.word	0x08006b79
 8006ad0:	08006b79 	.word	0x08006b79
 8006ad4:	08006b79 	.word	0x08006b79
 8006ad8:	08006b79 	.word	0x08006b79
 8006adc:	08006b79 	.word	0x08006b79
 8006ae0:	08006b79 	.word	0x08006b79
 8006ae4:	08006b59 	.word	0x08006b59
 8006ae8:	08006b79 	.word	0x08006b79
 8006aec:	08006b79 	.word	0x08006b79
 8006af0:	08006b79 	.word	0x08006b79
 8006af4:	08006b79 	.word	0x08006b79
 8006af8:	08006b79 	.word	0x08006b79
 8006afc:	08006b79 	.word	0x08006b79
 8006b00:	08006b79 	.word	0x08006b79
 8006b04:	08006b61 	.word	0x08006b61
 8006b08:	08006b79 	.word	0x08006b79
 8006b0c:	08006b79 	.word	0x08006b79
 8006b10:	08006b79 	.word	0x08006b79
 8006b14:	08006b79 	.word	0x08006b79
 8006b18:	08006b79 	.word	0x08006b79
 8006b1c:	08006b79 	.word	0x08006b79
 8006b20:	08006b79 	.word	0x08006b79
 8006b24:	08006b69 	.word	0x08006b69
 8006b28:	08006b79 	.word	0x08006b79
 8006b2c:	08006b79 	.word	0x08006b79
 8006b30:	08006b79 	.word	0x08006b79
 8006b34:	08006b79 	.word	0x08006b79
 8006b38:	08006b79 	.word	0x08006b79
 8006b3c:	08006b79 	.word	0x08006b79
 8006b40:	08006b79 	.word	0x08006b79
 8006b44:	08006b71 	.word	0x08006b71
 8006b48:	2301      	movs	r3, #1
 8006b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b4e:	e0d6      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006b50:	2304      	movs	r3, #4
 8006b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b56:	e0d2      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006b58:	2308      	movs	r3, #8
 8006b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b5e:	e0ce      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006b60:	2310      	movs	r3, #16
 8006b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b66:	e0ca      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006b68:	2320      	movs	r3, #32
 8006b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6e:	e0c6      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006b70:	2340      	movs	r3, #64	; 0x40
 8006b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b76:	e0c2      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006b78:	2380      	movs	r3, #128	; 0x80
 8006b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7e:	e0be      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006b80:	40011400 	.word	0x40011400
 8006b84:	58024400 	.word	0x58024400
 8006b88:	40007800 	.word	0x40007800
 8006b8c:	40007c00 	.word	0x40007c00
 8006b90:	40011800 	.word	0x40011800
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4aad      	ldr	r2, [pc, #692]	; (8006e50 <UART_SetConfig+0x900>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d176      	bne.n	8006c8c <UART_SetConfig+0x73c>
 8006b9e:	4bad      	ldr	r3, [pc, #692]	; (8006e54 <UART_SetConfig+0x904>)
 8006ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ba6:	2b28      	cmp	r3, #40	; 0x28
 8006ba8:	d86c      	bhi.n	8006c84 <UART_SetConfig+0x734>
 8006baa:	a201      	add	r2, pc, #4	; (adr r2, 8006bb0 <UART_SetConfig+0x660>)
 8006bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb0:	08006c55 	.word	0x08006c55
 8006bb4:	08006c85 	.word	0x08006c85
 8006bb8:	08006c85 	.word	0x08006c85
 8006bbc:	08006c85 	.word	0x08006c85
 8006bc0:	08006c85 	.word	0x08006c85
 8006bc4:	08006c85 	.word	0x08006c85
 8006bc8:	08006c85 	.word	0x08006c85
 8006bcc:	08006c85 	.word	0x08006c85
 8006bd0:	08006c5d 	.word	0x08006c5d
 8006bd4:	08006c85 	.word	0x08006c85
 8006bd8:	08006c85 	.word	0x08006c85
 8006bdc:	08006c85 	.word	0x08006c85
 8006be0:	08006c85 	.word	0x08006c85
 8006be4:	08006c85 	.word	0x08006c85
 8006be8:	08006c85 	.word	0x08006c85
 8006bec:	08006c85 	.word	0x08006c85
 8006bf0:	08006c65 	.word	0x08006c65
 8006bf4:	08006c85 	.word	0x08006c85
 8006bf8:	08006c85 	.word	0x08006c85
 8006bfc:	08006c85 	.word	0x08006c85
 8006c00:	08006c85 	.word	0x08006c85
 8006c04:	08006c85 	.word	0x08006c85
 8006c08:	08006c85 	.word	0x08006c85
 8006c0c:	08006c85 	.word	0x08006c85
 8006c10:	08006c6d 	.word	0x08006c6d
 8006c14:	08006c85 	.word	0x08006c85
 8006c18:	08006c85 	.word	0x08006c85
 8006c1c:	08006c85 	.word	0x08006c85
 8006c20:	08006c85 	.word	0x08006c85
 8006c24:	08006c85 	.word	0x08006c85
 8006c28:	08006c85 	.word	0x08006c85
 8006c2c:	08006c85 	.word	0x08006c85
 8006c30:	08006c75 	.word	0x08006c75
 8006c34:	08006c85 	.word	0x08006c85
 8006c38:	08006c85 	.word	0x08006c85
 8006c3c:	08006c85 	.word	0x08006c85
 8006c40:	08006c85 	.word	0x08006c85
 8006c44:	08006c85 	.word	0x08006c85
 8006c48:	08006c85 	.word	0x08006c85
 8006c4c:	08006c85 	.word	0x08006c85
 8006c50:	08006c7d 	.word	0x08006c7d
 8006c54:	2301      	movs	r3, #1
 8006c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c5a:	e050      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006c5c:	2304      	movs	r3, #4
 8006c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c62:	e04c      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006c64:	2308      	movs	r3, #8
 8006c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6a:	e048      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006c6c:	2310      	movs	r3, #16
 8006c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c72:	e044      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006c74:	2320      	movs	r3, #32
 8006c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7a:	e040      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006c7c:	2340      	movs	r3, #64	; 0x40
 8006c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c82:	e03c      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006c84:	2380      	movs	r3, #128	; 0x80
 8006c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8a:	e038      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a71      	ldr	r2, [pc, #452]	; (8006e58 <UART_SetConfig+0x908>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d130      	bne.n	8006cf8 <UART_SetConfig+0x7a8>
 8006c96:	4b6f      	ldr	r3, [pc, #444]	; (8006e54 <UART_SetConfig+0x904>)
 8006c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9a:	f003 0307 	and.w	r3, r3, #7
 8006c9e:	2b05      	cmp	r3, #5
 8006ca0:	d826      	bhi.n	8006cf0 <UART_SetConfig+0x7a0>
 8006ca2:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <UART_SetConfig+0x758>)
 8006ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca8:	08006cc1 	.word	0x08006cc1
 8006cac:	08006cc9 	.word	0x08006cc9
 8006cb0:	08006cd1 	.word	0x08006cd1
 8006cb4:	08006cd9 	.word	0x08006cd9
 8006cb8:	08006ce1 	.word	0x08006ce1
 8006cbc:	08006ce9 	.word	0x08006ce9
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cc6:	e01a      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006cc8:	2304      	movs	r3, #4
 8006cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cce:	e016      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cd6:	e012      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006cd8:	2310      	movs	r3, #16
 8006cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cde:	e00e      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006ce0:	2320      	movs	r3, #32
 8006ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ce6:	e00a      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006ce8:	2340      	movs	r3, #64	; 0x40
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cee:	e006      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006cf0:	2380      	movs	r3, #128	; 0x80
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf6:	e002      	b.n	8006cfe <UART_SetConfig+0x7ae>
 8006cf8:	2380      	movs	r3, #128	; 0x80
 8006cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a55      	ldr	r2, [pc, #340]	; (8006e58 <UART_SetConfig+0x908>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	f040 80f8 	bne.w	8006efa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d0a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	dc46      	bgt.n	8006da0 <UART_SetConfig+0x850>
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	db75      	blt.n	8006e02 <UART_SetConfig+0x8b2>
 8006d16:	3b02      	subs	r3, #2
 8006d18:	2b1e      	cmp	r3, #30
 8006d1a:	d872      	bhi.n	8006e02 <UART_SetConfig+0x8b2>
 8006d1c:	a201      	add	r2, pc, #4	; (adr r2, 8006d24 <UART_SetConfig+0x7d4>)
 8006d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d22:	bf00      	nop
 8006d24:	08006da7 	.word	0x08006da7
 8006d28:	08006e03 	.word	0x08006e03
 8006d2c:	08006daf 	.word	0x08006daf
 8006d30:	08006e03 	.word	0x08006e03
 8006d34:	08006e03 	.word	0x08006e03
 8006d38:	08006e03 	.word	0x08006e03
 8006d3c:	08006dbf 	.word	0x08006dbf
 8006d40:	08006e03 	.word	0x08006e03
 8006d44:	08006e03 	.word	0x08006e03
 8006d48:	08006e03 	.word	0x08006e03
 8006d4c:	08006e03 	.word	0x08006e03
 8006d50:	08006e03 	.word	0x08006e03
 8006d54:	08006e03 	.word	0x08006e03
 8006d58:	08006e03 	.word	0x08006e03
 8006d5c:	08006dcf 	.word	0x08006dcf
 8006d60:	08006e03 	.word	0x08006e03
 8006d64:	08006e03 	.word	0x08006e03
 8006d68:	08006e03 	.word	0x08006e03
 8006d6c:	08006e03 	.word	0x08006e03
 8006d70:	08006e03 	.word	0x08006e03
 8006d74:	08006e03 	.word	0x08006e03
 8006d78:	08006e03 	.word	0x08006e03
 8006d7c:	08006e03 	.word	0x08006e03
 8006d80:	08006e03 	.word	0x08006e03
 8006d84:	08006e03 	.word	0x08006e03
 8006d88:	08006e03 	.word	0x08006e03
 8006d8c:	08006e03 	.word	0x08006e03
 8006d90:	08006e03 	.word	0x08006e03
 8006d94:	08006e03 	.word	0x08006e03
 8006d98:	08006e03 	.word	0x08006e03
 8006d9c:	08006df5 	.word	0x08006df5
 8006da0:	2b40      	cmp	r3, #64	; 0x40
 8006da2:	d02a      	beq.n	8006dfa <UART_SetConfig+0x8aa>
 8006da4:	e02d      	b.n	8006e02 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006da6:	f7fe fbdf 	bl	8005568 <HAL_RCCEx_GetD3PCLK1Freq>
 8006daa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006dac:	e02f      	b.n	8006e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe fbee 	bl	8005594 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dbc:	e027      	b.n	8006e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dbe:	f107 0318 	add.w	r3, r7, #24
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe fd3a 	bl	800583c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dcc:	e01f      	b.n	8006e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dce:	4b21      	ldr	r3, [pc, #132]	; (8006e54 <UART_SetConfig+0x904>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d009      	beq.n	8006dee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006dda:	4b1e      	ldr	r3, [pc, #120]	; (8006e54 <UART_SetConfig+0x904>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	08db      	lsrs	r3, r3, #3
 8006de0:	f003 0303 	and.w	r3, r3, #3
 8006de4:	4a1d      	ldr	r2, [pc, #116]	; (8006e5c <UART_SetConfig+0x90c>)
 8006de6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006dec:	e00f      	b.n	8006e0e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006dee:	4b1b      	ldr	r3, [pc, #108]	; (8006e5c <UART_SetConfig+0x90c>)
 8006df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006df2:	e00c      	b.n	8006e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006df4:	4b1a      	ldr	r3, [pc, #104]	; (8006e60 <UART_SetConfig+0x910>)
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006df8:	e009      	b.n	8006e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e00:	e005      	b.n	8006e0e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006e0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 81ee 	beq.w	80071f2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	4a12      	ldr	r2, [pc, #72]	; (8006e64 <UART_SetConfig+0x914>)
 8006e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e20:	461a      	mov	r2, r3
 8006e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e28:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	4413      	add	r3, r2
 8006e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d305      	bcc.n	8006e46 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d910      	bls.n	8006e68 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006e4c:	e1d1      	b.n	80071f2 <UART_SetConfig+0xca2>
 8006e4e:	bf00      	nop
 8006e50:	40011c00 	.word	0x40011c00
 8006e54:	58024400 	.word	0x58024400
 8006e58:	58000c00 	.word	0x58000c00
 8006e5c:	03d09000 	.word	0x03d09000
 8006e60:	003d0900 	.word	0x003d0900
 8006e64:	08012b04 	.word	0x08012b04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	60bb      	str	r3, [r7, #8]
 8006e6e:	60fa      	str	r2, [r7, #12]
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	4ac0      	ldr	r2, [pc, #768]	; (8007178 <UART_SetConfig+0xc28>)
 8006e76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	603b      	str	r3, [r7, #0]
 8006e80:	607a      	str	r2, [r7, #4]
 8006e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e8a:	f7f9 fbb1 	bl	80005f0 <__aeabi_uldivmod>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4610      	mov	r0, r2
 8006e94:	4619      	mov	r1, r3
 8006e96:	f04f 0200 	mov.w	r2, #0
 8006e9a:	f04f 0300 	mov.w	r3, #0
 8006e9e:	020b      	lsls	r3, r1, #8
 8006ea0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ea4:	0202      	lsls	r2, r0, #8
 8006ea6:	6979      	ldr	r1, [r7, #20]
 8006ea8:	6849      	ldr	r1, [r1, #4]
 8006eaa:	0849      	lsrs	r1, r1, #1
 8006eac:	2000      	movs	r0, #0
 8006eae:	460c      	mov	r4, r1
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	eb12 0804 	adds.w	r8, r2, r4
 8006eb6:	eb43 0905 	adc.w	r9, r3, r5
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	469a      	mov	sl, r3
 8006ec2:	4693      	mov	fp, r2
 8006ec4:	4652      	mov	r2, sl
 8006ec6:	465b      	mov	r3, fp
 8006ec8:	4640      	mov	r0, r8
 8006eca:	4649      	mov	r1, r9
 8006ecc:	f7f9 fb90 	bl	80005f0 <__aeabi_uldivmod>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ede:	d308      	bcc.n	8006ef2 <UART_SetConfig+0x9a2>
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ee6:	d204      	bcs.n	8006ef2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eee:	60da      	str	r2, [r3, #12]
 8006ef0:	e17f      	b.n	80071f2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006ef8:	e17b      	b.n	80071f2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f02:	f040 80bd 	bne.w	8007080 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006f06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	dc48      	bgt.n	8006fa0 <UART_SetConfig+0xa50>
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	db7b      	blt.n	800700a <UART_SetConfig+0xaba>
 8006f12:	2b20      	cmp	r3, #32
 8006f14:	d879      	bhi.n	800700a <UART_SetConfig+0xaba>
 8006f16:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <UART_SetConfig+0x9cc>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006fa7 	.word	0x08006fa7
 8006f20:	08006faf 	.word	0x08006faf
 8006f24:	0800700b 	.word	0x0800700b
 8006f28:	0800700b 	.word	0x0800700b
 8006f2c:	08006fb7 	.word	0x08006fb7
 8006f30:	0800700b 	.word	0x0800700b
 8006f34:	0800700b 	.word	0x0800700b
 8006f38:	0800700b 	.word	0x0800700b
 8006f3c:	08006fc7 	.word	0x08006fc7
 8006f40:	0800700b 	.word	0x0800700b
 8006f44:	0800700b 	.word	0x0800700b
 8006f48:	0800700b 	.word	0x0800700b
 8006f4c:	0800700b 	.word	0x0800700b
 8006f50:	0800700b 	.word	0x0800700b
 8006f54:	0800700b 	.word	0x0800700b
 8006f58:	0800700b 	.word	0x0800700b
 8006f5c:	08006fd7 	.word	0x08006fd7
 8006f60:	0800700b 	.word	0x0800700b
 8006f64:	0800700b 	.word	0x0800700b
 8006f68:	0800700b 	.word	0x0800700b
 8006f6c:	0800700b 	.word	0x0800700b
 8006f70:	0800700b 	.word	0x0800700b
 8006f74:	0800700b 	.word	0x0800700b
 8006f78:	0800700b 	.word	0x0800700b
 8006f7c:	0800700b 	.word	0x0800700b
 8006f80:	0800700b 	.word	0x0800700b
 8006f84:	0800700b 	.word	0x0800700b
 8006f88:	0800700b 	.word	0x0800700b
 8006f8c:	0800700b 	.word	0x0800700b
 8006f90:	0800700b 	.word	0x0800700b
 8006f94:	0800700b 	.word	0x0800700b
 8006f98:	0800700b 	.word	0x0800700b
 8006f9c:	08006ffd 	.word	0x08006ffd
 8006fa0:	2b40      	cmp	r3, #64	; 0x40
 8006fa2:	d02e      	beq.n	8007002 <UART_SetConfig+0xab2>
 8006fa4:	e031      	b.n	800700a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fa6:	f7fd f8d1 	bl	800414c <HAL_RCC_GetPCLK1Freq>
 8006faa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006fac:	e033      	b.n	8007016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fae:	f7fd f8e3 	bl	8004178 <HAL_RCC_GetPCLK2Freq>
 8006fb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006fb4:	e02f      	b.n	8007016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe faea 	bl	8005594 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fc4:	e027      	b.n	8007016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fc6:	f107 0318 	add.w	r3, r7, #24
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe fc36 	bl	800583c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fd4:	e01f      	b.n	8007016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fd6:	4b69      	ldr	r3, [pc, #420]	; (800717c <UART_SetConfig+0xc2c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0320 	and.w	r3, r3, #32
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d009      	beq.n	8006ff6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006fe2:	4b66      	ldr	r3, [pc, #408]	; (800717c <UART_SetConfig+0xc2c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	08db      	lsrs	r3, r3, #3
 8006fe8:	f003 0303 	and.w	r3, r3, #3
 8006fec:	4a64      	ldr	r2, [pc, #400]	; (8007180 <UART_SetConfig+0xc30>)
 8006fee:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ff4:	e00f      	b.n	8007016 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006ff6:	4b62      	ldr	r3, [pc, #392]	; (8007180 <UART_SetConfig+0xc30>)
 8006ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ffa:	e00c      	b.n	8007016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ffc:	4b61      	ldr	r3, [pc, #388]	; (8007184 <UART_SetConfig+0xc34>)
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007000:	e009      	b.n	8007016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007008:	e005      	b.n	8007016 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800700a:	2300      	movs	r3, #0
 800700c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007014:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 80ea 	beq.w	80071f2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007022:	4a55      	ldr	r2, [pc, #340]	; (8007178 <UART_SetConfig+0xc28>)
 8007024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007028:	461a      	mov	r2, r3
 800702a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800702c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007030:	005a      	lsls	r2, r3, #1
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	085b      	lsrs	r3, r3, #1
 8007038:	441a      	add	r2, r3
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007042:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007046:	2b0f      	cmp	r3, #15
 8007048:	d916      	bls.n	8007078 <UART_SetConfig+0xb28>
 800704a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007050:	d212      	bcs.n	8007078 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007054:	b29b      	uxth	r3, r3
 8007056:	f023 030f 	bic.w	r3, r3, #15
 800705a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	085b      	lsrs	r3, r3, #1
 8007060:	b29b      	uxth	r3, r3
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	b29a      	uxth	r2, r3
 8007068:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800706a:	4313      	orrs	r3, r2
 800706c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007074:	60da      	str	r2, [r3, #12]
 8007076:	e0bc      	b.n	80071f2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800707e:	e0b8      	b.n	80071f2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007080:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007084:	2b20      	cmp	r3, #32
 8007086:	dc4b      	bgt.n	8007120 <UART_SetConfig+0xbd0>
 8007088:	2b00      	cmp	r3, #0
 800708a:	f2c0 8087 	blt.w	800719c <UART_SetConfig+0xc4c>
 800708e:	2b20      	cmp	r3, #32
 8007090:	f200 8084 	bhi.w	800719c <UART_SetConfig+0xc4c>
 8007094:	a201      	add	r2, pc, #4	; (adr r2, 800709c <UART_SetConfig+0xb4c>)
 8007096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709a:	bf00      	nop
 800709c:	08007127 	.word	0x08007127
 80070a0:	0800712f 	.word	0x0800712f
 80070a4:	0800719d 	.word	0x0800719d
 80070a8:	0800719d 	.word	0x0800719d
 80070ac:	08007137 	.word	0x08007137
 80070b0:	0800719d 	.word	0x0800719d
 80070b4:	0800719d 	.word	0x0800719d
 80070b8:	0800719d 	.word	0x0800719d
 80070bc:	08007147 	.word	0x08007147
 80070c0:	0800719d 	.word	0x0800719d
 80070c4:	0800719d 	.word	0x0800719d
 80070c8:	0800719d 	.word	0x0800719d
 80070cc:	0800719d 	.word	0x0800719d
 80070d0:	0800719d 	.word	0x0800719d
 80070d4:	0800719d 	.word	0x0800719d
 80070d8:	0800719d 	.word	0x0800719d
 80070dc:	08007157 	.word	0x08007157
 80070e0:	0800719d 	.word	0x0800719d
 80070e4:	0800719d 	.word	0x0800719d
 80070e8:	0800719d 	.word	0x0800719d
 80070ec:	0800719d 	.word	0x0800719d
 80070f0:	0800719d 	.word	0x0800719d
 80070f4:	0800719d 	.word	0x0800719d
 80070f8:	0800719d 	.word	0x0800719d
 80070fc:	0800719d 	.word	0x0800719d
 8007100:	0800719d 	.word	0x0800719d
 8007104:	0800719d 	.word	0x0800719d
 8007108:	0800719d 	.word	0x0800719d
 800710c:	0800719d 	.word	0x0800719d
 8007110:	0800719d 	.word	0x0800719d
 8007114:	0800719d 	.word	0x0800719d
 8007118:	0800719d 	.word	0x0800719d
 800711c:	0800718f 	.word	0x0800718f
 8007120:	2b40      	cmp	r3, #64	; 0x40
 8007122:	d037      	beq.n	8007194 <UART_SetConfig+0xc44>
 8007124:	e03a      	b.n	800719c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007126:	f7fd f811 	bl	800414c <HAL_RCC_GetPCLK1Freq>
 800712a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800712c:	e03c      	b.n	80071a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800712e:	f7fd f823 	bl	8004178 <HAL_RCC_GetPCLK2Freq>
 8007132:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007134:	e038      	b.n	80071a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe fa2a 	bl	8005594 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007144:	e030      	b.n	80071a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007146:	f107 0318 	add.w	r3, r7, #24
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe fb76 	bl	800583c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007154:	e028      	b.n	80071a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007156:	4b09      	ldr	r3, [pc, #36]	; (800717c <UART_SetConfig+0xc2c>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0320 	and.w	r3, r3, #32
 800715e:	2b00      	cmp	r3, #0
 8007160:	d012      	beq.n	8007188 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007162:	4b06      	ldr	r3, [pc, #24]	; (800717c <UART_SetConfig+0xc2c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	08db      	lsrs	r3, r3, #3
 8007168:	f003 0303 	and.w	r3, r3, #3
 800716c:	4a04      	ldr	r2, [pc, #16]	; (8007180 <UART_SetConfig+0xc30>)
 800716e:	fa22 f303 	lsr.w	r3, r2, r3
 8007172:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007174:	e018      	b.n	80071a8 <UART_SetConfig+0xc58>
 8007176:	bf00      	nop
 8007178:	08012b04 	.word	0x08012b04
 800717c:	58024400 	.word	0x58024400
 8007180:	03d09000 	.word	0x03d09000
 8007184:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007188:	4b24      	ldr	r3, [pc, #144]	; (800721c <UART_SetConfig+0xccc>)
 800718a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800718c:	e00c      	b.n	80071a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800718e:	4b24      	ldr	r3, [pc, #144]	; (8007220 <UART_SetConfig+0xcd0>)
 8007190:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007192:	e009      	b.n	80071a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800719a:	e005      	b.n	80071a8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80071a6:	bf00      	nop
    }

    if (pclk != 0U)
 80071a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d021      	beq.n	80071f2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	4a1c      	ldr	r2, [pc, #112]	; (8007224 <UART_SetConfig+0xcd4>)
 80071b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071b8:	461a      	mov	r2, r3
 80071ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	085b      	lsrs	r3, r3, #1
 80071c6:	441a      	add	r2, r3
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d4:	2b0f      	cmp	r3, #15
 80071d6:	d909      	bls.n	80071ec <UART_SetConfig+0xc9c>
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071de:	d205      	bcs.n	80071ec <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	60da      	str	r2, [r3, #12]
 80071ea:	e002      	b.n	80071f2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2200      	movs	r2, #0
 8007206:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2200      	movs	r2, #0
 800720c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800720e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007212:	4618      	mov	r0, r3
 8007214:	3748      	adds	r7, #72	; 0x48
 8007216:	46bd      	mov	sp, r7
 8007218:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800721c:	03d09000 	.word	0x03d09000
 8007220:	003d0900 	.word	0x003d0900
 8007224:	08012b04 	.word	0x08012b04

08007228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	430a      	orrs	r2, r1
 8007272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007278:	f003 0304 	and.w	r3, r3, #4
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00a      	beq.n	8007296 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729a:	f003 0308 	and.w	r3, r3, #8
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00a      	beq.n	80072da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072de:	f003 0320 	and.w	r3, r3, #32
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00a      	beq.n	80072fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007304:	2b00      	cmp	r3, #0
 8007306:	d01a      	beq.n	800733e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007326:	d10a      	bne.n	800733e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	605a      	str	r2, [r3, #4]
  }
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b098      	sub	sp, #96	; 0x60
 8007370:	af02      	add	r7, sp, #8
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800737c:	f7f9 ff9a 	bl	80012b4 <HAL_GetTick>
 8007380:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0308 	and.w	r3, r3, #8
 800738c:	2b08      	cmp	r3, #8
 800738e:	d12f      	bne.n	80073f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007398:	2200      	movs	r2, #0
 800739a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f88e 	bl	80074c0 <UART_WaitOnFlagUntilTimeout>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d022      	beq.n	80073f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073be:	653b      	str	r3, [r7, #80]	; 0x50
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	461a      	mov	r2, r3
 80073c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073c8:	647b      	str	r3, [r7, #68]	; 0x44
 80073ca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073d0:	e841 2300 	strex	r3, r2, [r1]
 80073d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e6      	bne.n	80073aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2220      	movs	r2, #32
 80073e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e063      	b.n	80074b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0304 	and.w	r3, r3, #4
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	d149      	bne.n	8007492 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007406:	2200      	movs	r2, #0
 8007408:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f857 	bl	80074c0 <UART_WaitOnFlagUntilTimeout>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d03c      	beq.n	8007492 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	623b      	str	r3, [r7, #32]
   return(result);
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800742c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007436:	633b      	str	r3, [r7, #48]	; 0x30
 8007438:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800743c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e6      	bne.n	8007418 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3308      	adds	r3, #8
 8007450:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	60fb      	str	r3, [r7, #12]
   return(result);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f023 0301 	bic.w	r3, r3, #1
 8007460:	64bb      	str	r3, [r7, #72]	; 0x48
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3308      	adds	r3, #8
 8007468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800746a:	61fa      	str	r2, [r7, #28]
 800746c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746e:	69b9      	ldr	r1, [r7, #24]
 8007470:	69fa      	ldr	r2, [r7, #28]
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	617b      	str	r3, [r7, #20]
   return(result);
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1e5      	bne.n	800744a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2220      	movs	r2, #32
 8007482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e012      	b.n	80074b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2220      	movs	r2, #32
 8007496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2220      	movs	r2, #32
 800749e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3758      	adds	r7, #88	; 0x58
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	603b      	str	r3, [r7, #0]
 80074cc:	4613      	mov	r3, r2
 80074ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d0:	e049      	b.n	8007566 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d8:	d045      	beq.n	8007566 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074da:	f7f9 feeb 	bl	80012b4 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d302      	bcc.n	80074f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e048      	b.n	8007586 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0304 	and.w	r3, r3, #4
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d031      	beq.n	8007566 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	f003 0308 	and.w	r3, r3, #8
 800750c:	2b08      	cmp	r3, #8
 800750e:	d110      	bne.n	8007532 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2208      	movs	r2, #8
 8007516:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f000 f839 	bl	8007590 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2208      	movs	r2, #8
 8007522:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e029      	b.n	8007586 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800753c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007540:	d111      	bne.n	8007566 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800754a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f81f 	bl	8007590 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2220      	movs	r2, #32
 8007556:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e00f      	b.n	8007586 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69da      	ldr	r2, [r3, #28]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	4013      	ands	r3, r2
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	429a      	cmp	r2, r3
 8007574:	bf0c      	ite	eq
 8007576:	2301      	moveq	r3, #1
 8007578:	2300      	movne	r3, #0
 800757a:	b2db      	uxtb	r3, r3
 800757c:	461a      	mov	r2, r3
 800757e:	79fb      	ldrb	r3, [r7, #7]
 8007580:	429a      	cmp	r2, r3
 8007582:	d0a6      	beq.n	80074d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
	...

08007590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007590:	b480      	push	{r7}
 8007592:	b095      	sub	sp, #84	; 0x54
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a0:	e853 3f00 	ldrex	r3, [r3]
 80075a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075b6:	643b      	str	r3, [r7, #64]	; 0x40
 80075b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075be:	e841 2300 	strex	r3, r2, [r1]
 80075c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e6      	bne.n	8007598 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3308      	adds	r3, #8
 80075d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80075da:	69fa      	ldr	r2, [r7, #28]
 80075dc:	4b1e      	ldr	r3, [pc, #120]	; (8007658 <UART_EndRxTransfer+0xc8>)
 80075de:	4013      	ands	r3, r2
 80075e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3308      	adds	r3, #8
 80075e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e5      	bne.n	80075ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007602:	2b01      	cmp	r3, #1
 8007604:	d118      	bne.n	8007638 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	e853 3f00 	ldrex	r3, [r3]
 8007612:	60bb      	str	r3, [r7, #8]
   return(result);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f023 0310 	bic.w	r3, r3, #16
 800761a:	647b      	str	r3, [r7, #68]	; 0x44
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	461a      	mov	r2, r3
 8007622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007624:	61bb      	str	r3, [r7, #24]
 8007626:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007628:	6979      	ldr	r1, [r7, #20]
 800762a:	69ba      	ldr	r2, [r7, #24]
 800762c:	e841 2300 	strex	r3, r2, [r1]
 8007630:	613b      	str	r3, [r7, #16]
   return(result);
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1e6      	bne.n	8007606 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2220      	movs	r2, #32
 800763c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800764c:	bf00      	nop
 800764e:	3754      	adds	r7, #84	; 0x54
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	effffffe 	.word	0xeffffffe

0800765c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800766a:	2b01      	cmp	r3, #1
 800766c:	d101      	bne.n	8007672 <HAL_UARTEx_DisableFifoMode+0x16>
 800766e:	2302      	movs	r3, #2
 8007670:	e027      	b.n	80076c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2224      	movs	r2, #36	; 0x24
 800767e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f022 0201 	bic.w	r2, r2, #1
 8007698:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80076a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2220      	movs	r2, #32
 80076b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d101      	bne.n	80076e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076e2:	2302      	movs	r3, #2
 80076e4:	e02d      	b.n	8007742 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2224      	movs	r2, #36	; 0x24
 80076f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f022 0201 	bic.w	r2, r2, #1
 800770c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f850 	bl	80077c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2220      	movs	r2, #32
 8007734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800775a:	2b01      	cmp	r3, #1
 800775c:	d101      	bne.n	8007762 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800775e:	2302      	movs	r3, #2
 8007760:	e02d      	b.n	80077be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2224      	movs	r2, #36	; 0x24
 800776e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0201 	bic.w	r2, r2, #1
 8007788:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f812 	bl	80077c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2220      	movs	r2, #32
 80077b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
	...

080077c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d108      	bne.n	80077ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077e8:	e031      	b.n	800784e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077ea:	2310      	movs	r3, #16
 80077ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077ee:	2310      	movs	r3, #16
 80077f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	0e5b      	lsrs	r3, r3, #25
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	f003 0307 	and.w	r3, r3, #7
 8007800:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	0f5b      	lsrs	r3, r3, #29
 800780a:	b2db      	uxtb	r3, r3
 800780c:	f003 0307 	and.w	r3, r3, #7
 8007810:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007812:	7bbb      	ldrb	r3, [r7, #14]
 8007814:	7b3a      	ldrb	r2, [r7, #12]
 8007816:	4911      	ldr	r1, [pc, #68]	; (800785c <UARTEx_SetNbDataToProcess+0x94>)
 8007818:	5c8a      	ldrb	r2, [r1, r2]
 800781a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800781e:	7b3a      	ldrb	r2, [r7, #12]
 8007820:	490f      	ldr	r1, [pc, #60]	; (8007860 <UARTEx_SetNbDataToProcess+0x98>)
 8007822:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007824:	fb93 f3f2 	sdiv	r3, r3, r2
 8007828:	b29a      	uxth	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	7b7a      	ldrb	r2, [r7, #13]
 8007834:	4909      	ldr	r1, [pc, #36]	; (800785c <UARTEx_SetNbDataToProcess+0x94>)
 8007836:	5c8a      	ldrb	r2, [r1, r2]
 8007838:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800783c:	7b7a      	ldrb	r2, [r7, #13]
 800783e:	4908      	ldr	r1, [pc, #32]	; (8007860 <UARTEx_SetNbDataToProcess+0x98>)
 8007840:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007842:	fb93 f3f2 	sdiv	r3, r3, r2
 8007846:	b29a      	uxth	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800784e:	bf00      	nop
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	08012b1c 	.word	0x08012b1c
 8007860:	08012b24 	.word	0x08012b24

08007864 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007864:	b084      	sub	sp, #16
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	f107 001c 	add.w	r0, r7, #28
 8007872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	2b01      	cmp	r3, #1
 800787a:	d120      	bne.n	80078be <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007880:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	4b2a      	ldr	r3, [pc, #168]	; (8007938 <USB_CoreInit+0xd4>)
 800788e:	4013      	ands	r3, r2
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d105      	bne.n	80078b2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f9ee 	bl	8007c94 <USB_CoreReset>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]
 80078bc:	e01a      	b.n	80078f4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f9e2 	bl	8007c94 <USB_CoreReset>
 80078d0:	4603      	mov	r3, r0
 80078d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80078d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d106      	bne.n	80078e8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	639a      	str	r2, [r3, #56]	; 0x38
 80078e6:	e005      	b.n	80078f4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d116      	bne.n	8007928 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fe:	b29a      	uxth	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007908:	4b0c      	ldr	r3, [pc, #48]	; (800793c <USB_CoreInit+0xd8>)
 800790a:	4313      	orrs	r3, r2
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f043 0206 	orr.w	r2, r3, #6
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f043 0220 	orr.w	r2, r3, #32
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007928:	7bfb      	ldrb	r3, [r7, #15]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007934:	b004      	add	sp, #16
 8007936:	4770      	bx	lr
 8007938:	ffbdffbf 	.word	0xffbdffbf
 800793c:	03ee0000 	.word	0x03ee0000

08007940 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f043 0201 	orr.w	r2, r3, #1
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007962:	b480      	push	{r7}
 8007964:	b083      	sub	sp, #12
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f023 0201 	bic.w	r2, r3, #1
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	460b      	mov	r3, r1
 800798e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d115      	bne.n	80079d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079b2:	2001      	movs	r0, #1
 80079b4:	f7f9 fc8a 	bl	80012cc <HAL_Delay>
      ms++;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	3301      	adds	r3, #1
 80079bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f95a 	bl	8007c78 <USB_GetMode>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d01e      	beq.n	8007a08 <USB_SetCurrentMode+0x84>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b31      	cmp	r3, #49	; 0x31
 80079ce:	d9f0      	bls.n	80079b2 <USB_SetCurrentMode+0x2e>
 80079d0:	e01a      	b.n	8007a08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079d2:	78fb      	ldrb	r3, [r7, #3]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d115      	bne.n	8007a04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079e4:	2001      	movs	r0, #1
 80079e6:	f7f9 fc71 	bl	80012cc <HAL_Delay>
      ms++;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	3301      	adds	r3, #1
 80079ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f941 	bl	8007c78 <USB_GetMode>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d005      	beq.n	8007a08 <USB_SetCurrentMode+0x84>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b31      	cmp	r3, #49	; 0x31
 8007a00:	d9f0      	bls.n	80079e4 <USB_SetCurrentMode+0x60>
 8007a02:	e001      	b.n	8007a08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e005      	b.n	8007a14 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b32      	cmp	r3, #50	; 0x32
 8007a0c:	d101      	bne.n	8007a12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e000      	b.n	8007a14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	4a13      	ldr	r2, [pc, #76]	; (8007a80 <USB_FlushTxFifo+0x64>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d901      	bls.n	8007a3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e01b      	b.n	8007a74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	daf2      	bge.n	8007a2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	019b      	lsls	r3, r3, #6
 8007a4c:	f043 0220 	orr.w	r2, r3, #32
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3301      	adds	r3, #1
 8007a58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4a08      	ldr	r2, [pc, #32]	; (8007a80 <USB_FlushTxFifo+0x64>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d901      	bls.n	8007a66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e006      	b.n	8007a74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	f003 0320 	and.w	r3, r3, #32
 8007a6e:	2b20      	cmp	r3, #32
 8007a70:	d0f0      	beq.n	8007a54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	00030d40 	.word	0x00030d40

08007a84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3301      	adds	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	4a11      	ldr	r2, [pc, #68]	; (8007ae0 <USB_FlushRxFifo+0x5c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d901      	bls.n	8007aa2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e018      	b.n	8007ad4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	daf2      	bge.n	8007a90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2210      	movs	r2, #16
 8007ab2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4a08      	ldr	r2, [pc, #32]	; (8007ae0 <USB_FlushRxFifo+0x5c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d901      	bls.n	8007ac6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e006      	b.n	8007ad4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f003 0310 	and.w	r3, r3, #16
 8007ace:	2b10      	cmp	r3, #16
 8007ad0:	d0f0      	beq.n	8007ab4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	00030d40 	.word	0x00030d40

08007ae4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b089      	sub	sp, #36	; 0x24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	4611      	mov	r1, r2
 8007af0:	461a      	mov	r2, r3
 8007af2:	460b      	mov	r3, r1
 8007af4:	71fb      	strb	r3, [r7, #7]
 8007af6:	4613      	mov	r3, r2
 8007af8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d123      	bne.n	8007b52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b0a:	88bb      	ldrh	r3, [r7, #4]
 8007b0c:	3303      	adds	r3, #3
 8007b0e:	089b      	lsrs	r3, r3, #2
 8007b10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b12:	2300      	movs	r3, #0
 8007b14:	61bb      	str	r3, [r7, #24]
 8007b16:	e018      	b.n	8007b4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b18:	79fb      	ldrb	r3, [r7, #7]
 8007b1a:	031a      	lsls	r2, r3, #12
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b24:	461a      	mov	r2, r3
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	3301      	adds	r3, #1
 8007b36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	3301      	adds	r3, #1
 8007b42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	3301      	adds	r3, #1
 8007b48:	61bb      	str	r3, [r7, #24]
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d3e2      	bcc.n	8007b18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3724      	adds	r7, #36	; 0x24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b08b      	sub	sp, #44	; 0x2c
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b76:	88fb      	ldrh	r3, [r7, #6]
 8007b78:	089b      	lsrs	r3, r3, #2
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b7e:	88fb      	ldrh	r3, [r7, #6]
 8007b80:	f003 0303 	and.w	r3, r3, #3
 8007b84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b86:	2300      	movs	r3, #0
 8007b88:	623b      	str	r3, [r7, #32]
 8007b8a:	e014      	b.n	8007bb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	3301      	adds	r3, #1
 8007bae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	623b      	str	r3, [r7, #32]
 8007bb6:	6a3a      	ldr	r2, [r7, #32]
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d3e6      	bcc.n	8007b8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007bbe:	8bfb      	ldrh	r3, [r7, #30]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d01e      	beq.n	8007c02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f107 0310 	add.w	r3, r7, #16
 8007bd4:	6812      	ldr	r2, [r2, #0]
 8007bd6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	fa22 f303 	lsr.w	r3, r2, r3
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	701a      	strb	r2, [r3, #0]
      i++;
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	3301      	adds	r3, #1
 8007bee:	623b      	str	r3, [r7, #32]
      pDest++;
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007bf6:	8bfb      	ldrh	r3, [r7, #30]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007bfc:	8bfb      	ldrh	r3, [r7, #30]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1ea      	bne.n	8007bd8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	372c      	adds	r7, #44	; 0x2c
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	4013      	ands	r3, r2
 8007c26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c28:	68fb      	ldr	r3, [r7, #12]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b085      	sub	sp, #20
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	460b      	mov	r3, r1
 8007c40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	015a      	lsls	r2, r3, #5
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	4013      	ands	r3, r2
 8007c68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	f003 0301 	and.w	r3, r3, #1
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	4a13      	ldr	r2, [pc, #76]	; (8007cf8 <USB_CoreReset+0x64>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d901      	bls.n	8007cb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e01b      	b.n	8007cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	daf2      	bge.n	8007ca0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	f043 0201 	orr.w	r2, r3, #1
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4a09      	ldr	r2, [pc, #36]	; (8007cf8 <USB_CoreReset+0x64>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d901      	bls.n	8007cdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e006      	b.n	8007cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d0f0      	beq.n	8007cca <USB_CoreReset+0x36>

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	00030d40 	.word	0x00030d40

08007cfc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cfc:	b084      	sub	sp, #16
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b086      	sub	sp, #24
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	2300      	movs	r3, #0
 8007d20:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d26:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d018      	beq.n	8007d78 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d10a      	bne.n	8007d62 <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d5a:	f043 0304 	orr.w	r3, r3, #4
 8007d5e:	6013      	str	r3, [r2, #0]
 8007d60:	e014      	b.n	8007d8c <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d70:	f023 0304 	bic.w	r3, r3, #4
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	e009      	b.n	8007d8c <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d86:	f023 0304 	bic.w	r3, r3, #4
 8007d8a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d8c:	2110      	movs	r1, #16
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7ff fe44 	bl	8007a1c <USB_FlushTxFifo>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7ff fe70 	bl	8007a84 <USB_FlushRxFifo>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007dae:	2300      	movs	r3, #0
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	e015      	b.n	8007de0 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	613b      	str	r3, [r7, #16]
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d3e5      	bcc.n	8007db4 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f04f 32ff 	mov.w	r2, #4294967295
 8007df4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00b      	beq.n	8007e1a <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e08:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a13      	ldr	r2, [pc, #76]	; (8007e5c <USB_HostInit+0x160>)
 8007e0e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a13      	ldr	r2, [pc, #76]	; (8007e60 <USB_HostInit+0x164>)
 8007e14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007e18:	e009      	b.n	8007e2e <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2280      	movs	r2, #128	; 0x80
 8007e1e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a10      	ldr	r2, [pc, #64]	; (8007e64 <USB_HostInit+0x168>)
 8007e24:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a0f      	ldr	r2, [pc, #60]	; (8007e68 <USB_HostInit+0x16c>)
 8007e2a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d105      	bne.n	8007e40 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	f043 0210 	orr.w	r2, r3, #16
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699a      	ldr	r2, [r3, #24]
 8007e44:	4b09      	ldr	r3, [pc, #36]	; (8007e6c <USB_HostInit+0x170>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e58:	b004      	add	sp, #16
 8007e5a:	4770      	bx	lr
 8007e5c:	01000200 	.word	0x01000200
 8007e60:	00e00300 	.word	0x00e00300
 8007e64:	00600080 	.word	0x00600080
 8007e68:	004000e0 	.word	0x004000e0
 8007e6c:	a3200008 	.word	0xa3200008

08007e70 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e8e:	f023 0303 	bic.w	r3, r3, #3
 8007e92:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	f003 0303 	and.w	r3, r3, #3
 8007ea2:	68f9      	ldr	r1, [r7, #12]
 8007ea4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d107      	bne.n	8007ec2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eb8:	461a      	mov	r2, r3
 8007eba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007ebe:	6053      	str	r3, [r2, #4]
 8007ec0:	e00c      	b.n	8007edc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007ec2:	78fb      	ldrb	r3, [r7, #3]
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d107      	bne.n	8007ed8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f241 7370 	movw	r3, #6000	; 0x1770
 8007ed4:	6053      	str	r3, [r2, #4]
 8007ed6:	e001      	b.n	8007edc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e000      	b.n	8007ede <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007f0a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f18:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007f1a:	2064      	movs	r0, #100	; 0x64
 8007f1c:	f7f9 f9d6 	bl	80012cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f2c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007f2e:	200a      	movs	r0, #10
 8007f30:	f7f9 f9cc 	bl	80012cc <HAL_Delay>

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b085      	sub	sp, #20
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	460b      	mov	r3, r1
 8007f48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007f62:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d109      	bne.n	8007f82 <USB_DriveVbus+0x44>
 8007f6e:	78fb      	ldrb	r3, [r7, #3]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d106      	bne.n	8007f82 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f80:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f8c:	d109      	bne.n	8007fa2 <USB_DriveVbus+0x64>
 8007f8e:	78fb      	ldrb	r3, [r7, #3]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d106      	bne.n	8007fa2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fa0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	0c5b      	lsrs	r3, r3, #17
 8007fce:	f003 0303 	and.w	r3, r3, #3
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b085      	sub	sp, #20
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	b29b      	uxth	r3, r3
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	4608      	mov	r0, r1
 800800a:	4611      	mov	r1, r2
 800800c:	461a      	mov	r2, r3
 800800e:	4603      	mov	r3, r0
 8008010:	70fb      	strb	r3, [r7, #3]
 8008012:	460b      	mov	r3, r1
 8008014:	70bb      	strb	r3, [r7, #2]
 8008016:	4613      	mov	r3, r2
 8008018:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008022:	78fb      	ldrb	r3, [r7, #3]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	4413      	add	r3, r2
 800802a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800802e:	461a      	mov	r2, r3
 8008030:	f04f 33ff 	mov.w	r3, #4294967295
 8008034:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008036:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800803a:	2b03      	cmp	r3, #3
 800803c:	d87e      	bhi.n	800813c <USB_HC_Init+0x13c>
 800803e:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <USB_HC_Init+0x44>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	08008055 	.word	0x08008055
 8008048:	080080ff 	.word	0x080080ff
 800804c:	08008055 	.word	0x08008055
 8008050:	080080c1 	.word	0x080080c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008054:	78fb      	ldrb	r3, [r7, #3]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	4413      	add	r3, r2
 800805c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008060:	461a      	mov	r2, r3
 8008062:	f240 439d 	movw	r3, #1181	; 0x49d
 8008066:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008068:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800806c:	2b00      	cmp	r3, #0
 800806e:	da10      	bge.n	8008092 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	4413      	add	r3, r2
 8008078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	78fa      	ldrb	r2, [r7, #3]
 8008080:	0151      	lsls	r1, r2, #5
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	440a      	add	r2, r1
 8008086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800808a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800808e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008090:	e057      	b.n	8008142 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800809a:	2b00      	cmp	r3, #0
 800809c:	d051      	beq.n	8008142 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800809e:	78fb      	ldrb	r3, [r7, #3]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	78fa      	ldrb	r2, [r7, #3]
 80080ae:	0151      	lsls	r1, r2, #5
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	440a      	add	r2, r1
 80080b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80080bc:	60d3      	str	r3, [r2, #12]
      break;
 80080be:	e040      	b.n	8008142 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080cc:	461a      	mov	r2, r3
 80080ce:	f240 639d 	movw	r3, #1693	; 0x69d
 80080d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80080d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	da34      	bge.n	8008146 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80080dc:	78fb      	ldrb	r3, [r7, #3]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	78fa      	ldrb	r2, [r7, #3]
 80080ec:	0151      	lsls	r1, r2, #5
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	440a      	add	r2, r1
 80080f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80080fc:	e023      	b.n	8008146 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	4413      	add	r3, r2
 8008106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800810a:	461a      	mov	r2, r3
 800810c:	f240 2325 	movw	r3, #549	; 0x225
 8008110:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008112:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008116:	2b00      	cmp	r3, #0
 8008118:	da17      	bge.n	800814a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800811a:	78fb      	ldrb	r3, [r7, #3]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	4413      	add	r3, r2
 8008122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	78fa      	ldrb	r2, [r7, #3]
 800812a:	0151      	lsls	r1, r2, #5
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	440a      	add	r2, r1
 8008130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008134:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008138:	60d3      	str	r3, [r2, #12]
      }
      break;
 800813a:	e006      	b.n	800814a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	77fb      	strb	r3, [r7, #31]
      break;
 8008140:	e004      	b.n	800814c <USB_HC_Init+0x14c>
      break;
 8008142:	bf00      	nop
 8008144:	e002      	b.n	800814c <USB_HC_Init+0x14c>
      break;
 8008146:	bf00      	nop
 8008148:	e000      	b.n	800814c <USB_HC_Init+0x14c>
      break;
 800814a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800814c:	78fb      	ldrb	r3, [r7, #3]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	4413      	add	r3, r2
 8008154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	78fa      	ldrb	r2, [r7, #3]
 800815c:	0151      	lsls	r1, r2, #5
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	440a      	add	r2, r1
 8008162:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008166:	f043 0302 	orr.w	r3, r3, #2
 800816a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008172:	699a      	ldr	r2, [r3, #24]
 8008174:	78fb      	ldrb	r3, [r7, #3]
 8008176:	f003 030f 	and.w	r3, r3, #15
 800817a:	2101      	movs	r1, #1
 800817c:	fa01 f303 	lsl.w	r3, r1, r3
 8008180:	6939      	ldr	r1, [r7, #16]
 8008182:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008186:	4313      	orrs	r3, r2
 8008188:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008196:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800819a:	2b00      	cmp	r3, #0
 800819c:	da03      	bge.n	80081a6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800819e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081a2:	61bb      	str	r3, [r7, #24]
 80081a4:	e001      	b.n	80081aa <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7ff ff00 	bl	8007fb0 <USB_GetHostSpeed>
 80081b0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80081b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d106      	bne.n	80081c8 <USB_HC_Init+0x1c8>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d003      	beq.n	80081c8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80081c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80081c4:	617b      	str	r3, [r7, #20]
 80081c6:	e001      	b.n	80081cc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081cc:	787b      	ldrb	r3, [r7, #1]
 80081ce:	059b      	lsls	r3, r3, #22
 80081d0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80081d4:	78bb      	ldrb	r3, [r7, #2]
 80081d6:	02db      	lsls	r3, r3, #11
 80081d8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081dc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80081de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081e2:	049b      	lsls	r3, r3, #18
 80081e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80081e8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80081ea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80081ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80081f0:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	431a      	orrs	r2, r3
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081fa:	78fa      	ldrb	r2, [r7, #3]
 80081fc:	0151      	lsls	r1, r2, #5
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	440a      	add	r2, r1
 8008202:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800820a:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800820c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008210:	2b03      	cmp	r3, #3
 8008212:	d003      	beq.n	800821c <USB_HC_Init+0x21c>
 8008214:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008218:	2b01      	cmp	r3, #1
 800821a:	d10f      	bne.n	800823c <USB_HC_Init+0x23c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800821c:	78fb      	ldrb	r3, [r7, #3]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	4413      	add	r3, r2
 8008224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	78fa      	ldrb	r2, [r7, #3]
 800822c:	0151      	lsls	r1, r2, #5
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	440a      	add	r2, r1
 8008232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008236:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800823a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800823c:	7ffb      	ldrb	r3, [r7, #31]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3720      	adds	r7, #32
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop

08008248 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08c      	sub	sp, #48	; 0x30
 800824c:	af02      	add	r7, sp, #8
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	4613      	mov	r3, r2
 8008254:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	785b      	ldrb	r3, [r3, #1]
 800825e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008264:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800826e:	2b00      	cmp	r3, #0
 8008270:	d02d      	beq.n	80082ce <USB_HC_StartXfer+0x86>
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	791b      	ldrb	r3, [r3, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d129      	bne.n	80082ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800827a:	79fb      	ldrb	r3, [r7, #7]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d117      	bne.n	80082b0 <USB_HC_StartXfer+0x68>
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	79db      	ldrb	r3, [r3, #7]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <USB_HC_StartXfer+0x48>
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	79db      	ldrb	r3, [r3, #7]
 800828c:	2b02      	cmp	r3, #2
 800828e:	d10f      	bne.n	80082b0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	4413      	add	r3, r2
 8008298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	69fa      	ldr	r2, [r7, #28]
 80082a0:	0151      	lsls	r1, r2, #5
 80082a2:	6a3a      	ldr	r2, [r7, #32]
 80082a4:	440a      	add	r2, r1
 80082a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ae:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80082b0:	79fb      	ldrb	r3, [r7, #7]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10b      	bne.n	80082ce <USB_HC_StartXfer+0x86>
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	795b      	ldrb	r3, [r3, #5]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d107      	bne.n	80082ce <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	785b      	ldrb	r3, [r3, #1]
 80082c2:	4619      	mov	r1, r3
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 fa0f 	bl	80086e8 <USB_DoPing>
      return HAL_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	e0f8      	b.n	80084c0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d018      	beq.n	8008308 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	8912      	ldrh	r2, [r2, #8]
 80082de:	4413      	add	r3, r2
 80082e0:	3b01      	subs	r3, #1
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	8912      	ldrh	r2, [r2, #8]
 80082e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80082ea:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80082ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80082ee:	8b7b      	ldrh	r3, [r7, #26]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d90b      	bls.n	800830c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80082f4:	8b7b      	ldrh	r3, [r7, #26]
 80082f6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80082f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	8912      	ldrh	r2, [r2, #8]
 80082fe:	fb03 f202 	mul.w	r2, r3, r2
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	611a      	str	r2, [r3, #16]
 8008306:	e001      	b.n	800830c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008308:	2301      	movs	r3, #1
 800830a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	78db      	ldrb	r3, [r3, #3]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d007      	beq.n	8008324 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008314:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	8912      	ldrh	r2, [r2, #8]
 800831a:	fb03 f202 	mul.w	r2, r3, r2
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	611a      	str	r2, [r3, #16]
 8008322:	e003      	b.n	800832c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	695a      	ldr	r2, [r3, #20]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008334:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008336:	04d9      	lsls	r1, r3, #19
 8008338:	4b63      	ldr	r3, [pc, #396]	; (80084c8 <USB_HC_StartXfer+0x280>)
 800833a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800833c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	7a9b      	ldrb	r3, [r3, #10]
 8008342:	075b      	lsls	r3, r3, #29
 8008344:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008348:	69f9      	ldr	r1, [r7, #28]
 800834a:	0148      	lsls	r0, r1, #5
 800834c:	6a39      	ldr	r1, [r7, #32]
 800834e:	4401      	add	r1, r0
 8008350:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008354:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008356:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008358:	79fb      	ldrb	r3, [r7, #7]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d009      	beq.n	8008372 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	68d9      	ldr	r1, [r3, #12]
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	015a      	lsls	r2, r3, #5
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	4413      	add	r3, r2
 800836a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800836e:	460a      	mov	r2, r1
 8008370:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	bf0c      	ite	eq
 8008382:	2301      	moveq	r3, #1
 8008384:	2300      	movne	r3, #0
 8008386:	b2db      	uxtb	r3, r3
 8008388:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	4413      	add	r3, r2
 8008392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	69fa      	ldr	r2, [r7, #28]
 800839a:	0151      	lsls	r1, r2, #5
 800839c:	6a3a      	ldr	r2, [r7, #32]
 800839e:	440a      	add	r2, r1
 80083a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80083a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	7e7b      	ldrb	r3, [r7, #25]
 80083ba:	075b      	lsls	r3, r3, #29
 80083bc:	69f9      	ldr	r1, [r7, #28]
 80083be:	0148      	lsls	r0, r1, #5
 80083c0:	6a39      	ldr	r1, [r7, #32]
 80083c2:	4401      	add	r1, r0
 80083c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80083c8:	4313      	orrs	r3, r2
 80083ca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083e2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	78db      	ldrb	r3, [r3, #3]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d004      	beq.n	80083f6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083f2:	613b      	str	r3, [r7, #16]
 80083f4:	e003      	b.n	80083fe <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083fc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008404:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	4413      	add	r3, r2
 800840e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008412:	461a      	mov	r2, r3
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008418:	79fb      	ldrb	r3, [r7, #7]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	e04e      	b.n	80084c0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	78db      	ldrb	r3, [r3, #3]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d149      	bne.n	80084be <USB_HC_StartXfer+0x276>
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d045      	beq.n	80084be <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	79db      	ldrb	r3, [r3, #7]
 8008436:	2b03      	cmp	r3, #3
 8008438:	d830      	bhi.n	800849c <USB_HC_StartXfer+0x254>
 800843a:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <USB_HC_StartXfer+0x1f8>)
 800843c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008440:	08008451 	.word	0x08008451
 8008444:	08008475 	.word	0x08008475
 8008448:	08008451 	.word	0x08008451
 800844c:	08008475 	.word	0x08008475
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	3303      	adds	r3, #3
 8008456:	089b      	lsrs	r3, r3, #2
 8008458:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800845a:	8afa      	ldrh	r2, [r7, #22]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008460:	b29b      	uxth	r3, r3
 8008462:	429a      	cmp	r2, r3
 8008464:	d91c      	bls.n	80084a0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	f043 0220 	orr.w	r2, r3, #32
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	619a      	str	r2, [r3, #24]
        }
        break;
 8008472:	e015      	b.n	80084a0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	3303      	adds	r3, #3
 800847a:	089b      	lsrs	r3, r3, #2
 800847c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800847e:	8afa      	ldrh	r2, [r7, #22]
 8008480:	6a3b      	ldr	r3, [r7, #32]
 8008482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	b29b      	uxth	r3, r3
 800848a:	429a      	cmp	r2, r3
 800848c:	d90a      	bls.n	80084a4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	619a      	str	r2, [r3, #24]
        }
        break;
 800849a:	e003      	b.n	80084a4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800849c:	bf00      	nop
 800849e:	e002      	b.n	80084a6 <USB_HC_StartXfer+0x25e>
        break;
 80084a0:	bf00      	nop
 80084a2:	e000      	b.n	80084a6 <USB_HC_StartXfer+0x25e>
        break;
 80084a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	68d9      	ldr	r1, [r3, #12]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	785a      	ldrb	r2, [r3, #1]
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	2000      	movs	r0, #0
 80084b6:	9000      	str	r0, [sp, #0]
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f7ff fb13 	bl	8007ae4 <USB_WritePacket>
  }

  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3728      	adds	r7, #40	; 0x28
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	1ff80000 	.word	0x1ff80000

080084cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	b29b      	uxth	r3, r3
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80084ee:	b480      	push	{r7}
 80084f0:	b089      	sub	sp, #36	; 0x24
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	460b      	mov	r3, r1
 80084f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80084fe:	78fb      	ldrb	r3, [r7, #3]
 8008500:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008502:	2300      	movs	r3, #0
 8008504:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	4413      	add	r3, r2
 800850e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	0c9b      	lsrs	r3, r3, #18
 8008516:	f003 0303 	and.w	r3, r3, #3
 800851a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	4413      	add	r3, r2
 8008524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	0fdb      	lsrs	r3, r3, #31
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f003 0320 	and.w	r3, r3, #32
 800853a:	2b20      	cmp	r3, #32
 800853c:	d104      	bne.n	8008548 <USB_HC_Halt+0x5a>
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d101      	bne.n	8008548 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	e0c8      	b.n	80086da <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d002      	beq.n	8008554 <USB_HC_Halt+0x66>
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	2b02      	cmp	r3, #2
 8008552:	d163      	bne.n	800861c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	4413      	add	r3, r2
 800855c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	0151      	lsls	r1, r2, #5
 8008566:	69fa      	ldr	r2, [r7, #28]
 8008568:	440a      	add	r2, r1
 800856a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800856e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008572:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f003 0320 	and.w	r3, r3, #32
 800857c:	2b00      	cmp	r3, #0
 800857e:	f040 80ab 	bne.w	80086d8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008586:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d133      	bne.n	80085f6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	015a      	lsls	r2, r3, #5
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	4413      	add	r3, r2
 8008596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	69ba      	ldr	r2, [r7, #24]
 800859e:	0151      	lsls	r1, r2, #5
 80085a0:	69fa      	ldr	r2, [r7, #28]
 80085a2:	440a      	add	r2, r1
 80085a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	0151      	lsls	r1, r2, #5
 80085c0:	69fa      	ldr	r2, [r7, #28]
 80085c2:	440a      	add	r2, r1
 80085c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085cc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	3301      	adds	r3, #1
 80085d2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085da:	d81d      	bhi.n	8008618 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	015a      	lsls	r2, r3, #5
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	4413      	add	r3, r2
 80085e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085f2:	d0ec      	beq.n	80085ce <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085f4:	e070      	b.n	80086d8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	0151      	lsls	r1, r2, #5
 8008608:	69fa      	ldr	r2, [r7, #28]
 800860a:	440a      	add	r2, r1
 800860c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008610:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008614:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008616:	e05f      	b.n	80086d8 <USB_HC_Halt+0x1ea>
            break;
 8008618:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800861a:	e05d      	b.n	80086d8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	4413      	add	r3, r2
 8008624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	69ba      	ldr	r2, [r7, #24]
 800862c:	0151      	lsls	r1, r2, #5
 800862e:	69fa      	ldr	r2, [r7, #28]
 8008630:	440a      	add	r2, r1
 8008632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008636:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800863a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d133      	bne.n	80086b4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	4413      	add	r3, r2
 8008654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69ba      	ldr	r2, [r7, #24]
 800865c:	0151      	lsls	r1, r2, #5
 800865e:	69fa      	ldr	r2, [r7, #28]
 8008660:	440a      	add	r2, r1
 8008662:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800866a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	4413      	add	r3, r2
 8008674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	69ba      	ldr	r2, [r7, #24]
 800867c:	0151      	lsls	r1, r2, #5
 800867e:	69fa      	ldr	r2, [r7, #28]
 8008680:	440a      	add	r2, r1
 8008682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008686:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800868a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3301      	adds	r3, #1
 8008690:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008698:	d81d      	bhi.n	80086d6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	015a      	lsls	r2, r3, #5
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086b0:	d0ec      	beq.n	800868c <USB_HC_Halt+0x19e>
 80086b2:	e011      	b.n	80086d8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	69ba      	ldr	r2, [r7, #24]
 80086c4:	0151      	lsls	r1, r2, #5
 80086c6:	69fa      	ldr	r2, [r7, #28]
 80086c8:	440a      	add	r2, r1
 80086ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086d2:	6013      	str	r3, [r2, #0]
 80086d4:	e000      	b.n	80086d8 <USB_HC_Halt+0x1ea>
          break;
 80086d6:	bf00      	nop
    }
  }

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3724      	adds	r7, #36	; 0x24
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
	...

080086e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80086f8:	78fb      	ldrb	r3, [r7, #3]
 80086fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80086fc:	2301      	movs	r3, #1
 80086fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	04da      	lsls	r2, r3, #19
 8008704:	4b15      	ldr	r3, [pc, #84]	; (800875c <USB_DoPing+0x74>)
 8008706:	4013      	ands	r3, r2
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	0151      	lsls	r1, r2, #5
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	440a      	add	r2, r1
 8008710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008714:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008718:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	4413      	add	r3, r2
 8008722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008730:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008738:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	4413      	add	r3, r2
 8008742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008746:	461a      	mov	r2, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	371c      	adds	r7, #28
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	1ff80000 	.word	0x1ff80000

08008760 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b096      	sub	sp, #88	; 0x58
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3303      	adds	r3, #3
 8008772:	f023 0303 	bic.w	r3, r3, #3
 8008776:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008778:	f3ef 8310 	mrs	r3, PRIMASK
 800877c:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 800877e:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8008780:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8008782:	b672      	cpsid	i
#endif
    return(int_posture);
 8008784:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8008786:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008788:	4b55      	ldr	r3, [pc, #340]	; (80088e0 <_tx_byte_allocate+0x180>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800878e:	2300      	movs	r3, #0
 8008790:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008796:	621a      	str	r2, [r3, #32]
 8008798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800879a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	f383 8810 	msr	PRIMASK, r3
}
 80087a2:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 80087a4:	6879      	ldr	r1, [r7, #4]
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f000 f9b2 	bl	8008b10 <_tx_byte_pool_search>
 80087ac:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80087ae:	f3ef 8310 	mrs	r3, PRIMASK
 80087b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80087b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80087b6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80087b8:	b672      	cpsid	i
    return(int_posture);
 80087ba:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 80087bc:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 80087be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 80087c4:	2301      	movs	r3, #1
 80087c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087c8:	e006      	b.n	80087d8 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d101      	bne.n	80087d8 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 80087d4:	2301      	movs	r3, #1
 80087d6:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 80087d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0d9      	beq.n	8008792 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087e2:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 80087e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d008      	beq.n	80087fc <_tx_byte_allocate+0x9c>
 80087ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087ec:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80087ee:	6a3b      	ldr	r3, [r7, #32]
 80087f0:	f383 8810 	msr	PRIMASK, r3
}
 80087f4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 80087f6:	2300      	movs	r3, #0
 80087f8:	653b      	str	r3, [r7, #80]	; 0x50
 80087fa:	e06c      	b.n	80088d6 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d061      	beq.n	80088c6 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8008802:	4b38      	ldr	r3, [pc, #224]	; (80088e4 <_tx_byte_allocate+0x184>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d007      	beq.n	800881a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800880a:	2310      	movs	r3, #16
 800880c:	653b      	str	r3, [r7, #80]	; 0x50
 800880e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008810:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	f383 8810 	msr	PRIMASK, r3
}
 8008818:	e05d      	b.n	80088d6 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800881a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800881c:	4a32      	ldr	r2, [pc, #200]	; (80088e8 <_tx_byte_allocate+0x188>)
 800881e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8008820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8008826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800882c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8008832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008834:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800883c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008844:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884a:	1c5a      	adds	r2, r3, #1
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8008850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008852:	2b00      	cmp	r3, #0
 8008854:	d109      	bne.n	800886a <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800885a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800885c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800885e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008860:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8008862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008866:	675a      	str	r2, [r3, #116]	; 0x74
 8008868:	e011      	b.n	800888e <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8008870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008872:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008874:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8008876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800887a:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800887c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800887e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008880:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8008882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008886:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8008888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800888c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800888e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008890:	2209      	movs	r2, #9
 8008892:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008896:	2201      	movs	r2, #1
 8008898:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800889a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800889c:	683a      	ldr	r2, [r7, #0]
 800889e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80088a0:	4b10      	ldr	r3, [pc, #64]	; (80088e4 <_tx_byte_allocate+0x184>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3301      	adds	r3, #1
 80088a6:	4a0f      	ldr	r2, [pc, #60]	; (80088e4 <_tx_byte_allocate+0x184>)
 80088a8:	6013      	str	r3, [r2, #0]
 80088aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088ac:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	f383 8810 	msr	PRIMASK, r3
}
 80088b4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80088b6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80088b8:	f002 fba0 	bl	800affc <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80088bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088c2:	653b      	str	r3, [r7, #80]	; 0x50
 80088c4:	e007      	b.n	80088d6 <_tx_byte_allocate+0x176>
 80088c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088c8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f383 8810 	msr	PRIMASK, r3
}
 80088d0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 80088d2:	2310      	movs	r3, #16
 80088d4:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 80088d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3758      	adds	r7, #88	; 0x58
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	24005174 	.word	0x24005174
 80088e4:	2400520c 	.word	0x2400520c
 80088e8:	080088ed 	.word	0x080088ed

080088ec <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b08e      	sub	sp, #56	; 0x38
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80088f6:	f3ef 8310 	mrs	r3, PRIMASK
 80088fa:	623b      	str	r3, [r7, #32]
    return(posture);
 80088fc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80088fe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008900:	b672      	cpsid	i
    return(int_posture);
 8008902:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8008904:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800890a:	4a33      	ldr	r2, [pc, #204]	; (80089d8 <_tx_byte_pool_cleanup+0xec>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d158      	bne.n	80089c2 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	429a      	cmp	r2, r3
 800891a:	d152      	bne.n	80089c2 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008920:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	2b00      	cmp	r3, #0
 8008926:	d04c      	beq.n	80089c2 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a2b      	ldr	r2, [pc, #172]	; (80089dc <_tx_byte_pool_cleanup+0xf0>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d147      	bne.n	80089c2 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8008932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008936:	2b00      	cmp	r3, #0
 8008938:	d043      	beq.n	80089c2 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008944:	1e5a      	subs	r2, r3, #1
 8008946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008948:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	2b00      	cmp	r3, #0
 8008954:	d103      	bne.n	800895e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	2200      	movs	r2, #0
 800895a:	625a      	str	r2, [r3, #36]	; 0x24
 800895c:	e013      	b.n	8008986 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008962:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008968:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800896a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800896e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008974:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	429a      	cmp	r2, r3
 800897e:	d102      	bne.n	8008986 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8008980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008984:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	2b09      	cmp	r3, #9
 800898c:	d119      	bne.n	80089c2 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2210      	movs	r2, #16
 8008992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008996:	4b12      	ldr	r3, [pc, #72]	; (80089e0 <_tx_byte_pool_cleanup+0xf4>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	3301      	adds	r3, #1
 800899c:	4a10      	ldr	r2, [pc, #64]	; (80089e0 <_tx_byte_pool_cleanup+0xf4>)
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	f383 8810 	msr	PRIMASK, r3
}
 80089aa:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f002 fa25 	bl	800adfc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80089b2:	f3ef 8310 	mrs	r3, PRIMASK
 80089b6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80089b8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80089ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80089bc:	b672      	cpsid	i
    return(int_posture);
 80089be:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80089c0:	637b      	str	r3, [r7, #52]	; 0x34
 80089c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f383 8810 	msr	PRIMASK, r3
}
 80089cc:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80089ce:	bf00      	nop
 80089d0:	3738      	adds	r7, #56	; 0x38
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	080088ed 	.word	0x080088ed
 80089dc:	42595445 	.word	0x42595445
 80089e0:	2400520c 	.word	0x2400520c

080089e4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08e      	sub	sp, #56	; 0x38
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
 80089f0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80089f2:	2234      	movs	r2, #52	; 0x34
 80089f4:	2100      	movs	r1, #0
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f009 f97a 	bl	8011cf0 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	f023 0303 	bic.w	r3, r3, #3
 8008a02:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	683a      	ldr	r2, [r7, #0]
 8008a14:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	f1a3 0208 	sub.w	r2, r3, #8
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8008a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8008a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a40:	3b04      	subs	r3, #4
 8008a42:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8008a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a50:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8008a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a54:	3b04      	subs	r3, #4
 8008a56:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8008a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8008a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a6e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8008a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a76:	3304      	adds	r3, #4
 8008a78:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8008a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8008a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a80:	4a1f      	ldr	r2, [pc, #124]	; (8008b00 <_tx_byte_pool_create+0x11c>)
 8008a82:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8008a8e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008a90:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008a92:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008a94:	b672      	cpsid	i
    return(int_posture);
 8008a96:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	4a19      	ldr	r2, [pc, #100]	; (8008b04 <_tx_byte_pool_create+0x120>)
 8008a9e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8008aa0:	4b19      	ldr	r3, [pc, #100]	; (8008b08 <_tx_byte_pool_create+0x124>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d109      	bne.n	8008abc <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8008aa8:	4a18      	ldr	r2, [pc, #96]	; (8008b0c <_tx_byte_pool_create+0x128>)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	631a      	str	r2, [r3, #48]	; 0x30
 8008aba:	e011      	b.n	8008ae0 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8008abc:	4b13      	ldr	r3, [pc, #76]	; (8008b0c <_tx_byte_pool_create+0x128>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac6:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	69fa      	ldr	r2, [r7, #28]
 8008ad8:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6a3a      	ldr	r2, [r7, #32]
 8008ade:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8008ae0:	4b09      	ldr	r3, [pc, #36]	; (8008b08 <_tx_byte_pool_create+0x124>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	4a08      	ldr	r2, [pc, #32]	; (8008b08 <_tx_byte_pool_create+0x124>)
 8008ae8:	6013      	str	r3, [r2, #0]
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	f383 8810 	msr	PRIMASK, r3
}
 8008af4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3738      	adds	r7, #56	; 0x38
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	ffffeeee 	.word	0xffffeeee
 8008b04:	42595445 	.word	0x42595445
 8008b08:	24005168 	.word	0x24005168
 8008b0c:	24005164 	.word	0x24005164

08008b10 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b097      	sub	sp, #92	; 0x5c
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b22:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8008b26:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008b28:	b672      	cpsid	i
    return(int_posture);
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8008b2c:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	689a      	ldr	r2, [r3, #8]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	3b02      	subs	r3, #2
 8008b38:	00db      	lsls	r3, r3, #3
 8008b3a:	4413      	add	r3, r2
 8008b3c:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d308      	bcc.n	8008b58 <_tx_byte_pool_search+0x48>
 8008b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b48:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	f383 8810 	msr	PRIMASK, r3
}
 8008b50:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8008b52:	2300      	movs	r3, #0
 8008b54:	653b      	str	r3, [r7, #80]	; 0x50
 8008b56:	e0dd      	b.n	8008d14 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008b58:	4b72      	ldr	r3, [pc, #456]	; (8008d24 <_tx_byte_pool_search+0x214>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b62:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8008b72:	2300      	movs	r3, #0
 8008b74:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8008b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b78:	3304      	adds	r3, #4
 8008b7a:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7e:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8008b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a68      	ldr	r2, [pc, #416]	; (8008d28 <_tx_byte_pool_search+0x218>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d143      	bne.n	8008c12 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8008b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d104      	bne.n	8008b9a <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b94:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8008b96:	2301      	movs	r3, #1
 8008b98:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b9c:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8008ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8008bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bae:	3b08      	subs	r3, #8
 8008bb0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8008bb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d257      	bcs.n	8008c6a <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8008bba:	2300      	movs	r3, #0
 8008bbc:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8008bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc6:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8008bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a56      	ldr	r2, [pc, #344]	; (8008d28 <_tx_byte_pool_search+0x218>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d113      	bne.n	8008bfa <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd4:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8008bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bdc:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	1e5a      	subs	r2, r3, #1
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d114      	bne.n	8008c1c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008bf6:	615a      	str	r2, [r3, #20]
 8008bf8:	e010      	b.n	8008c1c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfc:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8008c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d008      	beq.n	8008c1c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8008c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c10:	e004      	b.n	8008c1c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c14:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8008c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d002      	beq.n	8008c28 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8008c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c24:	3b01      	subs	r3, #1
 8008c26:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c2a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	f383 8810 	msr	PRIMASK, r3
}
 8008c32:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c34:	f3ef 8310 	mrs	r3, PRIMASK
 8008c38:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008c3a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008c3c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c3e:	b672      	cpsid	i
    return(int_posture);
 8008c40:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8008c42:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d009      	beq.n	8008c62 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	695b      	ldr	r3, [r3, #20]
 8008c52:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c60:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8008c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d186      	bne.n	8008b76 <_tx_byte_pool_search+0x66>
 8008c68:	e000      	b.n	8008c6c <_tx_byte_pool_search+0x15c>
                    break;
 8008c6a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8008c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d048      	beq.n	8008d04 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8008c72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	2b13      	cmp	r3, #19
 8008c7a:	d91e      	bls.n	8008cba <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	3308      	adds	r3, #8
 8008c80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c82:	4413      	add	r3, r2
 8008c84:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c88:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c8c:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c94:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8008c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c98:	3304      	adds	r3, #4
 8008c9a:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9e:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8008ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca2:	4a21      	ldr	r2, [pc, #132]	; (8008d28 <_tx_byte_pool_search+0x218>)
 8008ca4:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	1c5a      	adds	r2, r3, #1
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cb4:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8008cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc2:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	689a      	ldr	r2, [r3, #8]
 8008cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	f1a3 0208 	sub.w	r2, r3, #8
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d105      	bne.n	8008cf0 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ce6:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	615a      	str	r2, [r3, #20]
 8008cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cf2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f383 8810 	msr	PRIMASK, r3
}
 8008cfa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8008cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cfe:	3308      	adds	r3, #8
 8008d00:	653b      	str	r3, [r7, #80]	; 0x50
 8008d02:	e007      	b.n	8008d14 <_tx_byte_pool_search+0x204>
 8008d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d06:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f383 8810 	msr	PRIMASK, r3
}
 8008d0e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8008d10:	2300      	movs	r3, #0
 8008d12:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8008d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	375c      	adds	r7, #92	; 0x5c
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	24005174 	.word	0x24005174
 8008d28:	ffffeeee 	.word	0xffffeeee

08008d2c <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b08e      	sub	sp, #56	; 0x38
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d36:	f3ef 8310 	mrs	r3, PRIMASK
 8008d3a:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008d3c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8008d3e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d40:	b672      	cpsid	i
    return(int_posture);
 8008d42:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 8008d44:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d4a:	4a38      	ldr	r2, [pc, #224]	; (8008e2c <_tx_event_flags_cleanup+0x100>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d162      	bne.n	8008e16 <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d15c      	bne.n	8008e16 <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d60:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 8008d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d056      	beq.n	8008e16 <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 8008d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a30      	ldr	r2, [pc, #192]	; (8008e30 <_tx_event_flags_cleanup+0x104>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d151      	bne.n	8008e16 <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8008d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d04d      	beq.n	8008e16 <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8008d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d82:	695b      	ldr	r3, [r3, #20]
 8008d84:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 8008d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 8008d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d020      	beq.n	8008dd4 <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 8008d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d94:	3b01      	subs	r3, #1
 8008d96:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 8008d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d9c:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8008d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d103      	bne.n	8008dac <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	2200      	movs	r2, #0
 8008da8:	611a      	str	r2, [r3, #16]
 8008daa:	e016      	b.n	8008dda <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008db6:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8008db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dba:	6a3a      	ldr	r2, [r7, #32]
 8008dbc:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc2:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 8008dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d106      	bne.n	8008dda <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd0:	611a      	str	r2, [r3, #16]
 8008dd2:	e002      	b.n	8008dda <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dde:	2b07      	cmp	r3, #7
 8008de0:	d119      	bne.n	8008e16 <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2207      	movs	r2, #7
 8008de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008dea:	4b12      	ldr	r3, [pc, #72]	; (8008e34 <_tx_event_flags_cleanup+0x108>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3301      	adds	r3, #1
 8008df0:	4a10      	ldr	r2, [pc, #64]	; (8008e34 <_tx_event_flags_cleanup+0x108>)
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f383 8810 	msr	PRIMASK, r3
}
 8008dfe:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f001 fffb 	bl	800adfc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e06:	f3ef 8310 	mrs	r3, PRIMASK
 8008e0a:	617b      	str	r3, [r7, #20]
    return(posture);
 8008e0c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008e0e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e10:	b672      	cpsid	i
    return(int_posture);
 8008e12:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8008e14:	637b      	str	r3, [r7, #52]	; 0x34
 8008e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e18:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	f383 8810 	msr	PRIMASK, r3
}
 8008e20:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8008e22:	bf00      	nop
 8008e24:	3738      	adds	r7, #56	; 0x38
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	08008d2d 	.word	0x08008d2d
 8008e30:	4456444e 	.word	0x4456444e
 8008e34:	2400520c 	.word	0x2400520c

08008e38 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b088      	sub	sp, #32
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 8008e42:	2224      	movs	r2, #36	; 0x24
 8008e44:	2100      	movs	r1, #0
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f008 ff52 	bl	8011cf0 <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e52:	f3ef 8310 	mrs	r3, PRIMASK
 8008e56:	613b      	str	r3, [r7, #16]
    return(posture);
 8008e58:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8008e5a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e5c:	b672      	cpsid	i
    return(int_posture);
 8008e5e:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 8008e60:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a18      	ldr	r2, [pc, #96]	; (8008ec8 <_tx_event_flags_create+0x90>)
 8008e66:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 8008e68:	4b18      	ldr	r3, [pc, #96]	; (8008ecc <_tx_event_flags_create+0x94>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d109      	bne.n	8008e84 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 8008e70:	4a17      	ldr	r2, [pc, #92]	; (8008ed0 <_tx_event_flags_create+0x98>)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	61da      	str	r2, [r3, #28]
 8008e82:	e011      	b.n	8008ea8 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 8008e84:	4b12      	ldr	r3, [pc, #72]	; (8008ed0 <_tx_event_flags_create+0x98>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	69ba      	ldr	r2, [r7, #24]
 8008ea6:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 8008ea8:	4b08      	ldr	r3, [pc, #32]	; (8008ecc <_tx_event_flags_create+0x94>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3301      	adds	r3, #1
 8008eae:	4a07      	ldr	r2, [pc, #28]	; (8008ecc <_tx_event_flags_create+0x94>)
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	f383 8810 	msr	PRIMASK, r3
}
 8008ebc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3720      	adds	r7, #32
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	4456444e 	.word	0x4456444e
 8008ecc:	24005150 	.word	0x24005150
 8008ed0:	2400514c 	.word	0x2400514c

08008ed4 <_tx_event_flags_get>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b096      	sub	sp, #88	; 0x58
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
 8008ee0:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ee6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8008eea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008eec:	b672      	cpsid	i
    return(int_posture);
 8008eee:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 8008ef0:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return the actual event flags and apply delayed clearing.  */
    *actual_flags_ptr =  current_flags & ~group_ptr -> tx_event_flags_group_delayed_clear;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	43da      	mvns	r2, r3
 8008efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f00:	401a      	ands	r2, r3
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	601a      	str	r2, [r3, #0]

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f003 0302 	and.w	r3, r3, #2
 8008f0c:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 8008f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d004      	beq.n	8008f24 <_tx_event_flags_get+0x50>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 8008f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f1c:	43db      	mvns	r3, r3
 8008f1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f20:	4013      	ands	r3, r2
 8008f22:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 8008f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d10a      	bne.n	8008f40 <_tx_event_flags_get+0x6c>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8008f2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	4013      	ands	r3, r2
 8008f30:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 8008f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d006      	beq.n	8008f48 <_tx_event_flags_get+0x74>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f3e:	e003      	b.n	8008f48 <_tx_event_flags_get+0x74>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8008f40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	4013      	ands	r3, r2
 8008f46:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 8008f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d026      	beq.n	8008f9c <_tx_event_flags_get+0xc8>
    {

        /* Yes, this request can be handled immediately.  */

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 8008f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d11c      	bne.n	8008f96 <_tx_event_flags_get+0xc2>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	695b      	ldr	r3, [r3, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <_tx_event_flags_get+0xa0>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d101      	bne.n	8008f74 <_tx_event_flags_get+0xa0>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 8008f70:	2301      	movs	r3, #1
 8008f72:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 8008f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d106      	bne.n	8008f88 <_tx_event_flags_get+0xb4>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6a1a      	ldr	r2, [r3, #32]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	621a      	str	r2, [r3, #32]
 8008f86:	e006      	b.n	8008f96 <_tx_event_flags_get+0xc2>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	689a      	ldr	r2, [r3, #8]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	43db      	mvns	r3, r3
 8008f90:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8008f96:	2300      	movs	r3, #0
 8008f98:	653b      	str	r3, [r7, #80]	; 0x50
 8008f9a:	e073      	b.n	8009084 <_tx_event_flags_get+0x1b0>
#endif
    else
    {
        /* flags_satisfied is 0.  */
        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8008f9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d06e      	beq.n	8009080 <_tx_event_flags_get+0x1ac>
        {

            /* Determine if the preempt disable flag is non-zero OR the requested events is 0.  */
            if ((_tx_thread_preempt_disable != ((UINT) 0)) || (requested_flags == (UINT) 0))
 8008fa2:	4b3e      	ldr	r3, [pc, #248]	; (800909c <_tx_event_flags_get+0x1c8>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d102      	bne.n	8008fb0 <_tx_event_flags_get+0xdc>
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d102      	bne.n	8008fb6 <_tx_event_flags_get+0xe2>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point,
                   or if requested_flags is 0, return error completion.  */
                status =  TX_NO_EVENTS;
 8008fb0:	2307      	movs	r3, #7
 8008fb2:	653b      	str	r3, [r7, #80]	; 0x50
 8008fb4:	e066      	b.n	8009084 <_tx_event_flags_get+0x1b0>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 8008fb6:	4b3a      	ldr	r3, [pc, #232]	; (80090a0 <_tx_event_flags_get+0x1cc>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbe:	4a39      	ldr	r2, [pc, #228]	; (80090a4 <_tx_event_flags_get+0x1d0>)
 8008fc0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 8008fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd2:	683a      	ldr	r2, [r7, #0]
 8008fd4:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 8008fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8008fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8008ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d109      	bne.n	800900a <_tx_event_flags_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ffa:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009000:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 8009002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009006:	675a      	str	r2, [r3, #116]	; 0x74
 8009008:	e011      	b.n	800902e <_tx_event_flags_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8009010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009014:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800901a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800901c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009020:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8009022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009026:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8009028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800902c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 8009038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903a:	2207      	movs	r2, #7
 800903c:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800903e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009040:	2201      	movs	r2, #1
 8009042:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009046:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009048:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800904a:	4b14      	ldr	r3, [pc, #80]	; (800909c <_tx_event_flags_get+0x1c8>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3301      	adds	r3, #1
 8009050:	4a12      	ldr	r2, [pc, #72]	; (800909c <_tx_event_flags_get+0x1c8>)
 8009052:	6013      	str	r3, [r2, #0]
 8009054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009056:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f383 8810 	msr	PRIMASK, r3
}
 800905e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8009060:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009062:	f001 ffcb 	bl	800affc <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009066:	f3ef 8310 	mrs	r3, PRIMASK
 800906a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800906c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800906e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009070:	b672      	cpsid	i
    return(int_posture);
 8009072:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 8009074:	657b      	str	r3, [r7, #84]	; 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8009076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800907c:	653b      	str	r3, [r7, #80]	; 0x50
 800907e:	e001      	b.n	8009084 <_tx_event_flags_get+0x1b0>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 8009080:	2307      	movs	r3, #7
 8009082:	653b      	str	r3, [r7, #80]	; 0x50
 8009084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009086:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	f383 8810 	msr	PRIMASK, r3
}
 800908e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8009090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8009092:	4618      	mov	r0, r3
 8009094:	3758      	adds	r7, #88	; 0x58
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	2400520c 	.word	0x2400520c
 80090a0:	24005174 	.word	0x24005174
 80090a4:	08008d2d 	.word	0x08008d2d

080090a8 <_tx_event_flags_set>:
/*                                            check logic, resulting in   */
/*                                            version 6.1.11              */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b0a6      	sub	sp, #152	; 0x98
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80090b4:	f3ef 8310 	mrs	r3, PRIMASK
 80090b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 80090ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 80090bc:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 80090be:	b672      	cpsid	i
    return(int_posture);
 80090c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 80090c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f003 0302 	and.w	r3, r3, #2
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d023      	beq.n	8009118 <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 80090d0:	2300      	movs	r3, #0
 80090d2:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d005      	beq.n	80090e8 <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 80090e4:	2301      	movs	r3, #1
 80090e6:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 80090e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d107      	bne.n	80090fe <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6a1a      	ldr	r2, [r3, #32]
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	43db      	mvns	r3, r3
 80090f6:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	621a      	str	r2, [r3, #32]
 80090fc:	e005      	b.n	800910a <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	689a      	ldr	r2, [r3, #8]
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	609a      	str	r2, [r3, #8]
 800910a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800910e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009112:	f383 8810 	msr	PRIMASK, r3
}
 8009116:	e1d2      	b.n	80094be <_tx_event_flags_set+0x416>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	689a      	ldr	r2, [r3, #8]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6a1b      	ldr	r3, [r3, #32]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d006      	beq.n	800913a <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6a1a      	ldr	r2, [r3, #32]
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	43db      	mvns	r3, r3
 8009134:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 800913a:	2300      	movs	r3, #0
 800913c:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 81a4 	beq.w	8009498 <_tx_event_flags_set+0x3f0>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 8009150:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009154:	2b01      	cmp	r3, #1
 8009156:	d167      	bne.n	8009228 <_tx_event_flags_set+0x180>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8009166:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800916a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800916c:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800916e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009176:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 8009178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 8009180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009182:	2b02      	cmp	r3, #2
 8009184:	d10a      	bne.n	800919c <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 8009186:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800918a:	4013      	ands	r3, r2
 800918c:	67bb      	str	r3, [r7, #120]	; 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 800918e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009190:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009192:	429a      	cmp	r2, r3
 8009194:	d006      	beq.n	80091a4 <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 8009196:	2300      	movs	r3, #0
 8009198:	67bb      	str	r3, [r7, #120]	; 0x78
 800919a:	e003      	b.n	80091a4 <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800919c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800919e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091a0:	4013      	ands	r3, r2
 80091a2:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 80091a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 817d 	beq.w	80094a6 <_tx_event_flags_set+0x3fe>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80091ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091b2:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 80091b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80091b8:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 80091ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 80091c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d106      	bne.n	80091d6 <_tx_event_flags_set+0x12e>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	689a      	ldr	r2, [r3, #8]
 80091cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091ce:	43db      	mvns	r3, r3
 80091d0:	401a      	ands	r2, r3
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80091e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091e6:	2200      	movs	r2, #0
 80091e8:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80091ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091ee:	2200      	movs	r2, #0
 80091f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 80091f4:	4ba7      	ldr	r3, [pc, #668]	; (8009494 <_tx_event_flags_set+0x3ec>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3301      	adds	r3, #1
 80091fa:	4aa6      	ldr	r2, [pc, #664]	; (8009494 <_tx_event_flags_set+0x3ec>)
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009202:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009206:	f383 8810 	msr	PRIMASK, r3
}
 800920a:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800920c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8009210:	f001 fdf4 	bl	800adfc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009214:	f3ef 8310 	mrs	r3, PRIMASK
 8009218:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800921a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800921c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800921e:	b672      	cpsid	i
    return(int_posture);
 8009220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 8009222:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009226:	e13e      	b.n	80094a6 <_tx_event_flags_set+0x3fe>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 8009230:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009234:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 800923e:	2300      	movs	r3, #0
 8009240:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 8009244:	2300      	movs	r3, #0
 8009246:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 8009250:	4b90      	ldr	r3, [pc, #576]	; (8009494 <_tx_event_flags_set+0x3ec>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	3301      	adds	r3, #1
 8009256:	4a8f      	ldr	r2, [pc, #572]	; (8009494 <_tx_event_flags_set+0x3ec>)
 8009258:	6013      	str	r3, [r2, #0]

                /* Since we have temporarily disabled preemption globally, set the preempt 
                   check flag to check for any preemption condition - including from 
                   unrelated ISR processing.  */
                preempt_check =  TX_TRUE;
 800925a:	2301      	movs	r3, #1
 800925c:	677b      	str	r3, [r7, #116]	; 0x74
 800925e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009262:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009266:	f383 8810 	msr	PRIMASK, r3
}
 800926a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800926c:	f3ef 8310 	mrs	r3, PRIMASK
 8009270:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8009272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8009274:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8009276:	b672      	cpsid	i
    return(int_posture);
 8009278:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 800927a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00f      	beq.n	80092a6 <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 800928c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009290:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	695b      	ldr	r3, [r3, #20]
 8009298:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80092a2:	4313      	orrs	r3, r2
 80092a4:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80092a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ac:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 80092ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092b4:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 80092b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092be:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 80092c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 80092c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d10a      	bne.n	80092e4 <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 80092ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80092d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092d2:	4013      	ands	r3, r2
 80092d4:	67bb      	str	r3, [r7, #120]	; 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 80092d6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80092d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092da:	429a      	cmp	r2, r3
 80092dc:	d006      	beq.n	80092ec <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 80092de:	2300      	movs	r3, #0
 80092e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80092e2:	e003      	b.n	80092ec <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 80092e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80092e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092e8:	4013      	ands	r3, r2
 80092ea:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 80092ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f2:	2b07      	cmp	r3, #7
 80092f4:	d001      	beq.n	80092fa <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 80092f6:	2301      	movs	r3, #1
 80092f8:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 80092fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d069      	beq.n	80093d4 <_tx_event_flags_set+0x32c>

                        /* Yes, this request can be handled now.  */

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8009300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009306:	2b07      	cmp	r3, #7
 8009308:	d11d      	bne.n	8009346 <_tx_event_flags_set+0x29e>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800930a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800930e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009310:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 8009312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009314:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009316:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8009318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 8009320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009322:	2b01      	cmp	r3, #1
 8009324:	d106      	bne.n	8009334 <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	689a      	ldr	r2, [r3, #8]
 800932a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800932c:	43db      	mvns	r3, r3
 800932e:	401a      	ands	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009334:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009338:	2200      	movs	r2, #0
 800933a:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800933c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009340:	2200      	movs	r2, #0
 8009342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8009346:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800934a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800934c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009350:	429a      	cmp	r2, r3
 8009352:	d103      	bne.n	800935c <_tx_event_flags_set+0x2b4>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 8009354:	2300      	movs	r3, #0
 8009356:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800935a:	e018      	b.n	800938e <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800935c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009362:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8009364:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800936a:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800936c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800936e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009370:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 8009372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009374:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009376:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 8009378:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800937c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009380:	429a      	cmp	r2, r3
 8009382:	d104      	bne.n	800938e <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 8009384:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800938a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	695b      	ldr	r3, [r3, #20]
 8009392:	1e5a      	subs	r2, r3, #1
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 8009398:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800939c:	2b00      	cmp	r3, #0
 800939e:	d10c      	bne.n	80093ba <_tx_event_flags_set+0x312>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 80093a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 80093a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 80093b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093b4:	2200      	movs	r2, #0
 80093b6:	671a      	str	r2, [r3, #112]	; 0x70
 80093b8:	e00c      	b.n	80093d4 <_tx_event_flags_set+0x32c>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 80093ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093be:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80093c2:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 80093c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093c8:	2200      	movs	r2, #0
 80093ca:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 80093cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 80093d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 80093da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093de:	3b01      	subs	r3, #1
 80093e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 80093e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f47f af38 	bne.w	800925e <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80093f4:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00a      	beq.n	8009414 <_tx_event_flags_set+0x36c>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	689a      	ldr	r2, [r3, #8]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	43db      	mvns	r3, r3
 8009408:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	621a      	str	r2, [r3, #32]
 8009414:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009418:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800941a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941c:	f383 8810 	msr	PRIMASK, r3
}
 8009420:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 8009422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009426:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800942a:	e01f      	b.n	800946c <_tx_event_flags_set+0x3c4>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800942c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009432:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009434:	f3ef 8310 	mrs	r3, PRIMASK
 8009438:	623b      	str	r3, [r7, #32]
    return(posture);
 800943a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800943c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800943e:	b672      	cpsid	i
    return(int_posture);
 8009440:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8009442:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 8009446:	4b13      	ldr	r3, [pc, #76]	; (8009494 <_tx_event_flags_set+0x3ec>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3301      	adds	r3, #1
 800944c:	4a11      	ldr	r2, [pc, #68]	; (8009494 <_tx_event_flags_set+0x3ec>)
 800944e:	6013      	str	r3, [r2, #0]
 8009450:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009454:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009458:	f383 8810 	msr	PRIMASK, r3
}
 800945c:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800945e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8009462:	f001 fccb 	bl	800adfc <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 8009466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009468:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800946c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1db      	bne.n	800942c <_tx_event_flags_set+0x384>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009474:	f3ef 8310 	mrs	r3, PRIMASK
 8009478:	61bb      	str	r3, [r7, #24]
    return(posture);
 800947a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800947c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800947e:	b672      	cpsid	i
    return(int_posture);
 8009480:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 8009482:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 8009486:	4b03      	ldr	r3, [pc, #12]	; (8009494 <_tx_event_flags_set+0x3ec>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3b01      	subs	r3, #1
 800948c:	4a01      	ldr	r2, [pc, #4]	; (8009494 <_tx_event_flags_set+0x3ec>)
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	e009      	b.n	80094a6 <_tx_event_flags_set+0x3fe>
 8009492:	bf00      	nop
 8009494:	2400520c 	.word	0x2400520c
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <_tx_event_flags_set+0x3fe>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2201      	movs	r2, #1
 80094a4:	60da      	str	r2, [r3, #12]
 80094a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094aa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	f383 8810 	msr	PRIMASK, r3
}
 80094b2:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 80094b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d101      	bne.n	80094be <_tx_event_flags_set+0x416>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 80094ba:	f001 fc65 	bl	800ad88 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3798      	adds	r7, #152	; 0x98
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80094cc:	f001 fa30 	bl	800a930 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80094d0:	f002 f8dc 	bl	800b68c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80094d4:	4b12      	ldr	r3, [pc, #72]	; (8009520 <_tx_initialize_high_level+0x58>)
 80094d6:	2200      	movs	r2, #0
 80094d8:	601a      	str	r2, [r3, #0]
 80094da:	4b12      	ldr	r3, [pc, #72]	; (8009524 <_tx_initialize_high_level+0x5c>)
 80094dc:	2200      	movs	r2, #0
 80094de:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80094e0:	4b11      	ldr	r3, [pc, #68]	; (8009528 <_tx_initialize_high_level+0x60>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	601a      	str	r2, [r3, #0]
 80094e6:	4b11      	ldr	r3, [pc, #68]	; (800952c <_tx_initialize_high_level+0x64>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80094ec:	4b10      	ldr	r3, [pc, #64]	; (8009530 <_tx_initialize_high_level+0x68>)
 80094ee:	2200      	movs	r2, #0
 80094f0:	601a      	str	r2, [r3, #0]
 80094f2:	4b10      	ldr	r3, [pc, #64]	; (8009534 <_tx_initialize_high_level+0x6c>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80094f8:	4b0f      	ldr	r3, [pc, #60]	; (8009538 <_tx_initialize_high_level+0x70>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	601a      	str	r2, [r3, #0]
 80094fe:	4b0f      	ldr	r3, [pc, #60]	; (800953c <_tx_initialize_high_level+0x74>)
 8009500:	2200      	movs	r2, #0
 8009502:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8009504:	4b0e      	ldr	r3, [pc, #56]	; (8009540 <_tx_initialize_high_level+0x78>)
 8009506:	2200      	movs	r2, #0
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	4b0e      	ldr	r3, [pc, #56]	; (8009544 <_tx_initialize_high_level+0x7c>)
 800950c:	2200      	movs	r2, #0
 800950e:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8009510:	4b0d      	ldr	r3, [pc, #52]	; (8009548 <_tx_initialize_high_level+0x80>)
 8009512:	2200      	movs	r2, #0
 8009514:	601a      	str	r2, [r3, #0]
 8009516:	4b0d      	ldr	r3, [pc, #52]	; (800954c <_tx_initialize_high_level+0x84>)
 8009518:	2200      	movs	r2, #0
 800951a:	601a      	str	r2, [r3, #0]
#endif
}
 800951c:	bf00      	nop
 800951e:	bd80      	pop	{r7, pc}
 8009520:	2400513c 	.word	0x2400513c
 8009524:	24005140 	.word	0x24005140
 8009528:	24005144 	.word	0x24005144
 800952c:	24005148 	.word	0x24005148
 8009530:	2400514c 	.word	0x2400514c
 8009534:	24005150 	.word	0x24005150
 8009538:	2400515c 	.word	0x2400515c
 800953c:	24005160 	.word	0x24005160
 8009540:	24005164 	.word	0x24005164
 8009544:	24005168 	.word	0x24005168
 8009548:	24005154 	.word	0x24005154
 800954c:	24005158 	.word	0x24005158

08009550 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8009554:	4b10      	ldr	r3, [pc, #64]	; (8009598 <_tx_initialize_kernel_enter+0x48>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800955c:	d00c      	beq.n	8009578 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800955e:	4b0e      	ldr	r3, [pc, #56]	; (8009598 <_tx_initialize_kernel_enter+0x48>)
 8009560:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8009564:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8009566:	f7f6 fed3 	bl	8000310 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800956a:	f7ff ffad 	bl	80094c8 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800956e:	4b0b      	ldr	r3, [pc, #44]	; (800959c <_tx_initialize_kernel_enter+0x4c>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3301      	adds	r3, #1
 8009574:	4a09      	ldr	r2, [pc, #36]	; (800959c <_tx_initialize_kernel_enter+0x4c>)
 8009576:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8009578:	4b07      	ldr	r3, [pc, #28]	; (8009598 <_tx_initialize_kernel_enter+0x48>)
 800957a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800957e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8009580:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <_tx_initialize_kernel_enter+0x50>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4618      	mov	r0, r3
 8009586:	f7f7 f9b1 	bl	80008ec <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800958a:	4b03      	ldr	r3, [pc, #12]	; (8009598 <_tx_initialize_kernel_enter+0x48>)
 800958c:	2200      	movs	r2, #0
 800958e:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8009590:	f7f6 fefe 	bl	8000390 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8009594:	bf00      	nop
 8009596:	bd80      	pop	{r7, pc}
 8009598:	24000010 	.word	0x24000010
 800959c:	2400520c 	.word	0x2400520c
 80095a0:	2400516c 	.word	0x2400516c

080095a4 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b08e      	sub	sp, #56	; 0x38
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80095ae:	f3ef 8310 	mrs	r3, PRIMASK
 80095b2:	623b      	str	r3, [r7, #32]
    return(posture);
 80095b4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80095b6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80095b8:	b672      	cpsid	i
    return(int_posture);
 80095ba:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 80095bc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095c2:	4a33      	ldr	r2, [pc, #204]	; (8009690 <_tx_mutex_cleanup+0xec>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d158      	bne.n	800967a <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d152      	bne.n	800967a <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095d8:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 80095da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d04c      	beq.n	800967a <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 80095e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a2b      	ldr	r2, [pc, #172]	; (8009694 <_tx_mutex_cleanup+0xf0>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d147      	bne.n	800967a <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 80095ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d043      	beq.n	800967a <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 80095f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fa:	69db      	ldr	r3, [r3, #28]
 80095fc:	1e5a      	subs	r2, r3, #1
 80095fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009600:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8009602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009604:	69db      	ldr	r3, [r3, #28]
 8009606:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8009608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960a:	2b00      	cmp	r3, #0
 800960c:	d103      	bne.n	8009616 <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800960e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009610:	2200      	movs	r2, #0
 8009612:	619a      	str	r2, [r3, #24]
 8009614:	e013      	b.n	800963e <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800961a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009620:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009626:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800962c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	699b      	ldr	r3, [r3, #24]
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	429a      	cmp	r2, r3
 8009636:	d102      	bne.n	800963e <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8009638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800963c:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009642:	2b0d      	cmp	r3, #13
 8009644:	d119      	bne.n	800967a <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	221d      	movs	r2, #29
 800964a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800964e:	4b12      	ldr	r3, [pc, #72]	; (8009698 <_tx_mutex_cleanup+0xf4>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3301      	adds	r3, #1
 8009654:	4a10      	ldr	r2, [pc, #64]	; (8009698 <_tx_mutex_cleanup+0xf4>)
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	f383 8810 	msr	PRIMASK, r3
}
 8009662:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f001 fbc9 	bl	800adfc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800966a:	f3ef 8310 	mrs	r3, PRIMASK
 800966e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009670:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009672:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009674:	b672      	cpsid	i
    return(int_posture);
 8009676:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8009678:	637b      	str	r3, [r7, #52]	; 0x34
 800967a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f383 8810 	msr	PRIMASK, r3
}
 8009684:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8009686:	bf00      	nop
 8009688:	3738      	adds	r7, #56	; 0x38
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	080095a5 	.word	0x080095a5
 8009694:	4d555445 	.word	0x4d555445
 8009698:	2400520c 	.word	0x2400520c

0800969c <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b08a      	sub	sp, #40	; 0x28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80096a4:	f3ef 8310 	mrs	r3, PRIMASK
 80096a8:	61fb      	str	r3, [r7, #28]
    return(posture);
 80096aa:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80096ac:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80096ae:	b672      	cpsid	i
    return(int_posture);
 80096b0:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 80096b2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80096b4:	4b1a      	ldr	r3, [pc, #104]	; (8009720 <_tx_mutex_thread_release+0x84>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3301      	adds	r3, #1
 80096ba:	4a19      	ldr	r2, [pc, #100]	; (8009720 <_tx_mutex_thread_release+0x84>)
 80096bc:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80096c4:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d017      	beq.n	80096fc <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	2201      	movs	r2, #1
 80096d0:	609a      	str	r2, [r3, #8]
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f383 8810 	msr	PRIMASK, r3
}
 80096dc:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 80096de:	6a38      	ldr	r0, [r7, #32]
 80096e0:	f000 faf2 	bl	8009cc8 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80096e4:	f3ef 8310 	mrs	r3, PRIMASK
 80096e8:	617b      	str	r3, [r7, #20]
    return(posture);
 80096ea:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80096ec:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80096ee:	b672      	cpsid	i
    return(int_posture);
 80096f0:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 80096f2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80096fa:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1dd      	bne.n	80096be <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8009702:	4b07      	ldr	r3, [pc, #28]	; (8009720 <_tx_mutex_thread_release+0x84>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3b01      	subs	r3, #1
 8009708:	4a05      	ldr	r2, [pc, #20]	; (8009720 <_tx_mutex_thread_release+0x84>)
 800970a:	6013      	str	r3, [r2, #0]
 800970c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	f383 8810 	msr	PRIMASK, r3
}
 8009716:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 8009718:	bf00      	nop
 800971a:	3728      	adds	r7, #40	; 0x28
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	2400520c 	.word	0x2400520c

08009724 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b08a      	sub	sp, #40	; 0x28
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8009730:	2234      	movs	r2, #52	; 0x34
 8009732:	2100      	movs	r1, #0
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f008 fadb 	bl	8011cf0 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009746:	f3ef 8310 	mrs	r3, PRIMASK
 800974a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800974c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800974e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009750:	b672      	cpsid	i
    return(int_posture);
 8009752:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8009754:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	4a1a      	ldr	r2, [pc, #104]	; (80097c4 <_tx_mutex_create+0xa0>)
 800975a:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800975c:	4b1a      	ldr	r3, [pc, #104]	; (80097c8 <_tx_mutex_create+0xa4>)
 800975e:	4a1b      	ldr	r2, [pc, #108]	; (80097cc <_tx_mutex_create+0xa8>)
 8009760:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8009762:	4b1b      	ldr	r3, [pc, #108]	; (80097d0 <_tx_mutex_create+0xac>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d109      	bne.n	800977e <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800976a:	4a1a      	ldr	r2, [pc, #104]	; (80097d4 <_tx_mutex_create+0xb0>)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	625a      	str	r2, [r3, #36]	; 0x24
 800977c:	e011      	b.n	80097a2 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800977e:	4b15      	ldr	r3, [pc, #84]	; (80097d4 <_tx_mutex_create+0xb0>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	69fa      	ldr	r2, [r7, #28]
 800979a:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6a3a      	ldr	r2, [r7, #32]
 80097a0:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 80097a2:	4b0b      	ldr	r3, [pc, #44]	; (80097d0 <_tx_mutex_create+0xac>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	3301      	adds	r3, #1
 80097a8:	4a09      	ldr	r2, [pc, #36]	; (80097d0 <_tx_mutex_create+0xac>)
 80097aa:	6013      	str	r3, [r2, #0]
 80097ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	f383 8810 	msr	PRIMASK, r3
}
 80097b6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3728      	adds	r7, #40	; 0x28
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	4d555445 	.word	0x4d555445
 80097c8:	24005210 	.word	0x24005210
 80097cc:	0800969d 	.word	0x0800969d
 80097d0:	24005158 	.word	0x24005158
 80097d4:	24005154 	.word	0x24005154

080097d8 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b092      	sub	sp, #72	; 0x48
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80097e2:	f3ef 8310 	mrs	r3, PRIMASK
 80097e6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80097ea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80097ec:	b672      	cpsid	i
    return(int_posture);
 80097ee:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 80097f0:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80097f2:	4b7a      	ldr	r3, [pc, #488]	; (80099dc <_tx_mutex_get+0x204>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d144      	bne.n	800988a <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800980a:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800980c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800980e:	2b00      	cmp	r3, #0
 8009810:	d032      	beq.n	8009878 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	691b      	ldr	r3, [r3, #16]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d106      	bne.n	8009828 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800981a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800981c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2220      	movs	r2, #32
 8009826:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8009828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800982a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800982e:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8009830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00f      	beq.n	8009856 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8009836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983a:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800983c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8009842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800984c:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009852:	62da      	str	r2, [r3, #44]	; 0x2c
 8009854:	e009      	b.n	800986a <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8009856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800986a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800986c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009870:	1c5a      	adds	r2, r3, #1
 8009872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009874:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8009878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800987a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	f383 8810 	msr	PRIMASK, r3
}
 8009882:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8009884:	2300      	movs	r3, #0
 8009886:	647b      	str	r3, [r7, #68]	; 0x44
 8009888:	e0a2      	b.n	80099d0 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009890:	429a      	cmp	r2, r3
 8009892:	d10d      	bne.n	80098b0 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	1c5a      	adds	r2, r3, #1
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	609a      	str	r2, [r3, #8]
 800989e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098a0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	f383 8810 	msr	PRIMASK, r3
}
 80098a8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80098aa:	2300      	movs	r3, #0
 80098ac:	647b      	str	r3, [r7, #68]	; 0x44
 80098ae:	e08f      	b.n	80099d0 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f000 8084 	beq.w	80099c0 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80098b8:	4b49      	ldr	r3, [pc, #292]	; (80099e0 <_tx_mutex_get+0x208>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d008      	beq.n	80098d2 <_tx_mutex_get+0xfa>
 80098c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098c2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	f383 8810 	msr	PRIMASK, r3
}
 80098ca:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 80098cc:	231d      	movs	r3, #29
 80098ce:	647b      	str	r3, [r7, #68]	; 0x44
 80098d0:	e07e      	b.n	80099d0 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 80098d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098da:	4a42      	ldr	r2, [pc, #264]	; (80099e4 <_tx_mutex_get+0x20c>)
 80098dc:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 80098de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80098e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80098ea:	1c5a      	adds	r2, r3, #1
 80098ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	69db      	ldr	r3, [r3, #28]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d109      	bne.n	800990e <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098fe:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8009900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009902:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009904:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8009906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800990a:	675a      	str	r2, [r3, #116]	; 0x74
 800990c:	e011      	b.n	8009932 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8009914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009918:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800991a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800991c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800991e:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8009920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009924:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8009926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009928:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800992a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800992c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800992e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009930:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	69db      	ldr	r3, [r3, #28]
 8009936:	1c5a      	adds	r2, r3, #1
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800993c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800993e:	220d      	movs	r2, #13
 8009940:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009944:	2201      	movs	r2, #1
 8009946:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800994e:	4b24      	ldr	r3, [pc, #144]	; (80099e0 <_tx_mutex_get+0x208>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3301      	adds	r3, #1
 8009954:	4a22      	ldr	r2, [pc, #136]	; (80099e0 <_tx_mutex_get+0x208>)
 8009956:	6013      	str	r3, [r2, #0]
 8009958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800995a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	f383 8810 	msr	PRIMASK, r3
}
 8009962:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d121      	bne.n	80099b0 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009974:	429a      	cmp	r2, r3
 8009976:	d903      	bls.n	8009980 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8009978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800997a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8009980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009986:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800998a:	429a      	cmp	r2, r3
 800998c:	d204      	bcs.n	8009998 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800998e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009994:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8009998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800999c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800999e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d905      	bls.n	80099b0 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 80099a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a8:	4619      	mov	r1, r3
 80099aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099ac:	f000 f8ce 	bl	8009b4c <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80099b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80099b2:	f001 fb23 	bl	800affc <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80099b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099bc:	647b      	str	r3, [r7, #68]	; 0x44
 80099be:	e007      	b.n	80099d0 <_tx_mutex_get+0x1f8>
 80099c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099c2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f383 8810 	msr	PRIMASK, r3
}
 80099ca:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 80099cc:	231d      	movs	r3, #29
 80099ce:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 80099d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3748      	adds	r7, #72	; 0x48
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	24005174 	.word	0x24005174
 80099e0:	2400520c 	.word	0x2400520c
 80099e4:	080095a5 	.word	0x080095a5

080099e8 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b092      	sub	sp, #72	; 0x48
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80099f0:	f3ef 8310 	mrs	r3, PRIMASK
 80099f4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80099f8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80099fa:	b672      	cpsid	i
    return(int_posture);
 80099fc:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 80099fe:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	69db      	ldr	r3, [r3, #28]
 8009a04:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8009a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d805      	bhi.n	8009a18 <_tx_mutex_prioritize+0x30>
 8009a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a0e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	f383 8810 	msr	PRIMASK, r3
}
 8009a16:	e092      	b.n	8009b3e <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8009a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d114      	bne.n	8009a48 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8009a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a28:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8009a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d202      	bcs.n	8009a3c <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a3a:	619a      	str	r2, [r3, #24]
 8009a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a3e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	f383 8810 	msr	PRIMASK, r3
}
 8009a46:	e07a      	b.n	8009b3e <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a50:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8009a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a56:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8009a58:	4b3b      	ldr	r3, [pc, #236]	; (8009b48 <_tx_mutex_prioritize+0x160>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	4a3a      	ldr	r2, [pc, #232]	; (8009b48 <_tx_mutex_prioritize+0x160>)
 8009a60:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8009a62:	2300      	movs	r3, #0
 8009a64:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8009a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d201      	bcs.n	8009a76 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8009a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a78:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f383 8810 	msr	PRIMASK, r3
}
 8009a80:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009a82:	f3ef 8310 	mrs	r3, PRIMASK
 8009a86:	617b      	str	r3, [r7, #20]
    return(posture);
 8009a88:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009a8a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009a8c:	b672      	cpsid	i
    return(int_posture);
 8009a8e:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8009a90:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d002      	beq.n	8009aa2 <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8009aa0:	e006      	b.n	8009ab0 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	69db      	ldr	r3, [r3, #28]
 8009aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d001      	beq.n	8009ab0 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8009aac:	2301      	movs	r3, #1
 8009aae:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d103      	bne.n	8009abe <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8009ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aba:	643b      	str	r3, [r7, #64]	; 0x40
 8009abc:	e00c      	b.n	8009ad8 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	699b      	ldr	r3, [r3, #24]
 8009ac2:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	69db      	ldr	r3, [r3, #28]
 8009ac8:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8009aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009acc:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8009ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad2:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 8009ad8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d1c2      	bne.n	8009a66 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8009ae0:	4b19      	ldr	r3, [pc, #100]	; (8009b48 <_tx_mutex_prioritize+0x160>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	4a18      	ldr	r2, [pc, #96]	; (8009b48 <_tx_mutex_prioritize+0x160>)
 8009ae8:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8009aea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d01d      	beq.n	8009b2e <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8009af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009af6:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8009af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009afc:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8009afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b02:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8009b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b08:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8009b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b0e:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8009b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b14:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8009b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b1a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8009b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b20:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8009b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b26:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b2c:	619a      	str	r2, [r3, #24]
 8009b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b30:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	f383 8810 	msr	PRIMASK, r3
}
 8009b38:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009b3a:	f001 f925 	bl	800ad88 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8009b3e:	2300      	movs	r3, #0
#endif
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3748      	adds	r7, #72	; 0x48
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	2400520c 	.word	0x2400520c

08009b4c <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b090      	sub	sp, #64	; 0x40
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b56:	f3ef 8310 	mrs	r3, PRIMASK
 8009b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8009b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8009b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b60:	b672      	cpsid	i
    return(int_posture);
 8009b62:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8009b64:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d017      	beq.n	8009b9e <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	683a      	ldr	r2, [r7, #0]
 8009b72:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d905      	bls.n	8009b8c <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	63da      	str	r2, [r3, #60]	; 0x3c
 8009b8a:	e002      	b.n	8009b92 <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	63da      	str	r2, [r3, #60]	; 0x3c
 8009b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b94:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	f383 8810 	msr	PRIMASK, r3
}
 8009b9c:	e089      	b.n	8009cb2 <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 8009b9e:	4b47      	ldr	r3, [pc, #284]	; (8009cbc <_tx_mutex_priority_change+0x170>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8009baa:	4b45      	ldr	r3, [pc, #276]	; (8009cc0 <_tx_mutex_priority_change+0x174>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3302      	adds	r3, #2
 8009bb0:	4a43      	ldr	r2, [pc, #268]	; (8009cc0 <_tx_mutex_priority_change+0x174>)
 8009bb2:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	220e      	movs	r2, #14
 8009bb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	64da      	str	r2, [r3, #76]	; 0x4c
 8009bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bc8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	f383 8810 	msr	PRIMASK, r3
}
 8009bd0:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f001 fa12 	bl	800affc <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8009bdc:	623b      	str	r3, [r7, #32]
    return(posture);
 8009bde:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009be0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009be2:	b672      	cpsid	i
    return(int_posture);
 8009be4:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 8009be6:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d905      	bls.n	8009c06 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	63da      	str	r2, [r3, #60]	; 0x3c
 8009c04:	e002      	b.n	8009c0c <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8009c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c0e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f383 8810 	msr	PRIMASK, r3
}
 8009c16:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f001 f8ef 	bl	800adfc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8009c22:	617b      	str	r3, [r7, #20]
    return(posture);
 8009c24:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009c26:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009c28:	b672      	cpsid	i
    return(int_posture);
 8009c2a:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8009c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8009c2e:	4b23      	ldr	r3, [pc, #140]	; (8009cbc <_tx_mutex_priority_change+0x170>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d034      	beq.n	8009ca6 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d130      	bne.n	8009ca6 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d811      	bhi.n	8009c74 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d126      	bne.n	8009ca6 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8009c58:	4a18      	ldr	r2, [pc, #96]	; (8009cbc <_tx_mutex_priority_change+0x170>)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8009c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d21f      	bcs.n	8009ca6 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6a:	4916      	ldr	r1, [pc, #88]	; (8009cc4 <_tx_mutex_priority_change+0x178>)
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009c72:	e018      	b.n	8009ca6 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d212      	bcs.n	8009ca6 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d80c      	bhi.n	8009ca6 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8009c8c:	4a0b      	ldr	r2, [pc, #44]	; (8009cbc <_tx_mutex_priority_change+0x170>)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8009c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d205      	bcs.n	8009ca6 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9e:	4909      	ldr	r1, [pc, #36]	; (8009cc4 <_tx_mutex_priority_change+0x178>)
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	f383 8810 	msr	PRIMASK, r3
}
 8009cb0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8009cb2:	bf00      	nop
 8009cb4:	3740      	adds	r7, #64	; 0x40
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	24005178 	.word	0x24005178
 8009cc0:	2400520c 	.word	0x2400520c
 8009cc4:	2400518c 	.word	0x2400518c

08009cc8 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b0a6      	sub	sp, #152	; 0x98
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8009cd0:	2320      	movs	r3, #32
 8009cd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8009cda:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 8009cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 8009cde:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 8009ce0:	b672      	cpsid	i
    return(int_posture);
 8009ce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8009ce4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f000 81ff 	beq.w	800a0f0 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8009cf8:	4ba3      	ldr	r3, [pc, #652]	; (8009f88 <_tx_mutex_put+0x2c0>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d00d      	beq.n	8009d24 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8009d08:	4ba0      	ldr	r3, [pc, #640]	; (8009f8c <_tx_mutex_put+0x2c4>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d109      	bne.n	8009d24 <_tx_mutex_put+0x5c>
 8009d10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d14:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d18:	f383 8810 	msr	PRIMASK, r3
}
 8009d1c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8009d1e:	231e      	movs	r3, #30
 8009d20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8009d24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d28:	2b20      	cmp	r3, #32
 8009d2a:	f040 81eb 	bne.w	800a104 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	1e5a      	subs	r2, r3, #1
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00a      	beq.n	8009d56 <_tx_mutex_put+0x8e>
 8009d40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d44:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d48:	f383 8810 	msr	PRIMASK, r3
}
 8009d4c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009d54:	e1d6      	b.n	800a104 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8009d56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10a      	bne.n	8009d72 <_tx_mutex_put+0xaa>
 8009d5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d60:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d64:	f383 8810 	msr	PRIMASK, r3
}
 8009d68:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009d70:	e1c8      	b.n	800a104 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8009d72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d78:	1e5a      	subs	r2, r3, #1
 8009d7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d7c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8009d80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d104      	bne.n	8009d94 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8009d8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8009d92:	e019      	b.n	8009dc8 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da0:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8009da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009da6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009da8:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8009daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009db0:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8009db2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009db4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d104      	bne.n	8009dc8 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8009dbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009dc0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009dc4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	699b      	ldr	r3, [r3, #24]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d110      	bne.n	8009df2 <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10c      	bne.n	8009df2 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	60da      	str	r2, [r3, #12]
 8009dde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009de2:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009de6:	f383 8810 	msr	PRIMASK, r3
}
 8009dea:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8009dec:	2300      	movs	r3, #0
 8009dee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 8009df2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009df6:	2b20      	cmp	r3, #32
 8009df8:	f040 8184 	bne.w	800a104 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8009e02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d155      	bne.n	8009ec0 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8009e14:	4b5d      	ldr	r3, [pc, #372]	; (8009f8c <_tx_mutex_put+0x2c4>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	4a5c      	ldr	r2, [pc, #368]	; (8009f8c <_tx_mutex_put+0x2c4>)
 8009e1c:	6013      	str	r3, [r2, #0]
 8009e1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e22:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e26:	f383 8810 	msr	PRIMASK, r3
}
 8009e2a:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8009e2c:	2320      	movs	r3, #32
 8009e2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8009e32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009e34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8009e3c:	e01f      	b.n	8009e7e <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8009e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d10b      	bne.n	8009e60 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8009e48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d904      	bls.n	8009e60 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8009e56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8009e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8009e6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009e6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e70:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d102      	bne.n	8009e7e <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8009e7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1db      	bne.n	8009e3e <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009e86:	f3ef 8310 	mrs	r3, PRIMASK
 8009e8a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8009e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8009e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e90:	b672      	cpsid	i
    return(int_posture);
 8009e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8009e94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8009e98:	4b3c      	ldr	r3, [pc, #240]	; (8009f8c <_tx_mutex_put+0x2c4>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	4a3b      	ldr	r2, [pc, #236]	; (8009f8c <_tx_mutex_put+0x2c4>)
 8009ea0:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8009ea2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ea4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009ea8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8009eac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d203      	bcs.n	8009ec0 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8009eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ebc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	69db      	ldr	r3, [r3, #28]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d920      	bls.n	8009f0a <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d11c      	bne.n	8009f0a <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8009ed0:	4b2e      	ldr	r3, [pc, #184]	; (8009f8c <_tx_mutex_put+0x2c4>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	4a2d      	ldr	r2, [pc, #180]	; (8009f8c <_tx_mutex_put+0x2c4>)
 8009ed8:	6013      	str	r3, [r2, #0]
 8009eda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ede:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee2:	f383 8810 	msr	PRIMASK, r3
}
 8009ee6:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff fd7d 	bl	80099e8 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009eee:	f3ef 8310 	mrs	r3, PRIMASK
 8009ef2:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8009ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8009ef6:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8009ef8:	b672      	cpsid	i
    return(int_posture);
 8009efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8009efc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8009f00:	4b22      	ldr	r3, [pc, #136]	; (8009f8c <_tx_mutex_put+0x2c4>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	3b01      	subs	r3, #1
 8009f06:	4a21      	ldr	r2, [pc, #132]	; (8009f8c <_tx_mutex_put+0x2c4>)
 8009f08:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d13e      	bne.n	8009f90 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8009f12:	4b1e      	ldr	r3, [pc, #120]	; (8009f8c <_tx_mutex_put+0x2c4>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3301      	adds	r3, #1
 8009f18:	4a1c      	ldr	r2, [pc, #112]	; (8009f8c <_tx_mutex_put+0x2c4>)
 8009f1a:	6013      	str	r3, [r2, #0]
 8009f1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f24:	f383 8810 	msr	PRIMASK, r3
}
 8009f28:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f36:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d006      	beq.n	8009f4c <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff fe00 	bl	8009b4c <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8009f50:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8009f54:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009f56:	b672      	cpsid	i
    return(int_posture);
 8009f58:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8009f5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8009f5e:	4b0b      	ldr	r3, [pc, #44]	; (8009f8c <_tx_mutex_put+0x2c4>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	4a09      	ldr	r2, [pc, #36]	; (8009f8c <_tx_mutex_put+0x2c4>)
 8009f66:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	60da      	str	r2, [r3, #12]
 8009f6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009f72:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f76:	f383 8810 	msr	PRIMASK, r3
}
 8009f7a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8009f7c:	f000 ff04 	bl	800ad88 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8009f80:	2300      	movs	r3, #0
 8009f82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f86:	e0bd      	b.n	800a104 <_tx_mutex_put+0x43c>
 8009f88:	24005174 	.word	0x24005174
 8009f8c:	2400520c 	.word	0x2400520c
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d10a      	bne.n	8009fb4 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8009fa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8009fb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009fb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009fba:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8009fbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10a      	bne.n	8009fd8 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8009fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8009fd6:	e016      	b.n	800a006 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8009fd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009fda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009fde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8009fe2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe8:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8009fea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8009ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009ffc:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a004:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800a006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a008:	1c5a      	adds	r2, r3, #1
 800a00a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a00c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a01a:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	69db      	ldr	r3, [r3, #28]
 800a020:	1e5a      	subs	r2, r3, #1
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	69db      	ldr	r3, [r3, #28]
 800a02a:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800a02c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d103      	bne.n	800a03a <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	619a      	str	r2, [r3, #24]
 800a038:	e00e      	b.n	800a058 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800a03a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a03e:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a044:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800a046:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a04a:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800a04c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a04e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a050:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800a052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a054:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a056:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a058:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a05a:	2200      	movs	r2, #0
 800a05c:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800a05e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a060:	2200      	movs	r2, #0
 800a062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800a066:	4b2a      	ldr	r3, [pc, #168]	; (800a110 <_tx_mutex_put+0x448>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3301      	adds	r3, #1
 800a06c:	4a28      	ldr	r2, [pc, #160]	; (800a110 <_tx_mutex_put+0x448>)
 800a06e:	6013      	str	r3, [r2, #0]
 800a070:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a074:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	f383 8810 	msr	PRIMASK, r3
}
 800a07c:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d12d      	bne.n	800a0e2 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d01c      	beq.n	800a0c8 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f7ff fcaa 	bl	80099e8 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a094:	f3ef 8310 	mrs	r3, PRIMASK
 800a098:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a09a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a09c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a09e:	b672      	cpsid	i
    return(int_posture);
 800a0a0:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 800a0a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 800a0ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800a0b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	629a      	str	r2, [r3, #40]	; 0x28
 800a0ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a0be:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	f383 8810 	msr	PRIMASK, r3
}
 800a0c6:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 800a0c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d005      	beq.n	800a0e2 <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 800a0d6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800a0da:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800a0de:	f7ff fd35 	bl	8009b4c <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 800a0e2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800a0e4:	f000 fe8a 	bl	800adfc <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a0ee:	e009      	b.n	800a104 <_tx_mutex_put+0x43c>
 800a0f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a0f4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f383 8810 	msr	PRIMASK, r3
}
 800a0fc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 800a0fe:	231e      	movs	r3, #30
 800a100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 800a104:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3798      	adds	r7, #152	; 0x98
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	2400520c 	.word	0x2400520c

0800a114 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b08e      	sub	sp, #56	; 0x38
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a11e:	f3ef 8310 	mrs	r3, PRIMASK
 800a122:	623b      	str	r3, [r7, #32]
    return(posture);
 800a124:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a126:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a128:	b672      	cpsid	i
    return(int_posture);
 800a12a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800a12c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a132:	4a33      	ldr	r2, [pc, #204]	; (800a200 <_tx_semaphore_cleanup+0xec>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d158      	bne.n	800a1ea <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	429a      	cmp	r2, r3
 800a142:	d152      	bne.n	800a1ea <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a148:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800a14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d04c      	beq.n	800a1ea <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800a150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a2b      	ldr	r2, [pc, #172]	; (800a204 <_tx_semaphore_cleanup+0xf0>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d147      	bne.n	800a1ea <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d043      	beq.n	800a1ea <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800a168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	1e5a      	subs	r2, r3, #1
 800a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a170:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800a172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800a178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d103      	bne.n	800a186 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800a17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a180:	2200      	movs	r2, #0
 800a182:	60da      	str	r2, [r3, #12]
 800a184:	e013      	b.n	800a1ae <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a18a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a190:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800a192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a196:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800a198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a19c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800a19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d102      	bne.n	800a1ae <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1ac:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b2:	2b06      	cmp	r3, #6
 800a1b4:	d119      	bne.n	800a1ea <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	220d      	movs	r2, #13
 800a1ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800a1be:	4b12      	ldr	r3, [pc, #72]	; (800a208 <_tx_semaphore_cleanup+0xf4>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	4a10      	ldr	r2, [pc, #64]	; (800a208 <_tx_semaphore_cleanup+0xf4>)
 800a1c6:	6013      	str	r3, [r2, #0]
 800a1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ca:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	f383 8810 	msr	PRIMASK, r3
}
 800a1d2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fe11 	bl	800adfc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a1da:	f3ef 8310 	mrs	r3, PRIMASK
 800a1de:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a1e0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a1e2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a1e4:	b672      	cpsid	i
    return(int_posture);
 800a1e6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800a1e8:	637b      	str	r3, [r7, #52]	; 0x34
 800a1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ec:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f383 8810 	msr	PRIMASK, r3
}
 800a1f4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800a1f6:	bf00      	nop
 800a1f8:	3738      	adds	r7, #56	; 0x38
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	0800a115 	.word	0x0800a115
 800a204:	53454d41 	.word	0x53454d41
 800a208:	2400520c 	.word	0x2400520c

0800a20c <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b08a      	sub	sp, #40	; 0x28
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800a218:	221c      	movs	r2, #28
 800a21a:	2100      	movs	r1, #0
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f007 fd67 	bl	8011cf0 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a22e:	f3ef 8310 	mrs	r3, PRIMASK
 800a232:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a234:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a236:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a238:	b672      	cpsid	i
    return(int_posture);
 800a23a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800a23c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	4a18      	ldr	r2, [pc, #96]	; (800a2a4 <_tx_semaphore_create+0x98>)
 800a242:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800a244:	4b18      	ldr	r3, [pc, #96]	; (800a2a8 <_tx_semaphore_create+0x9c>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d109      	bne.n	800a260 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800a24c:	4a17      	ldr	r2, [pc, #92]	; (800a2ac <_tx_semaphore_create+0xa0>)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	619a      	str	r2, [r3, #24]
 800a25e:	e011      	b.n	800a284 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800a260:	4b12      	ldr	r3, [pc, #72]	; (800a2ac <_tx_semaphore_create+0xa0>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800a26c:	6a3b      	ldr	r3, [r7, #32]
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	69fa      	ldr	r2, [r7, #28]
 800a27c:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6a3a      	ldr	r2, [r7, #32]
 800a282:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800a284:	4b08      	ldr	r3, [pc, #32]	; (800a2a8 <_tx_semaphore_create+0x9c>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	3301      	adds	r3, #1
 800a28a:	4a07      	ldr	r2, [pc, #28]	; (800a2a8 <_tx_semaphore_create+0x9c>)
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	f383 8810 	msr	PRIMASK, r3
}
 800a298:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3728      	adds	r7, #40	; 0x28
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	53454d41 	.word	0x53454d41
 800a2a8:	24005140 	.word	0x24005140
 800a2ac:	2400513c 	.word	0x2400513c

0800a2b0 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b092      	sub	sp, #72	; 0x48
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a2b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a2bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a2c0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a2c2:	b672      	cpsid	i
    return(int_posture);
 800a2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800a2c6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 800a2ce:	4b3d      	ldr	r3, [pc, #244]	; (800a3c4 <_tx_semaphore_delete+0x114>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	4a3b      	ldr	r2, [pc, #236]	; (800a3c4 <_tx_semaphore_delete+0x114>)
 800a2d6:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800a2d8:	4b3a      	ldr	r3, [pc, #232]	; (800a3c4 <_tx_semaphore_delete+0x114>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d103      	bne.n	800a2e8 <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 800a2e0:	4b39      	ldr	r3, [pc, #228]	; (800a3c8 <_tx_semaphore_delete+0x118>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	e013      	b.n	800a310 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	699b      	ldr	r3, [r3, #24]
 800a2f2:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 800a2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2f8:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 800a2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2fe:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 800a300:	4b31      	ldr	r3, [pc, #196]	; (800a3c8 <_tx_semaphore_delete+0x118>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	429a      	cmp	r2, r3
 800a308:	d102      	bne.n	800a310 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 800a30a:	4a2f      	ldr	r2, [pc, #188]	; (800a3c8 <_tx_semaphore_delete+0x118>)
 800a30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800a310:	4b2e      	ldr	r3, [pc, #184]	; (800a3cc <_tx_semaphore_delete+0x11c>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	3301      	adds	r3, #1
 800a316:	4a2d      	ldr	r2, [pc, #180]	; (800a3cc <_tx_semaphore_delete+0x11c>)
 800a318:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	611a      	str	r2, [r3, #16]
 800a332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a334:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a338:	f383 8810 	msr	PRIMASK, r3
}
 800a33c:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 800a33e:	e024      	b.n	800a38a <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800a340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a342:	3b01      	subs	r3, #1
 800a344:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a346:	f3ef 8310 	mrs	r3, PRIMASK
 800a34a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a34c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a34e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a350:	b672      	cpsid	i
    return(int_posture);
 800a352:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 800a354:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a358:	2200      	movs	r2, #0
 800a35a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800a35c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a35e:	2201      	movs	r2, #1
 800a360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800a364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a368:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800a36a:	4b18      	ldr	r3, [pc, #96]	; (800a3cc <_tx_semaphore_delete+0x11c>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	3301      	adds	r3, #1
 800a370:	4a16      	ldr	r2, [pc, #88]	; (800a3cc <_tx_semaphore_delete+0x11c>)
 800a372:	6013      	str	r3, [r2, #0]
 800a374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a376:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	f383 8810 	msr	PRIMASK, r3
}
 800a37e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800a380:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a382:	f000 fd3b 	bl	800adfc <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800a386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a388:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 800a38a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1d7      	bne.n	800a340 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a390:	f3ef 8310 	mrs	r3, PRIMASK
 800a394:	613b      	str	r3, [r7, #16]
    return(posture);
 800a396:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800a398:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a39a:	b672      	cpsid	i
    return(int_posture);
 800a39c:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800a39e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800a3a0:	4b0a      	ldr	r3, [pc, #40]	; (800a3cc <_tx_semaphore_delete+0x11c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	4a09      	ldr	r2, [pc, #36]	; (800a3cc <_tx_semaphore_delete+0x11c>)
 800a3a8:	6013      	str	r3, [r2, #0]
 800a3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f383 8810 	msr	PRIMASK, r3
}
 800a3b4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800a3b6:	f000 fce7 	bl	800ad88 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3748      	adds	r7, #72	; 0x48
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	24005140 	.word	0x24005140
 800a3c8:	2400513c 	.word	0x2400513c
 800a3cc:	2400520c 	.word	0x2400520c

0800a3d0 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b08e      	sub	sp, #56	; 0x38
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a3de:	f3ef 8310 	mrs	r3, PRIMASK
 800a3e2:	623b      	str	r3, [r7, #32]
    return(posture);
 800a3e4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a3e6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a3e8:	b672      	cpsid	i
    return(int_posture);
 800a3ea:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800a3ec:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d00a      	beq.n	800a40c <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	1e5a      	subs	r2, r3, #1
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	609a      	str	r2, [r3, #8]
 800a400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a402:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	f383 8810 	msr	PRIMASK, r3
}
 800a40a:	e068      	b.n	800a4de <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d05d      	beq.n	800a4ce <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800a412:	4b35      	ldr	r3, [pc, #212]	; (800a4e8 <_tx_semaphore_get+0x118>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d008      	beq.n	800a42c <_tx_semaphore_get+0x5c>
 800a41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f383 8810 	msr	PRIMASK, r3
}
 800a424:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800a426:	230d      	movs	r3, #13
 800a428:	637b      	str	r3, [r7, #52]	; 0x34
 800a42a:	e058      	b.n	800a4de <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a42c:	4b2f      	ldr	r3, [pc, #188]	; (800a4ec <_tx_semaphore_get+0x11c>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800a432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a434:	4a2e      	ldr	r2, [pc, #184]	; (800a4f0 <_tx_semaphore_get+0x120>)
 800a436:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800a438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800a43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a440:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a444:	1c5a      	adds	r2, r3, #1
 800a446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a448:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d109      	bne.n	800a468 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a458:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800a45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a45e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800a460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a464:	675a      	str	r2, [r3, #116]	; 0x74
 800a466:	e011      	b.n	800a48c <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800a46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a472:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800a474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a478:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800a47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a47e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a484:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a48a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	1c5a      	adds	r2, r3, #1
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800a496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a498:	2206      	movs	r2, #6
 800a49a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49e:	2201      	movs	r2, #1
 800a4a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800a4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a4:	683a      	ldr	r2, [r7, #0]
 800a4a6:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800a4a8:	4b0f      	ldr	r3, [pc, #60]	; (800a4e8 <_tx_semaphore_get+0x118>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	4a0e      	ldr	r2, [pc, #56]	; (800a4e8 <_tx_semaphore_get+0x118>)
 800a4b0:	6013      	str	r3, [r2, #0]
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	f383 8810 	msr	PRIMASK, r3
}
 800a4bc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800a4be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4c0:	f000 fd9c 	bl	800affc <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800a4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a4cc:	e007      	b.n	800a4de <_tx_semaphore_get+0x10e>
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f383 8810 	msr	PRIMASK, r3
}
 800a4d8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800a4da:	230d      	movs	r3, #13
 800a4dc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 800a4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3738      	adds	r7, #56	; 0x38
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	2400520c 	.word	0x2400520c
 800a4ec:	24005174 	.word	0x24005174
 800a4f0:	0800a115 	.word	0x0800a115

0800a4f4 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08c      	sub	sp, #48	; 0x30
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a4fc:	f3ef 8310 	mrs	r3, PRIMASK
 800a500:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a502:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a504:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a506:	b672      	cpsid	i
    return(int_posture);
 800a508:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800a50a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800a512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10a      	bne.n	800a52e <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	609a      	str	r2, [r3, #8]
 800a522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a524:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	f383 8810 	msr	PRIMASK, r3
}
 800a52c:	e033      	b.n	800a596 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	3b01      	subs	r3, #1
 800a538:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800a53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d103      	bne.n	800a548 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	60da      	str	r2, [r3, #12]
 800a546:	e00e      	b.n	800a566 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a54c:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a3a      	ldr	r2, [r7, #32]
 800a552:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800a554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a558:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800a55a:	6a3b      	ldr	r3, [r7, #32]
 800a55c:	69fa      	ldr	r2, [r7, #28]
 800a55e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	6a3a      	ldr	r2, [r7, #32]
 800a564:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a56a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56e:	2200      	movs	r2, #0
 800a570:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800a572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a574:	2200      	movs	r2, #0
 800a576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800a57a:	4b09      	ldr	r3, [pc, #36]	; (800a5a0 <_tx_semaphore_put+0xac>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	3301      	adds	r3, #1
 800a580:	4a07      	ldr	r2, [pc, #28]	; (800a5a0 <_tx_semaphore_put+0xac>)
 800a582:	6013      	str	r3, [r2, #0]
 800a584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a586:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f383 8810 	msr	PRIMASK, r3
}
 800a58e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800a590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a592:	f000 fc33 	bl	800adfc <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3730      	adds	r7, #48	; 0x30
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	2400520c 	.word	0x2400520c

0800a5a4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b092      	sub	sp, #72	; 0x48
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	607a      	str	r2, [r7, #4]
 800a5b0:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800a5b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5b8:	21ef      	movs	r1, #239	; 0xef
 800a5ba:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a5bc:	f007 fb98 	bl	8011cf0 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800a5c0:	22b0      	movs	r2, #176	; 0xb0
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f007 fb93 	bl	8011cf0 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	683a      	ldr	r2, [r7, #0]
 800a5da:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5e0:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5e6:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5ec:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a5fa:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a600:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2220      	movs	r2, #32
 800a606:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800a60a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a60c:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800a60e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a610:	3b01      	subs	r3, #1
 800a612:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a614:	4413      	add	r3, r2
 800a616:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a61c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800a61e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a622:	429a      	cmp	r2, r3
 800a624:	d007      	beq.n	800a636 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800a634:	e006      	b.n	800a644 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a63a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a640:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2203      	movs	r2, #3
 800a648:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	4a48      	ldr	r2, [pc, #288]	; (800a770 <_tx_thread_create+0x1cc>)
 800a64e:	655a      	str	r2, [r3, #84]	; 0x54
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800a656:	4947      	ldr	r1, [pc, #284]	; (800a774 <_tx_thread_create+0x1d0>)
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f7f5 fef9 	bl	8000450 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a65e:	f3ef 8310 	mrs	r3, PRIMASK
 800a662:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a666:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a668:	b672      	cpsid	i
    return(int_posture);
 800a66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800a66c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	4a41      	ldr	r2, [pc, #260]	; (800a778 <_tx_thread_create+0x1d4>)
 800a672:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800a674:	4b41      	ldr	r3, [pc, #260]	; (800a77c <_tx_thread_create+0x1d8>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10b      	bne.n	800a694 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800a67c:	4a40      	ldr	r2, [pc, #256]	; (800a780 <_tx_thread_create+0x1dc>)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800a692:	e016      	b.n	800a6c2 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800a694:	4b3a      	ldr	r3, [pc, #232]	; (800a780 <_tx_thread_create+0x1dc>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800a69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a69c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6a0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800a6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800a6c2:	4b2e      	ldr	r3, [pc, #184]	; (800a77c <_tx_thread_create+0x1d8>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	4a2c      	ldr	r2, [pc, #176]	; (800a77c <_tx_thread_create+0x1d8>)
 800a6ca:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800a6cc:	4b2d      	ldr	r3, [pc, #180]	; (800a784 <_tx_thread_create+0x1e0>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	4a2c      	ldr	r2, [pc, #176]	; (800a784 <_tx_thread_create+0x1e0>)
 800a6d4:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800a6d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d129      	bne.n	800a730 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a6dc:	f3ef 8305 	mrs	r3, IPSR
 800a6e0:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800a6e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800a6e4:	4b28      	ldr	r3, [pc, #160]	; (800a788 <_tx_thread_create+0x1e4>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a6ee:	d30d      	bcc.n	800a70c <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800a6f0:	4b26      	ldr	r3, [pc, #152]	; (800a78c <_tx_thread_create+0x1e8>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800a6f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d009      	beq.n	800a710 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800a6fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a700:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800a702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a708:	63da      	str	r2, [r3, #60]	; 0x3c
 800a70a:	e001      	b.n	800a710 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800a70c:	2300      	movs	r3, #0
 800a70e:	647b      	str	r3, [r7, #68]	; 0x44
 800a710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a712:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a714:	6a3b      	ldr	r3, [r7, #32]
 800a716:	f383 8810 	msr	PRIMASK, r3
}
 800a71a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f000 fb6d 	bl	800adfc <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800a722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a724:	2b00      	cmp	r3, #0
 800a726:	d01e      	beq.n	800a766 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800a728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a72a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a72c:	63da      	str	r2, [r3, #60]	; 0x3c
 800a72e:	e01a      	b.n	800a766 <_tx_thread_create+0x1c2>
 800a730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a732:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	f383 8810 	msr	PRIMASK, r3
}
 800a73a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a73c:	f3ef 8310 	mrs	r3, PRIMASK
 800a740:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a742:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a744:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a746:	b672      	cpsid	i
    return(int_posture);
 800a748:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800a74a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800a74c:	4b0d      	ldr	r3, [pc, #52]	; (800a784 <_tx_thread_create+0x1e0>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3b01      	subs	r3, #1
 800a752:	4a0c      	ldr	r2, [pc, #48]	; (800a784 <_tx_thread_create+0x1e0>)
 800a754:	6013      	str	r3, [r2, #0]
 800a756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a758:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	f383 8810 	msr	PRIMASK, r3
}
 800a760:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a762:	f000 fb11 	bl	800ad88 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3748      	adds	r7, #72	; 0x48
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	0800b5d1 	.word	0x0800b5d1
 800a774:	0800abf1 	.word	0x0800abf1
 800a778:	54485244 	.word	0x54485244
 800a77c:	24005180 	.word	0x24005180
 800a780:	2400517c 	.word	0x2400517c
 800a784:	2400520c 	.word	0x2400520c
 800a788:	24000010 	.word	0x24000010
 800a78c:	24005178 	.word	0x24005178

0800a790 <_tx_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_delete(TX_THREAD *thread_ptr)
{
 800a790:	b480      	push	{r7}
 800a792:	b08b      	sub	sp, #44	; 0x2c
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a798:	2300      	movs	r3, #0
 800a79a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a79c:	f3ef 8310 	mrs	r3, PRIMASK
 800a7a0:	617b      	str	r3, [r7, #20]
    return(posture);
 800a7a2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a7a4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a7a6:	b672      	cpsid	i
    return(int_posture);
 800a7a8:	693b      	ldr	r3, [r7, #16]

    /* Lockout interrupts while the thread is being deleted.  */
    TX_DISABLE
 800a7aa:	623b      	str	r3, [r7, #32]

    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d00b      	beq.n	800a7cc <_tx_thread_delete+0x3c>
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d007      	beq.n	800a7cc <_tx_thread_delete+0x3c>
 800a7bc:	6a3b      	ldr	r3, [r7, #32]
 800a7be:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f383 8810 	msr	PRIMASK, r3
}
 800a7c6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Thread not completed or terminated - return an error!  */
            status =  TX_DELETE_ERROR;
 800a7c8:	2311      	movs	r3, #17
 800a7ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    /* Determine if the delete operation is okay.  */
    if (status == TX_SUCCESS)
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d12d      	bne.n	800a82e <_tx_thread_delete+0x9e>

        /* Unregister thread in the thread array structure.  */
        TX_EL_THREAD_UNREGISTER(thread_ptr)

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	601a      	str	r2, [r3, #0]

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 800a7d8:	4b18      	ldr	r3, [pc, #96]	; (800a83c <_tx_thread_delete+0xac>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	4a17      	ldr	r2, [pc, #92]	; (800a83c <_tx_thread_delete+0xac>)
 800a7e0:	6013      	str	r3, [r2, #0]

        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 800a7e2:	4b16      	ldr	r3, [pc, #88]	; (800a83c <_tx_thread_delete+0xac>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d103      	bne.n	800a7f2 <_tx_thread_delete+0x62>
        {

            /* Only created thread, just set the created list to NULL.  */
            _tx_thread_created_ptr =  TX_NULL;
 800a7ea:	4b15      	ldr	r3, [pc, #84]	; (800a840 <_tx_thread_delete+0xb0>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	601a      	str	r2, [r3, #0]
 800a7f0:	e017      	b.n	800a822 <_tx_thread_delete+0x92>
        }
        else
        {

            /* Otherwise, not the only created thread, link-up the neighbors.  */
            next_thread =                                thread_ptr -> tx_thread_created_next;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f8:	61fb      	str	r3, [r7, #28]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a800:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_created_previous =  previous_thread;
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	69ba      	ldr	r2, [r7, #24]
 800a806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            previous_thread -> tx_thread_created_next =  next_thread;
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	69fa      	ldr	r2, [r7, #28]
 800a80e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 800a812:	4b0b      	ldr	r3, [pc, #44]	; (800a840 <_tx_thread_delete+0xb0>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d102      	bne.n	800a822 <_tx_thread_delete+0x92>
            {

                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 800a81c:	4a08      	ldr	r2, [pc, #32]	; (800a840 <_tx_thread_delete+0xb0>)
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	6013      	str	r3, [r2, #0]
 800a822:	6a3b      	ldr	r3, [r7, #32]
 800a824:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	f383 8810 	msr	PRIMASK, r3
}
 800a82c:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
 800a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a830:	4618      	mov	r0, r3
 800a832:	372c      	adds	r7, #44	; 0x2c
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	24005180 	.word	0x24005180
 800a840:	2400517c 	.word	0x2400517c

0800a844 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 800a844:	b480      	push	{r7}
 800a846:	b087      	sub	sp, #28
 800a848:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a84a:	f3ef 8310 	mrs	r3, PRIMASK
 800a84e:	60bb      	str	r3, [r7, #8]
    return(posture);
 800a850:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 800a852:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a854:	b672      	cpsid	i
    return(int_posture);
 800a856:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800a858:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a85a:	4b08      	ldr	r3, [pc, #32]	; (800a87c <_tx_thread_identify+0x38>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	613b      	str	r3, [r7, #16]
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f383 8810 	msr	PRIMASK, r3
}
 800a86a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 800a86c:	693b      	ldr	r3, [r7, #16]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	371c      	adds	r7, #28
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	24005174 	.word	0x24005174

0800a880 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 800a880:	b480      	push	{r7}
 800a882:	b089      	sub	sp, #36	; 0x24
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
 800a88c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a88e:	f3ef 8310 	mrs	r3, PRIMASK
 800a892:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a894:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a896:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a898:	b672      	cpsid	i
    return(int_posture);
 800a89a:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800a89c:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d003      	beq.n	800a8ac <_tx_thread_info_get+0x2c>
    {

        *name =  thread_ptr -> tx_thread_name;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d003      	beq.n	800a8ba <_tx_thread_info_get+0x3a>
    {

        *state =  thread_ptr -> tx_thread_state;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d003      	beq.n	800a8c8 <_tx_thread_info_get+0x48>
    {

        *run_count =  thread_ptr -> tx_thread_run_count;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	685a      	ldr	r2, [r3, #4]
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 800a8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d004      	beq.n	800a8d8 <_tx_thread_info_get+0x58>
    {

        *priority =  thread_ptr -> tx_thread_user_priority;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d6:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 800a8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d004      	beq.n	800a8e8 <_tx_thread_info_get+0x68>
    {

        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e6:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d003      	beq.n	800a8f6 <_tx_thread_info_get+0x76>
    {

        *time_slice =  thread_ptr -> tx_thread_time_slice;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	699a      	ldr	r2, [r3, #24]
 800a8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f4:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 800a8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d004      	beq.n	800a906 <_tx_thread_info_get+0x86>
    {

        *next_thread =  thread_ptr -> tx_thread_created_next;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a904:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 800a906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d003      	beq.n	800a914 <_tx_thread_info_get+0x94>
    {

        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	f383 8810 	msr	PRIMASK, r3
}
 800a91e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3724      	adds	r7, #36	; 0x24
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
	...

0800a930 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800a934:	4b12      	ldr	r3, [pc, #72]	; (800a980 <_tx_thread_initialize+0x50>)
 800a936:	2200      	movs	r2, #0
 800a938:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800a93a:	4b12      	ldr	r3, [pc, #72]	; (800a984 <_tx_thread_initialize+0x54>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	4b11      	ldr	r3, [pc, #68]	; (800a988 <_tx_thread_initialize+0x58>)
 800a942:	2200      	movs	r2, #0
 800a944:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a946:	4b11      	ldr	r3, [pc, #68]	; (800a98c <_tx_thread_initialize+0x5c>)
 800a948:	2220      	movs	r2, #32
 800a94a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800a94c:	2280      	movs	r2, #128	; 0x80
 800a94e:	2100      	movs	r1, #0
 800a950:	480f      	ldr	r0, [pc, #60]	; (800a990 <_tx_thread_initialize+0x60>)
 800a952:	f007 f9cd 	bl	8011cf0 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800a956:	4b0f      	ldr	r3, [pc, #60]	; (800a994 <_tx_thread_initialize+0x64>)
 800a958:	2200      	movs	r2, #0
 800a95a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800a95c:	4b0e      	ldr	r3, [pc, #56]	; (800a998 <_tx_thread_initialize+0x68>)
 800a95e:	2200      	movs	r2, #0
 800a960:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800a962:	4b0e      	ldr	r3, [pc, #56]	; (800a99c <_tx_thread_initialize+0x6c>)
 800a964:	2200      	movs	r2, #0
 800a966:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800a968:	4b0d      	ldr	r3, [pc, #52]	; (800a9a0 <_tx_thread_initialize+0x70>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800a96e:	4b0d      	ldr	r3, [pc, #52]	; (800a9a4 <_tx_thread_initialize+0x74>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800a976:	4a0b      	ldr	r2, [pc, #44]	; (800a9a4 <_tx_thread_initialize+0x74>)
 800a978:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800a97a:	bf00      	nop
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	24005174 	.word	0x24005174
 800a984:	24005178 	.word	0x24005178
 800a988:	24005184 	.word	0x24005184
 800a98c:	24005188 	.word	0x24005188
 800a990:	2400518c 	.word	0x2400518c
 800a994:	2400517c 	.word	0x2400517c
 800a998:	24005180 	.word	0x24005180
 800a99c:	2400520c 	.word	0x2400520c
 800a9a0:	24005210 	.word	0x24005210
 800a9a4:	24005214 	.word	0x24005214

0800a9a8 <_tx_thread_priority_change>:
/*                                            _tx_thread_system_suspend,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_priority_change(TX_THREAD *thread_ptr, UINT new_priority, UINT *old_priority)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b090      	sub	sp, #64	; 0x40
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a9b4:	f3ef 8310 	mrs	r3, PRIMASK
 800a9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a9bc:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a9be:	b672      	cpsid	i
    return(int_posture);
 800a9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_THREAD       *next_execute_ptr;
UINT            original_priority;


    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800a9c2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Save the previous priority.  */
    *old_priority =  thread_ptr -> tx_thread_user_priority;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	601a      	str	r2, [r3, #0]

    /* Log this kernel call.  */
    TX_EL_THREAD_PRIORITY_CHANGE_INSERT

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d024      	beq.n	800aa20 <_tx_thread_priority_change+0x78>
    {

        /* Setup the user priority and threshold in the thread's control
           block.  */
        thread_ptr -> tx_thread_user_priority =               new_priority;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        thread_ptr -> tx_thread_user_preempt_threshold =      new_priority;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the actual thread priority should be setup, which is the
           case if the new priority is higher than the priority inheritance.  */
        if (new_priority < thread_ptr -> tx_thread_inherit_priority)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a9ec:	68ba      	ldr	r2, [r7, #8]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d206      	bcs.n	800aa00 <_tx_thread_priority_change+0x58>
        {

            /* Change thread priority to the new user's priority.  */
            thread_ptr -> tx_thread_priority =           new_priority;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	62da      	str	r2, [r3, #44]	; 0x2c
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	63da      	str	r2, [r3, #60]	; 0x3c
 800a9fe:	e009      	b.n	800aa14 <_tx_thread_priority_change+0x6c>
        }
        else
        {

            /* Change thread priority to the priority inheritance.  */
            thread_ptr -> tx_thread_priority =           thread_ptr -> tx_thread_inherit_priority;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	62da      	str	r2, [r3, #44]	; 0x2c
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	63da      	str	r2, [r3, #60]	; 0x3c
 800aa14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa16:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1a:	f383 8810 	msr	PRIMASK, r3
}
 800aa1e:	e075      	b.n	800ab0c <_tx_thread_priority_change+0x164>
    }
    else
    {

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	220e      	movs	r2, #14
 800aa24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800aa26:	4b3c      	ldr	r3, [pc, #240]	; (800ab18 <_tx_thread_priority_change+0x170>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa30:	637b      	str	r3, [r7, #52]	; 0x34

#else

        /* Increment the preempt disable flag by 2 to prevent system suspend from
           returning to the system.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 3);
 800aa32:	4b3a      	ldr	r3, [pc, #232]	; (800ab1c <_tx_thread_priority_change+0x174>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	3303      	adds	r3, #3
 800aa38:	4a38      	ldr	r2, [pc, #224]	; (800ab1c <_tx_thread_priority_change+0x174>)
 800aa3a:	6013      	str	r3, [r2, #0]

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	64da      	str	r2, [r3, #76]	; 0x4c
 800aa48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa4a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa4c:	6a3b      	ldr	r3, [r7, #32]
 800aa4e:	f383 8810 	msr	PRIMASK, r3
}
 800aa52:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800aa54:	68f8      	ldr	r0, [r7, #12]
 800aa56:	f000 fad1 	bl	800affc <_tx_thread_system_suspend>

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Setup the new priority for this thread.  */
        thread_ptr -> tx_thread_user_priority =           new_priority;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        thread_ptr -> tx_thread_user_preempt_threshold =  new_priority;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the actual thread priority should be setup, which is the
           case if the new priority is higher than the priority inheritance.  */
        if (new_priority < thread_ptr -> tx_thread_inherit_priority)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d206      	bcs.n	800aa84 <_tx_thread_priority_change+0xdc>
        {

            /* Change thread priority to the new user's priority.  */
            thread_ptr -> tx_thread_priority =           new_priority;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	68ba      	ldr	r2, [r7, #8]
 800aa7a:	62da      	str	r2, [r3, #44]	; 0x2c
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	68ba      	ldr	r2, [r7, #8]
 800aa80:	63da      	str	r2, [r3, #60]	; 0x3c
 800aa82:	e009      	b.n	800aa98 <_tx_thread_priority_change+0xf0>
        }
        else
        {

            /* Change thread priority to the priority inheritance.  */
            thread_ptr -> tx_thread_priority =           thread_ptr -> tx_thread_inherit_priority;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	62da      	str	r2, [r3, #44]	; 0x2c
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f000 f9af 	bl	800adfc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aa9e:	f3ef 8310 	mrs	r3, PRIMASK
 800aaa2:	61fb      	str	r3, [r7, #28]
    return(posture);
 800aaa4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800aaa6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aaa8:	b672      	cpsid	i
    return(int_posture);
 800aaaa:	69bb      	ldr	r3, [r7, #24]

        /* Disable interrupts.  */
        TX_DISABLE
 800aaac:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800aaae:	4b1b      	ldr	r3, [pc, #108]	; (800ab1c <_tx_thread_priority_change+0x174>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	3b01      	subs	r3, #1
 800aab4:	4a19      	ldr	r2, [pc, #100]	; (800ab1c <_tx_thread_priority_change+0x174>)
 800aab6:	6013      	str	r3, [r2, #0]

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800aab8:	4b17      	ldr	r3, [pc, #92]	; (800ab18 <_tx_thread_priority_change+0x170>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d01a      	beq.n	800aafc <_tx_thread_priority_change+0x154>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d116      	bne.n	800aafc <_tx_thread_priority_change+0x154>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d810      	bhi.n	800aafc <_tx_thread_priority_change+0x154>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aade:	429a      	cmp	r2, r3
 800aae0:	d10c      	bne.n	800aafc <_tx_thread_priority_change+0x154>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800aae2:	4a0d      	ldr	r2, [pc, #52]	; (800ab18 <_tx_thread_priority_change+0x170>)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800aae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d205      	bcs.n	800aafc <_tx_thread_priority_change+0x154>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf4:	490a      	ldr	r1, [pc, #40]	; (800ab20 <_tx_thread_priority_change+0x178>)
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800aafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aafe:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	f383 8810 	msr	PRIMASK, r3
}
 800ab06:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ab08:	f000 f93e 	bl	800ad88 <_tx_thread_system_preempt_check>
    }

    /* Return success if we get here!  */
    return(TX_SUCCESS);
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3740      	adds	r7, #64	; 0x40
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	24005178 	.word	0x24005178
 800ab1c:	2400520c 	.word	0x2400520c
 800ab20:	2400518c 	.word	0x2400518c

0800ab24 <_tx_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_relinquish(VOID)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b08b      	sub	sp, #44	; 0x2c
 800ab28:	af00      	add	r7, sp, #0
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ab2a:	4b2b      	ldr	r3, [pc, #172]	; (800abd8 <_tx_thread_relinquish+0xb4>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ab30:	f3ef 8310 	mrs	r3, PRIMASK
 800ab34:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ab36:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ab38:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ab3a:	b672      	cpsid	i
    return(int_posture);
 800ab3c:	697b      	ldr	r3, [r7, #20]
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Disable interrupts.  */
    TX_DISABLE
 800ab3e:	623b      	str	r3, [r7, #32]

#ifndef TX_NO_TIMER

    /* Reset time slice for current thread.  */
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	69db      	ldr	r3, [r3, #28]
 800ab44:	4a25      	ldr	r2, [pc, #148]	; (800abdc <_tx_thread_relinquish+0xb8>)
 800ab46:	6013      	str	r3, [r2, #0]
#endif

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;
 800ab48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4c:	61fb      	str	r3, [r7, #28]

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	6a1b      	ldr	r3, [r3, #32]
 800ab52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d009      	beq.n	800ab6c <_tx_thread_relinquish+0x48>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 800ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5a:	6a1a      	ldr	r2, [r3, #32]
 800ab5c:	4920      	ldr	r1, [pc, #128]	; (800abe0 <_tx_thread_relinquish+0xbc>)
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 800ab64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab66:	6a1b      	ldr	r3, [r3, #32]
 800ab68:	4a1e      	ldr	r2, [pc, #120]	; (800abe4 <_tx_thread_relinquish+0xc0>)
 800ab6a:	6013      	str	r3, [r2, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 800ab6c:	4b1e      	ldr	r3, [pc, #120]	; (800abe8 <_tx_thread_relinquish+0xc4>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	69fa      	ldr	r2, [r7, #28]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d906      	bls.n	800ab84 <_tx_thread_relinquish+0x60>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800ab76:	4b1c      	ldr	r3, [pc, #112]	; (800abe8 <_tx_thread_relinquish+0xc4>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a19      	ldr	r2, [pc, #100]	; (800abe0 <_tx_thread_relinquish+0xbc>)
 800ab7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab80:	4a18      	ldr	r2, [pc, #96]	; (800abe4 <_tx_thread_relinquish+0xc0>)
 800ab82:	6013      	str	r3, [r2, #0]
 800ab84:	6a3b      	ldr	r3, [r7, #32]
 800ab86:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	f383 8810 	msr	PRIMASK, r3
}
 800ab8e:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 800ab90:	4b14      	ldr	r3, [pc, #80]	; (800abe4 <_tx_thread_relinquish+0xc0>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d017      	beq.n	800abca <_tx_thread_relinquish+0xa6>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800ab9a:	4b14      	ldr	r3, [pc, #80]	; (800abec <_tx_thread_relinquish+0xc8>)
 800ab9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aba2:	f3ef 8305 	mrs	r3, IPSR
 800aba6:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800aba8:	68fb      	ldr	r3, [r7, #12]
    if (__get_ipsr_value() == 0)
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10c      	bne.n	800abc8 <_tx_thread_relinquish+0xa4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800abae:	f3ef 8310 	mrs	r3, PRIMASK
 800abb2:	60bb      	str	r3, [r7, #8]
    return(posture);
 800abb4:	68bb      	ldr	r3, [r7, #8]
    {
        interrupt_save = __get_interrupt_posture();
 800abb6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800abb8:	b662      	cpsie	i
}
 800abba:	bf00      	nop
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	f383 8810 	msr	PRIMASK, r3
}
 800abc6:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800abc8:	bf00      	nop

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 800abca:	bf00      	nop
 800abcc:	372c      	adds	r7, #44	; 0x2c
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	24005174 	.word	0x24005174
 800abdc:	24005778 	.word	0x24005778
 800abe0:	2400518c 	.word	0x2400518c
 800abe4:	24005178 	.word	0x24005178
 800abe8:	24005188 	.word	0x24005188
 800abec:	e000ed04 	.word	0xe000ed04

0800abf0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b088      	sub	sp, #32
 800abf4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800abf6:	4b21      	ldr	r3, [pc, #132]	; (800ac7c <_tx_thread_shell_entry+0x8c>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac00:	69fa      	ldr	r2, [r7, #28]
 800ac02:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ac04:	4610      	mov	r0, r2
 800ac06:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800ac08:	4b1d      	ldr	r3, [pc, #116]	; (800ac80 <_tx_thread_shell_entry+0x90>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d003      	beq.n	800ac18 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800ac10:	4b1b      	ldr	r3, [pc, #108]	; (800ac80 <_tx_thread_shell_entry+0x90>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	69f8      	ldr	r0, [r7, #28]
 800ac16:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ac18:	f3ef 8310 	mrs	r3, PRIMASK
 800ac1c:	607b      	str	r3, [r7, #4]
    return(posture);
 800ac1e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800ac20:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ac22:	b672      	cpsid	i
    return(int_posture);
 800ac24:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800ac26:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	2201      	movs	r2, #1
 800ac32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	2200      	movs	r2, #0
 800ac38:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ac3a:	4b12      	ldr	r3, [pc, #72]	; (800ac84 <_tx_thread_shell_entry+0x94>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	4a10      	ldr	r2, [pc, #64]	; (800ac84 <_tx_thread_shell_entry+0x94>)
 800ac42:	6013      	str	r3, [r2, #0]
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	f383 8810 	msr	PRIMASK, r3
}
 800ac4e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800ac50:	f3ef 8314 	mrs	r3, CONTROL
 800ac54:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800ac56:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800ac58:	617b      	str	r3, [r7, #20]
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	f023 0304 	bic.w	r3, r3, #4
 800ac60:	617b      	str	r3, [r7, #20]
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	f383 8814 	msr	CONTROL, r3
}
 800ac6c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800ac6e:	69f8      	ldr	r0, [r7, #28]
 800ac70:	f000 f9c4 	bl	800affc <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800ac74:	bf00      	nop
 800ac76:	3720      	adds	r7, #32
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	24005174 	.word	0x24005174
 800ac80:	24005210 	.word	0x24005210
 800ac84:	2400520c 	.word	0x2400520c

0800ac88 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08e      	sub	sp, #56	; 0x38
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ac90:	f3ef 8310 	mrs	r3, PRIMASK
 800ac94:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800ac96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800ac98:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800ac9a:	b672      	cpsid	i
    return(int_posture);
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800ac9e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800aca0:	4b35      	ldr	r3, [pc, #212]	; (800ad78 <_tx_thread_sleep+0xf0>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800aca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d108      	bne.n	800acbe <_tx_thread_sleep+0x36>
 800acac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acae:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800acb0:	6a3b      	ldr	r3, [r7, #32]
 800acb2:	f383 8810 	msr	PRIMASK, r3
}
 800acb6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800acb8:	2313      	movs	r3, #19
 800acba:	637b      	str	r3, [r7, #52]	; 0x34
 800acbc:	e056      	b.n	800ad6c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800acbe:	f3ef 8305 	mrs	r3, IPSR
 800acc2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800acc4:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800acc6:	4b2d      	ldr	r3, [pc, #180]	; (800ad7c <_tx_thread_sleep+0xf4>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4313      	orrs	r3, r2
 800accc:	2b00      	cmp	r3, #0
 800acce:	d008      	beq.n	800ace2 <_tx_thread_sleep+0x5a>
 800acd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	f383 8810 	msr	PRIMASK, r3
}
 800acda:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800acdc:	2313      	movs	r3, #19
 800acde:	637b      	str	r3, [r7, #52]	; 0x34
 800ace0:	e044      	b.n	800ad6c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800ace2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace4:	4a26      	ldr	r2, [pc, #152]	; (800ad80 <_tx_thread_sleep+0xf8>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d108      	bne.n	800acfc <_tx_thread_sleep+0x74>
 800acea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acec:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	f383 8810 	msr	PRIMASK, r3
}
 800acf4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800acf6:	2313      	movs	r3, #19
 800acf8:	637b      	str	r3, [r7, #52]	; 0x34
 800acfa:	e037      	b.n	800ad6c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d108      	bne.n	800ad14 <_tx_thread_sleep+0x8c>
 800ad02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad04:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	f383 8810 	msr	PRIMASK, r3
}
 800ad0c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	637b      	str	r3, [r7, #52]	; 0x34
 800ad12:	e02b      	b.n	800ad6c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800ad14:	4b1b      	ldr	r3, [pc, #108]	; (800ad84 <_tx_thread_sleep+0xfc>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d008      	beq.n	800ad2e <_tx_thread_sleep+0xa6>
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f383 8810 	msr	PRIMASK, r3
}
 800ad26:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800ad28:	2313      	movs	r3, #19
 800ad2a:	637b      	str	r3, [r7, #52]	; 0x34
 800ad2c:	e01e      	b.n	800ad6c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad30:	2204      	movs	r2, #4
 800ad32:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ad34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad36:	2201      	movs	r2, #1
 800ad38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800ad3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800ad42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800ad48:	4b0e      	ldr	r3, [pc, #56]	; (800ad84 <_tx_thread_sleep+0xfc>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	4a0d      	ldr	r2, [pc, #52]	; (800ad84 <_tx_thread_sleep+0xfc>)
 800ad50:	6013      	str	r3, [r2, #0]
 800ad52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad54:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	f383 8810 	msr	PRIMASK, r3
}
 800ad5c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800ad5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad60:	f000 f94c 	bl	800affc <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800ad64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad6a:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800ad6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3738      	adds	r7, #56	; 0x38
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	24005174 	.word	0x24005174
 800ad7c:	24000010 	.word	0x24000010
 800ad80:	240052bc 	.word	0x240052bc
 800ad84:	2400520c 	.word	0x2400520c

0800ad88 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b089      	sub	sp, #36	; 0x24
 800ad8c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800ad8e:	4b17      	ldr	r3, [pc, #92]	; (800adec <_tx_thread_system_preempt_check+0x64>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d121      	bne.n	800adde <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800ad9a:	4b15      	ldr	r3, [pc, #84]	; (800adf0 <_tx_thread_system_preempt_check+0x68>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800ada0:	4b14      	ldr	r3, [pc, #80]	; (800adf4 <_tx_thread_system_preempt_check+0x6c>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800ada6:	69ba      	ldr	r2, [r7, #24]
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d017      	beq.n	800adde <_tx_thread_system_preempt_check+0x56>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800adae:	4b12      	ldr	r3, [pc, #72]	; (800adf8 <_tx_thread_system_preempt_check+0x70>)
 800adb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adb4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800adb6:	f3ef 8305 	mrs	r3, IPSR
 800adba:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800adbc:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d10c      	bne.n	800addc <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800adc2:	f3ef 8310 	mrs	r3, PRIMASK
 800adc6:	60fb      	str	r3, [r7, #12]
    return(posture);
 800adc8:	68fb      	ldr	r3, [r7, #12]
        interrupt_save = __get_interrupt_posture();
 800adca:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800adcc:	b662      	cpsie	i
}
 800adce:	bf00      	nop
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f383 8810 	msr	PRIMASK, r3
}
 800adda:	bf00      	nop
}
 800addc:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800adde:	bf00      	nop
 800ade0:	3724      	adds	r7, #36	; 0x24
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	2400520c 	.word	0x2400520c
 800adf0:	24005174 	.word	0x24005174
 800adf4:	24005178 	.word	0x24005178
 800adf8:	e000ed04 	.word	0xe000ed04

0800adfc <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b096      	sub	sp, #88	; 0x58
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ae04:	f3ef 8310 	mrs	r3, PRIMASK
 800ae08:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800ae0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800ae0c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800ae0e:	b672      	cpsid	i
    return(int_posture);
 800ae10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800ae12:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d005      	beq.n	800ae28 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	334c      	adds	r3, #76	; 0x4c
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 fd11 	bl	800b848 <_tx_timer_system_deactivate>
 800ae26:	e002      	b.n	800ae2e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800ae2e:	4b6c      	ldr	r3, [pc, #432]	; (800afe0 <_tx_thread_system_resume+0x1e4>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	3b01      	subs	r3, #1
 800ae34:	4a6a      	ldr	r2, [pc, #424]	; (800afe0 <_tx_thread_system_resume+0x1e4>)
 800ae36:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f040 8083 	bne.w	800af48 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f000 8097 	beq.w	800af7a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d172      	bne.n	800af3a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5e:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800ae60:	4a60      	ldr	r2, [pc, #384]	; (800afe4 <_tx_thread_system_resume+0x1e8>)
 800ae62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae68:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800ae6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d154      	bne.n	800af1a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800ae70:	495c      	ldr	r1, [pc, #368]	; (800afe4 <_tx_thread_system_resume+0x1e8>)
 800ae72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800ae86:	2201      	movs	r2, #1
 800ae88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae8e:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800ae90:	4b55      	ldr	r3, [pc, #340]	; (800afe8 <_tx_thread_system_resume+0x1ec>)
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae96:	4313      	orrs	r3, r2
 800ae98:	4a53      	ldr	r2, [pc, #332]	; (800afe8 <_tx_thread_system_resume+0x1ec>)
 800ae9a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800ae9c:	4b53      	ldr	r3, [pc, #332]	; (800afec <_tx_thread_system_resume+0x1f0>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d269      	bcs.n	800af7a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800aea6:	4a51      	ldr	r2, [pc, #324]	; (800afec <_tx_thread_system_resume+0x1f0>)
 800aea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aeaa:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800aeac:	4b50      	ldr	r3, [pc, #320]	; (800aff0 <_tx_thread_system_resume+0x1f4>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800aeb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d103      	bne.n	800aec0 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800aeb8:	4a4d      	ldr	r2, [pc, #308]	; (800aff0 <_tx_thread_system_resume+0x1f4>)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6013      	str	r3, [r2, #0]
 800aebe:	e05c      	b.n	800af7a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800aec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aec4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d257      	bcs.n	800af7a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800aeca:	4a49      	ldr	r2, [pc, #292]	; (800aff0 <_tx_thread_system_resume+0x1f4>)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed6:	f383 8810 	msr	PRIMASK, r3
}
 800aeda:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800aedc:	4b40      	ldr	r3, [pc, #256]	; (800afe0 <_tx_thread_system_resume+0x1e4>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800aee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d174      	bne.n	800afd2 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800aee8:	4b42      	ldr	r3, [pc, #264]	; (800aff4 <_tx_thread_system_resume+0x1f8>)
 800aeea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeee:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aef0:	f3ef 8305 	mrs	r3, IPSR
 800aef4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800aef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d10c      	bne.n	800af16 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aefc:	f3ef 8310 	mrs	r3, PRIMASK
 800af00:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800af02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800af04:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800af06:	b662      	cpsie	i
}
 800af08:	bf00      	nop
 800af0a:	6a3b      	ldr	r3, [r7, #32]
 800af0c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	f383 8810 	msr	PRIMASK, r3
}
 800af14:	bf00      	nop
}
 800af16:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800af18:	e05b      	b.n	800afd2 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800af1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1e:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800af20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800af26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af30:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af36:	621a      	str	r2, [r3, #32]
 800af38:	e01f      	b.n	800af7a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2200      	movs	r2, #0
 800af3e:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2203      	movs	r2, #3
 800af44:	631a      	str	r2, [r3, #48]	; 0x30
 800af46:	e018      	b.n	800af7a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d014      	beq.n	800af7a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af54:	2b02      	cmp	r3, #2
 800af56:	d010      	beq.n	800af7a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d106      	bne.n	800af6e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	631a      	str	r2, [r3, #48]	; 0x30
 800af6c:	e005      	b.n	800af7a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2203      	movs	r2, #3
 800af78:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800af7a:	4b1f      	ldr	r3, [pc, #124]	; (800aff8 <_tx_thread_system_resume+0x1fc>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800af80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af82:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	f383 8810 	msr	PRIMASK, r3
}
 800af8a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800af8c:	4b18      	ldr	r3, [pc, #96]	; (800aff0 <_tx_thread_system_resume+0x1f4>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af92:	429a      	cmp	r2, r3
 800af94:	d020      	beq.n	800afd8 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800af96:	4b12      	ldr	r3, [pc, #72]	; (800afe0 <_tx_thread_system_resume+0x1e4>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800af9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d11a      	bne.n	800afd8 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800afa2:	4b14      	ldr	r3, [pc, #80]	; (800aff4 <_tx_thread_system_resume+0x1f8>)
 800afa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afa8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800afaa:	f3ef 8305 	mrs	r3, IPSR
 800afae:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800afb0:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d10f      	bne.n	800afd6 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800afb6:	f3ef 8310 	mrs	r3, PRIMASK
 800afba:	613b      	str	r3, [r7, #16]
    return(posture);
 800afbc:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800afbe:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800afc0:	b662      	cpsie	i
}
 800afc2:	bf00      	nop
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	f383 8810 	msr	PRIMASK, r3
}
 800afce:	bf00      	nop
}
 800afd0:	e001      	b.n	800afd6 <_tx_thread_system_resume+0x1da>
                                return;
 800afd2:	bf00      	nop
 800afd4:	e000      	b.n	800afd8 <_tx_thread_system_resume+0x1dc>
 800afd6:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800afd8:	3758      	adds	r7, #88	; 0x58
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	2400520c 	.word	0x2400520c
 800afe4:	2400518c 	.word	0x2400518c
 800afe8:	24005184 	.word	0x24005184
 800afec:	24005188 	.word	0x24005188
 800aff0:	24005178 	.word	0x24005178
 800aff4:	e000ed04 	.word	0xe000ed04
 800aff8:	24005174 	.word	0x24005174

0800affc <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b09e      	sub	sp, #120	; 0x78
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b004:	4b81      	ldr	r3, [pc, #516]	; (800b20c <_tx_thread_system_suspend+0x210>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b00a:	f3ef 8310 	mrs	r3, PRIMASK
 800b00e:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800b010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800b012:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800b014:	b672      	cpsid	i
    return(int_posture);
 800b016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800b018:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b01e:	429a      	cmp	r2, r3
 800b020:	d112      	bne.n	800b048 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b026:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800b028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d008      	beq.n	800b040 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800b02e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b034:	d004      	beq.n	800b040 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	334c      	adds	r3, #76	; 0x4c
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 fba2 	bl	800b784 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	69db      	ldr	r3, [r3, #28]
 800b044:	4a72      	ldr	r2, [pc, #456]	; (800b210 <_tx_thread_system_suspend+0x214>)
 800b046:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800b048:	4b72      	ldr	r3, [pc, #456]	; (800b214 <_tx_thread_system_suspend+0x218>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	3b01      	subs	r3, #1
 800b04e:	4a71      	ldr	r2, [pc, #452]	; (800b214 <_tx_thread_system_suspend+0x218>)
 800b050:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b056:	2b01      	cmp	r3, #1
 800b058:	f040 80a6 	bne.w	800b1a8 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b066:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a1b      	ldr	r3, [r3, #32]
 800b06c:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800b06e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	429a      	cmp	r2, r3
 800b074:	d015      	beq.n	800b0a2 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800b07c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b07e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b080:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800b082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b084:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b086:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800b088:	4a63      	ldr	r2, [pc, #396]	; (800b218 <_tx_thread_system_suspend+0x21c>)
 800b08a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	429a      	cmp	r2, r3
 800b094:	d157      	bne.n	800b146 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800b096:	4960      	ldr	r1, [pc, #384]	; (800b218 <_tx_thread_system_suspend+0x21c>)
 800b098:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b09a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b09c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b0a0:	e051      	b.n	800b146 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800b0a2:	4a5d      	ldr	r2, [pc, #372]	; (800b218 <_tx_thread_system_suspend+0x21c>)
 800b0a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b4:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800b0b6:	4b59      	ldr	r3, [pc, #356]	; (800b21c <_tx_thread_system_suspend+0x220>)
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0bc:	43db      	mvns	r3, r3
 800b0be:	4013      	ands	r3, r2
 800b0c0:	4a56      	ldr	r2, [pc, #344]	; (800b21c <_tx_thread_system_suspend+0x220>)
 800b0c2:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800b0c8:	4b54      	ldr	r3, [pc, #336]	; (800b21c <_tx_thread_system_suspend+0x220>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800b0ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d12b      	bne.n	800b12c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b0d4:	4b52      	ldr	r3, [pc, #328]	; (800b220 <_tx_thread_system_suspend+0x224>)
 800b0d6:	2220      	movs	r2, #32
 800b0d8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800b0da:	4b52      	ldr	r3, [pc, #328]	; (800b224 <_tx_thread_system_suspend+0x228>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0e2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b0e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0e6:	f383 8810 	msr	PRIMASK, r3
}
 800b0ea:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b0ec:	4b49      	ldr	r3, [pc, #292]	; (800b214 <_tx_thread_system_suspend+0x218>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800b0f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f040 8081 	bne.w	800b1fc <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b0fa:	4b4b      	ldr	r3, [pc, #300]	; (800b228 <_tx_thread_system_suspend+0x22c>)
 800b0fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b100:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b102:	f3ef 8305 	mrs	r3, IPSR
 800b106:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800b108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10c      	bne.n	800b128 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b10e:	f3ef 8310 	mrs	r3, PRIMASK
 800b112:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800b114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800b116:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b118:	b662      	cpsie	i
}
 800b11a:	bf00      	nop
 800b11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b122:	f383 8810 	msr	PRIMASK, r3
}
 800b126:	bf00      	nop
}
 800b128:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800b12a:	e067      	b.n	800b1fc <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800b12c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b12e:	fa93 f3a3 	rbit	r3, r3
 800b132:	65bb      	str	r3, [r7, #88]	; 0x58
 800b134:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b136:	fab3 f383 	clz	r3, r3
 800b13a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800b13c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b13e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b140:	4413      	add	r3, r2
 800b142:	4a37      	ldr	r2, [pc, #220]	; (800b220 <_tx_thread_system_suspend+0x224>)
 800b144:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800b146:	4b37      	ldr	r3, [pc, #220]	; (800b224 <_tx_thread_system_suspend+0x228>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d12b      	bne.n	800b1a8 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b150:	4b33      	ldr	r3, [pc, #204]	; (800b220 <_tx_thread_system_suspend+0x224>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a30      	ldr	r2, [pc, #192]	; (800b218 <_tx_thread_system_suspend+0x21c>)
 800b156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b15a:	4a32      	ldr	r2, [pc, #200]	; (800b224 <_tx_thread_system_suspend+0x228>)
 800b15c:	6013      	str	r3, [r2, #0]
 800b15e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b160:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b164:	f383 8810 	msr	PRIMASK, r3
}
 800b168:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b16a:	4b2a      	ldr	r3, [pc, #168]	; (800b214 <_tx_thread_system_suspend+0x218>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800b170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b172:	2b00      	cmp	r3, #0
 800b174:	d144      	bne.n	800b200 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b176:	4b2c      	ldr	r3, [pc, #176]	; (800b228 <_tx_thread_system_suspend+0x22c>)
 800b178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b17c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b17e:	f3ef 8305 	mrs	r3, IPSR
 800b182:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800b184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10c      	bne.n	800b1a4 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b18a:	f3ef 8310 	mrs	r3, PRIMASK
 800b18e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800b190:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800b192:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b194:	b662      	cpsie	i
}
 800b196:	bf00      	nop
 800b198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b19c:	6a3b      	ldr	r3, [r7, #32]
 800b19e:	f383 8810 	msr	PRIMASK, r3
}
 800b1a2:	bf00      	nop
}
 800b1a4:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800b1a6:	e02b      	b.n	800b200 <_tx_thread_system_suspend+0x204>
 800b1a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1aa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	f383 8810 	msr	PRIMASK, r3
}
 800b1b2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b1b4:	4b1b      	ldr	r3, [pc, #108]	; (800b224 <_tx_thread_system_suspend+0x228>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d022      	beq.n	800b204 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b1be:	4b15      	ldr	r3, [pc, #84]	; (800b214 <_tx_thread_system_suspend+0x218>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800b1c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d11c      	bne.n	800b204 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b1ca:	4b17      	ldr	r3, [pc, #92]	; (800b228 <_tx_thread_system_suspend+0x22c>)
 800b1cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b1d2:	f3ef 8305 	mrs	r3, IPSR
 800b1d6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b1d8:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10c      	bne.n	800b1f8 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b1de:	f3ef 8310 	mrs	r3, PRIMASK
 800b1e2:	617b      	str	r3, [r7, #20]
    return(posture);
 800b1e4:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800b1e6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b1e8:	b662      	cpsie	i
}
 800b1ea:	bf00      	nop
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f383 8810 	msr	PRIMASK, r3
}
 800b1f6:	bf00      	nop
}
 800b1f8:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800b1fa:	e003      	b.n	800b204 <_tx_thread_system_suspend+0x208>
                return;
 800b1fc:	bf00      	nop
 800b1fe:	e002      	b.n	800b206 <_tx_thread_system_suspend+0x20a>
            return;
 800b200:	bf00      	nop
 800b202:	e000      	b.n	800b206 <_tx_thread_system_suspend+0x20a>
    return;
 800b204:	bf00      	nop
}
 800b206:	3778      	adds	r7, #120	; 0x78
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	24005174 	.word	0x24005174
 800b210:	24005778 	.word	0x24005778
 800b214:	2400520c 	.word	0x2400520c
 800b218:	2400518c 	.word	0x2400518c
 800b21c:	24005184 	.word	0x24005184
 800b220:	24005188 	.word	0x24005188
 800b224:	24005178 	.word	0x24005178
 800b228:	e000ed04 	.word	0xe000ed04

0800b22c <_tx_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_terminate(TX_THREAD *thread_ptr)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b0ac      	sub	sp, #176	; 0xb0
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
UINT        status;
ULONG       suspension_sequence;


    /* Default to successful completion.  */
    status =  TX_SUCCESS;
 800b234:	2300      	movs	r3, #0
 800b236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b23a:	f3ef 8310 	mrs	r3, PRIMASK
 800b23e:	67fb      	str	r3, [r7, #124]	; 0x7c
    return(posture);
 800b240:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    int_posture = __get_interrupt_posture();
 800b242:	67bb      	str	r3, [r7, #120]	; 0x78
    __asm__ volatile ("CPSID i" : : : "memory");
 800b244:	b672      	cpsid	i
    return(int_posture);
 800b246:	6fbb      	ldr	r3, [r7, #120]	; 0x78

    /* Lockout interrupts while the thread is being terminated.  */
    TX_DISABLE
 800b248:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Deactivate thread timer, if active.  */
    _tx_timer_system_deactivate(&thread_ptr -> tx_thread_timer);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	334c      	adds	r3, #76	; 0x4c
 800b250:	4618      	mov	r0, r3
 800b252:	f000 faf9 	bl	800b848 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_THREAD_TERMINATE_INSERT

    /* Is the thread already terminated?  */
    if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b25a:	2b02      	cmp	r3, #2
 800b25c:	d10a      	bne.n	800b274 <_tx_thread_terminate+0x48>
 800b25e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b262:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b266:	f383 8810 	msr	PRIMASK, r3
}
 800b26a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success since thread is already terminated.  */
        status =  TX_SUCCESS;
 800b26c:	2300      	movs	r3, #0
 800b26e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b272:	e148      	b.n	800b506 <_tx_thread_terminate+0x2da>
    }

    /* Check the specified thread's current status.  */
    else if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b278:	2b01      	cmp	r3, #1
 800b27a:	f000 813d 	beq.w	800b4f8 <_tx_thread_terminate+0x2cc>
    {

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800b27e:	4ba6      	ldr	r3, [pc, #664]	; (800b518 <_tx_thread_terminate+0x2ec>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3301      	adds	r3, #1
 800b284:	4aa4      	ldr	r2, [pc, #656]	; (800b518 <_tx_thread_terminate+0x2ec>)
 800b286:	6013      	str	r3, [r2, #0]
        /* Pickup the entry/exit application callback routine.  */
        entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

        /* Check to see if the thread is currently ready.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d17a      	bne.n	800b386 <_tx_thread_terminate+0x15a>
        {

            /* Set the state to terminated.  */
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2202      	movs	r2, #2
 800b294:	631a      	str	r2, [r3, #48]	; 0x30
            /* Call actual non-interruptable thread suspension routine.  */
            _tx_thread_system_ni_suspend(thread_ptr, ((ULONG) 0));
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2201      	movs	r2, #1
 800b29a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Disable preemption.  */
            _tx_thread_preempt_disable++;
 800b2a2:	4b9d      	ldr	r3, [pc, #628]	; (800b518 <_tx_thread_terminate+0x2ec>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	4a9b      	ldr	r2, [pc, #620]	; (800b518 <_tx_thread_terminate+0x2ec>)
 800b2aa:	6013      	str	r3, [r2, #0]
 800b2ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2b4:	f383 8810 	msr	PRIMASK, r3
}
 800b2b8:	bf00      	nop
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b2ba:	f3ef 8305 	mrs	r3, IPSR
 800b2be:	673b      	str	r3, [r7, #112]	; 0x70
    return(ipsr_value);
 800b2c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70

            /* Restore interrupts.  */
            TX_RESTORE

            /* Perform any additional activities for tool or user purpose.  */
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 800b2c2:	4b96      	ldr	r3, [pc, #600]	; (800b51c <_tx_thread_terminate+0x2f0>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b2cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d118      	bne.n	800b306 <_tx_thread_terminate+0xda>
 800b2d4:	4b92      	ldr	r3, [pc, #584]	; (800b520 <_tx_thread_terminate+0x2f4>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d113      	bne.n	800b306 <_tx_thread_terminate+0xda>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800b2de:	f3ef 8314 	mrs	r3, CONTROL
 800b2e2:	667b      	str	r3, [r7, #100]	; 0x64
    return(control_value);
 800b2e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b2ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b2ee:	f023 0304 	bic.w	r3, r3, #4
 800b2f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b2f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b2fa:	66bb      	str	r3, [r7, #104]	; 0x68
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800b2fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b2fe:	f383 8814 	msr	CONTROL, r3
}
 800b302:	bf00      	nop
 800b304:	e032      	b.n	800b36c <_tx_thread_terminate+0x140>
 800b306:	4b87      	ldr	r3, [pc, #540]	; (800b524 <_tx_thread_terminate+0x2f8>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b30e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b31a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d124      	bne.n	800b36c <_tx_thread_terminate+0x140>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800b322:	f3ef 8314 	mrs	r3, CONTROL
 800b326:	663b      	str	r3, [r7, #96]	; 0x60
    return(control_value);
 800b328:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b32a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b32e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b332:	f003 0304 	and.w	r3, r3, #4
 800b336:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b33a:	eeb0 0a40 	vmov.f32	s0, s0
 800b33e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b342:	2b00      	cmp	r3, #0
 800b344:	d112      	bne.n	800b36c <_tx_thread_terminate+0x140>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800b346:	f3ef 8314 	mrs	r3, CONTROL
 800b34a:	65bb      	str	r3, [r7, #88]	; 0x58
    return(control_value);
 800b34c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b34e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b352:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b356:	f023 0304 	bic.w	r3, r3, #4
 800b35a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b35e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b362:	65fb      	str	r3, [r7, #92]	; 0x5c
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800b364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b366:	f383 8814 	msr	CONTROL, r3
}
 800b36a:	bf00      	nop
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
            }
#endif

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f7ff fe45 	bl	800affc <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b372:	f3ef 8310 	mrs	r3, PRIMASK
 800b376:	657b      	str	r3, [r7, #84]	; 0x54
    return(posture);
 800b378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    int_posture = __get_interrupt_posture();
 800b37a:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("CPSID i" : : : "memory");
 800b37c:	b672      	cpsid	i
    return(int_posture);
 800b37e:	6d3b      	ldr	r3, [r7, #80]	; 0x50

            /* Disable interrupts.  */
            TX_DISABLE
 800b380:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b384:	e094      	b.n	800b4b0 <_tx_thread_terminate+0x284>
        }
        else
        {

            /* Change the state to terminated.  */
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2202      	movs	r2, #2
 800b38a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Thread state change.  */
            TX_THREAD_STATE_CHANGE(thread_ptr, TX_TERMINATED)

            /* Set the suspending flag.  This prevents the thread from being
               resumed before the cleanup routine is executed.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	639a      	str	r2, [r3, #56]	; 0x38

            /* Pickup the cleanup routine address.  */
            suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b396:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

#ifndef TX_NOT_INTERRUPTABLE

            /* Pickup the suspension sequence number that is used later to verify that the
               cleanup is still necessary.  */
            suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b3a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3ac:	f383 8810 	msr	PRIMASK, r3
}
 800b3b0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Call any cleanup routines.  */
            if (suspend_cleanup != TX_NULL)
 800b3b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d005      	beq.n	800b3c6 <_tx_thread_terminate+0x19a>
            {

                /* Yes, there is a function to call.  */
                (suspend_cleanup)(thread_ptr, suspension_sequence);
 800b3ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b3be:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3c6:	f3ef 8310 	mrs	r3, PRIMASK
 800b3ca:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800b3cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800b3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3d0:	b672      	cpsid	i
    return(int_posture);
 800b3d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
            }

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 800b3d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
#endif

            /* Clear the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	639a      	str	r2, [r3, #56]	; 0x38
 800b3de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3e2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3e6:	f383 8810 	msr	PRIMASK, r3
}
 800b3ea:	bf00      	nop
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b3ec:	f3ef 8305 	mrs	r3, IPSR
 800b3f0:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 800b3f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Perform any additional activities for tool or user purpose.  */
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)
 800b3f4:	4b49      	ldr	r3, [pc, #292]	; (800b51c <_tx_thread_terminate+0x2f0>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b3fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b402:	2b00      	cmp	r3, #0
 800b404:	d118      	bne.n	800b438 <_tx_thread_terminate+0x20c>
 800b406:	4b46      	ldr	r3, [pc, #280]	; (800b520 <_tx_thread_terminate+0x2f4>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d113      	bne.n	800b438 <_tx_thread_terminate+0x20c>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800b410:	f3ef 8314 	mrs	r3, CONTROL
 800b414:	637b      	str	r3, [r7, #52]	; 0x34
    return(control_value);
 800b416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b418:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b41c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b420:	f023 0304 	bic.w	r3, r3, #4
 800b424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b428:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b42c:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800b42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b430:	f383 8814 	msr	CONTROL, r3
}
 800b434:	bf00      	nop
 800b436:	e032      	b.n	800b49e <_tx_thread_terminate+0x272>
 800b438:	4b3a      	ldr	r3, [pc, #232]	; (800b524 <_tx_thread_terminate+0x2f8>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b440:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b444:	f003 0301 	and.w	r3, r3, #1
 800b448:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b44c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b450:	2b01      	cmp	r3, #1
 800b452:	d124      	bne.n	800b49e <_tx_thread_terminate+0x272>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800b454:	f3ef 8314 	mrs	r3, CONTROL
 800b458:	633b      	str	r3, [r7, #48]	; 0x30
    return(control_value);
 800b45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b460:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b464:	f003 0304 	and.w	r3, r3, #4
 800b468:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b46c:	eeb0 0a40 	vmov.f32	s0, s0
 800b470:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b474:	2b00      	cmp	r3, #0
 800b476:	d112      	bne.n	800b49e <_tx_thread_terminate+0x272>
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800b478:	f3ef 8314 	mrs	r3, CONTROL
 800b47c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(control_value);
 800b47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b480:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b484:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b488:	f023 0304 	bic.w	r3, r3, #4
 800b48c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b490:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b494:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800b496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b498:	f383 8814 	msr	CONTROL, r3
}
 800b49c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b49e:	f3ef 8310 	mrs	r3, PRIMASK
 800b4a2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800b4a6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b4a8:	b672      	cpsid	i
    return(int_posture);
 800b4aa:	6a3b      	ldr	r3, [r7, #32]
#endif

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 800b4ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b4b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4b4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	f383 8810 	msr	PRIMASK, r3
}
 800b4bc:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Determine if the application is using mutexes.  */
        if (_tx_thread_mutex_release != TX_NULL)
 800b4be:	4b1a      	ldr	r3, [pc, #104]	; (800b528 <_tx_thread_terminate+0x2fc>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d003      	beq.n	800b4ce <_tx_thread_terminate+0x2a2>
        {

            /* Yes, call the mutex release function via a function pointer that
               is setup during initialization.  */
            (_tx_thread_mutex_release)(thread_ptr);
 800b4c6:	4b18      	ldr	r3, [pc, #96]	; (800b528 <_tx_thread_terminate+0x2fc>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b4ce:	f3ef 8310 	mrs	r3, PRIMASK
 800b4d2:	617b      	str	r3, [r7, #20]
    return(posture);
 800b4d4:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b4d6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b4d8:	b672      	cpsid	i
    return(int_posture);
 800b4da:	693b      	ldr	r3, [r7, #16]
        }

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800b4dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
#endif

        /* Enable preemption.  */
        _tx_thread_preempt_disable--;
 800b4e0:	4b0d      	ldr	r3, [pc, #52]	; (800b518 <_tx_thread_terminate+0x2ec>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	4a0c      	ldr	r2, [pc, #48]	; (800b518 <_tx_thread_terminate+0x2ec>)
 800b4e8:	6013      	str	r3, [r2, #0]
 800b4ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4ee:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	f383 8810 	msr	PRIMASK, r3
}
 800b4f6:	e006      	b.n	800b506 <_tx_thread_terminate+0x2da>
 800b4f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4fc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f383 8810 	msr	PRIMASK, r3
}
 800b504:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800b506:	f7ff fc3f 	bl	800ad88 <_tx_thread_system_preempt_check>

    /* Return completion status.  */
    return(status);
 800b50a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
}
 800b50e:	4618      	mov	r0, r3
 800b510:	37b0      	adds	r7, #176	; 0xb0
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	2400520c 	.word	0x2400520c
 800b51c:	24000010 	.word	0x24000010
 800b520:	24005174 	.word	0x24005174
 800b524:	e000ef34 	.word	0xe000ef34
 800b528:	24005210 	.word	0x24005210

0800b52c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b087      	sub	sp, #28
 800b530:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b532:	4b21      	ldr	r3, [pc, #132]	; (800b5b8 <_tx_thread_time_slice+0x8c>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b538:	f3ef 8310 	mrs	r3, PRIMASK
 800b53c:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b53e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800b540:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b542:	b672      	cpsid	i
    return(int_posture);
 800b544:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800b546:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b548:	4b1c      	ldr	r3, [pc, #112]	; (800b5bc <_tx_thread_time_slice+0x90>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d024      	beq.n	800b59e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d120      	bne.n	800b59e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	69da      	ldr	r2, [r3, #28]
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	699b      	ldr	r3, [r3, #24]
 800b568:	4a15      	ldr	r2, [pc, #84]	; (800b5c0 <_tx_thread_time_slice+0x94>)
 800b56a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	6a1b      	ldr	r3, [r3, #32]
 800b570:	697a      	ldr	r2, [r7, #20]
 800b572:	429a      	cmp	r2, r3
 800b574:	d013      	beq.n	800b59e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b57e:	429a      	cmp	r2, r3
 800b580:	d10d      	bne.n	800b59e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b586:	697a      	ldr	r2, [r7, #20]
 800b588:	6a12      	ldr	r2, [r2, #32]
 800b58a:	490e      	ldr	r1, [pc, #56]	; (800b5c4 <_tx_thread_time_slice+0x98>)
 800b58c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b590:	4b0d      	ldr	r3, [pc, #52]	; (800b5c8 <_tx_thread_time_slice+0x9c>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a0b      	ldr	r2, [pc, #44]	; (800b5c4 <_tx_thread_time_slice+0x98>)
 800b596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b59a:	4a0c      	ldr	r2, [pc, #48]	; (800b5cc <_tx_thread_time_slice+0xa0>)
 800b59c:	6013      	str	r3, [r2, #0]
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f383 8810 	msr	PRIMASK, r3
}
 800b5a8:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800b5aa:	bf00      	nop
 800b5ac:	371c      	adds	r7, #28
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	24005174 	.word	0x24005174
 800b5bc:	2400521c 	.word	0x2400521c
 800b5c0:	24005778 	.word	0x24005778
 800b5c4:	2400518c 	.word	0x2400518c
 800b5c8:	24005188 	.word	0x24005188
 800b5cc:	24005178 	.word	0x24005178

0800b5d0 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b08a      	sub	sp, #40	; 0x28
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5dc:	f3ef 8310 	mrs	r3, PRIMASK
 800b5e0:	617b      	str	r3, [r7, #20]
    return(posture);
 800b5e2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b5e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5e6:	b672      	cpsid	i
    return(int_posture);
 800b5e8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800b5ea:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800b5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f0:	2b04      	cmp	r3, #4
 800b5f2:	d10e      	bne.n	800b612 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800b5f4:	4b13      	ldr	r3, [pc, #76]	; (800b644 <_tx_thread_timeout+0x74>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	4a12      	ldr	r2, [pc, #72]	; (800b644 <_tx_thread_timeout+0x74>)
 800b5fc:	6013      	str	r3, [r2, #0]
 800b5fe:	6a3b      	ldr	r3, [r7, #32]
 800b600:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f383 8810 	msr	PRIMASK, r3
}
 800b608:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800b60a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b60c:	f7ff fbf6 	bl	800adfc <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800b610:	e013      	b.n	800b63a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800b612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b616:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800b618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b61e:	61bb      	str	r3, [r7, #24]
 800b620:	6a3b      	ldr	r3, [r7, #32]
 800b622:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	f383 8810 	msr	PRIMASK, r3
}
 800b62a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d003      	beq.n	800b63a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	69b9      	ldr	r1, [r7, #24]
 800b636:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b638:	4798      	blx	r3
}
 800b63a:	bf00      	nop
 800b63c:	3728      	adds	r7, #40	; 0x28
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	2400520c 	.word	0x2400520c

0800b648 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b64e:	f3ef 8310 	mrs	r3, PRIMASK
 800b652:	607b      	str	r3, [r7, #4]
    return(posture);
 800b654:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800b656:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b658:	b672      	cpsid	i
    return(int_posture);
 800b65a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800b65c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800b65e:	4b09      	ldr	r3, [pc, #36]	; (800b684 <_tx_timer_expiration_process+0x3c>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	3301      	adds	r3, #1
 800b664:	4a07      	ldr	r2, [pc, #28]	; (800b684 <_tx_timer_expiration_process+0x3c>)
 800b666:	6013      	str	r3, [r2, #0]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	f383 8810 	msr	PRIMASK, r3
}
 800b672:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800b674:	4804      	ldr	r0, [pc, #16]	; (800b688 <_tx_timer_expiration_process+0x40>)
 800b676:	f7ff fbc1 	bl	800adfc <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b67a:	bf00      	nop
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	2400520c 	.word	0x2400520c
 800b688:	240052bc 	.word	0x240052bc

0800b68c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800b68c:	b590      	push	{r4, r7, lr}
 800b68e:	b089      	sub	sp, #36	; 0x24
 800b690:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800b692:	4b28      	ldr	r3, [pc, #160]	; (800b734 <_tx_timer_initialize+0xa8>)
 800b694:	2200      	movs	r2, #0
 800b696:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800b698:	4b27      	ldr	r3, [pc, #156]	; (800b738 <_tx_timer_initialize+0xac>)
 800b69a:	2200      	movs	r2, #0
 800b69c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b69e:	4b27      	ldr	r3, [pc, #156]	; (800b73c <_tx_timer_initialize+0xb0>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800b6a4:	4b26      	ldr	r3, [pc, #152]	; (800b740 <_tx_timer_initialize+0xb4>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800b6aa:	4b26      	ldr	r3, [pc, #152]	; (800b744 <_tx_timer_initialize+0xb8>)
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800b6b0:	2280      	movs	r2, #128	; 0x80
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	4824      	ldr	r0, [pc, #144]	; (800b748 <_tx_timer_initialize+0xbc>)
 800b6b6:	f006 fb1b 	bl	8011cf0 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800b6ba:	4b24      	ldr	r3, [pc, #144]	; (800b74c <_tx_timer_initialize+0xc0>)
 800b6bc:	4a22      	ldr	r2, [pc, #136]	; (800b748 <_tx_timer_initialize+0xbc>)
 800b6be:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800b6c0:	4b23      	ldr	r3, [pc, #140]	; (800b750 <_tx_timer_initialize+0xc4>)
 800b6c2:	4a21      	ldr	r2, [pc, #132]	; (800b748 <_tx_timer_initialize+0xbc>)
 800b6c4:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800b6c6:	4b23      	ldr	r3, [pc, #140]	; (800b754 <_tx_timer_initialize+0xc8>)
 800b6c8:	4a23      	ldr	r2, [pc, #140]	; (800b758 <_tx_timer_initialize+0xcc>)
 800b6ca:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800b6cc:	4b21      	ldr	r3, [pc, #132]	; (800b754 <_tx_timer_initialize+0xc8>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	3304      	adds	r3, #4
 800b6d2:	4a20      	ldr	r2, [pc, #128]	; (800b754 <_tx_timer_initialize+0xc8>)
 800b6d4:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800b6d6:	4b21      	ldr	r3, [pc, #132]	; (800b75c <_tx_timer_initialize+0xd0>)
 800b6d8:	4a21      	ldr	r2, [pc, #132]	; (800b760 <_tx_timer_initialize+0xd4>)
 800b6da:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800b6dc:	4b21      	ldr	r3, [pc, #132]	; (800b764 <_tx_timer_initialize+0xd8>)
 800b6de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b6e2:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800b6e4:	4b20      	ldr	r3, [pc, #128]	; (800b768 <_tx_timer_initialize+0xdc>)
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800b6ea:	4b1c      	ldr	r3, [pc, #112]	; (800b75c <_tx_timer_initialize+0xd0>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a1d      	ldr	r2, [pc, #116]	; (800b764 <_tx_timer_initialize+0xd8>)
 800b6f0:	6812      	ldr	r2, [r2, #0]
 800b6f2:	491d      	ldr	r1, [pc, #116]	; (800b768 <_tx_timer_initialize+0xdc>)
 800b6f4:	6809      	ldr	r1, [r1, #0]
 800b6f6:	481c      	ldr	r0, [pc, #112]	; (800b768 <_tx_timer_initialize+0xdc>)
 800b6f8:	6800      	ldr	r0, [r0, #0]
 800b6fa:	2400      	movs	r4, #0
 800b6fc:	9405      	str	r4, [sp, #20]
 800b6fe:	2400      	movs	r4, #0
 800b700:	9404      	str	r4, [sp, #16]
 800b702:	9003      	str	r0, [sp, #12]
 800b704:	9102      	str	r1, [sp, #8]
 800b706:	9201      	str	r2, [sp, #4]
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	4b18      	ldr	r3, [pc, #96]	; (800b76c <_tx_timer_initialize+0xe0>)
 800b70c:	4a18      	ldr	r2, [pc, #96]	; (800b770 <_tx_timer_initialize+0xe4>)
 800b70e:	4919      	ldr	r1, [pc, #100]	; (800b774 <_tx_timer_initialize+0xe8>)
 800b710:	4819      	ldr	r0, [pc, #100]	; (800b778 <_tx_timer_initialize+0xec>)
 800b712:	f7fe ff47 	bl	800a5a4 <_tx_thread_create>
 800b716:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1e5      	bne.n	800b6ea <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800b71e:	4b17      	ldr	r3, [pc, #92]	; (800b77c <_tx_timer_initialize+0xf0>)
 800b720:	2200      	movs	r2, #0
 800b722:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800b724:	4b16      	ldr	r3, [pc, #88]	; (800b780 <_tx_timer_initialize+0xf4>)
 800b726:	2200      	movs	r2, #0
 800b728:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800b72a:	bf00      	nop
 800b72c:	370c      	adds	r7, #12
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd90      	pop	{r4, r7, pc}
 800b732:	bf00      	nop
 800b734:	24005218 	.word	0x24005218
 800b738:	24005778 	.word	0x24005778
 800b73c:	2400521c 	.word	0x2400521c
 800b740:	240052ac 	.word	0x240052ac
 800b744:	240052b8 	.word	0x240052b8
 800b748:	24005220 	.word	0x24005220
 800b74c:	240052a0 	.word	0x240052a0
 800b750:	240052a8 	.word	0x240052a8
 800b754:	240052a4 	.word	0x240052a4
 800b758:	2400529c 	.word	0x2400529c
 800b75c:	2400536c 	.word	0x2400536c
 800b760:	24005378 	.word	0x24005378
 800b764:	24005370 	.word	0x24005370
 800b768:	24005374 	.word	0x24005374
 800b76c:	4154494d 	.word	0x4154494d
 800b770:	0800b8b9 	.word	0x0800b8b9
 800b774:	080128a8 	.word	0x080128a8
 800b778:	240052bc 	.word	0x240052bc
 800b77c:	240052b0 	.word	0x240052b0
 800b780:	240052b4 	.word	0x240052b4

0800b784 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800b784:	b480      	push	{r7}
 800b786:	b089      	sub	sp, #36	; 0x24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d04a      	beq.n	800b82e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b79e:	d046      	beq.n	800b82e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	699b      	ldr	r3, [r3, #24]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d142      	bne.n	800b82e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	2b20      	cmp	r3, #32
 800b7ac:	d902      	bls.n	800b7b4 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800b7ae:	231f      	movs	r3, #31
 800b7b0:	61bb      	str	r3, [r7, #24]
 800b7b2:	e002      	b.n	800b7ba <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800b7ba:	4b20      	ldr	r3, [pc, #128]	; (800b83c <_tx_timer_system_activate+0xb8>)
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	4413      	add	r3, r2
 800b7c4:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800b7c6:	4b1e      	ldr	r3, [pc, #120]	; (800b840 <_tx_timer_system_activate+0xbc>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	69fa      	ldr	r2, [r7, #28]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d30b      	bcc.n	800b7e8 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800b7d0:	4b1b      	ldr	r3, [pc, #108]	; (800b840 <_tx_timer_system_activate+0xbc>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	69fa      	ldr	r2, [r7, #28]
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	109b      	asrs	r3, r3, #2
 800b7da:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800b7dc:	4b19      	ldr	r3, [pc, #100]	; (800b844 <_tx_timer_system_activate+0xc0>)
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	4413      	add	r3, r2
 800b7e6:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d109      	bne.n	800b804 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	601a      	str	r2, [r3, #0]
 800b802:	e011      	b.n	800b828 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	695b      	ldr	r3, [r3, #20]
 800b80e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	69fa      	ldr	r2, [r7, #28]
 800b82c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800b82e:	bf00      	nop
 800b830:	3724      	adds	r7, #36	; 0x24
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop
 800b83c:	240052a8 	.word	0x240052a8
 800b840:	240052a4 	.word	0x240052a4
 800b844:	240052a0 	.word	0x240052a0

0800b848 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800b848:	b480      	push	{r7}
 800b84a:	b087      	sub	sp, #28
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d026      	beq.n	800b8aa <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	691b      	ldr	r3, [r3, #16]
 800b860:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	429a      	cmp	r2, r3
 800b868:	d108      	bne.n	800b87c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	429a      	cmp	r2, r3
 800b872:	d117      	bne.n	800b8a4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	2200      	movs	r2, #0
 800b878:	601a      	str	r2, [r3, #0]
 800b87a:	e013      	b.n	800b8a4 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	695b      	ldr	r3, [r3, #20]
 800b880:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	68fa      	ldr	r2, [r7, #12]
 800b886:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	693a      	ldr	r2, [r7, #16]
 800b88c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	429a      	cmp	r2, r3
 800b896:	d105      	bne.n	800b8a4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	693a      	ldr	r2, [r7, #16]
 800b8a2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	619a      	str	r2, [r3, #24]
    }
}
 800b8aa:	bf00      	nop
 800b8ac:	371c      	adds	r7, #28
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
	...

0800b8b8 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b098      	sub	sp, #96	; 0x60
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a73      	ldr	r2, [pc, #460]	; (800ba94 <_tx_timer_thread_entry+0x1dc>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	f040 80de 	bne.w	800ba8a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b8ce:	f3ef 8310 	mrs	r3, PRIMASK
 800b8d2:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800b8d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800b8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b8d8:	b672      	cpsid	i
    return(int_posture);
 800b8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800b8dc:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800b8de:	4b6e      	ldr	r3, [pc, #440]	; (800ba98 <_tx_timer_thread_entry+0x1e0>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d003      	beq.n	800b8f4 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f107 020c 	add.w	r2, r7, #12
 800b8f2:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800b8f4:	4b68      	ldr	r3, [pc, #416]	; (800ba98 <_tx_timer_thread_entry+0x1e0>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800b8fc:	4b66      	ldr	r3, [pc, #408]	; (800ba98 <_tx_timer_thread_entry+0x1e0>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	3304      	adds	r3, #4
 800b902:	4a65      	ldr	r2, [pc, #404]	; (800ba98 <_tx_timer_thread_entry+0x1e0>)
 800b904:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800b906:	4b64      	ldr	r3, [pc, #400]	; (800ba98 <_tx_timer_thread_entry+0x1e0>)
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	4b64      	ldr	r3, [pc, #400]	; (800ba9c <_tx_timer_thread_entry+0x1e4>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d103      	bne.n	800b91a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800b912:	4b63      	ldr	r3, [pc, #396]	; (800baa0 <_tx_timer_thread_entry+0x1e8>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a60      	ldr	r2, [pc, #384]	; (800ba98 <_tx_timer_thread_entry+0x1e0>)
 800b918:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800b91a:	4b62      	ldr	r3, [pc, #392]	; (800baa4 <_tx_timer_thread_entry+0x1ec>)
 800b91c:	2200      	movs	r2, #0
 800b91e:	601a      	str	r2, [r3, #0]
 800b920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b922:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b926:	f383 8810 	msr	PRIMASK, r3
}
 800b92a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b92c:	f3ef 8310 	mrs	r3, PRIMASK
 800b930:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800b932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800b934:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800b936:	b672      	cpsid	i
    return(int_posture);
 800b938:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800b93a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800b93c:	e07f      	b.n	800ba3e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800b948:	2300      	movs	r3, #0
 800b94a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800b94c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b94e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b950:	429a      	cmp	r2, r3
 800b952:	d102      	bne.n	800b95a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800b954:	2300      	movs	r3, #0
 800b956:	60fb      	str	r3, [r7, #12]
 800b958:	e00e      	b.n	800b978 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800b95a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b95c:	695b      	ldr	r3, [r3, #20]
 800b95e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800b960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b962:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b964:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800b966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b96a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800b96c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b96e:	f107 020c 	add.w	r2, r7, #12
 800b972:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800b974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b976:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800b978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2b20      	cmp	r3, #32
 800b97e:	d911      	bls.n	800b9a4 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800b980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800b988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b98a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800b98c:	2300      	movs	r3, #0
 800b98e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800b990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b992:	f107 0208 	add.w	r2, r7, #8
 800b996:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800b998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b99a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b99c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800b99e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9a0:	60bb      	str	r3, [r7, #8]
 800b9a2:	e01a      	b.n	800b9da <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800b9a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800b9aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800b9b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9b2:	685a      	ldr	r2, [r3, #4]
 800b9b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9b6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800b9b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d009      	beq.n	800b9d4 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800b9c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9c2:	f107 0208 	add.w	r2, r7, #8
 800b9c6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800b9c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b9cc:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800b9ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9d0:	60bb      	str	r3, [r7, #8]
 800b9d2:	e002      	b.n	800b9da <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800b9d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800b9da:	4a33      	ldr	r2, [pc, #204]	; (800baa8 <_tx_timer_thread_entry+0x1f0>)
 800b9dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9de:	6013      	str	r3, [r2, #0]
 800b9e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e6:	f383 8810 	msr	PRIMASK, r3
}
 800b9ea:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800b9ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d002      	beq.n	800b9f8 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800b9f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b9f4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b9f6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b9f8:	f3ef 8310 	mrs	r3, PRIMASK
 800b9fc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800ba00:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba02:	b672      	cpsid	i
    return(int_posture);
 800ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800ba06:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800ba08:	4b27      	ldr	r3, [pc, #156]	; (800baa8 <_tx_timer_thread_entry+0x1f0>)
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d105      	bne.n	800ba22 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800ba16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba18:	2200      	movs	r2, #0
 800ba1a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800ba1c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba1e:	f7ff feb1 	bl	800b784 <_tx_timer_system_activate>
 800ba22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba24:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	f383 8810 	msr	PRIMASK, r3
}
 800ba2c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba2e:	f3ef 8310 	mrs	r3, PRIMASK
 800ba32:	623b      	str	r3, [r7, #32]
    return(posture);
 800ba34:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800ba36:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba38:	b672      	cpsid	i
    return(int_posture);
 800ba3a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800ba3c:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	f47f af7c 	bne.w	800b93e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800ba46:	4b17      	ldr	r3, [pc, #92]	; (800baa4 <_tx_timer_thread_entry+0x1ec>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d116      	bne.n	800ba7c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800ba4e:	4b17      	ldr	r3, [pc, #92]	; (800baac <_tx_timer_thread_entry+0x1f4>)
 800ba50:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800ba52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba54:	2203      	movs	r2, #3
 800ba56:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ba58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800ba5e:	4b14      	ldr	r3, [pc, #80]	; (800bab0 <_tx_timer_thread_entry+0x1f8>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	3301      	adds	r3, #1
 800ba64:	4a12      	ldr	r2, [pc, #72]	; (800bab0 <_tx_timer_thread_entry+0x1f8>)
 800ba66:	6013      	str	r3, [r2, #0]
 800ba68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba6a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	f383 8810 	msr	PRIMASK, r3
}
 800ba72:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800ba74:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ba76:	f7ff fac1 	bl	800affc <_tx_thread_system_suspend>
 800ba7a:	e728      	b.n	800b8ce <_tx_timer_thread_entry+0x16>
 800ba7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba7e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	f383 8810 	msr	PRIMASK, r3
}
 800ba86:	bf00      	nop
            TX_DISABLE
 800ba88:	e721      	b.n	800b8ce <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800ba8a:	bf00      	nop
 800ba8c:	3760      	adds	r7, #96	; 0x60
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	4154494d 	.word	0x4154494d
 800ba98:	240052a8 	.word	0x240052a8
 800ba9c:	240052a4 	.word	0x240052a4
 800baa0:	240052a0 	.word	0x240052a0
 800baa4:	240052ac 	.word	0x240052ac
 800baa8:	240052b8 	.word	0x240052b8
 800baac:	240052bc 	.word	0x240052bc
 800bab0:	2400520c 	.word	0x2400520c

0800bab4 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b08a      	sub	sp, #40	; 0x28
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	607a      	str	r2, [r7, #4]
 800bac0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bac2:	2300      	movs	r3, #0
 800bac4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d102      	bne.n	800bad2 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bacc:	2302      	movs	r3, #2
 800bace:	627b      	str	r3, [r7, #36]	; 0x24
 800bad0:	e029      	b.n	800bb26 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a2d      	ldr	r2, [pc, #180]	; (800bb8c <_txe_byte_allocate+0xd8>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d002      	beq.n	800bae2 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800badc:	2302      	movs	r3, #2
 800bade:	627b      	str	r3, [r7, #36]	; 0x24
 800bae0:	e021      	b.n	800bb26 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d102      	bne.n	800baee <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800bae8:	2303      	movs	r3, #3
 800baea:	627b      	str	r3, [r7, #36]	; 0x24
 800baec:	e01b      	b.n	800bb26 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d102      	bne.n	800bafa <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800baf4:	2305      	movs	r3, #5
 800baf6:	627b      	str	r3, [r7, #36]	; 0x24
 800baf8:	e015      	b.n	800bb26 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	69db      	ldr	r3, [r3, #28]
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d902      	bls.n	800bb0a <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800bb04:	2305      	movs	r3, #5
 800bb06:	627b      	str	r3, [r7, #36]	; 0x24
 800bb08:	e00d      	b.n	800bb26 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00a      	beq.n	800bb26 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bb10:	f3ef 8305 	mrs	r3, IPSR
 800bb14:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800bb16:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bb18:	4b1d      	ldr	r3, [pc, #116]	; (800bb90 <_txe_byte_allocate+0xdc>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d001      	beq.n	800bb26 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800bb22:	2304      	movs	r3, #4
 800bb24:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800bb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d108      	bne.n	800bb3e <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800bb2c:	4b19      	ldr	r3, [pc, #100]	; (800bb94 <_txe_byte_allocate+0xe0>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800bb32:	6a3b      	ldr	r3, [r7, #32]
 800bb34:	4a18      	ldr	r2, [pc, #96]	; (800bb98 <_txe_byte_allocate+0xe4>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d101      	bne.n	800bb3e <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800bb3a:	2313      	movs	r3, #19
 800bb3c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d114      	bne.n	800bb6e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bb44:	f3ef 8305 	mrs	r3, IPSR
 800bb48:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bb4a:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bb4c:	4b10      	ldr	r3, [pc, #64]	; (800bb90 <_txe_byte_allocate+0xdc>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00b      	beq.n	800bb6e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bb56:	f3ef 8305 	mrs	r3, IPSR
 800bb5a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bb5c:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bb5e:	4b0c      	ldr	r3, [pc, #48]	; (800bb90 <_txe_byte_allocate+0xdc>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4313      	orrs	r3, r2
 800bb64:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bb68:	d201      	bcs.n	800bb6e <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bb6a:	2313      	movs	r3, #19
 800bb6c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d106      	bne.n	800bb82 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	68b9      	ldr	r1, [r7, #8]
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f7fc fdf0 	bl	8008760 <_tx_byte_allocate>
 800bb80:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800bb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3728      	adds	r7, #40	; 0x28
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	42595445 	.word	0x42595445
 800bb90:	24000010 	.word	0x24000010
 800bb94:	24005174 	.word	0x24005174
 800bb98:	240052bc 	.word	0x240052bc

0800bb9c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b092      	sub	sp, #72	; 0x48
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	60b9      	str	r1, [r7, #8]
 800bba6:	607a      	str	r2, [r7, #4]
 800bba8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d102      	bne.n	800bbba <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	647b      	str	r3, [r7, #68]	; 0x44
 800bbb8:	e075      	b.n	800bca6 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800bbba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbbc:	2b34      	cmp	r3, #52	; 0x34
 800bbbe:	d002      	beq.n	800bbc6 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bbc0:	2302      	movs	r3, #2
 800bbc2:	647b      	str	r3, [r7, #68]	; 0x44
 800bbc4:	e06f      	b.n	800bca6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bbc6:	f3ef 8310 	mrs	r3, PRIMASK
 800bbca:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800bbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800bbce:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bbd0:	b672      	cpsid	i
    return(int_posture);
 800bbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800bbd4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bbd6:	4b3b      	ldr	r3, [pc, #236]	; (800bcc4 <_txe_byte_pool_create+0x128>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	4a39      	ldr	r2, [pc, #228]	; (800bcc4 <_txe_byte_pool_create+0x128>)
 800bbde:	6013      	str	r3, [r2, #0]
 800bbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe6:	f383 8810 	msr	PRIMASK, r3
}
 800bbea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800bbec:	4b36      	ldr	r3, [pc, #216]	; (800bcc8 <_txe_byte_pool_create+0x12c>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	643b      	str	r3, [r7, #64]	; 0x40
 800bbf6:	e009      	b.n	800bc0c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800bbf8:	68fa      	ldr	r2, [r7, #12]
 800bbfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d00b      	beq.n	800bc18 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800bc00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc04:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800bc06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc08:	3301      	adds	r3, #1
 800bc0a:	643b      	str	r3, [r7, #64]	; 0x40
 800bc0c:	4b2f      	ldr	r3, [pc, #188]	; (800bccc <_txe_byte_pool_create+0x130>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d3f0      	bcc.n	800bbf8 <_txe_byte_pool_create+0x5c>
 800bc16:	e000      	b.n	800bc1a <_txe_byte_pool_create+0x7e>
                break;
 800bc18:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc1a:	f3ef 8310 	mrs	r3, PRIMASK
 800bc1e:	623b      	str	r3, [r7, #32]
    return(posture);
 800bc20:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bc22:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc24:	b672      	cpsid	i
    return(int_posture);
 800bc26:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800bc28:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800bc2a:	4b26      	ldr	r3, [pc, #152]	; (800bcc4 <_txe_byte_pool_create+0x128>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	4a24      	ldr	r2, [pc, #144]	; (800bcc4 <_txe_byte_pool_create+0x128>)
 800bc32:	6013      	str	r3, [r2, #0]
 800bc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc36:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3a:	f383 8810 	msr	PRIMASK, r3
}
 800bc3e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bc40:	f7ff f8a2 	bl	800ad88 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d102      	bne.n	800bc52 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800bc4c:	2302      	movs	r3, #2
 800bc4e:	647b      	str	r3, [r7, #68]	; 0x44
 800bc50:	e029      	b.n	800bca6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d102      	bne.n	800bc5e <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800bc58:	2303      	movs	r3, #3
 800bc5a:	647b      	str	r3, [r7, #68]	; 0x44
 800bc5c:	e023      	b.n	800bca6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	2b63      	cmp	r3, #99	; 0x63
 800bc62:	d802      	bhi.n	800bc6a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800bc64:	2305      	movs	r3, #5
 800bc66:	647b      	str	r3, [r7, #68]	; 0x44
 800bc68:	e01d      	b.n	800bca6 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bc6a:	4b19      	ldr	r3, [pc, #100]	; (800bcd0 <_txe_byte_pool_create+0x134>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800bc70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc72:	4a18      	ldr	r2, [pc, #96]	; (800bcd4 <_txe_byte_pool_create+0x138>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d101      	bne.n	800bc7c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bc78:	2313      	movs	r3, #19
 800bc7a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc7c:	f3ef 8305 	mrs	r3, IPSR
 800bc80:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bc82:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bc84:	4b14      	ldr	r3, [pc, #80]	; (800bcd8 <_txe_byte_pool_create+0x13c>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00b      	beq.n	800bca6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc8e:	f3ef 8305 	mrs	r3, IPSR
 800bc92:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bc94:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bc96:	4b10      	ldr	r3, [pc, #64]	; (800bcd8 <_txe_byte_pool_create+0x13c>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bca0:	d201      	bcs.n	800bca6 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800bca2:	2313      	movs	r3, #19
 800bca4:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d106      	bne.n	800bcba <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	68b9      	ldr	r1, [r7, #8]
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f7fc fe96 	bl	80089e4 <_tx_byte_pool_create>
 800bcb8:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800bcba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3748      	adds	r7, #72	; 0x48
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	2400520c 	.word	0x2400520c
 800bcc8:	24005164 	.word	0x24005164
 800bccc:	24005168 	.word	0x24005168
 800bcd0:	24005174 	.word	0x24005174
 800bcd4:	240052bc 	.word	0x240052bc
 800bcd8:	24000010 	.word	0x24000010

0800bcdc <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b092      	sub	sp, #72	; 0x48
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bce8:	2300      	movs	r3, #0
 800bcea:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d102      	bne.n	800bcf8 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800bcf2:	2306      	movs	r3, #6
 800bcf4:	647b      	str	r3, [r7, #68]	; 0x44
 800bcf6:	e069      	b.n	800bdcc <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2b24      	cmp	r3, #36	; 0x24
 800bcfc:	d002      	beq.n	800bd04 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800bcfe:	2306      	movs	r3, #6
 800bd00:	647b      	str	r3, [r7, #68]	; 0x44
 800bd02:	e063      	b.n	800bdcc <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd04:	f3ef 8310 	mrs	r3, PRIMASK
 800bd08:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800bd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800bd0c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd0e:	b672      	cpsid	i
    return(int_posture);
 800bd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800bd12:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bd14:	4b34      	ldr	r3, [pc, #208]	; (800bde8 <_txe_event_flags_create+0x10c>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	4a33      	ldr	r2, [pc, #204]	; (800bde8 <_txe_event_flags_create+0x10c>)
 800bd1c:	6013      	str	r3, [r2, #0]
 800bd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd20:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd24:	f383 8810 	msr	PRIMASK, r3
}
 800bd28:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 800bd2a:	4b30      	ldr	r3, [pc, #192]	; (800bdec <_txe_event_flags_create+0x110>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800bd30:	2300      	movs	r3, #0
 800bd32:	643b      	str	r3, [r7, #64]	; 0x40
 800bd34:	e009      	b.n	800bd4a <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d00b      	beq.n	800bd56 <_txe_event_flags_create+0x7a>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 800bd3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd40:	699b      	ldr	r3, [r3, #24]
 800bd42:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800bd44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd46:	3301      	adds	r3, #1
 800bd48:	643b      	str	r3, [r7, #64]	; 0x40
 800bd4a:	4b29      	ldr	r3, [pc, #164]	; (800bdf0 <_txe_event_flags_create+0x114>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d3f0      	bcc.n	800bd36 <_txe_event_flags_create+0x5a>
 800bd54:	e000      	b.n	800bd58 <_txe_event_flags_create+0x7c>
                break;
 800bd56:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd58:	f3ef 8310 	mrs	r3, PRIMASK
 800bd5c:	623b      	str	r3, [r7, #32]
    return(posture);
 800bd5e:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bd60:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd62:	b672      	cpsid	i
    return(int_posture);
 800bd64:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800bd66:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800bd68:	4b1f      	ldr	r3, [pc, #124]	; (800bde8 <_txe_event_flags_create+0x10c>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	4a1e      	ldr	r2, [pc, #120]	; (800bde8 <_txe_event_flags_create+0x10c>)
 800bd70:	6013      	str	r3, [r2, #0]
 800bd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd74:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd78:	f383 8810 	msr	PRIMASK, r3
}
 800bd7c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bd7e:	f7ff f803 	bl	800ad88 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 800bd82:	68fa      	ldr	r2, [r7, #12]
 800bd84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d102      	bne.n	800bd90 <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 800bd8a:	2306      	movs	r3, #6
 800bd8c:	647b      	str	r3, [r7, #68]	; 0x44
 800bd8e:	e01d      	b.n	800bdcc <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bd90:	4b18      	ldr	r3, [pc, #96]	; (800bdf4 <_txe_event_flags_create+0x118>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800bd96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd98:	4a17      	ldr	r2, [pc, #92]	; (800bdf8 <_txe_event_flags_create+0x11c>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d101      	bne.n	800bda2 <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bd9e:	2313      	movs	r3, #19
 800bda0:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bda2:	f3ef 8305 	mrs	r3, IPSR
 800bda6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bda8:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bdaa:	4b14      	ldr	r3, [pc, #80]	; (800bdfc <_txe_event_flags_create+0x120>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00b      	beq.n	800bdcc <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bdb4:	f3ef 8305 	mrs	r3, IPSR
 800bdb8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bdba:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bdbc:	4b0f      	ldr	r3, [pc, #60]	; (800bdfc <_txe_event_flags_create+0x120>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bdc6:	d201      	bcs.n	800bdcc <_txe_event_flags_create+0xf0>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800bdc8:	2313      	movs	r3, #19
 800bdca:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bdcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d104      	bne.n	800bddc <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 800bdd2:	68b9      	ldr	r1, [r7, #8]
 800bdd4:	68f8      	ldr	r0, [r7, #12]
 800bdd6:	f7fd f82f 	bl	8008e38 <_tx_event_flags_create>
 800bdda:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800bddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3748      	adds	r7, #72	; 0x48
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	2400520c 	.word	0x2400520c
 800bdec:	2400514c 	.word	0x2400514c
 800bdf0:	24005150 	.word	0x24005150
 800bdf4:	24005174 	.word	0x24005174
 800bdf8:	240052bc 	.word	0x240052bc
 800bdfc:	24000010 	.word	0x24000010

0800be00 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b08a      	sub	sp, #40	; 0x28
 800be04:	af02      	add	r7, sp, #8
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
 800be0c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800be0e:	2300      	movs	r3, #0
 800be10:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d102      	bne.n	800be1e <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800be18:	2306      	movs	r3, #6
 800be1a:	61fb      	str	r3, [r7, #28]
 800be1c:	e025      	b.n	800be6a <_txe_event_flags_get+0x6a>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a1e      	ldr	r2, [pc, #120]	; (800be9c <_txe_event_flags_get+0x9c>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d002      	beq.n	800be2e <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800be28:	2306      	movs	r3, #6
 800be2a:	61fb      	str	r3, [r7, #28]
 800be2c:	e01d      	b.n	800be6a <_txe_event_flags_get+0x6a>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d102      	bne.n	800be3a <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800be34:	2303      	movs	r3, #3
 800be36:	61fb      	str	r3, [r7, #28]
 800be38:	e017      	b.n	800be6a <_txe_event_flags_get+0x6a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d014      	beq.n	800be6a <_txe_event_flags_get+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800be40:	f3ef 8305 	mrs	r3, IPSR
 800be44:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800be46:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800be48:	4b15      	ldr	r3, [pc, #84]	; (800bea0 <_txe_event_flags_get+0xa0>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4313      	orrs	r3, r2
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d002      	beq.n	800be58 <_txe_event_flags_get+0x58>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800be52:	2304      	movs	r3, #4
 800be54:	61fb      	str	r3, [r7, #28]
 800be56:	e008      	b.n	800be6a <_txe_event_flags_get+0x6a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800be58:	4b12      	ldr	r3, [pc, #72]	; (800bea4 <_txe_event_flags_get+0xa4>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	4a11      	ldr	r2, [pc, #68]	; (800bea8 <_txe_event_flags_get+0xa8>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d101      	bne.n	800be6a <_txe_event_flags_get+0x6a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800be66:	2304      	movs	r3, #4
 800be68:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d104      	bne.n	800be7a <_txe_event_flags_get+0x7a>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2b03      	cmp	r3, #3
 800be74:	d901      	bls.n	800be7a <_txe_event_flags_get+0x7a>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 800be76:	2308      	movs	r3, #8
 800be78:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d108      	bne.n	800be92 <_txe_event_flags_get+0x92>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 800be80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be82:	9300      	str	r3, [sp, #0]
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	68b9      	ldr	r1, [r7, #8]
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f7fd f822 	bl	8008ed4 <_tx_event_flags_get>
 800be90:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800be92:	69fb      	ldr	r3, [r7, #28]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3720      	adds	r7, #32
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	4456444e 	.word	0x4456444e
 800bea0:	24000010 	.word	0x24000010
 800bea4:	24005174 	.word	0x24005174
 800bea8:	240052bc 	.word	0x240052bc

0800beac <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b086      	sub	sp, #24
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800beb8:	2300      	movs	r3, #0
 800beba:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d102      	bne.n	800bec8 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800bec2:	2306      	movs	r3, #6
 800bec4:	617b      	str	r3, [r7, #20]
 800bec6:	e00f      	b.n	800bee8 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a0d      	ldr	r2, [pc, #52]	; (800bf04 <_txe_event_flags_set+0x58>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d002      	beq.n	800bed8 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800bed2:	2306      	movs	r3, #6
 800bed4:	617b      	str	r3, [r7, #20]
 800bed6:	e007      	b.n	800bee8 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b02      	cmp	r3, #2
 800bedc:	d004      	beq.n	800bee8 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d001      	beq.n	800bee8 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 800bee4:	2308      	movs	r3, #8
 800bee6:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d105      	bne.n	800befa <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	68b9      	ldr	r1, [r7, #8]
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f7fd f8d8 	bl	80090a8 <_tx_event_flags_set>
 800bef8:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800befa:	697b      	ldr	r3, [r7, #20]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3718      	adds	r7, #24
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	4456444e 	.word	0x4456444e

0800bf08 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b092      	sub	sp, #72	; 0x48
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
 800bf14:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bf16:	2300      	movs	r3, #0
 800bf18:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d102      	bne.n	800bf26 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800bf20:	231c      	movs	r3, #28
 800bf22:	647b      	str	r3, [r7, #68]	; 0x44
 800bf24:	e053      	b.n	800bfce <_txe_mutex_create+0xc6>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	2b34      	cmp	r3, #52	; 0x34
 800bf2a:	d002      	beq.n	800bf32 <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800bf2c:	231c      	movs	r3, #28
 800bf2e:	647b      	str	r3, [r7, #68]	; 0x44
 800bf30:	e04d      	b.n	800bfce <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bf32:	f3ef 8310 	mrs	r3, PRIMASK
 800bf36:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800bf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800bf3a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bf3c:	b672      	cpsid	i
    return(int_posture);
 800bf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800bf40:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bf42:	4b3a      	ldr	r3, [pc, #232]	; (800c02c <_txe_mutex_create+0x124>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	3301      	adds	r3, #1
 800bf48:	4a38      	ldr	r2, [pc, #224]	; (800c02c <_txe_mutex_create+0x124>)
 800bf4a:	6013      	str	r3, [r2, #0]
 800bf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf52:	f383 8810 	msr	PRIMASK, r3
}
 800bf56:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 800bf58:	4b35      	ldr	r3, [pc, #212]	; (800c030 <_txe_mutex_create+0x128>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800bf5e:	2300      	movs	r3, #0
 800bf60:	643b      	str	r3, [r7, #64]	; 0x40
 800bf62:	e009      	b.n	800bf78 <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d00b      	beq.n	800bf84 <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 800bf6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf6e:	6a1b      	ldr	r3, [r3, #32]
 800bf70:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800bf72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf74:	3301      	adds	r3, #1
 800bf76:	643b      	str	r3, [r7, #64]	; 0x40
 800bf78:	4b2e      	ldr	r3, [pc, #184]	; (800c034 <_txe_mutex_create+0x12c>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d3f0      	bcc.n	800bf64 <_txe_mutex_create+0x5c>
 800bf82:	e000      	b.n	800bf86 <_txe_mutex_create+0x7e>
                break;
 800bf84:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bf86:	f3ef 8310 	mrs	r3, PRIMASK
 800bf8a:	623b      	str	r3, [r7, #32]
    return(posture);
 800bf8c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bf8e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bf90:	b672      	cpsid	i
    return(int_posture);
 800bf92:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800bf94:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800bf96:	4b25      	ldr	r3, [pc, #148]	; (800c02c <_txe_mutex_create+0x124>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	4a23      	ldr	r2, [pc, #140]	; (800c02c <_txe_mutex_create+0x124>)
 800bf9e:	6013      	str	r3, [r2, #0]
 800bfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa6:	f383 8810 	msr	PRIMASK, r3
}
 800bfaa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bfac:	f7fe feec 	bl	800ad88 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d102      	bne.n	800bfbe <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 800bfb8:	231c      	movs	r3, #28
 800bfba:	647b      	str	r3, [r7, #68]	; 0x44
 800bfbc:	e007      	b.n	800bfce <_txe_mutex_create+0xc6>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d004      	beq.n	800bfce <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d001      	beq.n	800bfce <_txe_mutex_create+0xc6>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 800bfca:	231f      	movs	r3, #31
 800bfcc:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bfce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d11d      	bne.n	800c010 <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800bfd4:	4b18      	ldr	r3, [pc, #96]	; (800c038 <_txe_mutex_create+0x130>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800bfda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfdc:	4a17      	ldr	r2, [pc, #92]	; (800c03c <_txe_mutex_create+0x134>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d101      	bne.n	800bfe6 <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800bfe2:	2313      	movs	r3, #19
 800bfe4:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bfe6:	f3ef 8305 	mrs	r3, IPSR
 800bfea:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bfec:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bfee:	4b14      	ldr	r3, [pc, #80]	; (800c040 <_txe_mutex_create+0x138>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d00b      	beq.n	800c010 <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bff8:	f3ef 8305 	mrs	r3, IPSR
 800bffc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bffe:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c000:	4b0f      	ldr	r3, [pc, #60]	; (800c040 <_txe_mutex_create+0x138>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4313      	orrs	r3, r2
 800c006:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c00a:	d201      	bcs.n	800c010 <_txe_mutex_create+0x108>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c00c:	2313      	movs	r3, #19
 800c00e:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c012:	2b00      	cmp	r3, #0
 800c014:	d105      	bne.n	800c022 <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	68b9      	ldr	r1, [r7, #8]
 800c01a:	68f8      	ldr	r0, [r7, #12]
 800c01c:	f7fd fb82 	bl	8009724 <_tx_mutex_create>
 800c020:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800c022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c024:	4618      	mov	r0, r3
 800c026:	3748      	adds	r7, #72	; 0x48
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	2400520c 	.word	0x2400520c
 800c030:	24005154 	.word	0x24005154
 800c034:	24005158 	.word	0x24005158
 800c038:	24005174 	.word	0x24005174
 800c03c:	240052bc 	.word	0x240052bc
 800c040:	24000010 	.word	0x24000010

0800c044 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b088      	sub	sp, #32
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c04e:	2300      	movs	r3, #0
 800c050:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d102      	bne.n	800c05e <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c058:	231c      	movs	r3, #28
 800c05a:	61fb      	str	r3, [r7, #28]
 800c05c:	e01f      	b.n	800c09e <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4a21      	ldr	r2, [pc, #132]	; (800c0e8 <_txe_mutex_get+0xa4>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d002      	beq.n	800c06e <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c068:	231c      	movs	r3, #28
 800c06a:	61fb      	str	r3, [r7, #28]
 800c06c:	e017      	b.n	800c09e <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d014      	beq.n	800c09e <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c074:	f3ef 8305 	mrs	r3, IPSR
 800c078:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c07a:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c07c:	4b1b      	ldr	r3, [pc, #108]	; (800c0ec <_txe_mutex_get+0xa8>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4313      	orrs	r3, r2
 800c082:	2b00      	cmp	r3, #0
 800c084:	d002      	beq.n	800c08c <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800c086:	2304      	movs	r3, #4
 800c088:	61fb      	str	r3, [r7, #28]
 800c08a:	e008      	b.n	800c09e <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800c08c:	4b18      	ldr	r3, [pc, #96]	; (800c0f0 <_txe_mutex_get+0xac>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	4a17      	ldr	r2, [pc, #92]	; (800c0f4 <_txe_mutex_get+0xb0>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d101      	bne.n	800c09e <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800c09a:	2304      	movs	r3, #4
 800c09c:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d114      	bne.n	800c0ce <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c0a4:	f3ef 8305 	mrs	r3, IPSR
 800c0a8:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c0aa:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c0ac:	4b0f      	ldr	r3, [pc, #60]	; (800c0ec <_txe_mutex_get+0xa8>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00b      	beq.n	800c0ce <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c0b6:	f3ef 8305 	mrs	r3, IPSR
 800c0ba:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c0bc:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c0be:	4b0b      	ldr	r3, [pc, #44]	; (800c0ec <_txe_mutex_get+0xa8>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c0c8:	d201      	bcs.n	800c0ce <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c0ca:	2313      	movs	r3, #19
 800c0cc:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d104      	bne.n	800c0de <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 800c0d4:	6839      	ldr	r1, [r7, #0]
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7fd fb7e 	bl	80097d8 <_tx_mutex_get>
 800c0dc:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800c0de:	69fb      	ldr	r3, [r7, #28]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3720      	adds	r7, #32
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	4d555445 	.word	0x4d555445
 800c0ec:	24000010 	.word	0x24000010
 800c0f0:	24005174 	.word	0x24005174
 800c0f4:	240052bc 	.word	0x240052bc

0800c0f8 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b086      	sub	sp, #24
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c100:	2300      	movs	r3, #0
 800c102:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d102      	bne.n	800c110 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c10a:	231c      	movs	r3, #28
 800c10c:	617b      	str	r3, [r7, #20]
 800c10e:	e01c      	b.n	800c14a <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4a13      	ldr	r2, [pc, #76]	; (800c164 <_txe_mutex_put+0x6c>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d002      	beq.n	800c120 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c11a:	231c      	movs	r3, #28
 800c11c:	617b      	str	r3, [r7, #20]
 800c11e:	e014      	b.n	800c14a <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c120:	f3ef 8305 	mrs	r3, IPSR
 800c124:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c126:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c128:	4b0f      	ldr	r3, [pc, #60]	; (800c168 <_txe_mutex_put+0x70>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4313      	orrs	r3, r2
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d00b      	beq.n	800c14a <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c132:	f3ef 8305 	mrs	r3, IPSR
 800c136:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c138:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c13a:	4b0b      	ldr	r3, [pc, #44]	; (800c168 <_txe_mutex_put+0x70>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4313      	orrs	r3, r2
 800c140:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c144:	d201      	bcs.n	800c14a <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c146:	2313      	movs	r3, #19
 800c148:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d103      	bne.n	800c158 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f7fd fdb9 	bl	8009cc8 <_tx_mutex_put>
 800c156:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c158:	697b      	ldr	r3, [r7, #20]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3718      	adds	r7, #24
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	4d555445 	.word	0x4d555445
 800c168:	24000010 	.word	0x24000010

0800c16c <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b092      	sub	sp, #72	; 0x48
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
 800c178:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c17a:	2300      	movs	r3, #0
 800c17c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d102      	bne.n	800c18a <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c184:	230c      	movs	r3, #12
 800c186:	647b      	str	r3, [r7, #68]	; 0x44
 800c188:	e054      	b.n	800c234 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	2b1c      	cmp	r3, #28
 800c18e:	d002      	beq.n	800c196 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c190:	230c      	movs	r3, #12
 800c192:	647b      	str	r3, [r7, #68]	; 0x44
 800c194:	e04e      	b.n	800c234 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c196:	f3ef 8310 	mrs	r3, PRIMASK
 800c19a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800c19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800c19e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c1a0:	b672      	cpsid	i
    return(int_posture);
 800c1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c1a4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c1a6:	4b36      	ldr	r3, [pc, #216]	; (800c280 <_txe_semaphore_create+0x114>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	4a34      	ldr	r2, [pc, #208]	; (800c280 <_txe_semaphore_create+0x114>)
 800c1ae:	6013      	str	r3, [r2, #0]
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b6:	f383 8810 	msr	PRIMASK, r3
}
 800c1ba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800c1bc:	4b31      	ldr	r3, [pc, #196]	; (800c284 <_txe_semaphore_create+0x118>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	643b      	str	r3, [r7, #64]	; 0x40
 800c1c6:	e009      	b.n	800c1dc <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d00b      	beq.n	800c1e8 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800c1d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1d2:	695b      	ldr	r3, [r3, #20]
 800c1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800c1d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d8:	3301      	adds	r3, #1
 800c1da:	643b      	str	r3, [r7, #64]	; 0x40
 800c1dc:	4b2a      	ldr	r3, [pc, #168]	; (800c288 <_txe_semaphore_create+0x11c>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d3f0      	bcc.n	800c1c8 <_txe_semaphore_create+0x5c>
 800c1e6:	e000      	b.n	800c1ea <_txe_semaphore_create+0x7e>
                break;
 800c1e8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c1ea:	f3ef 8310 	mrs	r3, PRIMASK
 800c1ee:	623b      	str	r3, [r7, #32]
    return(posture);
 800c1f0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c1f2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c1f4:	b672      	cpsid	i
    return(int_posture);
 800c1f6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c1f8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c1fa:	4b21      	ldr	r3, [pc, #132]	; (800c280 <_txe_semaphore_create+0x114>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	3b01      	subs	r3, #1
 800c200:	4a1f      	ldr	r2, [pc, #124]	; (800c280 <_txe_semaphore_create+0x114>)
 800c202:	6013      	str	r3, [r2, #0]
 800c204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c206:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20a:	f383 8810 	msr	PRIMASK, r3
}
 800c20e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c210:	f7fe fdba 	bl	800ad88 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c218:	429a      	cmp	r2, r3
 800c21a:	d102      	bne.n	800c222 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800c21c:	230c      	movs	r3, #12
 800c21e:	647b      	str	r3, [r7, #68]	; 0x44
 800c220:	e008      	b.n	800c234 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c222:	4b1a      	ldr	r3, [pc, #104]	; (800c28c <_txe_semaphore_create+0x120>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c22a:	4a19      	ldr	r2, [pc, #100]	; (800c290 <_txe_semaphore_create+0x124>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d101      	bne.n	800c234 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c230:	2313      	movs	r3, #19
 800c232:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c236:	2b00      	cmp	r3, #0
 800c238:	d114      	bne.n	800c264 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c23a:	f3ef 8305 	mrs	r3, IPSR
 800c23e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c240:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c242:	4b14      	ldr	r3, [pc, #80]	; (800c294 <_txe_semaphore_create+0x128>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4313      	orrs	r3, r2
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d00b      	beq.n	800c264 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c24c:	f3ef 8305 	mrs	r3, IPSR
 800c250:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c252:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c254:	4b0f      	ldr	r3, [pc, #60]	; (800c294 <_txe_semaphore_create+0x128>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4313      	orrs	r3, r2
 800c25a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c25e:	d201      	bcs.n	800c264 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c260:	2313      	movs	r3, #19
 800c262:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c266:	2b00      	cmp	r3, #0
 800c268:	d105      	bne.n	800c276 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	68b9      	ldr	r1, [r7, #8]
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f7fd ffcc 	bl	800a20c <_tx_semaphore_create>
 800c274:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800c276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3748      	adds	r7, #72	; 0x48
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	2400520c 	.word	0x2400520c
 800c284:	2400513c 	.word	0x2400513c
 800c288:	24005140 	.word	0x24005140
 800c28c:	24005174 	.word	0x24005174
 800c290:	240052bc 	.word	0x240052bc
 800c294:	24000010 	.word	0x24000010

0800c298 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d102      	bne.n	800c2b0 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c2aa:	230c      	movs	r3, #12
 800c2ac:	617b      	str	r3, [r7, #20]
 800c2ae:	e01c      	b.n	800c2ea <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a13      	ldr	r2, [pc, #76]	; (800c304 <_txe_semaphore_delete+0x6c>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d002      	beq.n	800c2c0 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c2ba:	230c      	movs	r3, #12
 800c2bc:	617b      	str	r3, [r7, #20]
 800c2be:	e014      	b.n	800c2ea <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c2c0:	f3ef 8305 	mrs	r3, IPSR
 800c2c4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c2c6:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c2c8:	4b0f      	ldr	r3, [pc, #60]	; (800c308 <_txe_semaphore_delete+0x70>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d002      	beq.n	800c2d8 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800c2d2:	2313      	movs	r3, #19
 800c2d4:	617b      	str	r3, [r7, #20]
 800c2d6:	e008      	b.n	800c2ea <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c2d8:	4b0c      	ldr	r3, [pc, #48]	; (800c30c <_txe_semaphore_delete+0x74>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	4a0b      	ldr	r2, [pc, #44]	; (800c310 <_txe_semaphore_delete+0x78>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d101      	bne.n	800c2ea <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c2e6:	2313      	movs	r3, #19
 800c2e8:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d103      	bne.n	800c2f8 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f7fd ffdd 	bl	800a2b0 <_tx_semaphore_delete>
 800c2f6:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c2f8:	697b      	ldr	r3, [r7, #20]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3718      	adds	r7, #24
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	53454d41 	.word	0x53454d41
 800c308:	24000010 	.word	0x24000010
 800c30c:	24005174 	.word	0x24005174
 800c310:	240052bc 	.word	0x240052bc

0800c314 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c31e:	2300      	movs	r3, #0
 800c320:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d102      	bne.n	800c32e <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c328:	230c      	movs	r3, #12
 800c32a:	617b      	str	r3, [r7, #20]
 800c32c:	e01f      	b.n	800c36e <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a15      	ldr	r2, [pc, #84]	; (800c388 <_txe_semaphore_get+0x74>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d002      	beq.n	800c33e <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c338:	230c      	movs	r3, #12
 800c33a:	617b      	str	r3, [r7, #20]
 800c33c:	e017      	b.n	800c36e <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d014      	beq.n	800c36e <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c344:	f3ef 8305 	mrs	r3, IPSR
 800c348:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c34a:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c34c:	4b0f      	ldr	r3, [pc, #60]	; (800c38c <_txe_semaphore_get+0x78>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4313      	orrs	r3, r2
 800c352:	2b00      	cmp	r3, #0
 800c354:	d002      	beq.n	800c35c <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800c356:	2304      	movs	r3, #4
 800c358:	617b      	str	r3, [r7, #20]
 800c35a:	e008      	b.n	800c36e <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800c35c:	4b0c      	ldr	r3, [pc, #48]	; (800c390 <_txe_semaphore_get+0x7c>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	4a0b      	ldr	r2, [pc, #44]	; (800c394 <_txe_semaphore_get+0x80>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d101      	bne.n	800c36e <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800c36a:	2304      	movs	r3, #4
 800c36c:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d104      	bne.n	800c37e <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800c374:	6839      	ldr	r1, [r7, #0]
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f7fe f82a 	bl	800a3d0 <_tx_semaphore_get>
 800c37c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c37e:	697b      	ldr	r3, [r7, #20]
}
 800c380:	4618      	mov	r0, r3
 800c382:	3718      	adds	r7, #24
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	53454d41 	.word	0x53454d41
 800c38c:	24000010 	.word	0x24000010
 800c390:	24005174 	.word	0x24005174
 800c394:	240052bc 	.word	0x240052bc

0800c398 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d102      	bne.n	800c3ac <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c3a6:	230c      	movs	r3, #12
 800c3a8:	60fb      	str	r3, [r7, #12]
 800c3aa:	e00b      	b.n	800c3c4 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a07      	ldr	r2, [pc, #28]	; (800c3d0 <_txe_semaphore_put+0x38>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d002      	beq.n	800c3bc <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c3b6:	230c      	movs	r3, #12
 800c3b8:	60fb      	str	r3, [r7, #12]
 800c3ba:	e003      	b.n	800c3c4 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f7fe f899 	bl	800a4f4 <_tx_semaphore_put>
 800c3c2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	53454d41 	.word	0x53454d41

0800c3d4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b09a      	sub	sp, #104	; 0x68
 800c3d8:	af06      	add	r7, sp, #24
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	607a      	str	r2, [r7, #4]
 800c3e0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d102      	bne.n	800c3f2 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c3ec:	230e      	movs	r3, #14
 800c3ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3f0:	e0bb      	b.n	800c56a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800c3f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c3f4:	2bb0      	cmp	r3, #176	; 0xb0
 800c3f6:	d002      	beq.n	800c3fe <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c3f8:	230e      	movs	r3, #14
 800c3fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3fc:	e0b5      	b.n	800c56a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c3fe:	f3ef 8310 	mrs	r3, PRIMASK
 800c402:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c404:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800c406:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c408:	b672      	cpsid	i
    return(int_posture);
 800c40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c40c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c40e:	4b64      	ldr	r3, [pc, #400]	; (800c5a0 <_txe_thread_create+0x1cc>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	3301      	adds	r3, #1
 800c414:	4a62      	ldr	r2, [pc, #392]	; (800c5a0 <_txe_thread_create+0x1cc>)
 800c416:	6013      	str	r3, [r2, #0]
 800c418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c41a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41e:	f383 8810 	msr	PRIMASK, r3
}
 800c422:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800c424:	2300      	movs	r3, #0
 800c426:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800c428:	4b5e      	ldr	r3, [pc, #376]	; (800c5a4 <_txe_thread_create+0x1d0>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800c42e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c430:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800c432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c434:	3b01      	subs	r3, #1
 800c436:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c438:	4413      	add	r3, r2
 800c43a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800c43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800c440:	2300      	movs	r3, #0
 800c442:	647b      	str	r3, [r7, #68]	; 0x44
 800c444:	e02b      	b.n	800c49e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800c446:	68fa      	ldr	r2, [r7, #12]
 800c448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d101      	bne.n	800c452 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800c44e:	2301      	movs	r3, #1
 800c450:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800c452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c454:	2b01      	cmp	r3, #1
 800c456:	d028      	beq.n	800c4aa <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800c458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c45e:	429a      	cmp	r2, r3
 800c460:	d308      	bcc.n	800c474 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800c462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c468:	429a      	cmp	r2, r3
 800c46a:	d203      	bcs.n	800c474 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800c46c:	2300      	movs	r3, #0
 800c46e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800c470:	2301      	movs	r3, #1
 800c472:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800c474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c476:	68db      	ldr	r3, [r3, #12]
 800c478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d308      	bcc.n	800c490 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800c47e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c480:	691b      	ldr	r3, [r3, #16]
 800c482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c484:	429a      	cmp	r2, r3
 800c486:	d203      	bcs.n	800c490 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800c488:	2300      	movs	r3, #0
 800c48a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800c48c:	2301      	movs	r3, #1
 800c48e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800c490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c496:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800c498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c49a:	3301      	adds	r3, #1
 800c49c:	647b      	str	r3, [r7, #68]	; 0x44
 800c49e:	4b42      	ldr	r3, [pc, #264]	; (800c5a8 <_txe_thread_create+0x1d4>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d3ce      	bcc.n	800c446 <_txe_thread_create+0x72>
 800c4a8:	e000      	b.n	800c4ac <_txe_thread_create+0xd8>
                break;
 800c4aa:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c4ac:	f3ef 8310 	mrs	r3, PRIMASK
 800c4b0:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c4b2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c4b4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c4b6:	b672      	cpsid	i
    return(int_posture);
 800c4b8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c4ba:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c4bc:	4b38      	ldr	r3, [pc, #224]	; (800c5a0 <_txe_thread_create+0x1cc>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	4a37      	ldr	r2, [pc, #220]	; (800c5a0 <_txe_thread_create+0x1cc>)
 800c4c4:	6013      	str	r3, [r2, #0]
 800c4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4c8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4ca:	6a3b      	ldr	r3, [r7, #32]
 800c4cc:	f383 8810 	msr	PRIMASK, r3
}
 800c4d0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c4d2:	f7fe fc59 	bl	800ad88 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d102      	bne.n	800c4e4 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800c4de:	230e      	movs	r3, #14
 800c4e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4e2:	e042      	b.n	800c56a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800c4e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d102      	bne.n	800c4f0 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c4ea:	2303      	movs	r3, #3
 800c4ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4ee:	e03c      	b.n	800c56a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d102      	bne.n	800c4fc <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4fa:	e036      	b.n	800c56a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800c4fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4fe:	2bc7      	cmp	r3, #199	; 0xc7
 800c500:	d802      	bhi.n	800c508 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800c502:	2305      	movs	r3, #5
 800c504:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c506:	e030      	b.n	800c56a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800c508:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c50a:	2b1f      	cmp	r3, #31
 800c50c:	d902      	bls.n	800c514 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800c50e:	230f      	movs	r3, #15
 800c510:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c512:	e02a      	b.n	800c56a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800c514:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c518:	429a      	cmp	r2, r3
 800c51a:	d902      	bls.n	800c522 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800c51c:	2318      	movs	r3, #24
 800c51e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c520:	e023      	b.n	800c56a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800c522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c524:	2b01      	cmp	r3, #1
 800c526:	d902      	bls.n	800c52e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800c528:	2310      	movs	r3, #16
 800c52a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c52c:	e01d      	b.n	800c56a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800c52e:	4b1f      	ldr	r3, [pc, #124]	; (800c5ac <_txe_thread_create+0x1d8>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800c534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c536:	4a1e      	ldr	r2, [pc, #120]	; (800c5b0 <_txe_thread_create+0x1dc>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d101      	bne.n	800c540 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c53c:	2313      	movs	r3, #19
 800c53e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c540:	f3ef 8305 	mrs	r3, IPSR
 800c544:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c546:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c548:	4b1a      	ldr	r3, [pc, #104]	; (800c5b4 <_txe_thread_create+0x1e0>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4313      	orrs	r3, r2
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00b      	beq.n	800c56a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c552:	f3ef 8305 	mrs	r3, IPSR
 800c556:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c558:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c55a:	4b16      	ldr	r3, [pc, #88]	; (800c5b4 <_txe_thread_create+0x1e0>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4313      	orrs	r3, r2
 800c560:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c564:	d201      	bcs.n	800c56a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c566:	2313      	movs	r3, #19
 800c568:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c56a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d112      	bne.n	800c596 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800c570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c572:	9305      	str	r3, [sp, #20]
 800c574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c576:	9304      	str	r3, [sp, #16]
 800c578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c57a:	9303      	str	r3, [sp, #12]
 800c57c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c57e:	9302      	str	r3, [sp, #8]
 800c580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c582:	9301      	str	r3, [sp, #4]
 800c584:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c586:	9300      	str	r3, [sp, #0]
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	68b9      	ldr	r1, [r7, #8]
 800c58e:	68f8      	ldr	r0, [r7, #12]
 800c590:	f7fe f808 	bl	800a5a4 <_tx_thread_create>
 800c594:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800c596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3750      	adds	r7, #80	; 0x50
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	2400520c 	.word	0x2400520c
 800c5a4:	2400517c 	.word	0x2400517c
 800c5a8:	24005180 	.word	0x24005180
 800c5ac:	24005174 	.word	0x24005174
 800c5b0:	240052bc 	.word	0x240052bc
 800c5b4:	24000010 	.word	0x24000010

0800c5b8 <_txe_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_delete(TX_THREAD *thread_ptr)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c5c0:	f3ef 8305 	mrs	r3, IPSR
 800c5c4:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800c5c6:	68ba      	ldr	r2, [r7, #8]

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c5c8:	4b0f      	ldr	r3, [pc, #60]	; (800c608 <_txe_thread_delete+0x50>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d002      	beq.n	800c5d8 <_txe_thread_delete+0x20>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800c5d2:	2313      	movs	r3, #19
 800c5d4:	60fb      	str	r3, [r7, #12]
 800c5d6:	e011      	b.n	800c5fc <_txe_thread_delete+0x44>
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d102      	bne.n	800c5e4 <_txe_thread_delete+0x2c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c5de:	230e      	movs	r3, #14
 800c5e0:	60fb      	str	r3, [r7, #12]
 800c5e2:	e00b      	b.n	800c5fc <_txe_thread_delete+0x44>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4a08      	ldr	r2, [pc, #32]	; (800c60c <_txe_thread_delete+0x54>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d002      	beq.n	800c5f4 <_txe_thread_delete+0x3c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c5ee:	230e      	movs	r3, #14
 800c5f0:	60fb      	str	r3, [r7, #12]
 800c5f2:	e003      	b.n	800c5fc <_txe_thread_delete+0x44>
    }
    else
    {

        /* Call actual thread delete function.  */
        status =  _tx_thread_delete(thread_ptr);
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f7fe f8cb 	bl	800a790 <_tx_thread_delete>
 800c5fa:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	24000010 	.word	0x24000010
 800c60c:	54485244 	.word	0x54485244

0800c610 <_txe_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b08c      	sub	sp, #48	; 0x30
 800c614:	af06      	add	r7, sp, #24
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
 800c61c:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d102      	bne.n	800c62a <_txe_thread_info_get+0x1a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c624:	230e      	movs	r3, #14
 800c626:	617b      	str	r3, [r7, #20]
 800c628:	e018      	b.n	800c65c <_txe_thread_info_get+0x4c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a0e      	ldr	r2, [pc, #56]	; (800c668 <_txe_thread_info_get+0x58>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d002      	beq.n	800c63a <_txe_thread_info_get+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c634:	230e      	movs	r3, #14
 800c636:	617b      	str	r3, [r7, #20]
 800c638:	e010      	b.n	800c65c <_txe_thread_info_get+0x4c>
    }
    else
    {

        /* Call the actual thread information get service.  */
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold,
 800c63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63c:	9304      	str	r3, [sp, #16]
 800c63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c640:	9303      	str	r3, [sp, #12]
 800c642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c644:	9302      	str	r3, [sp, #8]
 800c646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c648:	9301      	str	r3, [sp, #4]
 800c64a:	6a3b      	ldr	r3, [r7, #32]
 800c64c:	9300      	str	r3, [sp, #0]
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	68b9      	ldr	r1, [r7, #8]
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	f7fe f913 	bl	800a880 <_tx_thread_info_get>
 800c65a:	6178      	str	r0, [r7, #20]
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
 800c65c:	697b      	ldr	r3, [r7, #20]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3718      	adds	r7, #24
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	54485244 	.word	0x54485244

0800c66c <_txe_thread_priority_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_priority_change(TX_THREAD *thread_ptr, UINT new_priority, UINT *old_priority)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af00      	add	r7, sp, #0
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d102      	bne.n	800c684 <_txe_thread_priority_change+0x18>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c67e:	230e      	movs	r3, #14
 800c680:	617b      	str	r3, [r7, #20]
 800c682:	e025      	b.n	800c6d0 <_txe_thread_priority_change+0x64>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a14      	ldr	r2, [pc, #80]	; (800c6dc <_txe_thread_priority_change+0x70>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d002      	beq.n	800c694 <_txe_thread_priority_change+0x28>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c68e:	230e      	movs	r3, #14
 800c690:	617b      	str	r3, [r7, #20]
 800c692:	e01d      	b.n	800c6d0 <_txe_thread_priority_change+0x64>
    }

    /* Check for a valid old priority pointer.  */
    else if (old_priority == TX_NULL)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d102      	bne.n	800c6a0 <_txe_thread_priority_change+0x34>
    {

        /* Invalid destination pointer, return appropriate error code.  */
        status =  TX_PTR_ERROR;
 800c69a:	2303      	movs	r3, #3
 800c69c:	617b      	str	r3, [r7, #20]
 800c69e:	e017      	b.n	800c6d0 <_txe_thread_priority_change+0x64>
    }

    /* Determine if the priority is legal.  */
    else if (new_priority >= ((UINT) TX_MAX_PRIORITIES))
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	2b1f      	cmp	r3, #31
 800c6a4:	d902      	bls.n	800c6ac <_txe_thread_priority_change+0x40>
    {

        /* Return an error status.  */
        status =  TX_PRIORITY_ERROR;
 800c6a6:	230f      	movs	r3, #15
 800c6a8:	617b      	str	r3, [r7, #20]
 800c6aa:	e011      	b.n	800c6d0 <_txe_thread_priority_change+0x64>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c6ac:	f3ef 8305 	mrs	r3, IPSR
 800c6b0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c6b2:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c6b4:	4b0a      	ldr	r3, [pc, #40]	; (800c6e0 <_txe_thread_priority_change+0x74>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d002      	beq.n	800c6c4 <_txe_thread_priority_change+0x58>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800c6be:	2313      	movs	r3, #19
 800c6c0:	617b      	str	r3, [r7, #20]
 800c6c2:	e005      	b.n	800c6d0 <_txe_thread_priority_change+0x64>
    }
    else
    {

        /* Call actual change thread priority function.  */
        status =  _tx_thread_priority_change(thread_ptr, new_priority, old_priority);
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	68b9      	ldr	r1, [r7, #8]
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	f7fe f96d 	bl	800a9a8 <_tx_thread_priority_change>
 800c6ce:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c6d0:	697b      	ldr	r3, [r7, #20]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3718      	adds	r7, #24
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	54485244 	.word	0x54485244
 800c6e0:	24000010 	.word	0x24000010

0800c6e4 <_txe_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _txe_thread_relinquish(VOID)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0

TX_THREAD   *current_thread;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800c6ea:	4b0a      	ldr	r3, [pc, #40]	; (800c714 <_txe_thread_relinquish+0x30>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	607b      	str	r3, [r7, #4]

    /* Make sure a thread is executing.  */
    if (current_thread != TX_NULL)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d00a      	beq.n	800c70c <_txe_thread_relinquish+0x28>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c6f6:	f3ef 8305 	mrs	r3, IPSR
 800c6fa:	603b      	str	r3, [r7, #0]
    return(ipsr_value);
 800c6fc:	683a      	ldr	r2, [r7, #0]
    {

        /* Now make sure the call is not from an ISR or Initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 800c6fe:	4b06      	ldr	r3, [pc, #24]	; (800c718 <_txe_thread_relinquish+0x34>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4313      	orrs	r3, r2
 800c704:	2b00      	cmp	r3, #0
 800c706:	d101      	bne.n	800c70c <_txe_thread_relinquish+0x28>
        {

            /* Okay to call the real relinquish function.  */
            _tx_thread_relinquish();
 800c708:	f7fe fa0c 	bl	800ab24 <_tx_thread_relinquish>
        }
    }
}
 800c70c:	bf00      	nop
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	24005174 	.word	0x24005174
 800c718:	24000010 	.word	0x24000010

0800c71c <_txe_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_terminate(TX_THREAD *thread_ptr)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d102      	bne.n	800c730 <_txe_thread_terminate+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c72a:	230e      	movs	r3, #14
 800c72c:	60fb      	str	r3, [r7, #12]
 800c72e:	e017      	b.n	800c760 <_txe_thread_terminate+0x44>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a0d      	ldr	r2, [pc, #52]	; (800c76c <_txe_thread_terminate+0x50>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d002      	beq.n	800c740 <_txe_thread_terminate+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c73a:	230e      	movs	r3, #14
 800c73c:	60fb      	str	r3, [r7, #12]
 800c73e:	e00f      	b.n	800c760 <_txe_thread_terminate+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c740:	f3ef 8305 	mrs	r3, IPSR
 800c744:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800c746:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c748:	4b09      	ldr	r3, [pc, #36]	; (800c770 <_txe_thread_terminate+0x54>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4313      	orrs	r3, r2
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d002      	beq.n	800c758 <_txe_thread_terminate+0x3c>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800c752:	2313      	movs	r3, #19
 800c754:	60fb      	str	r3, [r7, #12]
 800c756:	e003      	b.n	800c760 <_txe_thread_terminate+0x44>
    }
    else
    {

        /* Call actual thread terminate function.  */
        status =  _tx_thread_terminate(thread_ptr);
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f7fe fd67 	bl	800b22c <_tx_thread_terminate>
 800c75e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c760:	68fb      	ldr	r3, [r7, #12]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	54485244 	.word	0x54485244
 800c770:	24000010 	.word	0x24000010

0800c774 <_ux_host_stack_bandwidth_check>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_bandwidth_check(UX_HCD *hcd, UX_ENDPOINT *endpoint)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b08e      	sub	sp, #56	; 0x38
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
UX_DEVICE       *device;
UX_DEVICE       *parent_device;
USHORT          hcd_bandwidth_claimed;
USHORT          max_packet_size;
LONG            packet_size;
USHORT          tt_bandwidth_claimed =  0;
 800c77e:	2300      	movs	r3, #0
 800c780:	85fb      	strh	r3, [r7, #46]	; 0x2e
ULONG           port_index;
ULONG           port_map;
ULONG           tt_index;
const UCHAR     overheads[4][3] = {
 800c782:	4a6a      	ldr	r2, [pc, #424]	; (800c92c <_ux_host_stack_bandwidth_check+0x1b8>)
 800c784:	f107 030c 	add.w	r3, r7, #12
 800c788:	ca07      	ldmia	r2, {r0, r1, r2}
 800c78a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    { 0, 13,  55}, /* Bulk */
    {19, 13,  55}  /* Interrupt */
};

    /* Get the pointer to the device.  */
    device =  endpoint -> ux_endpoint_device;
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c792:	623b      	str	r3, [r7, #32]
     * 
     * Worst case bit stuffing is calculated as 1.1667 (7/6) times the raw time.
     */

    /* Get maximum packet size.  */
    max_packet_size  = endpoint -> ux_endpoint_descriptor.wMaxPacketSize & UX_MAX_PACKET_SIZE_MASK;
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	69db      	ldr	r3, [r3, #28]
 800c798:	b29b      	uxth	r3, r3
 800c79a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c79e:	863b      	strh	r3, [r7, #48]	; 0x30

    /* Rough time for possible Bit Stuffing.  */
    packet_size = (max_packet_size * 7 + 5) / 6;
 800c7a0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	00db      	lsls	r3, r3, #3
 800c7a6:	1a9b      	subs	r3, r3, r2
 800c7a8:	3305      	adds	r3, #5
 800c7aa:	4a61      	ldr	r2, [pc, #388]	; (800c930 <_ux_host_stack_bandwidth_check+0x1bc>)
 800c7ac:	fb82 1203 	smull	r1, r2, r2, r3
 800c7b0:	17db      	asrs	r3, r3, #31
 800c7b2:	1ad3      	subs	r3, r2, r3
 800c7b4:	61fb      	str	r3, [r7, #28]

    /* Add overhead.  */
    packet_size += overheads[endpoint -> ux_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE][device -> ux_device_speed];
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	699b      	ldr	r3, [r3, #24]
 800c7ba:	f003 0203 	and.w	r2, r3, #3
 800c7be:	6a3b      	ldr	r3, [r7, #32]
 800c7c0:	6919      	ldr	r1, [r3, #16]
 800c7c2:	4613      	mov	r3, r2
 800c7c4:	005b      	lsls	r3, r3, #1
 800c7c6:	4413      	add	r3, r2
 800c7c8:	3338      	adds	r3, #56	; 0x38
 800c7ca:	443b      	add	r3, r7
 800c7cc:	440b      	add	r3, r1
 800c7ce:	3b2c      	subs	r3, #44	; 0x2c
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	61fb      	str	r3, [r7, #28]
    max_packet_size = (USHORT)packet_size;
 800c7da:	69fb      	ldr	r3, [r7, #28]
 800c7dc:	863b      	strh	r3, [r7, #48]	; 0x30

    /* Check for high-speed endpoint.  */
    if (device -> ux_device_speed == UX_HIGH_SPEED_DEVICE)
 800c7de:	6a3b      	ldr	r3, [r7, #32]
 800c7e0:	691b      	ldr	r3, [r3, #16]
 800c7e2:	2b02      	cmp	r3, #2
 800c7e4:	d10a      	bne.n	800c7fc <_ux_host_stack_bandwidth_check+0x88>
    {

        /* Get number of transactions.  */
        max_packet_size = (USHORT)(max_packet_size *
                    (((endpoint -> ux_endpoint_descriptor.wMaxPacketSize & UX_MAX_NUMBER_OF_TRANSACTIONS_MASK) >>
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	69db      	ldr	r3, [r3, #28]
 800c7ea:	0adb      	lsrs	r3, r3, #11
 800c7ec:	f003 0303 	and.w	r3, r3, #3
                        UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT) + 1));
 800c7f0:	3301      	adds	r3, #1
        max_packet_size = (USHORT)(max_packet_size *
 800c7f2:	b29b      	uxth	r3, r3
 800c7f4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800c7f6:	fb12 f303 	smulbb	r3, r2, r3
 800c7fa:	863b      	strh	r3, [r7, #48]	; 0x30
    }

    /* Calculate the bandwidth claimed by this endpoint for the main bus.  */
    if (hcd -> ux_hcd_version != 0x200)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c806:	d017      	beq.n	800c838 <_ux_host_stack_bandwidth_check+0xc4>
    {

        if (device -> ux_device_speed == UX_LOW_SPEED_DEVICE)
 800c808:	6a3b      	ldr	r3, [r7, #32]
 800c80a:	691b      	ldr	r3, [r3, #16]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d106      	bne.n	800c81e <_ux_host_stack_bandwidth_check+0xaa>
            /* Low speed transfer takes 40x more units than high speed. */
            hcd_bandwidth_claimed =  (USHORT)(max_packet_size * 8 * 5);
 800c810:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c812:	461a      	mov	r2, r3
 800c814:	0092      	lsls	r2, r2, #2
 800c816:	4413      	add	r3, r2
 800c818:	00db      	lsls	r3, r3, #3
 800c81a:	867b      	strh	r3, [r7, #50]	; 0x32
 800c81c:	e018      	b.n	800c850 <_ux_host_stack_bandwidth_check+0xdc>
        else
        {

            if (device -> ux_device_speed == UX_FULL_SPEED_DEVICE)
 800c81e:	6a3b      	ldr	r3, [r7, #32]
 800c820:	691b      	ldr	r3, [r3, #16]
 800c822:	2b01      	cmp	r3, #1
 800c824:	d105      	bne.n	800c832 <_ux_host_stack_bandwidth_check+0xbe>
                /* Full speed transfer takes 5x more units than high speed. */
                hcd_bandwidth_claimed =  (USHORT)(max_packet_size * 5);
 800c826:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c828:	461a      	mov	r2, r3
 800c82a:	0092      	lsls	r2, r2, #2
 800c82c:	4413      	add	r3, r2
 800c82e:	867b      	strh	r3, [r7, #50]	; 0x32
 800c830:	e00e      	b.n	800c850 <_ux_host_stack_bandwidth_check+0xdc>
            else
                /* Use high speed timing as base for bus bandwidth calculation. */
                hcd_bandwidth_claimed =  (USHORT)max_packet_size;
 800c832:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c834:	867b      	strh	r3, [r7, #50]	; 0x32
 800c836:	e00b      	b.n	800c850 <_ux_host_stack_bandwidth_check+0xdc>
        }
    }
    else        
    {

        hcd_bandwidth_claimed =  (USHORT)max_packet_size;
 800c838:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c83a:	867b      	strh	r3, [r7, #50]	; 0x32
        if (device -> ux_device_speed == UX_LOW_SPEED_DEVICE)
 800c83c:	6a3b      	ldr	r3, [r7, #32]
 800c83e:	691b      	ldr	r3, [r3, #16]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d103      	bne.n	800c84c <_ux_host_stack_bandwidth_check+0xd8>
            /* Low speed transfer takes 8x more units than full speed. */
            tt_bandwidth_claimed =  (USHORT)(max_packet_size * 8);
 800c844:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c846:	00db      	lsls	r3, r3, #3
 800c848:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c84a:	e001      	b.n	800c850 <_ux_host_stack_bandwidth_check+0xdc>
        else
            /* Use full speed timing as base for TT bandwidth calculation. */
            tt_bandwidth_claimed =  (USHORT)max_packet_size;
 800c84c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c84e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    /* Do we have enough on the bus for this new endpoint?  */
    if (hcd -> ux_hcd_available_bandwidth < hcd_bandwidth_claimed)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c856:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c858:	429a      	cmp	r2, r3
 800c85a:	d206      	bcs.n	800c86a <_ux_host_stack_bandwidth_check+0xf6>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_NO_BANDWIDTH_AVAILABLE, endpoint, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_NO_BANDWIDTH_AVAILABLE);
 800c85c:	2241      	movs	r2, #65	; 0x41
 800c85e:	2104      	movs	r1, #4
 800c860:	2002      	movs	r0, #2
 800c862:	f001 ffc9 	bl	800e7f8 <_ux_system_error_handler>

        return(UX_NO_BANDWIDTH_AVAILABLE);
 800c866:	2341      	movs	r3, #65	; 0x41
 800c868:	e05c      	b.n	800c924 <_ux_host_stack_bandwidth_check+0x1b0>
    }
    
    /* We need to take care of the case where the endpoint belongs to a USB 1.1 
       device that sits behind a 2.0 hub. We ignore cases where the device 
       is either high speed or the bus is 1.1.  */
    if ((device -> ux_device_speed == UX_HIGH_SPEED_DEVICE) || (hcd -> ux_hcd_version != 0x200))
 800c86a:	6a3b      	ldr	r3, [r7, #32]
 800c86c:	691b      	ldr	r3, [r3, #16]
 800c86e:	2b02      	cmp	r3, #2
 800c870:	d005      	beq.n	800c87e <_ux_host_stack_bandwidth_check+0x10a>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c87c:	d001      	beq.n	800c882 <_ux_host_stack_bandwidth_check+0x10e>
    {

        /* The device is high speed, therefore no need for TT.  */
        return(UX_SUCCESS);
 800c87e:	2300      	movs	r3, #0
 800c880:	e050      	b.n	800c924 <_ux_host_stack_bandwidth_check+0x1b0>
    }

    /* We have a 1.1 device, check if the parent is a 2.0 hub.  */
    parent_device =  device -> ux_device_parent;
 800c882:	6a3b      	ldr	r3, [r7, #32]
 800c884:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c888:	637b      	str	r3, [r7, #52]	; 0x34
    if (parent_device == UX_NULL)
 800c88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d101      	bne.n	800c894 <_ux_host_stack_bandwidth_check+0x120>
    {

        /* We are at the root, this controller must support 1.1 then! */
        return(UX_SUCCESS);    
 800c890:	2300      	movs	r3, #0
 800c892:	e047      	b.n	800c924 <_ux_host_stack_bandwidth_check+0x1b0>

    /* We get here when the parent is a hub. The problem occurs when the hub is itself 
       connected to a chain of hubs. We need to find the first 2.0 hub parent to this 
       chain to check the TT. We need to remember the port on which the first 1.1 
       device is hooked to.  */
    port_index =  device -> ux_device_port_location - 1;
 800c894:	6a3b      	ldr	r3, [r7, #32]
 800c896:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c89a:	3b01      	subs	r3, #1
 800c89c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Scan the chain of hubs upward.  */
    while (parent_device != UX_NULL)
 800c89e:	e03d      	b.n	800c91c <_ux_host_stack_bandwidth_check+0x1a8>
    {

        /* Determine if the device is high speed.  */
        if (parent_device -> ux_device_speed == UX_HIGH_SPEED_DEVICE)
 800c8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a2:	691b      	ldr	r3, [r3, #16]
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d130      	bne.n	800c90a <_ux_host_stack_bandwidth_check+0x196>
        {

            /* The device is a high speed hub, find the TT that manages the port. 
               The first 1.1 device is connected to. First we calculate the port 
               mapping bit.  */
            port_map = (ULONG)(1 << port_index);
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c8b0:	61bb      	str	r3, [r7, #24]

            /* Parse all the TTs attached to the hub.  */
            for (tt_index = 0; tt_index < UX_MAX_TT; tt_index++)
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	627b      	str	r3, [r7, #36]	; 0x24
 800c8b6:	e01e      	b.n	800c8f6 <_ux_host_stack_bandwidth_check+0x182>
            {

                /* Check if this TT owns the port where the device is attached.  */
                if ((parent_device -> ux_device_hub_tt[tt_index].ux_hub_tt_port_mapping & port_map) != 0)
 800c8b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8bc:	3324      	adds	r3, #36	; 0x24
 800c8be:	00db      	lsls	r3, r3, #3
 800c8c0:	4413      	add	r3, r2
 800c8c2:	685a      	ldr	r2, [r3, #4]
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	4013      	ands	r3, r2
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d011      	beq.n	800c8f0 <_ux_host_stack_bandwidth_check+0x17c>
                {

                    /* We have found the port, check if the tt can give us the bandwidth
                       we want to claim.  */
                    if (parent_device -> ux_device_hub_tt[tt_index].ux_hub_tt_max_bandwidth < tt_bandwidth_claimed)
 800c8cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d0:	3324      	adds	r3, #36	; 0x24
 800c8d2:	00db      	lsls	r3, r3, #3
 800c8d4:	4413      	add	r3, r2
 800c8d6:	689a      	ldr	r2, [r3, #8]
 800c8d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d206      	bcs.n	800c8ec <_ux_host_stack_bandwidth_check+0x178>

                        /* If trace is enabled, insert this event into the trace buffer.  */
                        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_NO_BANDWIDTH_AVAILABLE, endpoint, 0, 0, UX_TRACE_ERRORS, 0, 0)

                        /* Error trap. */
                        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_NO_BANDWIDTH_AVAILABLE);
 800c8de:	2241      	movs	r2, #65	; 0x41
 800c8e0:	2104      	movs	r1, #4
 800c8e2:	2002      	movs	r0, #2
 800c8e4:	f001 ff88 	bl	800e7f8 <_ux_system_error_handler>

                        return(UX_NO_BANDWIDTH_AVAILABLE);
 800c8e8:	2341      	movs	r3, #65	; 0x41
 800c8ea:	e01b      	b.n	800c924 <_ux_host_stack_bandwidth_check+0x1b0>
                    }
                                            
                    else
                        return(UX_SUCCESS);
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	e019      	b.n	800c924 <_ux_host_stack_bandwidth_check+0x1b0>
            for (tt_index = 0; tt_index < UX_MAX_TT; tt_index++)
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	627b      	str	r3, [r7, #36]	; 0x24
 800c8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f8:	2b07      	cmp	r3, #7
 800c8fa:	d9dd      	bls.n	800c8b8 <_ux_host_stack_bandwidth_check+0x144>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_NO_BANDWIDTH_AVAILABLE, endpoint, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_NO_BANDWIDTH_AVAILABLE);
 800c8fc:	2241      	movs	r2, #65	; 0x41
 800c8fe:	2104      	movs	r1, #4
 800c900:	2002      	movs	r0, #2
 800c902:	f001 ff79 	bl	800e7f8 <_ux_system_error_handler>

            /* We should never get here !!!!! */
            return(UX_NO_BANDWIDTH_AVAILABLE);
 800c906:	2341      	movs	r3, #65	; 0x41
 800c908:	e00c      	b.n	800c924 <_ux_host_stack_bandwidth_check+0x1b0>
        }

        /* We now remember where this hub is located on the parent.  */
        port_index =  parent_device -> ux_device_port_location - 1;
 800c90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c90c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c910:	3b01      	subs	r3, #1
 800c912:	62bb      	str	r3, [r7, #40]	; 0x28
        
        /* We go up one level in the hub chain.  */
        parent_device =  parent_device -> ux_device_parent;
 800c914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c916:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c91a:	637b      	str	r3, [r7, #52]	; 0x34
    while (parent_device != UX_NULL)
 800c91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1be      	bne.n	800c8a0 <_ux_host_stack_bandwidth_check+0x12c>
    }

    /* We get here when we have not found a 2.0 hub in the list and we got to the root port.  */
    return(UX_SUCCESS);
 800c922:	2300      	movs	r3, #0
}
 800c924:	4618      	mov	r0, r3
 800c926:	3738      	adds	r7, #56	; 0x38
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	080128bc 	.word	0x080128bc
 800c930:	2aaaaaab 	.word	0x2aaaaaab

0800c934 <_ux_host_stack_bandwidth_claim>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_host_stack_bandwidth_claim(UX_HCD *hcd, UX_ENDPOINT *endpoint)
{
 800c934:	b480      	push	{r7}
 800c936:	b08f      	sub	sp, #60	; 0x3c
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
UX_DEVICE       *device;
UX_DEVICE       *parent_device;
USHORT          hcd_bandwidth_claimed;
USHORT          max_packet_size;
LONG            packet_size;
USHORT          tt_bandwidth_claimed =  0;
 800c93e:	2300      	movs	r3, #0
 800c940:	85fb      	strh	r3, [r7, #46]	; 0x2e
ULONG           port_index;
ULONG           port_map;
ULONG           tt_index;
const UCHAR     overheads[4][3] = {
 800c942:	4a61      	ldr	r2, [pc, #388]	; (800cac8 <_ux_host_stack_bandwidth_claim+0x194>)
 800c944:	f107 030c 	add.w	r3, r7, #12
 800c948:	ca07      	ldmia	r2, {r0, r1, r2}
 800c94a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    { 0, 13,  55}, /* Bulk */
    {19, 13,  55}  /* Interrupt */
};

    /* Get the pointer to the device.  */
    device =  endpoint -> ux_endpoint_device;
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c952:	623b      	str	r3, [r7, #32]
     * 
     * Worst case bit stuffing is calculated as 1.1667 (7/6) times the raw time.
     */

    /* Get maximum packet size.  */
    max_packet_size  = endpoint -> ux_endpoint_descriptor.wMaxPacketSize & UX_MAX_PACKET_SIZE_MASK;
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	69db      	ldr	r3, [r3, #28]
 800c958:	b29b      	uxth	r3, r3
 800c95a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c95e:	863b      	strh	r3, [r7, #48]	; 0x30

    /* Rough time for possible Bit Stuffing.  */
    packet_size = (max_packet_size * 7 + 5) / 6;
 800c960:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800c962:	4613      	mov	r3, r2
 800c964:	00db      	lsls	r3, r3, #3
 800c966:	1a9b      	subs	r3, r3, r2
 800c968:	3305      	adds	r3, #5
 800c96a:	4a58      	ldr	r2, [pc, #352]	; (800cacc <_ux_host_stack_bandwidth_claim+0x198>)
 800c96c:	fb82 1203 	smull	r1, r2, r2, r3
 800c970:	17db      	asrs	r3, r3, #31
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	61fb      	str	r3, [r7, #28]

    /* Add overhead.  */
    packet_size += overheads[endpoint -> ux_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE][device -> ux_device_speed];
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	699b      	ldr	r3, [r3, #24]
 800c97a:	f003 0203 	and.w	r2, r3, #3
 800c97e:	6a3b      	ldr	r3, [r7, #32]
 800c980:	6919      	ldr	r1, [r3, #16]
 800c982:	4613      	mov	r3, r2
 800c984:	005b      	lsls	r3, r3, #1
 800c986:	4413      	add	r3, r2
 800c988:	3338      	adds	r3, #56	; 0x38
 800c98a:	443b      	add	r3, r7
 800c98c:	440b      	add	r3, r1
 800c98e:	3b2c      	subs	r3, #44	; 0x2c
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	461a      	mov	r2, r3
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	4413      	add	r3, r2
 800c998:	61fb      	str	r3, [r7, #28]
    max_packet_size = (USHORT)packet_size;
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	863b      	strh	r3, [r7, #48]	; 0x30

    /* Check for high-speed endpoint.  */
    if (device -> ux_device_speed == UX_HIGH_SPEED_DEVICE)
 800c99e:	6a3b      	ldr	r3, [r7, #32]
 800c9a0:	691b      	ldr	r3, [r3, #16]
 800c9a2:	2b02      	cmp	r3, #2
 800c9a4:	d10a      	bne.n	800c9bc <_ux_host_stack_bandwidth_claim+0x88>
    {

        /* Get number of transactions.  */
        max_packet_size = (USHORT)(max_packet_size *
                    (((endpoint -> ux_endpoint_descriptor.wMaxPacketSize & UX_MAX_NUMBER_OF_TRANSACTIONS_MASK) >>
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	69db      	ldr	r3, [r3, #28]
 800c9aa:	0adb      	lsrs	r3, r3, #11
 800c9ac:	f003 0303 	and.w	r3, r3, #3
                        UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT) + 1));
 800c9b0:	3301      	adds	r3, #1
        max_packet_size = (USHORT)(max_packet_size *
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800c9b6:	fb12 f303 	smulbb	r3, r2, r3
 800c9ba:	863b      	strh	r3, [r7, #48]	; 0x30
    }

    /* Calculate the bandwidth claimed by this endpoint for the main bus.  */
    if (hcd -> ux_hcd_version != 0x200)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9c6:	d017      	beq.n	800c9f8 <_ux_host_stack_bandwidth_claim+0xc4>
    {

        if (device -> ux_device_speed == UX_LOW_SPEED_DEVICE)
 800c9c8:	6a3b      	ldr	r3, [r7, #32]
 800c9ca:	691b      	ldr	r3, [r3, #16]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d106      	bne.n	800c9de <_ux_host_stack_bandwidth_claim+0xaa>
            /* Low speed transfer takes 40x more units than high speed. */
            hcd_bandwidth_claimed =  (USHORT)(max_packet_size * 8 * 5);
 800c9d0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	0092      	lsls	r2, r2, #2
 800c9d6:	4413      	add	r3, r2
 800c9d8:	00db      	lsls	r3, r3, #3
 800c9da:	867b      	strh	r3, [r7, #50]	; 0x32
 800c9dc:	e018      	b.n	800ca10 <_ux_host_stack_bandwidth_claim+0xdc>
        else
        {

            if (device -> ux_device_speed == UX_FULL_SPEED_DEVICE)
 800c9de:	6a3b      	ldr	r3, [r7, #32]
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d105      	bne.n	800c9f2 <_ux_host_stack_bandwidth_claim+0xbe>
                /* Full speed transfer takes 5x more units than high speed. */
                hcd_bandwidth_claimed =  (USHORT)(max_packet_size * 5);
 800c9e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	0092      	lsls	r2, r2, #2
 800c9ec:	4413      	add	r3, r2
 800c9ee:	867b      	strh	r3, [r7, #50]	; 0x32
 800c9f0:	e00e      	b.n	800ca10 <_ux_host_stack_bandwidth_claim+0xdc>
            else
                /* Use high speed timing as base for bus bandwidth calculation. */
                hcd_bandwidth_claimed =  (USHORT)max_packet_size;
 800c9f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c9f4:	867b      	strh	r3, [r7, #50]	; 0x32
 800c9f6:	e00b      	b.n	800ca10 <_ux_host_stack_bandwidth_claim+0xdc>
        }
    }
    else        
    {

        hcd_bandwidth_claimed =  (USHORT)max_packet_size;
 800c9f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c9fa:	867b      	strh	r3, [r7, #50]	; 0x32
        if (device -> ux_device_speed == UX_LOW_SPEED_DEVICE)
 800c9fc:	6a3b      	ldr	r3, [r7, #32]
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d103      	bne.n	800ca0c <_ux_host_stack_bandwidth_claim+0xd8>
            /* Low speed transfer takes 8x more units than full speed. */
            tt_bandwidth_claimed =  (USHORT)(max_packet_size * 8);
 800ca04:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ca06:	00db      	lsls	r3, r3, #3
 800ca08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ca0a:	e001      	b.n	800ca10 <_ux_host_stack_bandwidth_claim+0xdc>
        else
            /* Use full speed timing as base for TT bandwidth calculation. */
            tt_bandwidth_claimed =  (USHORT)max_packet_size;
 800ca0c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ca0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    /* Allocate the HCD bandwidth, since it's already checked by _bandwidth_check.  */
    hcd -> ux_hcd_available_bandwidth -=  hcd_bandwidth_claimed;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ca16:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ca18:	1ad2      	subs	r2, r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* We need to take care of the case where the endpoint belongs to a USB 1.1
       device that sits behind a 2.0 hub. We ignore cases where the device
       is either high speed or the bus is 1.1.  */
    if ((device -> ux_device_speed == UX_HIGH_SPEED_DEVICE) || (hcd -> ux_hcd_version != 0x200))
 800ca20:	6a3b      	ldr	r3, [r7, #32]
 800ca22:	691b      	ldr	r3, [r3, #16]
 800ca24:	2b02      	cmp	r3, #2
 800ca26:	d047      	beq.n	800cab8 <_ux_host_stack_bandwidth_claim+0x184>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca32:	d141      	bne.n	800cab8 <_ux_host_stack_bandwidth_claim+0x184>
        /* The device is high speed, therefore no need for TT.  */
        return;
    }

    /* We have a 1.1 device, check if the parent is a 2.0 hub.  */
    parent_device =  device -> ux_device_parent;
 800ca34:	6a3b      	ldr	r3, [r7, #32]
 800ca36:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ca3a:	637b      	str	r3, [r7, #52]	; 0x34
    if (parent_device == UX_NULL)
 800ca3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d03c      	beq.n	800cabc <_ux_host_stack_bandwidth_claim+0x188>

    /* We get here when the parent is a hub. The problem occurs when the hub is 
       itself connected to a chain of hubs. We need to find the first 2.0 hub 
       parent to this chain to check the TT. We need to remember the port on 
       which the first 1.1 device is hooked to.  */
    port_index =  device -> ux_device_port_location - 1;
 800ca42:	6a3b      	ldr	r3, [r7, #32]
 800ca44:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ca48:	3b01      	subs	r3, #1
 800ca4a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Scan the chain of hubs upward.  */
    while (parent_device != UX_NULL)
 800ca4c:	e030      	b.n	800cab0 <_ux_host_stack_bandwidth_claim+0x17c>
    {

        /* Is the device high speed?  */
        if (parent_device -> ux_device_speed == UX_HIGH_SPEED_DEVICE)
 800ca4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	2b02      	cmp	r3, #2
 800ca54:	d123      	bne.n	800ca9e <_ux_host_stack_bandwidth_claim+0x16a>
        {

            /* The device is a high speed hub, find the TT that manages the port. 
               The first 1.1 device is connected to. First we calculate the port 
               mapping bit.  */
            port_map =  (ULONG)(1 << port_index);
 800ca56:	2201      	movs	r2, #1
 800ca58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca5e:	61bb      	str	r3, [r7, #24]

            /* Parse all the TTs attached to the hub.
               Since we confirmed exist of TT in previous _check,
               just do while loop here.
             */
            tt_index = 0;
 800ca60:	2300      	movs	r3, #0
 800ca62:	627b      	str	r3, [r7, #36]	; 0x24
            while(1)
            {
                /* Check if this TT owns the port where the device is attached.  */
                if ((parent_device -> ux_device_hub_tt[tt_index].ux_hub_tt_port_mapping & port_map) != 0)
 800ca64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca68:	3324      	adds	r3, #36	; 0x24
 800ca6a:	00db      	lsls	r3, r3, #3
 800ca6c:	4413      	add	r3, r2
 800ca6e:	685a      	ldr	r2, [r3, #4]
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	4013      	ands	r3, r2
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d00e      	beq.n	800ca96 <_ux_host_stack_bandwidth_claim+0x162>
                {

                    /* We have found the port, check if the tt can give us the bandwidth
                       we want to claim.  */
                    parent_device -> ux_device_hub_tt[tt_index].ux_hub_tt_max_bandwidth -=  tt_bandwidth_claimed;
 800ca78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7c:	3324      	adds	r3, #36	; 0x24
 800ca7e:	00db      	lsls	r3, r3, #3
 800ca80:	4413      	add	r3, r2
 800ca82:	689a      	ldr	r2, [r3, #8]
 800ca84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca86:	1ad2      	subs	r2, r2, r3
 800ca88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ca8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8c:	3324      	adds	r3, #36	; 0x24
 800ca8e:	00db      	lsls	r3, r3, #3
 800ca90:	440b      	add	r3, r1
 800ca92:	609a      	str	r2, [r3, #8]
                    return;
 800ca94:	e013      	b.n	800cabe <_ux_host_stack_bandwidth_claim+0x18a>
                }

                /* Try next index.  */
                tt_index ++;
 800ca96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca98:	3301      	adds	r3, #1
 800ca9a:	627b      	str	r3, [r7, #36]	; 0x24
                if ((parent_device -> ux_device_hub_tt[tt_index].ux_hub_tt_port_mapping & port_map) != 0)
 800ca9c:	e7e2      	b.n	800ca64 <_ux_host_stack_bandwidth_claim+0x130>
            }
        }

        /* We now remember where this hub is located on the parent.  */
        port_index =  parent_device -> ux_device_port_location - 1;
 800ca9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caa0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800caa4:	3b01      	subs	r3, #1
 800caa6:	62bb      	str	r3, [r7, #40]	; 0x28
        
        /* We go up one level in the hub chain.  */
        parent_device =  parent_device -> ux_device_parent;
 800caa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caaa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800caae:	637b      	str	r3, [r7, #52]	; 0x34
    while (parent_device != UX_NULL)
 800cab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1cb      	bne.n	800ca4e <_ux_host_stack_bandwidth_claim+0x11a>
    }

    /* We get here when we have not found a 2.0 hub in the list and we got
       to the root port.  */
    return;
 800cab6:	e002      	b.n	800cabe <_ux_host_stack_bandwidth_claim+0x18a>
        return;
 800cab8:	bf00      	nop
 800caba:	e000      	b.n	800cabe <_ux_host_stack_bandwidth_claim+0x18a>
        return;
 800cabc:	bf00      	nop
}
 800cabe:	373c      	adds	r7, #60	; 0x3c
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr
 800cac8:	080128c8 	.word	0x080128c8
 800cacc:	2aaaaaab 	.word	0x2aaaaaab

0800cad0 <_ux_host_stack_bandwidth_release>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_host_stack_bandwidth_release(UX_HCD *hcd, UX_ENDPOINT *endpoint)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b08f      	sub	sp, #60	; 0x3c
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
UX_DEVICE       *device;
UX_DEVICE       *parent_device;
USHORT          hcd_bandwidth_claimed;
USHORT          max_packet_size;
LONG            packet_size;
USHORT          tt_bandwidth_claimed =  0;
 800cada:	2300      	movs	r3, #0
 800cadc:	85fb      	strh	r3, [r7, #46]	; 0x2e
ULONG           port_index;
ULONG           port_map;
ULONG           tt_index;
const UCHAR     overheads[4][3] = {
 800cade:	4a63      	ldr	r2, [pc, #396]	; (800cc6c <_ux_host_stack_bandwidth_release+0x19c>)
 800cae0:	f107 030c 	add.w	r3, r7, #12
 800cae4:	ca07      	ldmia	r2, {r0, r1, r2}
 800cae6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    { 0, 13,  55}, /* Bulk */
    {19, 13,  55}  /* Interrupt */
};

    /* Get the pointer to the device.  */
    device =  endpoint -> ux_endpoint_device;
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caee:	623b      	str	r3, [r7, #32]
     * 
     * Worst case bit stuffing is calculated as 1.1667 (7/6) times the raw time.
     */

    /* Get maximum packet size.  */
    max_packet_size  = endpoint -> ux_endpoint_descriptor.wMaxPacketSize & UX_MAX_PACKET_SIZE_MASK;
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	69db      	ldr	r3, [r3, #28]
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cafa:	863b      	strh	r3, [r7, #48]	; 0x30

    /* Rough time for possible Bit Stuffing.  */
    packet_size = (max_packet_size * 7 + 5) / 6;
 800cafc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800cafe:	4613      	mov	r3, r2
 800cb00:	00db      	lsls	r3, r3, #3
 800cb02:	1a9b      	subs	r3, r3, r2
 800cb04:	3305      	adds	r3, #5
 800cb06:	4a5a      	ldr	r2, [pc, #360]	; (800cc70 <_ux_host_stack_bandwidth_release+0x1a0>)
 800cb08:	fb82 1203 	smull	r1, r2, r2, r3
 800cb0c:	17db      	asrs	r3, r3, #31
 800cb0e:	1ad3      	subs	r3, r2, r3
 800cb10:	61fb      	str	r3, [r7, #28]

    /* Add overhead.  */
    packet_size += overheads[endpoint -> ux_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE][device -> ux_device_speed];
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	699b      	ldr	r3, [r3, #24]
 800cb16:	f003 0203 	and.w	r2, r3, #3
 800cb1a:	6a3b      	ldr	r3, [r7, #32]
 800cb1c:	6919      	ldr	r1, [r3, #16]
 800cb1e:	4613      	mov	r3, r2
 800cb20:	005b      	lsls	r3, r3, #1
 800cb22:	4413      	add	r3, r2
 800cb24:	3338      	adds	r3, #56	; 0x38
 800cb26:	443b      	add	r3, r7
 800cb28:	440b      	add	r3, r1
 800cb2a:	3b2c      	subs	r3, #44	; 0x2c
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	461a      	mov	r2, r3
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	4413      	add	r3, r2
 800cb34:	61fb      	str	r3, [r7, #28]
    max_packet_size = (USHORT)packet_size;
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	863b      	strh	r3, [r7, #48]	; 0x30

    /* Check for high-speed endpoint.  */
    if (device -> ux_device_speed == UX_HIGH_SPEED_DEVICE)
 800cb3a:	6a3b      	ldr	r3, [r7, #32]
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	2b02      	cmp	r3, #2
 800cb40:	d10a      	bne.n	800cb58 <_ux_host_stack_bandwidth_release+0x88>
    {

        /* Get number of transactions.  */
        max_packet_size = (USHORT)(max_packet_size *
                    (((endpoint -> ux_endpoint_descriptor.wMaxPacketSize & UX_MAX_NUMBER_OF_TRANSACTIONS_MASK) >>
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	69db      	ldr	r3, [r3, #28]
 800cb46:	0adb      	lsrs	r3, r3, #11
 800cb48:	f003 0303 	and.w	r3, r3, #3
                        UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT) + 1));
 800cb4c:	3301      	adds	r3, #1
        max_packet_size = (USHORT)(max_packet_size *
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800cb52:	fb12 f303 	smulbb	r3, r2, r3
 800cb56:	863b      	strh	r3, [r7, #48]	; 0x30
    }

    /* Calculate the bandwidth claimed by this endpoint for the main bus.  */
    if (hcd -> ux_hcd_version != 0x200)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb62:	d017      	beq.n	800cb94 <_ux_host_stack_bandwidth_release+0xc4>
    {

        if (device -> ux_device_speed == UX_LOW_SPEED_DEVICE)
 800cb64:	6a3b      	ldr	r3, [r7, #32]
 800cb66:	691b      	ldr	r3, [r3, #16]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d106      	bne.n	800cb7a <_ux_host_stack_bandwidth_release+0xaa>
            /* Low speed transfer takes 40x more units than high speed. */
            hcd_bandwidth_claimed =  (USHORT)(max_packet_size * 8 * 5);
 800cb6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cb6e:	461a      	mov	r2, r3
 800cb70:	0092      	lsls	r2, r2, #2
 800cb72:	4413      	add	r3, r2
 800cb74:	00db      	lsls	r3, r3, #3
 800cb76:	867b      	strh	r3, [r7, #50]	; 0x32
 800cb78:	e018      	b.n	800cbac <_ux_host_stack_bandwidth_release+0xdc>
        else
        {

            if (device -> ux_device_speed == UX_FULL_SPEED_DEVICE)
 800cb7a:	6a3b      	ldr	r3, [r7, #32]
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d105      	bne.n	800cb8e <_ux_host_stack_bandwidth_release+0xbe>
                /* Full speed transfer takes 5x more units than high speed. */
                hcd_bandwidth_claimed =  (USHORT)(max_packet_size * 5);
 800cb82:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cb84:	461a      	mov	r2, r3
 800cb86:	0092      	lsls	r2, r2, #2
 800cb88:	4413      	add	r3, r2
 800cb8a:	867b      	strh	r3, [r7, #50]	; 0x32
 800cb8c:	e00e      	b.n	800cbac <_ux_host_stack_bandwidth_release+0xdc>
            else
                /* Use high speed timing as base for bus bandwidth calculation. */
                hcd_bandwidth_claimed =  (USHORT)max_packet_size;
 800cb8e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cb90:	867b      	strh	r3, [r7, #50]	; 0x32
 800cb92:	e00b      	b.n	800cbac <_ux_host_stack_bandwidth_release+0xdc>
        }
    }
    else        
    {
 
        hcd_bandwidth_claimed =  (USHORT)max_packet_size;
 800cb94:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cb96:	867b      	strh	r3, [r7, #50]	; 0x32
        if (device -> ux_device_speed == UX_LOW_SPEED_DEVICE)
 800cb98:	6a3b      	ldr	r3, [r7, #32]
 800cb9a:	691b      	ldr	r3, [r3, #16]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d103      	bne.n	800cba8 <_ux_host_stack_bandwidth_release+0xd8>
            /* Low speed transfer takes 8x more units than full speed. */
            tt_bandwidth_claimed =  (USHORT)(max_packet_size * 8);
 800cba0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cba2:	00db      	lsls	r3, r3, #3
 800cba4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cba6:	e001      	b.n	800cbac <_ux_host_stack_bandwidth_release+0xdc>
        else
            /* Use full speed timing as base for TT bandwidth calculation. */
            tt_bandwidth_claimed =  (USHORT)max_packet_size;
 800cba8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cbaa:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    /* Free the HCD bandwidth.  */
    hcd -> ux_hcd_available_bandwidth +=  hcd_bandwidth_claimed;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800cbb2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cbb4:	441a      	add	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* We need to take care of the case where the endpoint belongs to a USB 1.1
       device that sits behind a 2.0 hub. We ignore cases where the device
       is either high speed or the bus is 1.1.  */
    if ((device -> ux_device_speed == UX_HIGH_SPEED_DEVICE) || (hcd -> ux_hcd_version != 0x200))
 800cbbc:	6a3b      	ldr	r3, [r7, #32]
 800cbbe:	691b      	ldr	r3, [r3, #16]
 800cbc0:	2b02      	cmp	r3, #2
 800cbc2:	d04b      	beq.n	800cc5c <_ux_host_stack_bandwidth_release+0x18c>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbce:	d145      	bne.n	800cc5c <_ux_host_stack_bandwidth_release+0x18c>
        /* The device is high speed, therefore no need for TT.  */
        return;
    }

    /* We have a 1.1 device, check if the parent is a 2.0 hub.  */
    parent_device =  device -> ux_device_parent;
 800cbd0:	6a3b      	ldr	r3, [r7, #32]
 800cbd2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cbd6:	637b      	str	r3, [r7, #52]	; 0x34
    if (parent_device == UX_NULL)
 800cbd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d040      	beq.n	800cc60 <_ux_host_stack_bandwidth_release+0x190>

    /* We get here when the parent is a hub. The problem occurs when the hub is itself 
       connected to a chain of hubs. We need to find the first 2.0 hub parent to this chain 
       to check the TT. We need to remember the port on which the first 1.1 device is 
       hooked to.  */
    port_index =  device -> ux_device_port_location - 1;
 800cbde:	6a3b      	ldr	r3, [r7, #32]
 800cbe0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800cbe4:	3b01      	subs	r3, #1
 800cbe6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Scan the chain of hubs upward.  */
    while (parent_device != UX_NULL)
 800cbe8:	e034      	b.n	800cc54 <_ux_host_stack_bandwidth_release+0x184>
    {

        /* Check for a high speed device.  */
        if (parent_device -> ux_device_speed == UX_HIGH_SPEED_DEVICE)
 800cbea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbec:	691b      	ldr	r3, [r3, #16]
 800cbee:	2b02      	cmp	r3, #2
 800cbf0:	d127      	bne.n	800cc42 <_ux_host_stack_bandwidth_release+0x172>
        {

            /* The device is a high speed hub, find the TT that manages the port. 
               The first 1.1 device is connected to. First we calculate the port mapping bit.  */
            port_map =  (ULONG)(1 << port_index);
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbfa:	61bb      	str	r3, [r7, #24]

            /* Parse all the TTs attached to the hub.  */
            for (tt_index = 0; tt_index < UX_MAX_TT; tt_index++)
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	627b      	str	r3, [r7, #36]	; 0x24
 800cc00:	e01b      	b.n	800cc3a <_ux_host_stack_bandwidth_release+0x16a>
            {

                /* Check if this TT owns the port where the device is attached.  */
                if ((parent_device -> ux_device_hub_tt[tt_index].ux_hub_tt_port_mapping & port_map) != 0)
 800cc02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc06:	3324      	adds	r3, #36	; 0x24
 800cc08:	00db      	lsls	r3, r3, #3
 800cc0a:	4413      	add	r3, r2
 800cc0c:	685a      	ldr	r2, [r3, #4]
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	4013      	ands	r3, r2
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00e      	beq.n	800cc34 <_ux_host_stack_bandwidth_release+0x164>
                {

                    /* We have found the port, check if the tt can give us the bandwidth
                       we want to claim.  */
                    parent_device -> ux_device_hub_tt[tt_index].ux_hub_tt_max_bandwidth +=  tt_bandwidth_claimed;
 800cc16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1a:	3324      	adds	r3, #36	; 0x24
 800cc1c:	00db      	lsls	r3, r3, #3
 800cc1e:	4413      	add	r3, r2
 800cc20:	689a      	ldr	r2, [r3, #8]
 800cc22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cc24:	441a      	add	r2, r3
 800cc26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2a:	3324      	adds	r3, #36	; 0x24
 800cc2c:	00db      	lsls	r3, r3, #3
 800cc2e:	440b      	add	r3, r1
 800cc30:	609a      	str	r2, [r3, #8]
                    return;
 800cc32:	e016      	b.n	800cc62 <_ux_host_stack_bandwidth_release+0x192>
            for (tt_index = 0; tt_index < UX_MAX_TT; tt_index++)
 800cc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc36:	3301      	adds	r3, #1
 800cc38:	627b      	str	r3, [r7, #36]	; 0x24
 800cc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3c:	2b07      	cmp	r3, #7
 800cc3e:	d9e0      	bls.n	800cc02 <_ux_host_stack_bandwidth_release+0x132>
                }
            }

            /* We should never get here!!!!! */
            return;
 800cc40:	e00f      	b.n	800cc62 <_ux_host_stack_bandwidth_release+0x192>
        }

        /* We now remember where this hub is located on the parent.  */
        port_index =  parent_device -> ux_device_port_location - 1;
 800cc42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc44:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	62bb      	str	r3, [r7, #40]	; 0x28
        
        /* We go up one level in the hub chain.  */
        parent_device =  parent_device -> ux_device_parent;
 800cc4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc4e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cc52:	637b      	str	r3, [r7, #52]	; 0x34
    while (parent_device != UX_NULL)
 800cc54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d1c7      	bne.n	800cbea <_ux_host_stack_bandwidth_release+0x11a>
    }

    /* We get here when we have not found a 2.0 hub in the list and we got
       to the root port.  */
    return;
 800cc5a:	e002      	b.n	800cc62 <_ux_host_stack_bandwidth_release+0x192>
        return;
 800cc5c:	bf00      	nop
 800cc5e:	e000      	b.n	800cc62 <_ux_host_stack_bandwidth_release+0x192>
        return;
 800cc60:	bf00      	nop
}
 800cc62:	373c      	adds	r7, #60	; 0x3c
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr
 800cc6c:	080128d4 	.word	0x080128d4
 800cc70:	2aaaaaab 	.word	0x2aaaaaab

0800cc74 <_ux_host_stack_class_call>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UX_HOST_CLASS  *_ux_host_stack_class_call(UX_HOST_CLASS_COMMAND *class_command)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b086      	sub	sp, #24
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]

UINT            status = UX_NO_CLASS_MATCH;
 800cc7c:	2357      	movs	r3, #87	; 0x57
 800cc7e:	60fb      	str	r3, [r7, #12]
#if UX_MAX_CLASS_DRIVER > 1
ULONG           class_index;
#endif

    /* Start from the 1st registered classes with USBX.  */
    class_inst =  _ux_system_host -> ux_system_host_class_array;
 800cc80:	4b12      	ldr	r3, [pc, #72]	; (800cccc <_ux_host_stack_class_call+0x58>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	617b      	str	r3, [r7, #20]

    /* Parse all the class drivers.  */
#if UX_MAX_CLASS_DRIVER > 1
    for (class_index = 0; class_index < _ux_system_host -> ux_system_host_max_class; class_index++)
 800cc88:	2300      	movs	r3, #0
 800cc8a:	613b      	str	r3, [r7, #16]
 800cc8c:	e013      	b.n	800ccb6 <_ux_host_stack_class_call+0x42>
    {
#endif

        /* Check if this class driver is used.  */
        if (class_inst -> ux_host_class_status == UX_USED)
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d109      	bne.n	800ccaa <_ux_host_stack_class_call+0x36>
        {

            /* We have found a potential candidate. Call this registered class entry function.  */
            status = class_inst -> ux_host_class_entry_function(class_command);
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	4798      	blx	r3
 800cc9e:	60f8      	str	r0, [r7, #12]

            /* The status tells us if the registered class wants to own this class.  */
            if (status == UX_SUCCESS)
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d101      	bne.n	800ccaa <_ux_host_stack_class_call+0x36>
            {

                /* Yes, return this class pointer.  */
                return(class_inst); 
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	e00c      	b.n	800ccc4 <_ux_host_stack_class_call+0x50>
            }
        }    
#if UX_MAX_CLASS_DRIVER > 1
        /* Move to the next registered class. */
        class_inst ++;
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	3358      	adds	r3, #88	; 0x58
 800ccae:	617b      	str	r3, [r7, #20]
    for (class_index = 0; class_index < _ux_system_host -> ux_system_host_max_class; class_index++)
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	613b      	str	r3, [r7, #16]
 800ccb6:	4b05      	ldr	r3, [pc, #20]	; (800cccc <_ux_host_stack_class_call+0x58>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	693a      	ldr	r2, [r7, #16]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d3e5      	bcc.n	800cc8e <_ux_host_stack_class_call+0x1a>
    }
#endif

    /* There is no driver who want to own this class!  */
    return(UX_NULL);
 800ccc2:	2300      	movs	r3, #0
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3718      	adds	r7, #24
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	2400577c 	.word	0x2400577c

0800ccd0 <_ux_host_stack_class_device_scan>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_class_device_scan(UX_DEVICE *device)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b092      	sub	sp, #72	; 0x48
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
#if !defined(UX_HOST_STACK_DEVICE_DRIVER_SCAN_DISABLE)

UINT                        status;
UX_HOST_CLASS               *class_inst = UX_NULL;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	647b      	str	r3, [r7, #68]	; 0x44
UX_HOST_CLASS_COMMAND       class_command;

    /* Perform the command initialization.  */
    class_command.ux_host_class_command_request      =   UX_HOST_CLASS_COMMAND_QUERY;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	60fb      	str	r3, [r7, #12]
    class_command.ux_host_class_command_container    =   (VOID *) device;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	613b      	str	r3, [r7, #16]
    class_command.ux_host_class_command_vid          =   device -> ux_device_descriptor.idVendor;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cce8:	623b      	str	r3, [r7, #32]
    class_command.ux_host_class_command_pid          =   device -> ux_device_descriptor.idProduct;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccee:	61fb      	str	r3, [r7, #28]
    class_command.ux_host_class_command_class        =   device -> ux_device_descriptor.bDeviceClass;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccf4:	627b      	str	r3, [r7, #36]	; 0x24
    class_command.ux_host_class_command_subclass     =   device -> ux_device_descriptor.bDeviceSubClass;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccfa:	62bb      	str	r3, [r7, #40]	; 0x28
    class_command.ux_host_class_command_protocol     =   device -> ux_device_descriptor.bDeviceProtocol;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd00:	62fb      	str	r3, [r7, #44]	; 0x2c
    class_command.ux_host_class_command_iad_class    =   0;
 800cd02:	2300      	movs	r3, #0
 800cd04:	633b      	str	r3, [r7, #48]	; 0x30
    class_command.ux_host_class_command_iad_subclass =   0;
 800cd06:	2300      	movs	r3, #0
 800cd08:	637b      	str	r3, [r7, #52]	; 0x34
    class_command.ux_host_class_command_iad_protocol =   0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	63bb      	str	r3, [r7, #56]	; 0x38

#if !defined(UX_HOST_STACK_DEVICE_DRIVER_SCAN_VIDPID_DISABLE)
    /* We start with the PID/VID for this device.  */
    class_command.ux_host_class_command_usage =  UX_HOST_CLASS_COMMAND_USAGE_PIDVID;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	61bb      	str	r3, [r7, #24]
    class_inst =  _ux_host_stack_class_call(&class_command);
 800cd12:	f107 030c 	add.w	r3, r7, #12
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7ff ffac 	bl	800cc74 <_ux_host_stack_class_call>
 800cd1c:	6478      	str	r0, [r7, #68]	; 0x44
#endif

#if !defined(UX_HOST_STACK_DEVICE_DRIVER_SCAN_DCSP_DISABLE)
    /* On return, either we have found a class or the device is still an orphan.  */
    if (class_inst == UX_NULL)
 800cd1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d107      	bne.n	800cd34 <_ux_host_stack_class_device_scan+0x64>
    {

        /* It the PID/VID did not work, we continue looking for the Class\Subclass\Protocol match. */  
        class_command.ux_host_class_command_usage        =   UX_HOST_CLASS_COMMAND_USAGE_DCSP;
 800cd24:	2303      	movs	r3, #3
 800cd26:	61bb      	str	r3, [r7, #24]
        class_inst =  _ux_host_stack_class_call(&class_command);
 800cd28:	f107 030c 	add.w	r3, r7, #12
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7ff ffa1 	bl	800cc74 <_ux_host_stack_class_call>
 800cd32:	6478      	str	r0, [r7, #68]	; 0x44

    }
#endif

    /* On return, either we have found a class or the device is still an orphan.  */
    if (class_inst != UX_NULL)
 800cd34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d010      	beq.n	800cd5c <_ux_host_stack_class_device_scan+0x8c>
    {

        device -> ux_device_class =  class_inst;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Activation may take time, run as state machine.  */
        status = UX_SUCCESS;
        return(status);
#else
        class_command.ux_host_class_command_class_ptr =  class_inst;
 800cd40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd42:	63fb      	str	r3, [r7, #60]	; 0x3c
        class_command.ux_host_class_command_request =  UX_HOST_CLASS_COMMAND_ACTIVATE;
 800cd44:	2302      	movs	r3, #2
 800cd46:	60fb      	str	r3, [r7, #12]
        status =  device -> ux_device_class ->  ux_host_class_entry_function(&class_command);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd4e:	f107 020c 	add.w	r2, r7, #12
 800cd52:	4610      	mov	r0, r2
 800cd54:	4798      	blx	r3
 800cd56:	6438      	str	r0, [r7, #64]	; 0x40

        /* Return result of activation.  */
        return(status);
 800cd58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd5a:	e000      	b.n	800cd5e <_ux_host_stack_class_device_scan+0x8e>
    }

#endif

    /* Return an error.  */
    return(UX_NO_CLASS_MATCH);
 800cd5c:	2357      	movs	r3, #87	; 0x57
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3748      	adds	r7, #72	; 0x48
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <_ux_host_stack_class_instance_create>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_class_instance_create(UX_HOST_CLASS *host_class, VOID *class_instance)
{
 800cd66:	b480      	push	{r7}
 800cd68:	b085      	sub	sp, #20
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
 800cd6e:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_HOST_OBJECT_TYPE_CLASS_INSTANCE, class_instance, 0, 0, 0)

    /* Start with the first class instance attached to the class container.  */
    current_class_instance =  host_class -> ux_host_class_first_instance;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd74:	60fb      	str	r3, [r7, #12]
    
    /* Check if there are any instances attached.  */
    if (current_class_instance == UX_NULL)
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d107      	bne.n	800cd8c <_ux_host_stack_class_instance_create+0x26>
    {

        /* Since it is the first class, attach it to the class container.  */
        host_class -> ux_host_class_first_instance =  class_instance;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	683a      	ldr	r2, [r7, #0]
 800cd80:	649a      	str	r2, [r3, #72]	; 0x48

        /* Return successful completion.  */
        return(UX_SUCCESS);
 800cd82:	2300      	movs	r3, #0
 800cd84:	e00a      	b.n	800cd9c <_ux_host_stack_class_instance_create+0x36>
    /* Traverse the list of the class instances until we find the last class.  */        
    while (*current_class_instance != UX_NULL)
    {

        /* Point to the next class instance.  */
        current_class_instance =  *current_class_instance;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	60fb      	str	r3, [r7, #12]
    while (*current_class_instance != UX_NULL)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d1f8      	bne.n	800cd86 <_ux_host_stack_class_instance_create+0x20>
    }

    /* We have reached the last class, hook the new class to the end. This way, we preserve
       the chronological order of the class instances.  */
    *current_class_instance =  class_instance;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	601a      	str	r2, [r3, #0]
    
    /* Return successful completion to caller.  */
    return(UX_SUCCESS);
 800cd9a:	2300      	movs	r3, #0
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3714      	adds	r7, #20
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr

0800cda8 <_ux_host_stack_class_instance_destroy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_class_instance_destroy(UX_HOST_CLASS *host_class, VOID *class_instance)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(class_instance);

    /* Get the pointer to the instance pointed by the instance to destroy.  */
    next_class_instance =  class_instance;
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	60bb      	str	r3, [r7, #8]
    next_class_instance =  *next_class_instance;
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	60bb      	str	r3, [r7, #8]
    
    /* Start with the first class instance attached to the class container.  */
    current_class_instance =  host_class -> ux_host_class_first_instance;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdc0:	60fb      	str	r3, [r7, #12]
    
    /* Check if there are any instances attached.  */
    if (current_class_instance == UX_NULL)
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d106      	bne.n	800cdd6 <_ux_host_stack_class_instance_destroy+0x2e>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_HOST_CLASS_INSTANCE_UNKNOWN);
 800cdc8:	225b      	movs	r2, #91	; 0x5b
 800cdca:	2104      	movs	r1, #4
 800cdcc:	2002      	movs	r0, #2
 800cdce:	f001 fd13 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_HOST_CLASS_INSTANCE_UNKNOWN, class_instance, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_HOST_CLASS_INSTANCE_UNKNOWN);
 800cdd2:	235b      	movs	r3, #91	; 0x5b
 800cdd4:	e01f      	b.n	800ce16 <_ux_host_stack_class_instance_destroy+0x6e>
    }

    /* The first instance is a special case because it is attached to the class
       container.  */
    if (current_class_instance == class_instance)
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d111      	bne.n	800ce02 <_ux_host_stack_class_instance_destroy+0x5a>
    {

        /* Point to next class instance.  */
        host_class -> ux_host_class_first_instance = next_class_instance;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	68ba      	ldr	r2, [r7, #8]
 800cde2:	649a      	str	r2, [r3, #72]	; 0x48
    
        /* Return success.  */
        return(UX_SUCCESS);
 800cde4:	2300      	movs	r3, #0
 800cde6:	e016      	b.n	800ce16 <_ux_host_stack_class_instance_destroy+0x6e>
    /* Traverse the list of the class instances until we found the right one.  */        
    while (*current_class_instance != UX_NULL)
    {

        /* Check to see if this class is the one we need to destroy.  */
        if(*current_class_instance == class_instance)
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	683a      	ldr	r2, [r7, #0]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d104      	bne.n	800cdfc <_ux_host_stack_class_instance_destroy+0x54>
        {

            /* Point to next class instance.  */
            *current_class_instance =  next_class_instance;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	68ba      	ldr	r2, [r7, #8]
 800cdf6:	601a      	str	r2, [r3, #0]

            /* Return success.  */
            return(UX_SUCCESS);
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	e00c      	b.n	800ce16 <_ux_host_stack_class_instance_destroy+0x6e>
        }

        /* Points to the next class instance.  */
        current_class_instance =  *current_class_instance;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	60fb      	str	r3, [r7, #12]
    while (*current_class_instance != UX_NULL)
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d1ee      	bne.n	800cde8 <_ux_host_stack_class_instance_destroy+0x40>
    }
    
    /* Error trap. */
    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_HOST_CLASS_INSTANCE_UNKNOWN);
 800ce0a:	225b      	movs	r2, #91	; 0x5b
 800ce0c:	2104      	movs	r1, #4
 800ce0e:	2002      	movs	r0, #2
 800ce10:	f001 fcf2 	bl	800e7f8 <_ux_system_error_handler>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_HOST_CLASS_INSTANCE_UNKNOWN, class_instance, 0, 0, UX_TRACE_ERRORS, 0, 0)

    /* Return error to caller.  */
    return(UX_HOST_CLASS_INSTANCE_UNKNOWN);
 800ce14:	235b      	movs	r3, #91	; 0x5b
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3710      	adds	r7, #16
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <_ux_host_stack_class_interface_scan>:
/*                                            to scan interfaces,         */
/*                                            resulting in version 6.1.4  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_class_interface_scan(UX_DEVICE *device)
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b084      	sub	sp, #16
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
UINT                    status;


    /* Get the 1st and only configuration.  If the device has multiple
       configurations, we simply use the first one as default. */
    configuration =  device -> ux_device_first_configuration;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce2a:	60fb      	str	r3, [r7, #12]
    if (configuration == UX_NULL)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d101      	bne.n	800ce36 <_ux_host_stack_class_interface_scan+0x18>
        return(UX_ERROR);
 800ce32:	23ff      	movs	r3, #255	; 0xff
 800ce34:	e004      	b.n	800ce40 <_ux_host_stack_class_interface_scan+0x22>

    /* Scan interfaces for this configuration.  */
    status = _ux_host_stack_configuration_interface_scan(configuration);
 800ce36:	68f8      	ldr	r0, [r7, #12]
 800ce38:	f000 f9b6 	bl	800d1a8 <_ux_host_stack_configuration_interface_scan>
 800ce3c:	60b8      	str	r0, [r7, #8]

    /* Return operation result.  */
    return(status);
 800ce3e:	68bb      	ldr	r3, [r7, #8]
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3710      	adds	r7, #16
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <_ux_host_stack_class_register>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_HOST_CLASS_COMMAND_STRUCT *))
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b086      	sub	sp, #24
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]

UX_HOST_CLASS       *class_inst;
#if !defined(UX_NAME_REFERENCED_BY_POINTER)
UINT                status;
UINT                class_name_length =  0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	60bb      	str	r3, [r7, #8]
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_CLASS_REGISTER, class_name, class_entry_function, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

#if !defined(UX_NAME_REFERENCED_BY_POINTER)
    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 800ce56:	f107 0308 	add.w	r3, r7, #8
 800ce5a:	223f      	movs	r2, #63	; 0x3f
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f002 f93b 	bl	800f0da <_ux_utility_string_length_check>
 800ce64:	60f8      	str	r0, [r7, #12]
    if (status)
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d001      	beq.n	800ce70 <_ux_host_stack_class_register+0x28>
        return(status);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	e037      	b.n	800cee0 <_ux_host_stack_class_register+0x98>
#endif

    /* Get first class.  */
    class_inst =  _ux_system_host -> ux_system_host_class_array;
 800ce70:	4b1d      	ldr	r3, [pc, #116]	; (800cee8 <_ux_host_stack_class_register+0xa0>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	617b      	str	r3, [r7, #20]

#if UX_MAX_CLASS_DRIVER > 1
    /* We need to parse the class table to find an empty spot.  */
    for (class_index = 0; class_index < _ux_system_host -> ux_system_host_max_class; class_index++)
 800ce78:	2300      	movs	r3, #0
 800ce7a:	613b      	str	r3, [r7, #16]
 800ce7c:	e024      	b.n	800cec8 <_ux_host_stack_class_register+0x80>
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_host_class_status == UX_UNUSED)
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d10e      	bne.n	800cea4 <_ux_host_stack_class_register+0x5c>
#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_host_class_name = (const UCHAR *) class_name;
#else

            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_host_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 800ce86:	6978      	ldr	r0, [r7, #20]
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	6879      	ldr	r1, [r7, #4]
 800ce90:	f001 ff36 	bl	800ed00 <_ux_utility_memory_copy>
#endif

            /* Memorize the entry function of this class.  */
            class_inst -> ux_host_class_entry_function =  class_entry_function;
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	645a      	str	r2, [r3, #68]	; 0x44

            /* Mark it as used.  */
            class_inst -> ux_host_class_status =  UX_USED;
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	641a      	str	r2, [r3, #64]	; 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 800cea0:	2300      	movs	r3, #0
 800cea2:	e01d      	b.n	800cee0 <_ux_host_stack_class_register+0x98>
           mistake. To verify this, we simple check for the class entry point.  */
        else
        {

            /* Check for an already installed class entry function.  */
            if(class_inst -> ux_host_class_entry_function == class_entry_function)
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cea8:	683a      	ldr	r2, [r7, #0]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d106      	bne.n	800cebc <_ux_host_stack_class_register+0x74>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_HOST_CLASS_ALREADY_INSTALLED);
 800ceae:	2258      	movs	r2, #88	; 0x58
 800ceb0:	2103      	movs	r1, #3
 800ceb2:	2002      	movs	r0, #2
 800ceb4:	f001 fca0 	bl	800e7f8 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_HOST_CLASS_ALREADY_INSTALLED, class_name, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Yes, return an error.  */
                return(UX_HOST_CLASS_ALREADY_INSTALLED);
 800ceb8:	2358      	movs	r3, #88	; 0x58
 800ceba:	e011      	b.n	800cee0 <_ux_host_stack_class_register+0x98>
            }
        }
#if UX_MAX_CLASS_DRIVER > 1
        /* Move to the next class.  */
        class_inst ++;
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	3358      	adds	r3, #88	; 0x58
 800cec0:	617b      	str	r3, [r7, #20]
    for (class_index = 0; class_index < _ux_system_host -> ux_system_host_max_class; class_index++)
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	3301      	adds	r3, #1
 800cec6:	613b      	str	r3, [r7, #16]
 800cec8:	4b07      	ldr	r3, [pc, #28]	; (800cee8 <_ux_host_stack_class_register+0xa0>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	693a      	ldr	r2, [r7, #16]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d3d4      	bcc.n	800ce7e <_ux_host_stack_class_register+0x36>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_ARRAY_FULL, class_name, 0, 0, UX_TRACE_ERRORS, 0, 0)

    /* Error trap. */
    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_ARRAY_FULL);
 800ced4:	221a      	movs	r2, #26
 800ced6:	2103      	movs	r1, #3
 800ced8:	2002      	movs	r0, #2
 800ceda:	f001 fc8d 	bl	800e7f8 <_ux_system_error_handler>

    /* No more entries in the class table.  */
    return(UX_MEMORY_ARRAY_FULL);
 800cede:	231a      	movs	r3, #26
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3718      	adds	r7, #24
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	2400577c 	.word	0x2400577c

0800ceec <_ux_host_stack_configuration_descriptor_parse>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_configuration_descriptor_parse(UX_DEVICE *device, UX_CONFIGURATION *configuration,
                                                                        UINT configuration_index)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b08a      	sub	sp, #40	; 0x28
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
UX_ENDPOINT     *control_endpoint;
ULONG           total_configuration_length;


    /* Retrieve the pointer to the control endpoint and its transfer_request.  */
    control_endpoint =  &device -> ux_device_control_endpoint;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	3384      	adds	r3, #132	; 0x84
 800cefc:	623b      	str	r3, [r7, #32]
    transfer_request =  &control_endpoint -> ux_endpoint_transfer_request;
 800cefe:	6a3b      	ldr	r3, [r7, #32]
 800cf00:	3330      	adds	r3, #48	; 0x30
 800cf02:	61fb      	str	r3, [r7, #28]

    /* Retrieve the size of all the configuration descriptor.  */
    total_configuration_length =  configuration -> ux_configuration_descriptor.wTotalLength;
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	695b      	ldr	r3, [r3, #20]
 800cf08:	61bb      	str	r3, [r7, #24]

    /* Allocate enough memory to read all descriptors attached to this configuration.  */
    descriptor =  _ux_utility_memory_allocate(UX_SAFE_ALIGN, UX_CACHE_SAFE_MEMORY, total_configuration_length);
 800cf0a:	69ba      	ldr	r2, [r7, #24]
 800cf0c:	2101      	movs	r1, #1
 800cf0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf12:	f001 fdf1 	bl	800eaf8 <_ux_utility_memory_allocate>
 800cf16:	6178      	str	r0, [r7, #20]

    /* Determine if the memory was allocated.  */
    if (descriptor == UX_NULL)
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d101      	bne.n	800cf22 <_ux_host_stack_configuration_descriptor_parse+0x36>
    {

        /* No, return an error.  */
        return(UX_MEMORY_INSUFFICIENT);
 800cf1e:	2312      	movs	r3, #18
 800cf20:	e028      	b.n	800cf74 <_ux_host_stack_configuration_descriptor_parse+0x88>
    }
    else
    {

        /* Create a transfer_request for the GET_DESCRIPTOR request.  */
        transfer_request -> ux_transfer_request_data_pointer =      descriptor;
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	697a      	ldr	r2, [r7, #20]
 800cf26:	609a      	str	r2, [r3, #8]
        transfer_request -> ux_transfer_request_requested_length =  total_configuration_length;
 800cf28:	69fb      	ldr	r3, [r7, #28]
 800cf2a:	69ba      	ldr	r2, [r7, #24]
 800cf2c:	60da      	str	r2, [r3, #12]
        transfer_request -> ux_transfer_request_function =          UX_GET_DESCRIPTOR;
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	2206      	movs	r2, #6
 800cf32:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_transfer_request_type =              UX_REQUEST_IN | UX_REQUEST_TYPE_STANDARD | UX_REQUEST_TARGET_DEVICE;
 800cf34:	69fb      	ldr	r3, [r7, #28]
 800cf36:	2280      	movs	r2, #128	; 0x80
 800cf38:	615a      	str	r2, [r3, #20]
        transfer_request -> ux_transfer_request_value =             configuration_index | (UINT)(UX_CONFIGURATION_DESCRIPTOR_ITEM << 8);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800cf40:	69fb      	ldr	r3, [r7, #28]
 800cf42:	61da      	str	r2, [r3, #28]
        transfer_request -> ux_transfer_request_index =             0;
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	2200      	movs	r2, #0
 800cf48:	621a      	str	r2, [r3, #32]

        /* Send request to HCD layer.  */
        status =  _ux_host_stack_transfer_request(transfer_request);
 800cf4a:	69f8      	ldr	r0, [r7, #28]
 800cf4c:	f001 fba2 	bl	800e694 <_ux_host_stack_transfer_request>
 800cf50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Check for correct transfer and entire descriptor returned.  */
        if((status == UX_SUCCESS) && (transfer_request -> ux_transfer_request_actual_length == total_configuration_length))
 800cf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d109      	bne.n	800cf6c <_ux_host_stack_configuration_descriptor_parse+0x80>
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	691b      	ldr	r3, [r3, #16]
 800cf5c:	69ba      	ldr	r2, [r7, #24]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d104      	bne.n	800cf6c <_ux_host_stack_configuration_descriptor_parse+0x80>
        {

            /* The entire descriptor now contains the configuration descriptor,
               the interface(s) descriptors, all alternate settings, endpoints
               and descriptor specific to the class. The descriptor is parsed for all interfaces.  */
            status =  _ux_host_stack_interfaces_scan(configuration, descriptor);
 800cf62:	6979      	ldr	r1, [r7, #20]
 800cf64:	68b8      	ldr	r0, [r7, #8]
 800cf66:	f000 ff65 	bl	800de34 <_ux_host_stack_interfaces_scan>
 800cf6a:	6278      	str	r0, [r7, #36]	; 0x24
        }
    }

    /* Free all used resources.  */
    _ux_utility_memory_free(descriptor);
 800cf6c:	6978      	ldr	r0, [r7, #20]
 800cf6e:	f001 fee5 	bl	800ed3c <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 800cf72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3728      	adds	r7, #40	; 0x28
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <_ux_host_stack_configuration_enumerate>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_configuration_enumerate(UX_DEVICE *device)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b08a      	sub	sp, #40	; 0x28
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]

UX_TRANSFER         *transfer_request;
UINT                status =  UX_ERROR;
 800cf84:	23ff      	movs	r3, #255	; 0xff
 800cf86:	627b      	str	r3, [r7, #36]	; 0x24

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_CONFIGURATION_ENUMERATE, device, 0, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

    /* Retrieve the pointer to the control endpoint and its transfer_request.  */
    control_endpoint =  &device -> ux_device_control_endpoint;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	3384      	adds	r3, #132	; 0x84
 800cf8c:	61fb      	str	r3, [r7, #28]
    transfer_request =  &control_endpoint -> ux_endpoint_transfer_request;
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	3330      	adds	r3, #48	; 0x30
 800cf92:	61bb      	str	r3, [r7, #24]

    /* Need to allocate memory for the configuration descriptor the first time we read 
       only the configuration descriptor when we have the configuration descriptor, we have 
       the length of the entire configuration\interface\endpoint descriptors.  */
    descriptor =  _ux_utility_memory_allocate(UX_SAFE_ALIGN, UX_CACHE_SAFE_MEMORY, UX_CONFIGURATION_DESCRIPTOR_LENGTH);
 800cf94:	2209      	movs	r2, #9
 800cf96:	2101      	movs	r1, #1
 800cf98:	f04f 30ff 	mov.w	r0, #4294967295
 800cf9c:	f001 fdac 	bl	800eaf8 <_ux_utility_memory_allocate>
 800cfa0:	6178      	str	r0, [r7, #20]
    if (descriptor == UX_NULL)
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d101      	bne.n	800cfac <_ux_host_stack_configuration_enumerate+0x30>
        return(UX_MEMORY_INSUFFICIENT);
 800cfa8:	2312      	movs	r3, #18
 800cfaa:	e05d      	b.n	800d068 <_ux_host_stack_configuration_enumerate+0xec>

    /* There maybe multiple configurations for this device.  */
    nb_configurations =  device -> ux_device_descriptor.bNumConfigurations;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cfb2:	613b      	str	r3, [r7, #16]

    /* Parse all the configurations attached to the device. We start with the first index. 
       The index and the actual configuration value may be different according to the USB specification!  */
    for (configuration_index = 0; configuration_index < nb_configurations; configuration_index++)
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	623b      	str	r3, [r7, #32]
 800cfb8:	e04e      	b.n	800d058 <_ux_host_stack_configuration_enumerate+0xdc>
    {

        /* Create a transfer_request for the GET_DESCRIPTOR request.  */
        transfer_request -> ux_transfer_request_data_pointer =      descriptor;
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	697a      	ldr	r2, [r7, #20]
 800cfbe:	609a      	str	r2, [r3, #8]
        transfer_request -> ux_transfer_request_requested_length =  UX_CONFIGURATION_DESCRIPTOR_LENGTH;
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	2209      	movs	r2, #9
 800cfc4:	60da      	str	r2, [r3, #12]
        transfer_request -> ux_transfer_request_function =          UX_GET_DESCRIPTOR;
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	2206      	movs	r2, #6
 800cfca:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_transfer_request_type =              UX_REQUEST_IN | UX_REQUEST_TYPE_STANDARD | UX_REQUEST_TARGET_DEVICE;
 800cfcc:	69bb      	ldr	r3, [r7, #24]
 800cfce:	2280      	movs	r2, #128	; 0x80
 800cfd0:	615a      	str	r2, [r3, #20]
        transfer_request -> ux_transfer_request_value =             configuration_index | (UINT)(UX_CONFIGURATION_DESCRIPTOR_ITEM << 8);
 800cfd2:	6a3b      	ldr	r3, [r7, #32]
 800cfd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	61da      	str	r2, [r3, #28]
        transfer_request -> ux_transfer_request_index =             0;
 800cfdc:	69bb      	ldr	r3, [r7, #24]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	621a      	str	r2, [r3, #32]

        /* Send request to HCD layer.  */
        status =  _ux_host_stack_transfer_request(transfer_request);
 800cfe2:	69b8      	ldr	r0, [r7, #24]
 800cfe4:	f001 fb56 	bl	800e694 <_ux_host_stack_transfer_request>
 800cfe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Check for correct transfer and entire descriptor returned.  */
        if ((status == UX_SUCCESS) && (transfer_request -> ux_transfer_request_actual_length == UX_CONFIGURATION_DESCRIPTOR_LENGTH))
 800cfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d127      	bne.n	800d040 <_ux_host_stack_configuration_enumerate+0xc4>
 800cff0:	69bb      	ldr	r3, [r7, #24]
 800cff2:	691b      	ldr	r3, [r3, #16]
 800cff4:	2b09      	cmp	r3, #9
 800cff6:	d123      	bne.n	800d040 <_ux_host_stack_configuration_enumerate+0xc4>
        {

            /* Allocate some memory for the container of this descriptor.  */
            configuration =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_CONFIGURATION));
 800cff8:	2244      	movs	r2, #68	; 0x44
 800cffa:	2100      	movs	r1, #0
 800cffc:	2000      	movs	r0, #0
 800cffe:	f001 fd7b 	bl	800eaf8 <_ux_utility_memory_allocate>
 800d002:	60f8      	str	r0, [r7, #12]

            /* Check to see if the block was allocated.  */
            if (configuration != UX_NULL)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d017      	beq.n	800d03a <_ux_host_stack_configuration_enumerate+0xbe>
            {

                /* This configuration must be linked to the device.  */
                _ux_host_stack_new_configuration_create(device, configuration);
 800d00a:	68f9      	ldr	r1, [r7, #12]
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 ff8f 	bl	800df30 <_ux_host_stack_new_configuration_create>
                
                /* The descriptor is in a packed format, parse it locally.  */      
                _ux_utility_descriptor_parse(descriptor, _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES, (UCHAR *) &configuration -> ux_configuration_descriptor);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	330c      	adds	r3, #12
                _ux_utility_descriptor_parse(descriptor, _ux_system_configuration_descriptor_structure,
 800d016:	2208      	movs	r2, #8
 800d018:	4915      	ldr	r1, [pc, #84]	; (800d070 <_ux_host_stack_configuration_enumerate+0xf4>)
 800d01a:	6978      	ldr	r0, [r7, #20]
 800d01c:	f001 fcda 	bl	800e9d4 <_ux_utility_descriptor_parse>

                /* Parse the device descriptor so that we can retrieve the length 
                    of the entire configuration.  */
                status =  _ux_host_stack_configuration_descriptor_parse(device, configuration, configuration_index);
 800d020:	6a3a      	ldr	r2, [r7, #32]
 800d022:	68f9      	ldr	r1, [r7, #12]
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f7ff ff61 	bl	800ceec <_ux_host_stack_configuration_descriptor_parse>
 800d02a:	6278      	str	r0, [r7, #36]	; 0x24

                /* Check the completion status.  */
                if (status != UX_SUCCESS)
 800d02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00e      	beq.n	800d050 <_ux_host_stack_configuration_enumerate+0xd4>
                {
                    /* Error, delete the configuration instance.  */
                    _ux_host_stack_configuration_instance_delete(configuration);
 800d032:	68f8      	ldr	r0, [r7, #12]
 800d034:	f000 f83e 	bl	800d0b4 <_ux_host_stack_configuration_instance_delete>
            if (configuration != UX_NULL)
 800d038:	e00a      	b.n	800d050 <_ux_host_stack_configuration_enumerate+0xd4>
            }
            else
            {

                /* Cannot allocate configuration memory. Abort enumeration */
                status =  UX_MEMORY_INSUFFICIENT;
 800d03a:	2312      	movs	r3, #18
 800d03c:	627b      	str	r3, [r7, #36]	; 0x24

                break;
 800d03e:	e00f      	b.n	800d060 <_ux_host_stack_configuration_enumerate+0xe4>
        }
        else
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_DESCRIPTOR_CORRUPTED);
 800d040:	2242      	movs	r2, #66	; 0x42
 800d042:	2104      	movs	r1, #4
 800d044:	2002      	movs	r0, #2
 800d046:	f001 fbd7 	bl	800e7f8 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, descriptor, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* The device descriptor does not contain the right amount of data. Maybe corruption.  */
            status =  UX_DESCRIPTOR_CORRUPTED;
 800d04a:	2342      	movs	r3, #66	; 0x42
 800d04c:	627b      	str	r3, [r7, #36]	; 0x24

            break;
 800d04e:	e007      	b.n	800d060 <_ux_host_stack_configuration_enumerate+0xe4>
            if (configuration != UX_NULL)
 800d050:	bf00      	nop
    for (configuration_index = 0; configuration_index < nb_configurations; configuration_index++)
 800d052:	6a3b      	ldr	r3, [r7, #32]
 800d054:	3301      	adds	r3, #1
 800d056:	623b      	str	r3, [r7, #32]
 800d058:	6a3a      	ldr	r2, [r7, #32]
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d3ac      	bcc.n	800cfba <_ux_host_stack_configuration_enumerate+0x3e>
        }            
        
    }

    /* Free all used resources.  */
    _ux_utility_memory_free(descriptor);
 800d060:	6978      	ldr	r0, [r7, #20]
 800d062:	f001 fe6b 	bl	800ed3c <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);             
 800d066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3728      	adds	r7, #40	; 0x28
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	24000054 	.word	0x24000054

0800d074 <_ux_host_stack_configuration_instance_create>:
/*                                            creation strategy control,  */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_configuration_instance_create(UX_CONFIGURATION *configuration)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_CONFIGURATION_INSTANCE_CREATE, configuration, 0, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

    /* Obtain the first interface for this configuration.  */
    interface_ptr =  configuration -> ux_configuration_first_interface;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d080:	60fb      	str	r3, [r7, #12]

    /* Each selected alternate setting 0 for each interface must be created.  */
    while (interface_ptr != UX_NULL)
 800d082:	e00f      	b.n	800d0a4 <_ux_host_stack_configuration_instance_create+0x30>
    {

        /* Check if we are dealing with the first alternate setting.  */
        if (interface_ptr -> ux_interface_descriptor.bAlternateSetting == 0)
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	699b      	ldr	r3, [r3, #24]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d108      	bne.n	800d09e <_ux_host_stack_configuration_instance_create+0x2a>

            /* Create the interface, if it's usable. */
            if (interface_ptr -> ux_interface_class || configuration -> ux_configuration_device -> ux_device_class)
#endif
            {
                status = _ux_host_stack_interface_instance_create(interface_ptr);
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f000 fe9f 	bl	800ddd0 <_ux_host_stack_interface_instance_create>
 800d092:	60b8      	str	r0, [r7, #8]

                /* Check status, the controller may have refused the endpoint creation.  */
                if (status != UX_SUCCESS)
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d001      	beq.n	800d09e <_ux_host_stack_configuration_instance_create+0x2a>
                
                    /* An error occurred.  The interface cannot be mounted.  */
                    return(status);
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	e006      	b.n	800d0ac <_ux_host_stack_configuration_instance_create+0x38>
            }
        }

        /* Next interface.  */
        interface_ptr =  interface_ptr -> ux_interface_next_interface;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0a2:	60fb      	str	r3, [r7, #12]
    while (interface_ptr != UX_NULL)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d1ec      	bne.n	800d084 <_ux_host_stack_configuration_instance_create+0x10>
    }

    /* Return successful completion.  */
    return(UX_SUCCESS); 
 800d0aa:	2300      	movs	r3, #0
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <_ux_host_stack_configuration_instance_delete>:
/*                                            creation strategy control,  */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_host_stack_configuration_instance_delete(UX_CONFIGURATION *configuration)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_CONFIGURATION_INSTANCE_DELETE, configuration, 0, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

    /* Obtain the first interface for this configuration.  */
    interface_ptr =  configuration -> ux_configuration_first_interface;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c0:	60fb      	str	r3, [r7, #12]
    
    /* In order to keep the compiler happy, we reset the alternate setting.  */
    current_alternate_setting =  0;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	60bb      	str	r3, [r7, #8]

    /* Each selected alternate setting for each interface must be deleted.  */
    while (interface_ptr != UX_NULL)
 800d0c6:	e011      	b.n	800d0ec <_ux_host_stack_configuration_instance_delete+0x38>
    {

        /* If this is the first alternate setting, the current alternate setting is maintained here.  */
        if (interface_ptr -> ux_interface_descriptor.bAlternateSetting == 0)
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	699b      	ldr	r3, [r3, #24]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d102      	bne.n	800d0d6 <_ux_host_stack_configuration_instance_delete+0x22>
        {

            current_alternate_setting =  interface_ptr -> ux_interface_current_alternate_setting;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	60bb      	str	r3, [r7, #8]
        }
        
        if (interface_ptr -> ux_interface_descriptor.bAlternateSetting == current_alternate_setting)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	699b      	ldr	r3, [r3, #24]
 800d0da:	68ba      	ldr	r2, [r7, #8]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d102      	bne.n	800d0e6 <_ux_host_stack_configuration_instance_delete+0x32>
#if UX_HOST_STACK_CONFIGURATION_INSTANCE_CREATE_CONTROL == UX_HOST_STACK_CONFIGURATION_INSTANCE_CREATE_OWNED

            /* If interface is usable, remove physical creates.  */
            if (interface_ptr -> ux_interface_class || configuration -> ux_configuration_device -> ux_device_class)
#endif
                _ux_host_stack_interface_instance_delete(interface_ptr);
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f000 fe91 	bl	800de08 <_ux_host_stack_interface_instance_delete>
        }

        interface_ptr =  interface_ptr -> ux_interface_next_interface;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ea:	60fb      	str	r3, [r7, #12]
    while (interface_ptr != UX_NULL)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1ea      	bne.n	800d0c8 <_ux_host_stack_configuration_instance_delete+0x14>
    }

    return; 
 800d0f2:	bf00      	nop
}
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}

0800d0fa <_ux_host_stack_configuration_interface_get>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_configuration_interface_get(UX_CONFIGURATION *configuration, 
                                                UINT interface_index, UINT alternate_setting_index,
                                                UX_INTERFACE **ux_interface)
{
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b088      	sub	sp, #32
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	60f8      	str	r0, [r7, #12]
 800d102:	60b9      	str	r1, [r7, #8]
 800d104:	607a      	str	r2, [r7, #4]
 800d106:	603b      	str	r3, [r7, #0]
UINT                container_index;
UX_INTERFACE        *current_interface;


    /* Do a sanity check on the configuration handle.  */
    if (configuration -> ux_configuration_handle != (ULONG) (ALIGN_TYPE) configuration)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681a      	ldr	r2, [r3, #0]
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	429a      	cmp	r2, r3
 800d110:	d001      	beq.n	800d116 <_ux_host_stack_configuration_interface_get+0x1c>
    {

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, configuration, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 800d112:	2351      	movs	r3, #81	; 0x51
 800d114:	e044      	b.n	800d1a0 <_ux_host_stack_configuration_interface_get+0xa6>
    }
            
    /* Start with the interface attached to the configuration.  */
    current_interface =  configuration -> ux_configuration_first_interface;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d11a:	61bb      	str	r3, [r7, #24]

    /* The first interface has the index 0 */    
    container_index =  0;
 800d11c:	2300      	movs	r3, #0
 800d11e:	61fb      	str	r3, [r7, #28]
    
    /* Reset the interface number */
    current_interface_number =  0;
 800d120:	2300      	movs	r3, #0
 800d122:	617b      	str	r3, [r7, #20]
    
    /* Traverse the list of the interfaces until we found the right one */        
    while (current_interface != UX_NULL)
 800d124:	e033      	b.n	800d18e <_ux_host_stack_configuration_interface_get+0x94>
    {

        /* Check if the interface index matches the current one.  */
        if (interface_index == container_index)
 800d126:	68ba      	ldr	r2, [r7, #8]
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d126      	bne.n	800d17c <_ux_host_stack_configuration_interface_get+0x82>
        {

            /* We have found the correct interface, now search for the alternate setting.  */
            current_interface_number =  current_interface -> ux_interface_descriptor.bInterfaceNumber;
 800d12e:	69bb      	ldr	r3, [r7, #24]
 800d130:	695b      	ldr	r3, [r3, #20]
 800d132:	617b      	str	r3, [r7, #20]

            /* The first alternate setting has the index 0.  */    
            container_index =  0;
 800d134:	2300      	movs	r3, #0
 800d136:	61fb      	str	r3, [r7, #28]

            /* Loop on all the alternate settings for this interface.  */
            while (current_interface != UX_NULL)
 800d138:	e01d      	b.n	800d176 <_ux_host_stack_configuration_interface_get+0x7c>
            {

                /* Check if the index is matched */
                if (alternate_setting_index == container_index)
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d104      	bne.n	800d14c <_ux_host_stack_configuration_interface_get+0x52>
                {

                    /* We have found the right interface/alternate setting combination. Set the
                       interface return pointer.  */
                    *ux_interface =  current_interface;
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	69ba      	ldr	r2, [r7, #24]
 800d146:	601a      	str	r2, [r3, #0]

                    /* Return success to caller.  */
                    return(UX_SUCCESS);
 800d148:	2300      	movs	r3, #0
 800d14a:	e029      	b.n	800d1a0 <_ux_host_stack_configuration_interface_get+0xa6>
                }

                /* Move to next alternate setting index.  */
                container_index++;
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	3301      	adds	r3, #1
 800d150:	61fb      	str	r3, [r7, #28]

                /* Move to the next alternate setting.   */
                current_interface =  current_interface -> ux_interface_next_interface;
 800d152:	69bb      	ldr	r3, [r7, #24]
 800d154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d156:	61bb      	str	r3, [r7, #24]

    
                /* Check new interface pointer, might be the end.  */
                if (current_interface != UX_NULL)
 800d158:	69bb      	ldr	r3, [r7, #24]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00b      	beq.n	800d176 <_ux_host_stack_configuration_interface_get+0x7c>
                {
    
                    /* And verify that we are still in the same interface.  */
                    if (current_interface -> ux_interface_descriptor.bInterfaceNumber != current_interface_number)
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	695b      	ldr	r3, [r3, #20]
 800d162:	697a      	ldr	r2, [r7, #20]
 800d164:	429a      	cmp	r2, r3
 800d166:	d006      	beq.n	800d176 <_ux_host_stack_configuration_interface_get+0x7c>
                    {

                        /* Error trap. */
                        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_INTERFACE_HANDLE_UNKNOWN);
 800d168:	2252      	movs	r2, #82	; 0x52
 800d16a:	2104      	movs	r1, #4
 800d16c:	2002      	movs	r0, #2
 800d16e:	f001 fb43 	bl	800e7f8 <_ux_system_error_handler>

                        /* If trace is enabled, insert this event into the trace buffer.  */
                        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, ux_interface, 0, 0, UX_TRACE_ERRORS, 0, 0)

                        return(UX_INTERFACE_HANDLE_UNKNOWN);
 800d172:	2352      	movs	r3, #82	; 0x52
 800d174:	e014      	b.n	800d1a0 <_ux_host_stack_configuration_interface_get+0xa6>
            while (current_interface != UX_NULL)
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d1de      	bne.n	800d13a <_ux_host_stack_configuration_interface_get+0x40>
                }
            }       
        }
        
        /* Check the current interface, we may already be at the end ... */
        if (current_interface != UX_NULL)
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d005      	beq.n	800d18e <_ux_host_stack_configuration_interface_get+0x94>
        {
        
            /* Move to the next interface.  */
            current_interface =  current_interface -> ux_interface_next_interface;
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d186:	61bb      	str	r3, [r7, #24]
        
            /* Move to the next interface index. */
            container_index++;
 800d188:	69fb      	ldr	r3, [r7, #28]
 800d18a:	3301      	adds	r3, #1
 800d18c:	61fb      	str	r3, [r7, #28]
    while (current_interface != UX_NULL)
 800d18e:	69bb      	ldr	r3, [r7, #24]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d1c8      	bne.n	800d126 <_ux_host_stack_configuration_interface_get+0x2c>
        }            
    }
    
    /* Error trap. */
    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_INTERFACE_HANDLE_UNKNOWN);
 800d194:	2252      	movs	r2, #82	; 0x52
 800d196:	2104      	movs	r1, #4
 800d198:	2002      	movs	r0, #2
 800d19a:	f001 fb2d 	bl	800e7f8 <_ux_system_error_handler>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, ux_interface, 0, 0, UX_TRACE_ERRORS, 0, 0)

    /* Didn't find the right interface/alternate setting, return an error!  */
    return(UX_INTERFACE_HANDLE_UNKNOWN);
 800d19e:	2352      	movs	r3, #82	; 0x52
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3720      	adds	r7, #32
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <_ux_host_stack_configuration_interface_scan>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_configuration_interface_scan(UX_CONFIGURATION *configuration)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b094      	sub	sp, #80	; 0x50
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
UX_HOST_CLASS_COMMAND   class_command;
UINT                    status;


    /* Initialize class owners to 0.  */
    nb_class_owners =  0;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Get the first interface container for this configuration.  */
    interface_ptr =  configuration -> ux_configuration_first_interface;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b8:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* We now scan all the alternate settings 0 for each of the interfaces.  */
    while (interface_ptr !=  UX_NULL)
 800d1ba:	e02d      	b.n	800d218 <_ux_host_stack_configuration_interface_scan+0x70>
    {

        /* Is there a default interface?  */
        if(interface_ptr -> ux_interface_descriptor.bAlternateSetting == 0)
 800d1bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1be:	699b      	ldr	r3, [r3, #24]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d126      	bne.n	800d212 <_ux_host_stack_configuration_interface_scan+0x6a>
        {

            /* We have a default interface for this configuration. Call each class
               with the class\subclass\protocol.  We include the IAD for the cdc classes.  */
            class_command.ux_host_class_command_request      =   UX_HOST_CLASS_COMMAND_QUERY;
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	60fb      	str	r3, [r7, #12]
            class_command.ux_host_class_command_container    =   (VOID *)interface_ptr;
 800d1c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1ca:	613b      	str	r3, [r7, #16]
            class_command.ux_host_class_command_usage        =   UX_HOST_CLASS_COMMAND_USAGE_CSP;
 800d1cc:	2302      	movs	r3, #2
 800d1ce:	61bb      	str	r3, [r7, #24]
            class_command.ux_host_class_command_class        =   interface_ptr -> ux_interface_descriptor.bInterfaceClass;
 800d1d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1d2:	6a1b      	ldr	r3, [r3, #32]
 800d1d4:	627b      	str	r3, [r7, #36]	; 0x24
            class_command.ux_host_class_command_subclass     =   interface_ptr -> ux_interface_descriptor.bInterfaceSubClass;
 800d1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1da:	62bb      	str	r3, [r7, #40]	; 0x28
            class_command.ux_host_class_command_protocol     =   interface_ptr -> ux_interface_descriptor.bInterfaceProtocol;
 800d1dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
            class_command.ux_host_class_command_iad_class    =   interface_ptr -> ux_interface_iad_class   ;
 800d1e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1e6:	633b      	str	r3, [r7, #48]	; 0x30
            class_command.ux_host_class_command_iad_subclass =   interface_ptr -> ux_interface_iad_subclass;
 800d1e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1ec:	637b      	str	r3, [r7, #52]	; 0x34
            class_command.ux_host_class_command_iad_protocol =   interface_ptr -> ux_interface_iad_protocol;
 800d1ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1f2:	63bb      	str	r3, [r7, #56]	; 0x38

            class_ptr =  _ux_host_stack_class_call(&class_command);
 800d1f4:	f107 030c 	add.w	r3, r7, #12
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7ff fd3b 	bl	800cc74 <_ux_host_stack_class_call>
 800d1fe:	6438      	str	r0, [r7, #64]	; 0x40

            /* On return, either we have found a class or the interface is still an orphan.  */
            if (class_ptr != UX_NULL)
 800d200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d202:	2b00      	cmp	r3, #0
 800d204:	d005      	beq.n	800d212 <_ux_host_stack_configuration_interface_scan+0x6a>
            {

                /* There is a class.  */
                nb_class_owners++;
 800d206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d208:	3301      	adds	r3, #1
 800d20a:	64bb      	str	r3, [r7, #72]	; 0x48
                interface_ptr -> ux_interface_class =  class_ptr;
 800d20c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d20e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d210:	631a      	str	r2, [r3, #48]	; 0x30
            }
        }

        /* point to the next interface until end of the list.  */
        interface_ptr =  interface_ptr -> ux_interface_next_interface;
 800d212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d216:	64fb      	str	r3, [r7, #76]	; 0x4c
    while (interface_ptr !=  UX_NULL)
 800d218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d1ce      	bne.n	800d1bc <_ux_host_stack_configuration_interface_scan+0x14>
    status = (nb_class_owners > 0) ? UX_SUCCESS : UX_NO_CLASS_MATCH;
    return(status);
#else

    /* Assume no classes.  */
    status = UX_NO_CLASS_MATCH;
 800d21e:	2357      	movs	r3, #87	; 0x57
 800d220:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check the number of class owner found.  */
    if (nb_class_owners != 0)
 800d222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d224:	2b00      	cmp	r3, #0
 800d226:	d027      	beq.n	800d278 <_ux_host_stack_configuration_interface_scan+0xd0>
    {

        /* If we have found one or more classes for any of the interfaces,
           we can safely do a SET_CONFIGURATION of the device.  */
        status =  _ux_host_stack_device_configuration_select(configuration);
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 f917 	bl	800d45c <_ux_host_stack_device_configuration_select>
 800d22e:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check the completion status.  */
        if (status == UX_SUCCESS)
 800d230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d232:	2b00      	cmp	r3, #0
 800d234:	d120      	bne.n	800d278 <_ux_host_stack_configuration_interface_scan+0xd0>
        {

            /* The device is in the CONFIGURED state, we have to call each of the classes
               again with an ACTIVATE signal.  */
            interface_ptr =  configuration -> ux_configuration_first_interface;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d23a:	64fb      	str	r3, [r7, #76]	; 0x4c

            while (interface_ptr != UX_NULL)
 800d23c:	e019      	b.n	800d272 <_ux_host_stack_configuration_interface_scan+0xca>
            {

                /* Is there a default interface?  */
                if (interface_ptr -> ux_interface_descriptor.bAlternateSetting == 0)
 800d23e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d240:	699b      	ldr	r3, [r3, #24]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d112      	bne.n	800d26c <_ux_host_stack_configuration_interface_scan+0xc4>
                {

                    /* We have found the default interface. If this interface is owned,
                       activate its class.  */
                    class_command.ux_host_class_command_request =    UX_HOST_CLASS_COMMAND_ACTIVATE;
 800d246:	2302      	movs	r3, #2
 800d248:	60fb      	str	r3, [r7, #12]
                    class_command.ux_host_class_command_container =  (VOID *) interface_ptr;
 800d24a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d24c:	613b      	str	r3, [r7, #16]

                    if (interface_ptr -> ux_interface_class != UX_NULL)
 800d24e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d252:	2b00      	cmp	r3, #0
 800d254:	d00a      	beq.n	800d26c <_ux_host_stack_configuration_interface_scan+0xc4>
                    {

                        /* Save the class in the command container */
                        class_command.ux_host_class_command_class_ptr =  interface_ptr -> ux_interface_class;
 800d256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d25a:	63fb      	str	r3, [r7, #60]	; 0x3c

                        /* Send the ACTIVATE command to the class */
                        status =  interface_ptr -> ux_interface_class -> ux_host_class_entry_function(&class_command);
 800d25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d262:	f107 020c 	add.w	r2, r7, #12
 800d266:	4610      	mov	r0, r2
 800d268:	4798      	blx	r3
 800d26a:	6478      	str	r0, [r7, #68]	; 0x44

                    }
                }

                /* Point to the next interface until end of the list.  */
                interface_ptr =  interface_ptr -> ux_interface_next_interface;
 800d26c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d270:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (interface_ptr != UX_NULL)
 800d272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d274:	2b00      	cmp	r3, #0
 800d276:	d1e2      	bne.n	800d23e <_ux_host_stack_configuration_interface_scan+0x96>
            }
        }
    }

    /* Return operation result.  */
    return(status);
 800d278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
#endif
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3750      	adds	r7, #80	; 0x50
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <_ux_host_stack_configuration_set>:
/*                                            set device power source,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_configuration_set(UX_CONFIGURATION *configuration)
{
 800d282:	b580      	push	{r7, lr}
 800d284:	b086      	sub	sp, #24
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
#endif


    /* A configuration is selected. Retrieve the pointer to the control endpoint 
       and its transfer request.  */
    device =            configuration -> ux_configuration_device;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d28e:	617b      	str	r3, [r7, #20]
    control_endpoint =  &device -> ux_device_control_endpoint;
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	3384      	adds	r3, #132	; 0x84
 800d294:	613b      	str	r3, [r7, #16]
    transfer_request =  &control_endpoint -> ux_endpoint_transfer_request;
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	3330      	adds	r3, #48	; 0x30
 800d29a:	60fb      	str	r3, [r7, #12]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_CONFIGURATION_SET, configuration, 0, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

    /* Create a transfer_request for the SET_CONFIGURATION request. No data for this request.  */
    transfer_request -> ux_transfer_request_requested_length =  0;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	60da      	str	r2, [r3, #12]
    transfer_request -> ux_transfer_request_function =          UX_SET_CONFIGURATION;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2209      	movs	r2, #9
 800d2a6:	619a      	str	r2, [r3, #24]
    transfer_request -> ux_transfer_request_type =              UX_REQUEST_OUT | UX_REQUEST_TYPE_STANDARD | UX_REQUEST_TARGET_DEVICE;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_transfer_request_value =             (USHORT) configuration -> ux_configuration_descriptor.bConfigurationValue;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	69db      	ldr	r3, [r3, #28]
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	61da      	str	r2, [r3, #28]
    transfer_request -> ux_transfer_request_index =             0;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	621a      	str	r2, [r3, #32]

    /* Tend to be blocking after enumeration done.  */
#endif

    /* Send request to HCD layer.  */
    status =  _ux_host_stack_transfer_request(transfer_request);
 800d2c0:	68f8      	ldr	r0, [r7, #12]
 800d2c2:	f001 f9e7 	bl	800e694 <_ux_host_stack_transfer_request>
 800d2c6:	60b8      	str	r0, [r7, #8]

    /* Check completion status.  */
    if(status == UX_SUCCESS)
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d110      	bne.n	800d2f0 <_ux_host_stack_configuration_set+0x6e>
    {

        /* Change the device state to configured.  */
        device -> ux_device_state =  UX_DEVICE_CONFIGURED;
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	2203      	movs	r2, #3
 800d2d2:	609a      	str	r2, [r3, #8]
    
        /* Store the new configuration value in the device container.  */
        device -> ux_device_current_configuration =  configuration;
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	687a      	ldr	r2, [r7, #4]
 800d2d8:	619a      	str	r2, [r3, #24]

        /* Save current device power source.  */
        device -> ux_device_power_source = (configuration ->
                                            ux_configuration_descriptor.bmAttributes &
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
                                            UX_CONFIGURATION_DEVICE_SELF_POWERED) ?
                                UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d001      	beq.n	800d2ea <_ux_host_stack_configuration_set+0x68>
 800d2e6:	2202      	movs	r2, #2
 800d2e8:	e000      	b.n	800d2ec <_ux_host_stack_configuration_set+0x6a>
 800d2ea:	2201      	movs	r2, #1
        device -> ux_device_power_source = (configuration ->
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	615a      	str	r2, [r3, #20]
    }

    /* Return status to caller.  */
    return(status);
 800d2f0:	68bb      	ldr	r3, [r7, #8]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3718      	adds	r7, #24
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
	...

0800d2fc <_ux_host_stack_device_address_set>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_device_address_set(UX_DEVICE *device)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b08a      	sub	sp, #40	; 0x28
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]


UINT            status = UX_ERROR;
 800d304:	23ff      	movs	r3, #255	; 0xff
 800d306:	627b      	str	r3, [r7, #36]	; 0x24
UINT            address_bit_index;
UCHAR           device_address_byte;
#endif

    /* Retrieve the pointer to the control endpoint.  */
    control_endpoint =  &device -> ux_device_control_endpoint;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	3384      	adds	r3, #132	; 0x84
 800d30c:	617b      	str	r3, [r7, #20]

    /* Retrieve the transfer request pointer.  */
    transfer_request =  &control_endpoint -> ux_endpoint_transfer_request;
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	3330      	adds	r3, #48	; 0x30
 800d312:	613b      	str	r3, [r7, #16]

    /* Initialize device address to 1.  */
    device_address =  1;
 800d314:	2301      	movs	r3, #1
 800d316:	847b      	strh	r3, [r7, #34]	; 0x22

#if UX_MAX_DEVICES > 1

    /* We need the HCD pointer as well.  */
    hcd = UX_DEVICE_HCD_GET(device);
 800d318:	4b35      	ldr	r3, [pc, #212]	; (800d3f0 <_ux_host_stack_device_address_set+0xf4>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	60fb      	str	r3, [r7, #12]

    /* Calculate the new address of this device. We start with address 1.  */
    for (address_byte_index = 0; address_byte_index < 16; address_byte_index++)
 800d320:	2300      	movs	r3, #0
 800d322:	61fb      	str	r3, [r7, #28]
 800d324:	e030      	b.n	800d388 <_ux_host_stack_device_address_set+0x8c>
    {

        /* Get the address mask byte.  */
        device_address_byte =  hcd -> ux_hcd_address[address_byte_index];
 800d326:	68fa      	ldr	r2, [r7, #12]
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	4413      	add	r3, r2
 800d32c:	3378      	adds	r3, #120	; 0x78
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	72fb      	strb	r3, [r7, #11]

        /* Scan each bit for an empty spot.  */
        for (address_bit_index = 0; address_bit_index < 8; address_bit_index++)
 800d332:	2300      	movs	r3, #0
 800d334:	61bb      	str	r3, [r7, #24]
 800d336:	e01e      	b.n	800d376 <_ux_host_stack_device_address_set+0x7a>
        {

            if ((device_address_byte & (1 << address_bit_index)) == 0)
 800d338:	7afa      	ldrb	r2, [r7, #11]
 800d33a:	69bb      	ldr	r3, [r7, #24]
 800d33c:	fa42 f303 	asr.w	r3, r2, r3
 800d340:	f003 0301 	and.w	r3, r3, #1
 800d344:	2b00      	cmp	r3, #0
 800d346:	d110      	bne.n	800d36a <_ux_host_stack_device_address_set+0x6e>
            {

                /* We have found an empty spot. Reserve this address.  */
                device_address_byte = (UCHAR)((UCHAR)device_address_byte | (UCHAR)(1 << address_bit_index));
 800d348:	2201      	movs	r2, #1
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	fa02 f303 	lsl.w	r3, r2, r3
 800d350:	b2da      	uxtb	r2, r3
 800d352:	7afb      	ldrb	r3, [r7, #11]
 800d354:	4313      	orrs	r3, r2
 800d356:	72fb      	strb	r3, [r7, #11]

                /* Store the address mask byte.  */
                hcd -> ux_hcd_address[address_byte_index] =  device_address_byte;
 800d358:	68fa      	ldr	r2, [r7, #12]
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	4413      	add	r3, r2
 800d35e:	3378      	adds	r3, #120	; 0x78
 800d360:	7afa      	ldrb	r2, [r7, #11]
 800d362:	701a      	strb	r2, [r3, #0]

                /* OK, apply address.  */
                status = UX_SUCCESS;
 800d364:	2300      	movs	r3, #0
 800d366:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800d368:	e008      	b.n	800d37c <_ux_host_stack_device_address_set+0x80>
            }

            /* This address was already taken, increment to the next address.  */
            device_address++;
 800d36a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d36c:	3301      	adds	r3, #1
 800d36e:	847b      	strh	r3, [r7, #34]	; 0x22
        for (address_bit_index = 0; address_bit_index < 8; address_bit_index++)
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	3301      	adds	r3, #1
 800d374:	61bb      	str	r3, [r7, #24]
 800d376:	69bb      	ldr	r3, [r7, #24]
 800d378:	2b07      	cmp	r3, #7
 800d37a:	d9dd      	bls.n	800d338 <_ux_host_stack_device_address_set+0x3c>
        }

        /* If address found, break the loop.  */
        if (status == UX_SUCCESS)
 800d37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d006      	beq.n	800d390 <_ux_host_stack_device_address_set+0x94>
    for (address_byte_index = 0; address_byte_index < 16; address_byte_index++)
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	3301      	adds	r3, #1
 800d386:	61fb      	str	r3, [r7, #28]
 800d388:	69fb      	ldr	r3, [r7, #28]
 800d38a:	2b0f      	cmp	r3, #15
 800d38c:	d9cb      	bls.n	800d326 <_ux_host_stack_device_address_set+0x2a>
 800d38e:	e000      	b.n	800d392 <_ux_host_stack_device_address_set+0x96>
        {
            break;
 800d390:	bf00      	nop
        }
    }
    if (status == UX_ERROR)
 800d392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d394:	2bff      	cmp	r3, #255	; 0xff
 800d396:	d101      	bne.n	800d39c <_ux_host_stack_device_address_set+0xa0>

        /* We should never get here!  */
        return(UX_ERROR);
 800d398:	23ff      	movs	r3, #255	; 0xff
 800d39a:	e024      	b.n	800d3e6 <_ux_host_stack_device_address_set+0xea>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_DEVICE_ADDRESS_SET, device, device_address, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

    /* Create a transfer request for the SET_ADDRESS request.  */
    transfer_request -> ux_transfer_request_data_pointer =      UX_NULL;
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	609a      	str	r2, [r3, #8]
    transfer_request -> ux_transfer_request_requested_length =  0;
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	60da      	str	r2, [r3, #12]
    transfer_request -> ux_transfer_request_function =          UX_SET_ADDRESS;
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	2205      	movs	r2, #5
 800d3ac:	619a      	str	r2, [r3, #24]
    transfer_request -> ux_transfer_request_type =              UX_REQUEST_OUT | UX_REQUEST_TYPE_STANDARD | UX_REQUEST_TARGET_DEVICE;
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_transfer_request_value =             device_address;
 800d3b4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	61da      	str	r2, [r3, #28]
    transfer_request -> ux_transfer_request_index =             0;
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	621a      	str	r2, [r3, #32]
    status = UX_SUCCESS;
    return(status);
#else

    /* Send request to HCD layer.  */
    status =  _ux_host_stack_transfer_request(transfer_request);
 800d3c0:	6938      	ldr	r0, [r7, #16]
 800d3c2:	f001 f967 	bl	800e694 <_ux_host_stack_transfer_request>
 800d3c6:	6278      	str	r0, [r7, #36]	; 0x24

    /* Now, this address will be the one used in future transfers.  The transfer may have failed and therefore
        all the device resources including the new address will be free.*/
    device -> ux_device_address =  (ULONG) device_address;
 800d3c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	60da      	str	r2, [r3, #12]

    /* Check completion status.  */
    if (status == UX_SUCCESS)
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d107      	bne.n	800d3e4 <_ux_host_stack_device_address_set+0xe8>
    {

        /* Mark the device as ADDRESSED now.  */
        device -> ux_device_state = UX_DEVICE_ADDRESSED;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2202      	movs	r2, #2
 800d3d8:	609a      	str	r2, [r3, #8]

        /* Some devices need some time to accept this address.  */
        _ux_utility_delay_ms(UX_DEVICE_ADDRESS_SET_WAIT);
 800d3da:	2032      	movs	r0, #50	; 0x32
 800d3dc:	f001 fae0 	bl	800e9a0 <_ux_utility_delay_ms>

        /* Return successful status.  */
        return(status);
 800d3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e2:	e000      	b.n	800d3e6 <_ux_host_stack_device_address_set+0xea>
    {

        /* We have an error at the first device transaction. This is mostly
            due to the device having failed on the reset after power up.
            we will try again either at the root hub or regular hub. */   
        return(status);
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
#endif
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3728      	adds	r7, #40	; 0x28
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	2400577c 	.word	0x2400577c

0800d3f4 <_ux_host_stack_device_configuration_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_device_configuration_get(UX_DEVICE *device, UINT configuration_index,
                                                        UX_CONFIGURATION **configuration)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b086      	sub	sp, #24
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	607a      	str	r2, [r7, #4]

UINT                    current_configuration_index;
UX_CONFIGURATION        *current_configuration;

    /* Do a sanity check on the device handle.  */
    if (device -> ux_device_handle != (ULONG) (ALIGN_TYPE) device)
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	429a      	cmp	r2, r3
 800d408:	d006      	beq.n	800d418 <_ux_host_stack_device_configuration_get+0x24>
    {
        
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_DEVICE_HANDLE_UNKNOWN);
 800d40a:	2250      	movs	r2, #80	; 0x50
 800d40c:	2104      	movs	r1, #4
 800d40e:	2002      	movs	r0, #2
 800d410:	f001 f9f2 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DEVICE_HANDLE_UNKNOWN, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_DEVICE_HANDLE_UNKNOWN);
 800d414:	2350      	movs	r3, #80	; 0x50
 800d416:	e01d      	b.n	800d454 <_ux_host_stack_device_configuration_get+0x60>
    }
        
    /* Start with the configuration attached to the device.  */
    current_configuration =  device -> ux_device_first_configuration;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d41c:	613b      	str	r3, [r7, #16]

    /* The first configuration has the index 0.  */    
    current_configuration_index =  0;
 800d41e:	2300      	movs	r3, #0
 800d420:	617b      	str	r3, [r7, #20]
    
    /* Traverse the list of the configurations until we found the right one.  */        
    while (current_configuration != UX_NULL)
 800d422:	e00e      	b.n	800d442 <_ux_host_stack_device_configuration_get+0x4e>
    {

        /* Check if the configuration index matches the current one.  */
        if (configuration_index == current_configuration_index)
 800d424:	68ba      	ldr	r2, [r7, #8]
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d104      	bne.n	800d436 <_ux_host_stack_device_configuration_get+0x42>
        {

            /* Return the configuration pointer.  */
            *configuration =  current_configuration;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	693a      	ldr	r2, [r7, #16]
 800d430:	601a      	str	r2, [r3, #0]

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_DEVICE_CONFIGURATION_GET, device, current_configuration, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

            /* Return successful completion.  */
            return(UX_SUCCESS);
 800d432:	2300      	movs	r3, #0
 800d434:	e00e      	b.n	800d454 <_ux_host_stack_device_configuration_get+0x60>
        }
        
        /* Move to the next configuration.  */
        current_configuration =  current_configuration -> ux_configuration_next_configuration;
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d43a:	613b      	str	r3, [r7, #16]
        
        /* Move to the next index.  */
        current_configuration_index++;
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	3301      	adds	r3, #1
 800d440:	617b      	str	r3, [r7, #20]
    while (current_configuration != UX_NULL)
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d1ed      	bne.n	800d424 <_ux_host_stack_device_configuration_get+0x30>
    }
    
    /* Error trap. */
    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_CONFIGURATION_HANDLE_UNKNOWN);
 800d448:	2251      	movs	r2, #81	; 0x51
 800d44a:	2104      	movs	r1, #4
 800d44c:	2002      	movs	r0, #2
 800d44e:	f001 f9d3 	bl	800e7f8 <_ux_system_error_handler>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, configuration, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
    /* Return an error.  */
    return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 800d452:	2351      	movs	r3, #81	; 0x51
}
 800d454:	4618      	mov	r0, r3
 800d456:	3718      	adds	r7, #24
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <_ux_host_stack_device_configuration_select>:
/*                                            refine power usage check,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_device_configuration_select(UX_CONFIGURATION *configuration)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b086      	sub	sp, #24
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
UX_DEVICE               *device;
UX_CONFIGURATION        *current_configuration;
UINT                    status;
    
    /* Check for validity of the configuration handle.  */
    if (configuration -> ux_configuration_handle != (ULONG) (ALIGN_TYPE) configuration)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d006      	beq.n	800d47c <_ux_host_stack_device_configuration_select+0x20>
    {
    
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_CONFIGURATION_HANDLE_UNKNOWN);
 800d46e:	2251      	movs	r2, #81	; 0x51
 800d470:	2104      	movs	r1, #4
 800d472:	2002      	movs	r0, #2
 800d474:	f001 f9c0 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, configuration, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 800d478:	2351      	movs	r3, #81	; 0x51
 800d47a:	e02e      	b.n	800d4da <_ux_host_stack_device_configuration_select+0x7e>
    }

    /* Get the device container for this configuration.  */       
    device =  configuration -> ux_configuration_device;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d480:	617b      	str	r3, [r7, #20]
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_DEVICE_CONFIGURATION_SELECT, device, configuration, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

    /* We need to check the amount of power the bus powered device is consuming
       before switch configuration. Otherwise we may run the risk of
       an over current fault. */
    if (((configuration -> ux_configuration_descriptor.bmAttributes & UX_CONFIGURATION_DEVICE_SELF_POWERED) == 0) &&
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d10d      	bne.n	800d4aa <_ux_host_stack_device_configuration_select+0x4e>
         (configuration -> ux_configuration_descriptor.MaxPower > UX_DEVICE_MAX_POWER_GET(device)))
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
    if (((configuration -> ux_configuration_descriptor.bmAttributes & UX_CONFIGURATION_DEVICE_SELF_POWERED) == 0) &&
 800d498:	429a      	cmp	r2, r3
 800d49a:	d906      	bls.n	800d4aa <_ux_host_stack_device_configuration_select+0x4e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_OVER_CURRENT_CONDITION);
 800d49c:	2243      	movs	r2, #67	; 0x43
 800d49e:	2104      	movs	r1, #4
 800d4a0:	2002      	movs	r0, #2
 800d4a2:	f001 f9a9 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_OVER_CURRENT_CONDITION, configuration, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_OVER_CURRENT_CONDITION);
 800d4a6:	2343      	movs	r3, #67	; 0x43
 800d4a8:	e017      	b.n	800d4da <_ux_host_stack_device_configuration_select+0x7e>
    }

    /* Check for the state of the device . If the device is already configured, 
       we need to cancel the existing configuration before enabling this one.   */
    if (device -> ux_device_state == UX_DEVICE_CONFIGURED)
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	689b      	ldr	r3, [r3, #8]
 800d4ae:	2b03      	cmp	r3, #3
 800d4b0:	d105      	bne.n	800d4be <_ux_host_stack_device_configuration_select+0x62>
    {

        /* The device is configured. Get the first configuration pointer.  */
        current_configuration =  device -> ux_device_current_configuration;
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	699b      	ldr	r3, [r3, #24]
 800d4b6:	613b      	str	r3, [r7, #16]

        /* Deselect this instance */
        _ux_host_stack_configuration_instance_delete(current_configuration);
 800d4b8:	6938      	ldr	r0, [r7, #16]
 800d4ba:	f7ff fdfb 	bl	800d0b4 <_ux_host_stack_configuration_instance_delete>
    }

    /* The device can now be configured.  */
    status =  _ux_host_stack_configuration_set(configuration);
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f7ff fedf 	bl	800d282 <_ux_host_stack_configuration_set>
 800d4c4:	60f8      	str	r0, [r7, #12]
    if (status != UX_SUCCESS)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d001      	beq.n	800d4d0 <_ux_host_stack_device_configuration_select+0x74>
        return(status);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	e004      	b.n	800d4da <_ux_host_stack_device_configuration_select+0x7e>

    /* Create the configuration instance.  */
    status =  _ux_host_stack_configuration_instance_create(configuration);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f7ff fdcf 	bl	800d074 <_ux_host_stack_configuration_instance_create>
 800d4d6:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3718      	adds	r7, #24
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
	...

0800d4e4 <_ux_host_stack_device_descriptor_read>:
/*                                            added class code checking,  */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_device_descriptor_read(UX_DEVICE *device)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b086      	sub	sp, #24
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_DEVICE_DESCRIPTOR_READ, device, 0, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

    /* Retrieve the pointer to the control endpoint.  */
    control_endpoint =  &device -> ux_device_control_endpoint;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	3384      	adds	r3, #132	; 0x84
 800d4f0:	613b      	str	r3, [r7, #16]
    transfer_request =  &control_endpoint -> ux_endpoint_transfer_request;
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	3330      	adds	r3, #48	; 0x30
 800d4f6:	60fb      	str	r3, [r7, #12]

    /* Need to allocate memory for the descriptor.  */
    descriptor =  _ux_utility_memory_allocate(UX_SAFE_ALIGN, UX_CACHE_SAFE_MEMORY, UX_DEVICE_DESCRIPTOR_LENGTH);
 800d4f8:	2212      	movs	r2, #18
 800d4fa:	2101      	movs	r1, #1
 800d4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d500:	f001 fafa 	bl	800eaf8 <_ux_utility_memory_allocate>
 800d504:	60b8      	str	r0, [r7, #8]
    if (descriptor == UX_NULL)
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d101      	bne.n	800d510 <_ux_host_stack_device_descriptor_read+0x2c>
        return(UX_MEMORY_INSUFFICIENT);
 800d50c:	2312      	movs	r3, #18
 800d50e:	e078      	b.n	800d602 <_ux_host_stack_device_descriptor_read+0x11e>

    /* Create a transfer_request for the GET_DESCRIPTOR request. The first transfer_request asks 
       for the first 8 bytes only. This way we will know the real MaxPacketSize
       value for the control endpoint.  */
    transfer_request -> ux_transfer_request_data_pointer =      descriptor;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	68ba      	ldr	r2, [r7, #8]
 800d514:	609a      	str	r2, [r3, #8]
    transfer_request -> ux_transfer_request_requested_length =  8;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2208      	movs	r2, #8
 800d51a:	60da      	str	r2, [r3, #12]
    transfer_request -> ux_transfer_request_function =          UX_GET_DESCRIPTOR;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2206      	movs	r2, #6
 800d520:	619a      	str	r2, [r3, #24]
    transfer_request -> ux_transfer_request_type =              UX_REQUEST_IN | UX_REQUEST_TYPE_STANDARD | UX_REQUEST_TARGET_DEVICE;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2280      	movs	r2, #128	; 0x80
 800d526:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_transfer_request_value =             UX_DEVICE_DESCRIPTOR_ITEM << 8;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d52e:	61da      	str	r2, [r3, #28]
    transfer_request -> ux_transfer_request_index =             0;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2200      	movs	r2, #0
 800d534:	621a      	str	r2, [r3, #32]
    status = UX_SUCCESS;
    return(status);
#else

    /* Send request to HCD layer.  */
    status =  _ux_host_stack_transfer_request(transfer_request);
 800d536:	68f8      	ldr	r0, [r7, #12]
 800d538:	f001 f8ac 	bl	800e694 <_ux_host_stack_transfer_request>
 800d53c:	6178      	str	r0, [r7, #20]

    /* Check for correct transfer and entire descriptor returned.  */
    if ((status == UX_SUCCESS) && (transfer_request -> ux_transfer_request_actual_length == 8))
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d10f      	bne.n	800d564 <_ux_host_stack_device_descriptor_read+0x80>
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	2b08      	cmp	r3, #8
 800d54a:	d10b      	bne.n	800d564 <_ux_host_stack_device_descriptor_read+0x80>
    {

        /* Parse the device descriptor and create the local descriptor.  */
        _ux_utility_descriptor_parse(descriptor, _ux_system_device_descriptor_structure, UX_DEVICE_DESCRIPTOR_ENTRIES,
                                                                                (UCHAR *) &device -> ux_device_descriptor);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	334c      	adds	r3, #76	; 0x4c
        _ux_utility_descriptor_parse(descriptor, _ux_system_device_descriptor_structure, UX_DEVICE_DESCRIPTOR_ENTRIES,
 800d550:	220e      	movs	r2, #14
 800d552:	492e      	ldr	r1, [pc, #184]	; (800d60c <_ux_host_stack_device_descriptor_read+0x128>)
 800d554:	68b8      	ldr	r0, [r7, #8]
 800d556:	f001 fa3d 	bl	800e9d4 <_ux_utility_descriptor_parse>
        /* Return completion status.  */
        return(status);             
    }

    /* Validate the bMaxPacketSize0.  */
    if (device -> ux_device_descriptor.bMaxPacketSize0 != 8 &&
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d55e:	2b08      	cmp	r3, #8
 800d560:	d105      	bne.n	800d56e <_ux_host_stack_device_descriptor_read+0x8a>
 800d562:	e015      	b.n	800d590 <_ux_host_stack_device_descriptor_read+0xac>
        _ux_utility_memory_free(descriptor);
 800d564:	68b8      	ldr	r0, [r7, #8]
 800d566:	f001 fbe9 	bl	800ed3c <_ux_utility_memory_free>
        return(status);             
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	e049      	b.n	800d602 <_ux_host_stack_device_descriptor_read+0x11e>
        device -> ux_device_descriptor.bMaxPacketSize0 != 16 &&
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    if (device -> ux_device_descriptor.bMaxPacketSize0 != 8 &&
 800d572:	2b10      	cmp	r3, #16
 800d574:	d00c      	beq.n	800d590 <_ux_host_stack_device_descriptor_read+0xac>
        device -> ux_device_descriptor.bMaxPacketSize0 != 32 &&
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
        device -> ux_device_descriptor.bMaxPacketSize0 != 16 &&
 800d57a:	2b20      	cmp	r3, #32
 800d57c:	d008      	beq.n	800d590 <_ux_host_stack_device_descriptor_read+0xac>
        device -> ux_device_descriptor.bMaxPacketSize0 != 64)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
        device -> ux_device_descriptor.bMaxPacketSize0 != 32 &&
 800d582:	2b40      	cmp	r3, #64	; 0x40
 800d584:	d004      	beq.n	800d590 <_ux_host_stack_device_descriptor_read+0xac>
    {
        _ux_utility_memory_free(descriptor);
 800d586:	68b8      	ldr	r0, [r7, #8]
 800d588:	f001 fbd8 	bl	800ed3c <_ux_utility_memory_free>
        return(UX_DESCRIPTOR_CORRUPTED);
 800d58c:	2342      	movs	r3, #66	; 0x42
 800d58e:	e038      	b.n	800d602 <_ux_host_stack_device_descriptor_read+0x11e>
        return(UX_DESCRIPTOR_CORRUPTED);
    }
#endif

    /* Update the max packet size value for the endpoint.  */
    control_endpoint -> ux_endpoint_descriptor.wMaxPacketSize =  device -> ux_device_descriptor.bMaxPacketSize0;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	61da      	str	r2, [r3, #28]

    /* Create a transfer_request for the GET_DESCRIPTOR request. This time, we have the complete length */
    transfer_request -> ux_transfer_request_data_pointer =      descriptor;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	68ba      	ldr	r2, [r7, #8]
 800d59c:	609a      	str	r2, [r3, #8]
    transfer_request -> ux_transfer_request_requested_length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2212      	movs	r2, #18
 800d5a2:	60da      	str	r2, [r3, #12]
    transfer_request -> ux_transfer_request_function =          UX_GET_DESCRIPTOR;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2206      	movs	r2, #6
 800d5a8:	619a      	str	r2, [r3, #24]
    transfer_request -> ux_transfer_request_type =              UX_REQUEST_IN | UX_REQUEST_TYPE_STANDARD | UX_REQUEST_TARGET_DEVICE;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2280      	movs	r2, #128	; 0x80
 800d5ae:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_transfer_request_value =             UX_DEVICE_DESCRIPTOR_ITEM << 8;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d5b6:	61da      	str	r2, [r3, #28]
    transfer_request -> ux_transfer_request_index =             0;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	621a      	str	r2, [r3, #32]
    transfer_request -> ux_transfer_request_packet_length =     device -> ux_device_descriptor.bMaxPacketSize0;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Send request to HCD layer.  */
    status =  _ux_host_stack_transfer_request(transfer_request);
 800d5c6:	68f8      	ldr	r0, [r7, #12]
 800d5c8:	f001 f864 	bl	800e694 <_ux_host_stack_transfer_request>
 800d5cc:	6178      	str	r0, [r7, #20]

    /* Check for correct transfer and entire descriptor returned.  */
    if ((status == UX_SUCCESS) && (transfer_request -> ux_transfer_request_actual_length == UX_DEVICE_DESCRIPTOR_LENGTH))
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d10b      	bne.n	800d5ec <_ux_host_stack_device_descriptor_read+0x108>
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	691b      	ldr	r3, [r3, #16]
 800d5d8:	2b12      	cmp	r3, #18
 800d5da:	d107      	bne.n	800d5ec <_ux_host_stack_device_descriptor_read+0x108>
    {

        /* Parse the device descriptor and create the local descriptor.  */
        _ux_utility_descriptor_parse(descriptor, _ux_system_device_descriptor_structure, UX_DEVICE_DESCRIPTOR_ENTRIES,
                                                                    (UCHAR *) &device -> ux_device_descriptor);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	334c      	adds	r3, #76	; 0x4c
        _ux_utility_descriptor_parse(descriptor, _ux_system_device_descriptor_structure, UX_DEVICE_DESCRIPTOR_ENTRIES,
 800d5e0:	220e      	movs	r2, #14
 800d5e2:	490a      	ldr	r1, [pc, #40]	; (800d60c <_ux_host_stack_device_descriptor_read+0x128>)
 800d5e4:	68b8      	ldr	r0, [r7, #8]
 800d5e6:	f001 f9f5 	bl	800e9d4 <_ux_utility_descriptor_parse>
 800d5ea:	e006      	b.n	800d5fa <_ux_host_stack_device_descriptor_read+0x116>
    }
    else
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_DESCRIPTOR_CORRUPTED);
 800d5ec:	2242      	movs	r2, #66	; 0x42
 800d5ee:	2104      	movs	r1, #4
 800d5f0:	2002      	movs	r0, #2
 800d5f2:	f001 f901 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, descriptor, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* The device descriptor does not contain the right amount of data. Maybe corruption.  */
        status =  UX_DESCRIPTOR_CORRUPTED;
 800d5f6:	2342      	movs	r3, #66	; 0x42
 800d5f8:	617b      	str	r3, [r7, #20]
    }
    
    /* Free all used resources.  */
    _ux_utility_memory_free(descriptor);
 800d5fa:	68b8      	ldr	r0, [r7, #8]
 800d5fc:	f001 fb9e 	bl	800ed3c <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 800d600:	697b      	ldr	r3, [r7, #20]
#endif
}
 800d602:	4618      	mov	r0, r3
 800d604:	3718      	adds	r7, #24
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	24000044 	.word	0x24000044

0800d610 <_ux_host_stack_device_remove>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_device_remove(UX_HCD *hcd, UX_DEVICE *parent, UINT port_index)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b096      	sub	sp, #88	; 0x58
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	607a      	str	r2, [r7, #4]
UX_INTERFACE                *interface_ptr;
UX_HOST_CLASS_COMMAND       command;

    /* We need to find the device descriptor for the removed device. We can find it
       with the parent device and the port it was attached to. Start with the first device.  */
    device =  _ux_system_host -> ux_system_host_device_array;
 800d61c:	4b42      	ldr	r3, [pc, #264]	; (800d728 <_ux_host_stack_device_remove+0x118>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	695b      	ldr	r3, [r3, #20]
 800d622:	653b      	str	r3, [r7, #80]	; 0x50

#if UX_MAX_DEVICES > 1
    /* Start at the beginning of the list.  */
    container_index =  0;
 800d624:	2300      	movs	r3, #0
 800d626:	657b      	str	r3, [r7, #84]	; 0x54

    /* Search the list until the end.  */
    while (container_index++ < _ux_system_host -> ux_system_host_max_devices)
 800d628:	e019      	b.n	800d65e <_ux_host_stack_device_remove+0x4e>
    {

        /* Until we have found a used entry.  */
        if (device -> ux_device_handle != UX_UNUSED)
 800d62a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d011      	beq.n	800d656 <_ux_host_stack_device_remove+0x46>
        {

            /* Check for the parent device and the port location and the controller.  */
            if( UX_DEVICE_PARENT_MATCH(device, parent) &&
 800d632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d634:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800d638:	68ba      	ldr	r2, [r7, #8]
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d10b      	bne.n	800d656 <_ux_host_stack_device_remove+0x46>
                UX_DEVICE_PORT_LOCATION_MATCH(device, port_index) &&
 800d63e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d640:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
            if( UX_DEVICE_PARENT_MATCH(device, parent) &&
 800d644:	687a      	ldr	r2, [r7, #4]
 800d646:	429a      	cmp	r2, r3
 800d648:	d105      	bne.n	800d656 <_ux_host_stack_device_remove+0x46>
                UX_DEVICE_HCD_MATCH(device, hcd))
 800d64a:	4b37      	ldr	r3, [pc, #220]	; (800d728 <_ux_host_stack_device_remove+0x118>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	68db      	ldr	r3, [r3, #12]
                UX_DEVICE_PORT_LOCATION_MATCH(device, port_index) &&
 800d650:	68fa      	ldr	r2, [r7, #12]
 800d652:	429a      	cmp	r2, r3
 800d654:	d00c      	beq.n	800d670 <_ux_host_stack_device_remove+0x60>
                break;
        }

        /* Move to the next device entry.  */
        device++;
 800d656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d658:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d65c:	653b      	str	r3, [r7, #80]	; 0x50
    while (container_index++ < _ux_system_host -> ux_system_host_max_devices)
 800d65e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d660:	1c5a      	adds	r2, r3, #1
 800d662:	657a      	str	r2, [r7, #84]	; 0x54
 800d664:	4a30      	ldr	r2, [pc, #192]	; (800d728 <_ux_host_stack_device_remove+0x118>)
 800d666:	6812      	ldr	r2, [r2, #0]
 800d668:	6912      	ldr	r2, [r2, #16]
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d3dd      	bcc.n	800d62a <_ux_host_stack_device_remove+0x1a>
 800d66e:	e000      	b.n	800d672 <_ux_host_stack_device_remove+0x62>
                break;
 800d670:	bf00      	nop
    }

    /* Device not found.  */
    if (container_index > _ux_system_host -> ux_system_host_max_devices)
 800d672:	4b2d      	ldr	r3, [pc, #180]	; (800d728 <_ux_host_stack_device_remove+0x118>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	691b      	ldr	r3, [r3, #16]
 800d678:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d906      	bls.n	800d68c <_ux_host_stack_device_remove+0x7c>
        !UX_DEVICE_HCD_MATCH(device, hcd))
#endif
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_DEVICE_HANDLE_UNKNOWN);
 800d67e:	2250      	movs	r2, #80	; 0x50
 800d680:	2104      	movs	r1, #4
 800d682:	2002      	movs	r0, #2
 800d684:	f001 f8b8 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DEVICE_HANDLE_UNKNOWN, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* We get here when we could not find the device.  */
        return(UX_DEVICE_HANDLE_UNKNOWN);
 800d688:	2350      	movs	r3, #80	; 0x50
 800d68a:	e048      	b.n	800d71e <_ux_host_stack_device_remove+0x10e>

    /* If trace is enabled, unregister this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* We have found the device to be removed. */
    device -> ux_device_state = UX_DEVICE_REMOVED;
 800d68c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d68e:	220a      	movs	r2, #10
 800d690:	609a      	str	r2, [r3, #8]

    /* We have found the device to be removed. Initialize the class
        command with the generic parameters.  */
    command.ux_host_class_command_request =  UX_HOST_CLASS_COMMAND_DEACTIVATE;
 800d692:	2303      	movs	r3, #3
 800d694:	617b      	str	r3, [r7, #20]

    /* The device may have a class associated with the device container or its interfaces.  */
    if (device -> ux_device_class_instance != UX_NULL)
 800d696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d00a      	beq.n	800d6b4 <_ux_host_stack_device_remove+0xa4>
    {

        /* We need to stop the class instance for the device.  */
        command.ux_host_class_command_instance =  device -> ux_device_class_instance;
 800d69e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6a2:	61fb      	str	r3, [r7, #28]

        /* Call the class.  */
        device -> ux_device_class -> ux_host_class_entry_function(&command);
 800d6a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6aa:	f107 0214 	add.w	r2, r7, #20
 800d6ae:	4610      	mov	r0, r2
 800d6b0:	4798      	blx	r3
 800d6b2:	e01d      	b.n	800d6f0 <_ux_host_stack_device_remove+0xe0>
    }
    else
    {

        /* Search for the active configuration.  */
        configuration =  device -> ux_device_current_configuration;
 800d6b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6b6:	699b      	ldr	r3, [r3, #24]
 800d6b8:	64bb      	str	r3, [r7, #72]	; 0x48

        /* If configuration is activated.  */
        if (configuration != UX_NULL)
 800d6ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d017      	beq.n	800d6f0 <_ux_host_stack_device_remove+0xe0>
        {

            /* We have the correct configuration, search the interface(s).  */
            interface_ptr =  configuration -> ux_configuration_first_interface;
 800d6c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c4:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Loop to perform the search.  */
            while (interface_ptr != UX_NULL)
 800d6c6:	e010      	b.n	800d6ea <_ux_host_stack_device_remove+0xda>
            {

                /* Check if an instance of the interface is present.  */
                if (interface_ptr -> ux_interface_class_instance != UX_NULL)
 800d6c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d009      	beq.n	800d6e4 <_ux_host_stack_device_remove+0xd4>
                {

                    /* We need to stop the class instance for the device.  */
                    command.ux_host_class_command_instance =  interface_ptr -> ux_interface_class_instance;
 800d6d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d4:	61fb      	str	r3, [r7, #28]

                    /* Call the class.  */
                    interface_ptr -> ux_interface_class -> ux_host_class_entry_function(&command);
 800d6d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6dc:	f107 0214 	add.w	r2, r7, #20
 800d6e0:	4610      	mov	r0, r2
 800d6e2:	4798      	blx	r3
                }

                /* Move to next interface.  */
                interface_ptr =  interface_ptr -> ux_interface_next_interface;
 800d6e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6e8:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (interface_ptr != UX_NULL)
 800d6ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d1eb      	bne.n	800d6c8 <_ux_host_stack_device_remove+0xb8>
            }
        }
    }

    /* Notify application for disconnection of existing physical device.  */
    if (_ux_system_host -> ux_system_host_change_function)
 800d6f0:	4b0d      	ldr	r3, [pc, #52]	; (800d728 <_ux_host_stack_device_remove+0x118>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d007      	beq.n	800d70c <_ux_host_stack_device_remove+0xfc>
    {
        _ux_system_host -> ux_system_host_change_function(UX_DEVICE_DISCONNECTION, UX_NULL, (VOID*)device);
 800d6fc:	4b0a      	ldr	r3, [pc, #40]	; (800d728 <_ux_host_stack_device_remove+0x118>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800d704:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d706:	2100      	movs	r1, #0
 800d708:	2082      	movs	r0, #130	; 0x82
 800d70a:	4798      	blx	r3
    }

    /* Now all the resources for this device must be free.  */
    _ux_host_stack_device_resources_free(device);
 800d70c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d70e:	f000 f80d 	bl	800d72c <_ux_host_stack_device_resources_free>

    /* Decrement the number of devices on this bus.  */
    hcd -> ux_hcd_nb_devices--;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d716:	1e5a      	subs	r2, r3, #1
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	661a      	str	r2, [r3, #96]	; 0x60

    /* We are done with this device removal.  */
    return(UX_SUCCESS);
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3758      	adds	r7, #88	; 0x58
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	2400577c 	.word	0x2400577c

0800d72c <_ux_host_stack_device_resources_free>:
/*                                            descriptor for enum scan,   */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_device_resources_free(UX_DEVICE *device)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b08c      	sub	sp, #48	; 0x30
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
    device -> ux_device_flags = 0;

#endif

    /* Set the alternate setting to zero.  */
    current_alternate_setting = 0;
 800d734:	2300      	movs	r3, #0
 800d736:	623b      	str	r3, [r7, #32]

    /* Get the first configuration registered to the device.  */
    configuration =  device -> ux_device_first_configuration;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d73c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Parse all the configurations, remove all resources for the possible configuration.  */
    while (configuration != UX_NULL)
 800d73e:	e034      	b.n	800d7aa <_ux_host_stack_device_resources_free+0x7e>
    {
        
        /* We have the correct configuration, search the interface(s).  */
        interface_ptr =  configuration -> ux_configuration_first_interface;
 800d740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d744:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Parse all the interfaces.  */
        while (interface_ptr != UX_NULL)
 800d746:	e025      	b.n	800d794 <_ux_host_stack_device_resources_free+0x68>
        {

            /* The alternate setting 0 has the selected alternate setting value.  */
            if (interface_ptr -> ux_interface_descriptor.bAlternateSetting == 0)
 800d748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74a:	699b      	ldr	r3, [r3, #24]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d102      	bne.n	800d756 <_ux_host_stack_device_resources_free+0x2a>
                current_alternate_setting = interface_ptr -> ux_interface_current_alternate_setting;
 800d750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d752:	689b      	ldr	r3, [r3, #8]
 800d754:	623b      	str	r3, [r7, #32]

            /* If this is the selected interface, we need to free all the endpoints 
            attached to the alternate setting for this interface.  */
            endpoint =  interface_ptr -> ux_interface_first_endpoint;
 800d756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d75a:	627b      	str	r3, [r7, #36]	; 0x24
            
            /* Parse all the endpoints.  */
            while (endpoint != UX_NULL)
 800d75c:	e00f      	b.n	800d77e <_ux_host_stack_device_resources_free+0x52>
            {

                /* Check if this is the selected interface.  */
                if (interface_ptr -> ux_interface_descriptor.bAlternateSetting == current_alternate_setting)
 800d75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d760:	699b      	ldr	r3, [r3, #24]
 800d762:	6a3a      	ldr	r2, [r7, #32]
 800d764:	429a      	cmp	r2, r3
 800d766:	d102      	bne.n	800d76e <_ux_host_stack_device_resources_free+0x42>
                {

                    /* Delete the endpoint instance first.  */
                    _ux_host_stack_endpoint_instance_delete(endpoint);
 800d768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d76a:	f000 f8d3 	bl	800d914 <_ux_host_stack_endpoint_instance_delete>
                }

                /* Memorize the endpoint container address.  */
                container =  (VOID *) endpoint;                  
 800d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d770:	60fb      	str	r3, [r7, #12]
                
                /* Get the next endpoint.  */      
                endpoint =  endpoint -> ux_endpoint_next_endpoint;
 800d772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d776:	627b      	str	r3, [r7, #36]	; 0x24
                
                /* Delete the endpoint container.  */
                _ux_utility_memory_free(container);
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f001 fadf 	bl	800ed3c <_ux_utility_memory_free>
            while (endpoint != UX_NULL)
 800d77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d780:	2b00      	cmp	r3, #0
 800d782:	d1ec      	bne.n	800d75e <_ux_host_stack_device_resources_free+0x32>
            }
            
            
            /* Memorize the interface container address.  */
            container =  (VOID *) interface_ptr;                  
 800d784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d786:	60fb      	str	r3, [r7, #12]
                
            /* Get the next interface.  */      
            interface_ptr =  interface_ptr -> ux_interface_next_interface;
 800d788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d78c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Delete the interface container.  */
            _ux_utility_memory_free(container);
 800d78e:	68f8      	ldr	r0, [r7, #12]
 800d790:	f001 fad4 	bl	800ed3c <_ux_utility_memory_free>
        while (interface_ptr != UX_NULL)
 800d794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d796:	2b00      	cmp	r3, #0
 800d798:	d1d6      	bne.n	800d748 <_ux_host_stack_device_resources_free+0x1c>
        }

        /* Memorize this configuration address before we free it.  */
        container =  (VOID *) configuration;
 800d79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79c:	60fb      	str	r3, [r7, #12]

        /* Move to the next configuration in the list.  */
        configuration =  configuration -> ux_configuration_next_configuration;                                
 800d79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7a2:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Free the configuration.  */
        _ux_utility_memory_free(container);
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f001 fac9 	bl	800ed3c <_ux_utility_memory_free>
    while (configuration != UX_NULL)
 800d7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1c7      	bne.n	800d740 <_ux_host_stack_device_resources_free+0x14>
    }                       

    /* If there was a copy of packed descriptor, free it.  */
    if (device -> ux_device_packed_configuration)
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	69db      	ldr	r3, [r3, #28]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d004      	beq.n	800d7c2 <_ux_host_stack_device_resources_free+0x96>
    {
        _ux_utility_memory_free(device -> ux_device_packed_configuration);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	69db      	ldr	r3, [r3, #28]
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f001 fabd 	bl	800ed3c <_ux_utility_memory_free>
        /* Pointer and keep count is set NULL later while reseting instance memory.  */
    }

    /* We need the HCD address for the control endpoint removal and to free
       the device address.  */
    hcd = UX_DEVICE_HCD_GET(device);
 800d7c2:	4b2a      	ldr	r3, [pc, #168]	; (800d86c <_ux_host_stack_device_resources_free+0x140>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	68db      	ldr	r3, [r3, #12]
 800d7c8:	61fb      	str	r3, [r7, #28]

    /* Was the control endpoint already created ? */
    if (device -> ux_device_control_endpoint.ux_endpoint_state != 0)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d00e      	beq.n	800d7f2 <_ux_host_stack_device_resources_free+0xc6>
    {

        /* There may be pending transactions on the control endpoint. They need to be aborted.  */
        _ux_host_stack_endpoint_transfer_abort(&device -> ux_device_control_endpoint);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	3384      	adds	r3, #132	; 0x84
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f000 f8c7 	bl	800d96c <_ux_host_stack_endpoint_transfer_abort>
    
        /* The enumeration thread needs to sleep a while to allow the application or the class that may be using
            the control endpoint to exit properly.  */
        _ux_host_thread_schedule_other(UX_THREAD_PRIORITY_ENUM); 
 800d7de:	2014      	movs	r0, #20
 800d7e0:	f001 fd00 	bl	800f1e4 <_ux_utility_thread_schedule_other>
    
        /* The control endpoint should be destroyed at the HCD level.  */
        hcd -> ux_hcd_entry_function(hcd, UX_HCD_DESTROY_ENDPOINT, (VOID *) &device -> ux_device_control_endpoint);
 800d7e4:	69fb      	ldr	r3, [r7, #28]
 800d7e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	3284      	adds	r2, #132	; 0x84
 800d7ec:	210f      	movs	r1, #15
 800d7ee:	69f8      	ldr	r0, [r7, #28]
 800d7f0:	4798      	blx	r3
    }

    /* The semaphore attached to the control endpoint must be destroyed.  */
    _ux_host_semaphore_delete(&device -> ux_device_control_endpoint.ux_endpoint_transfer_request.ux_transfer_request_semaphore);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	33f8      	adds	r3, #248	; 0xf8
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f001 fbed 	bl	800efd6 <_ux_utility_semaphore_delete>

#if UX_MAX_DEVICES > 1
    /* Check if the device had an assigned address.  */
    if (device -> ux_device_address != 0)    
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d01f      	beq.n	800d844 <_ux_host_stack_device_resources_free+0x118>

        /* The USB address of this device can now be returned to the pool
           We need the HCD pointer for this operation.  */

        /* Calculate in which byte index the device address belongs.  */
        device_address_byte_index =  (UINT) (device -> ux_device_address-1)/8;        
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	68db      	ldr	r3, [r3, #12]
 800d808:	3b01      	subs	r3, #1
 800d80a:	08db      	lsrs	r3, r3, #3
 800d80c:	61bb      	str	r3, [r7, #24]

        /* Now calculate the amount left in the byte index in bit.  */
        device_address_bit_index =  (UINT) (device -> ux_device_address-1)%8;     
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	3b01      	subs	r3, #1
 800d814:	f003 0307 	and.w	r3, r3, #7
 800d818:	617b      	str	r3, [r7, #20]

        /* Build the mask for the address.  */
        device_address_byte =  (UCHAR)(1 << device_address_bit_index);
 800d81a:	2201      	movs	r2, #1
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	fa02 f303 	lsl.w	r3, r2, r3
 800d822:	74fb      	strb	r3, [r7, #19]

        /* Free the address.  */
        hcd -> ux_hcd_address[device_address_byte_index] &=  (UCHAR)~device_address_byte;
 800d824:	69fa      	ldr	r2, [r7, #28]
 800d826:	69bb      	ldr	r3, [r7, #24]
 800d828:	4413      	add	r3, r2
 800d82a:	3378      	adds	r3, #120	; 0x78
 800d82c:	781a      	ldrb	r2, [r3, #0]
 800d82e:	7cfb      	ldrb	r3, [r7, #19]
 800d830:	43db      	mvns	r3, r3
 800d832:	b2db      	uxtb	r3, r3
 800d834:	4013      	ands	r3, r2
 800d836:	b2d9      	uxtb	r1, r3
 800d838:	69fa      	ldr	r2, [r7, #28]
 800d83a:	69bb      	ldr	r3, [r7, #24]
 800d83c:	4413      	add	r3, r2
 800d83e:	3378      	adds	r3, #120	; 0x78
 800d840:	460a      	mov	r2, r1
 800d842:	701a      	strb	r2, [r3, #0]
    }
#endif

    /* The semaphore for endpoint 0 protection must be destroyed.  */
    _ux_host_semaphore_delete(&device -> ux_device_protection_semaphore);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	3324      	adds	r3, #36	; 0x24
 800d848:	4618      	mov	r0, r3
 800d84a:	f001 fbc4 	bl	800efd6 <_ux_utility_semaphore_delete>
    enum_next = device -> ux_device_enum_next;
    _ux_utility_memory_set(device, 0, sizeof(UX_DEVICE)); /* Use case of memset is verified. */
    device -> ux_device_enum_next = enum_next;
#else

    _ux_utility_memory_set(device, 0, sizeof(UX_DEVICE)); /* Use case of memset is verified. */
 800d84e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d852:	2100      	movs	r1, #0
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f001 fb4f 	bl	800eef8 <_ux_utility_memory_set>
#endif

    /* Mark the device handle as unused.  */
    device -> ux_device_handle =  UX_UNUSED;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2200      	movs	r2, #0
 800d85e:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800d860:	2300      	movs	r3, #0
}
 800d862:	4618      	mov	r0, r3
 800d864:	3730      	adds	r7, #48	; 0x30
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	2400577c 	.word	0x2400577c

0800d870 <_ux_host_stack_endpoint_instance_create>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_endpoint_instance_create(UX_ENDPOINT *endpoint)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b086      	sub	sp, #24
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
UINT            status;
UCHAR           endpoint_type;


    /* Obtain the HCD for this endpoint.  */
    hcd = UX_DEVICE_HCD_GET(endpoint -> ux_endpoint_device);
 800d878:	4b24      	ldr	r3, [pc, #144]	; (800d90c <_ux_host_stack_endpoint_instance_create+0x9c>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	617b      	str	r3, [r7, #20]
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_ENDPOINT_INSTANCE_CREATE, endpoint -> ux_endpoint_device, endpoint, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

    
    /* If the endpoint needs guaranteed bandwidth, check if we have enough */
    endpoint_type = (endpoint -> ux_endpoint_descriptor.bmAttributes) & UX_MASK_ENDPOINT_TYPE;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	699b      	ldr	r3, [r3, #24]
 800d884:	b2db      	uxtb	r3, r3
 800d886:	f003 0303 	and.w	r3, r3, #3
 800d88a:	74fb      	strb	r3, [r7, #19]
    switch (endpoint_type)
 800d88c:	7cfb      	ldrb	r3, [r7, #19]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00f      	beq.n	800d8b2 <_ux_host_stack_endpoint_instance_create+0x42>
 800d892:	2b02      	cmp	r3, #2
 800d894:	d00d      	beq.n	800d8b2 <_ux_host_stack_endpoint_instance_create+0x42>
        break;

    default:

        /* Check the bandwidth for this endpoint */
        if (_ux_host_stack_bandwidth_check(hcd, endpoint) != UX_SUCCESS)
 800d896:	6879      	ldr	r1, [r7, #4]
 800d898:	6978      	ldr	r0, [r7, #20]
 800d89a:	f7fe ff6b 	bl	800c774 <_ux_host_stack_bandwidth_check>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d008      	beq.n	800d8b6 <_ux_host_stack_endpoint_instance_create+0x46>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_NO_BANDWIDTH_AVAILABLE);
 800d8a4:	2241      	movs	r2, #65	; 0x41
 800d8a6:	2104      	movs	r1, #4
 800d8a8:	2002      	movs	r0, #2
 800d8aa:	f000 ffa5 	bl	800e7f8 <_ux_system_error_handler>

            return(UX_NO_BANDWIDTH_AVAILABLE);
 800d8ae:	2341      	movs	r3, #65	; 0x41
 800d8b0:	e027      	b.n	800d902 <_ux_host_stack_endpoint_instance_create+0x92>
        break;
 800d8b2:	bf00      	nop
 800d8b4:	e000      	b.n	800d8b8 <_ux_host_stack_endpoint_instance_create+0x48>
        }


        break;
 800d8b6:	bf00      	nop
    }

    /* Create this endpoint.  */
    status = hcd -> ux_hcd_entry_function(hcd, UX_HCD_CREATE_ENDPOINT, (VOID *) endpoint);
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8bc:	687a      	ldr	r2, [r7, #4]
 800d8be:	210e      	movs	r1, #14
 800d8c0:	6978      	ldr	r0, [r7, #20]
 800d8c2:	4798      	blx	r3
 800d8c4:	60f8      	str	r0, [r7, #12]

    /* Check status.  */
    if (status != UX_SUCCESS)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d001      	beq.n	800d8d0 <_ux_host_stack_endpoint_instance_create+0x60>
    {

        /* Return completion status.  */
        return(status);
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	e018      	b.n	800d902 <_ux_host_stack_endpoint_instance_create+0x92>
    }

    /* Claim bandwidth if needed.  */
    if ((endpoint_type == UX_INTERRUPT_ENDPOINT) || (endpoint_type == UX_ISOCHRONOUS_ENDPOINT))
 800d8d0:	7cfb      	ldrb	r3, [r7, #19]
 800d8d2:	2b03      	cmp	r3, #3
 800d8d4:	d002      	beq.n	800d8dc <_ux_host_stack_endpoint_instance_create+0x6c>
 800d8d6:	7cfb      	ldrb	r3, [r7, #19]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d103      	bne.n	800d8e4 <_ux_host_stack_endpoint_instance_create+0x74>
    {

        /* Claim its bandwidth */
        _ux_host_stack_bandwidth_claim(hcd, endpoint);
 800d8dc:	6879      	ldr	r1, [r7, #4]
 800d8de:	6978      	ldr	r0, [r7, #20]
 800d8e0:	f7ff f828 	bl	800c934 <_ux_host_stack_bandwidth_claim>
    }

    /* Create a semaphore for this endpoint to be attached to its transfer request.  */
    status =  _ux_host_semaphore_create(&endpoint -> ux_endpoint_transfer_request.ux_transfer_request_semaphore,
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	3374      	adds	r3, #116	; 0x74
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	4909      	ldr	r1, [pc, #36]	; (800d910 <_ux_host_stack_endpoint_instance_create+0xa0>)
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f001 fb58 	bl	800efa2 <_ux_utility_semaphore_create>
 800d8f2:	60f8      	str	r0, [r7, #12]
                                                                "ux_transfer_request_semaphore", 0);

    /* Check status.  */
    if (status == UX_SUCCESS)
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d102      	bne.n	800d900 <_ux_host_stack_endpoint_instance_create+0x90>

        /* If trace is enabled, register this object.  */
        UX_TRACE_OBJECT_REGISTER(UX_TRACE_HOST_OBJECT_TYPE_ENDPOINT, endpoint, 0, 0, 0)

        /* By default transfer request contained is for endpoint itself.  */
        endpoint -> ux_endpoint_transfer_request.ux_transfer_request_endpoint = endpoint;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	687a      	ldr	r2, [r7, #4]
 800d8fe:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 800d900:	68fb      	ldr	r3, [r7, #12]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3718      	adds	r7, #24
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	2400577c 	.word	0x2400577c
 800d910:	080128e0 	.word	0x080128e0

0800d914 <_ux_host_stack_endpoint_instance_delete>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_host_stack_endpoint_instance_delete(UX_ENDPOINT *endpoint)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b084      	sub	sp, #16
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]

UX_HCD          *hcd;

    
    /* Obtain the HCD for this endpoint.  */
    hcd = UX_DEVICE_HCD_GET(endpoint -> ux_endpoint_device);
 800d91c:	4b12      	ldr	r3, [pc, #72]	; (800d968 <_ux_host_stack_endpoint_instance_delete+0x54>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	68db      	ldr	r3, [r3, #12]
 800d922:	60fb      	str	r3, [r7, #12]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_ENDPOINT_INSTANCE_DELETE, endpoint -> ux_endpoint_device, endpoint, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)
    
    /* Ensure the endpoint had its physical ED allocated.  */
    if (endpoint -> ux_endpoint_ed != UX_NULL)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	689b      	ldr	r3, [r3, #8]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d00a      	beq.n	800d942 <_ux_host_stack_endpoint_instance_delete+0x2e>
    {    

        /* Destroy this endpoint.  */
        hcd -> ux_hcd_entry_function(hcd, UX_HCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d930:	687a      	ldr	r2, [r7, #4]
 800d932:	210f      	movs	r1, #15
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	4798      	blx	r3
    
        /* Free the semaphore previously attached to the transfer_request of this endpoint.  */
        _ux_host_semaphore_delete(&endpoint -> ux_endpoint_transfer_request.ux_transfer_request_semaphore);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	3374      	adds	r3, #116	; 0x74
 800d93c:	4618      	mov	r0, r3
 800d93e:	f001 fb4a 	bl	800efd6 <_ux_utility_semaphore_delete>
    }

    /* If the endpoint requested guaranteed bandwidth, free it now.  */
    switch ((endpoint -> ux_endpoint_descriptor.bmAttributes) & UX_MASK_ENDPOINT_TYPE)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	699b      	ldr	r3, [r3, #24]
 800d946:	f003 0303 	and.w	r3, r3, #3
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d006      	beq.n	800d95c <_ux_host_stack_endpoint_instance_delete+0x48>
 800d94e:	2b02      	cmp	r3, #2
 800d950:	d004      	beq.n	800d95c <_ux_host_stack_endpoint_instance_delete+0x48>
        break;

    default:

        /* Reclaim its bandwidth.  */
        _ux_host_stack_bandwidth_release(hcd, endpoint);
 800d952:	6879      	ldr	r1, [r7, #4]
 800d954:	68f8      	ldr	r0, [r7, #12]
 800d956:	f7ff f8bb 	bl	800cad0 <_ux_host_stack_bandwidth_release>

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(endpoint);

    /* Return to caller.  */
    return;    
 800d95a:	e000      	b.n	800d95e <_ux_host_stack_endpoint_instance_delete+0x4a>
        break;
 800d95c:	bf00      	nop
    return;    
 800d95e:	bf00      	nop
}
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	2400577c 	.word	0x2400577c

0800d96c <_ux_host_stack_endpoint_transfer_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_endpoint_transfer_abort(UX_ENDPOINT *endpoint)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_ENDPOINT_TRANSFER_ABORT, endpoint, 0, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

    /* Since we only have one transfer_request per endpoint, use the regular 
       abort transfer request function.  */
    status =  _ux_host_stack_transfer_request_abort(&endpoint -> ux_endpoint_transfer_request);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	3330      	adds	r3, #48	; 0x30
 800d978:	4618      	mov	r0, r3
 800d97a:	f000 ff03 	bl	800e784 <_ux_host_stack_transfer_request_abort>
 800d97e:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800d980:	68fb      	ldr	r3, [r7, #12]
}
 800d982:	4618      	mov	r0, r3
 800d984:	3710      	adds	r7, #16
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
	...

0800d98c <_ux_host_stack_enum_thread_entry>:
/*                                            refined macros names,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_host_stack_enum_thread_entry(ULONG input)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
    /* Loop forever waiting for changes signaled through the semaphore. */     
    while (1)
    {   

        /* Wait for the semaphore to be put by the root hub or a regular hub.  */
        _ux_host_semaphore_get_norc(&_ux_system_host -> ux_system_host_enum_semaphore, UX_WAIT_FOREVER);
 800d994:	4b0a      	ldr	r3, [pc, #40]	; (800d9c0 <_ux_host_stack_enum_thread_entry+0x34>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	33d8      	adds	r3, #216	; 0xd8
 800d99a:	f04f 31ff 	mov.w	r1, #4294967295
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f001 fb26 	bl	800eff0 <_ux_utility_semaphore_get>

#if UX_MAX_DEVICES > 1
        /* We try the hub first. For this we look into the USBX project
           structure to see if there is at least one hub.  */
        if (_ux_system_host -> ux_system_host_enum_hub_function != UX_NULL)
 800d9a4:	4b06      	ldr	r3, [pc, #24]	; (800d9c0 <_ux_host_stack_enum_thread_entry+0x34>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d004      	beq.n	800d9ba <_ux_host_stack_enum_thread_entry+0x2e>
        {

            /* Yes, there is a HUB function, call it!  */
            _ux_system_host -> ux_system_host_enum_hub_function();
 800d9b0:	4b03      	ldr	r3, [pc, #12]	; (800d9c0 <_ux_host_stack_enum_thread_entry+0x34>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d9b8:	4798      	blx	r3
        }
#endif

        /* The signal may be also coming from the root hub, call the root hub handler.  */
        _ux_host_stack_rh_change_process();
 800d9ba:	f000 fd0d 	bl	800e3d8 <_ux_host_stack_rh_change_process>
        _ux_host_semaphore_get_norc(&_ux_system_host -> ux_system_host_enum_semaphore, UX_WAIT_FOREVER);
 800d9be:	e7e9      	b.n	800d994 <_ux_host_stack_enum_thread_entry+0x8>
 800d9c0:	2400577c 	.word	0x2400577c

0800d9c4 <_ux_host_stack_hcd_register>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_hcd_register(UCHAR *hcd_name,
                                    UINT (*hcd_init_function)(struct UX_HCD_STRUCT *), ULONG hcd_param1, ULONG hcd_param2)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b088      	sub	sp, #32
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
 800d9d0:	603b      	str	r3, [r7, #0]

UX_HCD      *hcd;
UINT        status;
#if !defined(UX_NAME_REFERENCED_BY_POINTER)
UINT        hcd_name_length =  0;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	617b      	str	r3, [r7, #20]
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_HCD_REGISTER, hcd_name, hcd_param1, hcd_param2, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

#if !defined(UX_NAME_REFERENCED_BY_POINTER)
    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(hcd_name, &hcd_name_length, UX_MAX_HCD_NAME_LENGTH);
 800d9d6:	f107 0314 	add.w	r3, r7, #20
 800d9da:	223f      	movs	r2, #63	; 0x3f
 800d9dc:	4619      	mov	r1, r3
 800d9de:	68f8      	ldr	r0, [r7, #12]
 800d9e0:	f001 fb7b 	bl	800f0da <_ux_utility_string_length_check>
 800d9e4:	61f8      	str	r0, [r7, #28]
    if (status)
 800d9e6:	69fb      	ldr	r3, [r7, #28]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d001      	beq.n	800d9f0 <_ux_host_stack_hcd_register+0x2c>
        return(status);
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	e023      	b.n	800da38 <_ux_host_stack_hcd_register+0x74>
#endif

    /* Get HCD.  */
    hcd =  _ux_system_host -> ux_system_host_hcd_array;
 800d9f0:	4b13      	ldr	r3, [pc, #76]	; (800da40 <_ux_host_stack_hcd_register+0x7c>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	61bb      	str	r3, [r7, #24]
    for(hcd_index = 0; hcd_index < _ux_system_host -> ux_system_host_max_hcd; hcd_index++)
    {
#endif

        /* Is this slot available?  */
        if(hcd -> ux_hcd_status == UX_UNUSED)
 800d9f8:	69bb      	ldr	r3, [r7, #24]
 800d9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d11a      	bne.n	800da36 <_ux_host_stack_hcd_register+0x72>
#if defined(UX_NAME_REFERENCED_BY_POINTER)
            hcd -> ux_hcd_name = (const UCHAR *)hcd_name;
#else

            /* Initialize the array of the new controller with its name (include null-terminator).  */
            _ux_utility_memory_copy(hcd -> ux_hcd_name, hcd_name, hcd_name_length + 1); /* Use case of memcpy is verified. */
 800da00:	69b8      	ldr	r0, [r7, #24]
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	3301      	adds	r3, #1
 800da06:	461a      	mov	r2, r3
 800da08:	68f9      	ldr	r1, [r7, #12]
 800da0a:	f001 f979 	bl	800ed00 <_ux_utility_memory_copy>
#endif

            /* Store the hardware resources of the controller */
            hcd -> ux_hcd_io =   hcd_param1;
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	687a      	ldr	r2, [r7, #4]
 800da12:	66da      	str	r2, [r3, #108]	; 0x6c
            hcd -> ux_hcd_irq =  hcd_param2;
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	683a      	ldr	r2, [r7, #0]
 800da18:	649a      	str	r2, [r3, #72]	; 0x48

            /* This controller is now used */
            hcd -> ux_hcd_status =  UX_USED;
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	2201      	movs	r2, #1
 800da1e:	641a      	str	r2, [r3, #64]	; 0x40

            /* And we have one new controller registered.  */
            _ux_system_host -> ux_system_host_registered_hcd++;
 800da20:	4b07      	ldr	r3, [pc, #28]	; (800da40 <_ux_host_stack_hcd_register+0x7c>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	689a      	ldr	r2, [r3, #8]
 800da26:	3201      	adds	r2, #1
 800da28:	609a      	str	r2, [r3, #8]

            /* We are now calling the HCD driver initialization.  */
            status =  hcd_init_function(hcd);
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	69b8      	ldr	r0, [r7, #24]
 800da2e:	4798      	blx	r3
 800da30:	61f8      	str	r0, [r7, #28]

            /* Return the completion status to the caller.  */
            return(status);
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	e000      	b.n	800da38 <_ux_host_stack_hcd_register+0x74>
        hcd++;
    }
#endif

    /* We have exhausted the array of the HCDs, return an error.  */
    return(UX_MEMORY_INSUFFICIENT);
 800da36:	2312      	movs	r3, #18
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3720      	adds	r7, #32
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	2400577c 	.word	0x2400577c

0800da44 <_ux_host_stack_hcd_thread_entry>:
/*                                            refined macros names,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_host_stack_hcd_thread_entry(ULONG input)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b088      	sub	sp, #32
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
    while (1)
    {   

        /* Get the semaphore that signals something is available for this
           thread to process.  */
        _ux_host_semaphore_get_norc(&_ux_system_host -> ux_system_host_hcd_semaphore, UX_WAIT_FOREVER);
 800da4c:	4b1a      	ldr	r3, [pc, #104]	; (800dab8 <_ux_host_stack_hcd_thread_entry+0x74>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800da54:	f04f 31ff 	mov.w	r1, #4294967295
 800da58:	4618      	mov	r0, r3
 800da5a:	f001 fac9 	bl	800eff0 <_ux_utility_semaphore_get>
        /* This thread was awaken by one or more HCD controllers. Check each of the HCDs 
           to see who posted work to do. */  
        for(hcd_index = 0; hcd_index < _ux_system_host -> ux_system_host_max_hcd; hcd_index++)
        {
#else
            hcd_index = 0;
 800da5e:	2300      	movs	r3, #0
 800da60:	61fb      	str	r3, [r7, #28]
#endif

            /* Pickup HCD pointer.  */
            hcd =  &_ux_system_host -> ux_system_host_hcd_array[hcd_index];
 800da62:	4b15      	ldr	r3, [pc, #84]	; (800dab8 <_ux_host_stack_hcd_thread_entry+0x74>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	68da      	ldr	r2, [r3, #12]
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	2194      	movs	r1, #148	; 0x94
 800da6c:	fb01 f303 	mul.w	r3, r1, r3
 800da70:	4413      	add	r3, r2
 800da72:	61bb      	str	r3, [r7, #24]

            /* Is there work to do for this HCD?  */
            if((hcd -> ux_hcd_status == UX_HCD_STATUS_OPERATIONAL) && (hcd -> ux_hcd_thread_signal !=0))
 800da74:	69bb      	ldr	r3, [r7, #24]
 800da76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da78:	2b02      	cmp	r3, #2
 800da7a:	d1e7      	bne.n	800da4c <_ux_host_stack_hcd_thread_entry+0x8>
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da80:	2b00      	cmp	r3, #0
 800da82:	d0e3      	beq.n	800da4c <_ux_host_stack_hcd_thread_entry+0x8>
            {

                /* Yes, call the HCD function to process the work.  */
                hcd -> ux_hcd_entry_function(hcd, UX_HCD_PROCESS_DONE_QUEUE, UX_NULL);
 800da84:	69bb      	ldr	r3, [r7, #24]
 800da86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da88:	2200      	movs	r2, #0
 800da8a:	2111      	movs	r1, #17
 800da8c:	69b8      	ldr	r0, [r7, #24]
 800da8e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800da90:	f3ef 8310 	mrs	r3, PRIMASK
 800da94:	60fb      	str	r3, [r7, #12]
    return(posture);
 800da96:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800da98:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800da9a:	b672      	cpsid	i
    return(int_posture);
 800da9c:	68bb      	ldr	r3, [r7, #8]
                UX_DISABLE
 800da9e:	617b      	str	r3, [r7, #20]
                hcd -> ux_hcd_thread_signal--;
 800daa0:	69bb      	ldr	r3, [r7, #24]
 800daa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daa4:	1e5a      	subs	r2, r3, #1
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	665a      	str	r2, [r3, #100]	; 0x64
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	f383 8810 	msr	PRIMASK, r3
}
 800dab4:	bf00      	nop
        _ux_host_semaphore_get_norc(&_ux_system_host -> ux_system_host_hcd_semaphore, UX_WAIT_FOREVER);
 800dab6:	e7c9      	b.n	800da4c <_ux_host_stack_hcd_thread_entry+0x8>
 800dab8:	2400577c 	.word	0x2400577c

0800dabc <_ux_host_stack_initialize>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_initialize(UINT (*ux_system_host_change_function)(ULONG, UX_HOST_CLASS *, VOID *))
{
 800dabc:	b590      	push	{r4, r7, lr}
 800dabe:	b08b      	sub	sp, #44	; 0x2c
 800dac0:	af06      	add	r7, sp, #24
 800dac2:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

    /* Initialize some of the global so that we don't have to recompile the
       core code when one item is adjusted.  */
    _ux_system_host -> ux_system_host_max_ed =        UX_MAX_ED;
 800dac4:	4b71      	ldr	r3, [pc, #452]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2250      	movs	r2, #80	; 0x50
 800daca:	619a      	str	r2, [r3, #24]
    _ux_system_host -> ux_system_host_max_td =        UX_MAX_TD;
 800dacc:	4b6f      	ldr	r3, [pc, #444]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2220      	movs	r2, #32
 800dad2:	61da      	str	r2, [r3, #28]
    _ux_system_host -> ux_system_host_max_iso_td =    UX_MAX_ISO_TD;
 800dad4:	4b6d      	ldr	r3, [pc, #436]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2202      	movs	r2, #2
 800dada:	621a      	str	r2, [r3, #32]
    UX_SYSTEM_HOST_MAX_CLASS_SET(UX_MAX_CLASS_DRIVER);
 800dadc:	4b6b      	ldr	r3, [pc, #428]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2202      	movs	r2, #2
 800dae2:	601a      	str	r2, [r3, #0]
    UX_SYSTEM_HOST_MAX_HCD_SET(UX_MAX_HCD);
    UX_SYSTEM_HOST_MAX_DEVICES_SET(UX_MAX_DEVICES);
 800dae4:	4b69      	ldr	r3, [pc, #420]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2202      	movs	r2, #2
 800daea:	611a      	str	r2, [r3, #16]
    
    /* Set the change device function address.  */
    _ux_system_host -> ux_system_host_change_function =  ux_system_host_change_function;
 800daec:	4b67      	ldr	r3, [pc, #412]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8

    /* Allocate memory for the HCDs.
     * sizeof(UX_HCD)*UX_MAX_HCD overflow is checked outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_HCD)*UX_MAX_HCD);
 800daf6:	2294      	movs	r2, #148	; 0x94
 800daf8:	2100      	movs	r1, #0
 800dafa:	2000      	movs	r0, #0
 800dafc:	f000 fffc 	bl	800eaf8 <_ux_utility_memory_allocate>
 800db00:	60b8      	str	r0, [r7, #8]

    /* Check for successful allocation.  */
    if (memory == UX_NULL)
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d101      	bne.n	800db0c <_ux_host_stack_initialize+0x50>
        return(UX_MEMORY_INSUFFICIENT);
 800db08:	2312      	movs	r3, #18
 800db0a:	e126      	b.n	800dd5a <_ux_host_stack_initialize+0x29e>

    /* Set to success by default.  */
    status = UX_SUCCESS;
 800db0c:	2300      	movs	r3, #0
 800db0e:	60fb      	str	r3, [r7, #12]

    /* Store memory in system structure.  */
    _ux_system_host -> ux_system_host_hcd_array =  (UX_HCD *) memory;
 800db10:	4b5e      	ldr	r3, [pc, #376]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	68ba      	ldr	r2, [r7, #8]
 800db16:	60da      	str	r2, [r3, #12]

    /* Allocate memory for the classes.
     * sizeof(UX_HOST_CLASS)*UX_MAX_CLASS_DRIVER overflow is checked outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_HOST_CLASS)*UX_MAX_CLASS_DRIVER);
 800db18:	22b0      	movs	r2, #176	; 0xb0
 800db1a:	2100      	movs	r1, #0
 800db1c:	2000      	movs	r0, #0
 800db1e:	f000 ffeb 	bl	800eaf8 <_ux_utility_memory_allocate>
 800db22:	60b8      	str	r0, [r7, #8]

    /* Check for successful allocation.  */
    if (memory == UX_NULL)
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d102      	bne.n	800db30 <_ux_host_stack_initialize+0x74>
        status = UX_MEMORY_INSUFFICIENT;
 800db2a:	2312      	movs	r3, #18
 800db2c:	60fb      	str	r3, [r7, #12]
 800db2e:	e003      	b.n	800db38 <_ux_host_stack_initialize+0x7c>
    else

        /* Store memory in system structure.  */
        _ux_system_host -> ux_system_host_class_array =  (UX_HOST_CLASS *) memory;
 800db30:	4b56      	ldr	r3, [pc, #344]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	68ba      	ldr	r2, [r7, #8]
 800db36:	605a      	str	r2, [r3, #4]

    /* Allocate memory for the device containers.
     * sizeof(UX_DEVICE)*UX_MAX_DEVICES overflow is checked outside of the function.
     */
    if (status == UX_SUCCESS)
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d110      	bne.n	800db60 <_ux_host_stack_initialize+0xa4>
    {
        memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DEVICE)*UX_MAX_DEVICES);
 800db3e:	f44f 7232 	mov.w	r2, #712	; 0x2c8
 800db42:	2100      	movs	r1, #0
 800db44:	2000      	movs	r0, #0
 800db46:	f000 ffd7 	bl	800eaf8 <_ux_utility_memory_allocate>
 800db4a:	60b8      	str	r0, [r7, #8]

        /* Check for successful allocation.  */
        if(memory == UX_NULL)
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d102      	bne.n	800db58 <_ux_host_stack_initialize+0x9c>
            status = UX_MEMORY_INSUFFICIENT;
 800db52:	2312      	movs	r3, #18
 800db54:	60fb      	str	r3, [r7, #12]
 800db56:	e003      	b.n	800db60 <_ux_host_stack_initialize+0xa4>
        else

            /* Store memory in system structure.  */
            _ux_system_host -> ux_system_host_device_array =  (UX_DEVICE *) memory;
 800db58:	4b4c      	ldr	r3, [pc, #304]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	68ba      	ldr	r2, [r7, #8]
 800db5e:	615a      	str	r2, [r3, #20]

    }

#if !defined(UX_HOST_STANDALONE)
    /* Obtain enough stack for the two USBX host threads.  */
    if (status == UX_SUCCESS)
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d110      	bne.n	800db88 <_ux_host_stack_initialize+0xcc>
    {
        _ux_system_host -> ux_system_host_enum_thread_stack =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY,
 800db66:	4b49      	ldr	r3, [pc, #292]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800db68:	681c      	ldr	r4, [r3, #0]
 800db6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db6e:	2100      	movs	r1, #0
 800db70:	2000      	movs	r0, #0
 800db72:	f000 ffc1 	bl	800eaf8 <_ux_utility_memory_allocate>
 800db76:	4603      	mov	r3, r0
 800db78:	6263      	str	r3, [r4, #36]	; 0x24
                                                                            UX_HOST_ENUM_THREAD_STACK_SIZE);

        /* Check for successful allocation.  */
        if (_ux_system_host -> ux_system_host_enum_thread_stack == UX_NULL)
 800db7a:	4b44      	ldr	r3, [pc, #272]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db80:	2b00      	cmp	r3, #0
 800db82:	d101      	bne.n	800db88 <_ux_host_stack_initialize+0xcc>
            status = UX_MEMORY_INSUFFICIENT;
 800db84:	2312      	movs	r3, #18
 800db86:	60fb      	str	r3, [r7, #12]
    }

    /* Allocate another stack area.  */
    if (status == UX_SUCCESS)
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d112      	bne.n	800dbb4 <_ux_host_stack_initialize+0xf8>
    {
        _ux_system_host -> ux_system_host_hcd_thread_stack =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY,
 800db8e:	4b3f      	ldr	r3, [pc, #252]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800db90:	681c      	ldr	r4, [r3, #0]
 800db92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800db96:	2100      	movs	r1, #0
 800db98:	2000      	movs	r0, #0
 800db9a:	f000 ffad 	bl	800eaf8 <_ux_utility_memory_allocate>
 800db9e:	4603      	mov	r3, r0
 800dba0:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
                                                                            UX_HOST_HCD_THREAD_STACK_SIZE);

        /* Check for successful allocation.  */
        if (_ux_system_host -> ux_system_host_hcd_thread_stack == UX_NULL)
 800dba4:	4b39      	ldr	r3, [pc, #228]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d101      	bne.n	800dbb4 <_ux_host_stack_initialize+0xf8>
            status = UX_MEMORY_INSUFFICIENT;
 800dbb0:	2312      	movs	r3, #18
 800dbb2:	60fb      	str	r3, [r7, #12]
    }

    /* Create the semaphores used by the hub and root hub to awake the enumeration thread.  */
    if (status == UX_SUCCESS)
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d10d      	bne.n	800dbd6 <_ux_host_stack_initialize+0x11a>
    {
        status =  _ux_utility_semaphore_create(&_ux_system_host -> ux_system_host_enum_semaphore, "ux_system_host_enum_semaphore", 0);
 800dbba:	4b34      	ldr	r3, [pc, #208]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	33d8      	adds	r3, #216	; 0xd8
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	4933      	ldr	r1, [pc, #204]	; (800dc90 <_ux_host_stack_initialize+0x1d4>)
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f001 f9ec 	bl	800efa2 <_ux_utility_semaphore_create>
 800dbca:	60f8      	str	r0, [r7, #12]
        if(status != UX_SUCCESS)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d001      	beq.n	800dbd6 <_ux_host_stack_initialize+0x11a>
            status = UX_SEMAPHORE_ERROR;
 800dbd2:	2315      	movs	r3, #21
 800dbd4:	60fb      	str	r3, [r7, #12]
    }

    /* Create the semaphores used by the HCD to perform the completion phase of transfer_requests.  */
    if (status == UX_SUCCESS)
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d10e      	bne.n	800dbfa <_ux_host_stack_initialize+0x13e>
    {
        status =  _ux_utility_semaphore_create(&_ux_system_host -> ux_system_host_hcd_semaphore, "ux_system_host_hcd_semaphore", 0);
 800dbdc:	4b2b      	ldr	r3, [pc, #172]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	492b      	ldr	r1, [pc, #172]	; (800dc94 <_ux_host_stack_initialize+0x1d8>)
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f001 f9da 	bl	800efa2 <_ux_utility_semaphore_create>
 800dbee:	60f8      	str	r0, [r7, #12]
        if(status != UX_SUCCESS)
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d001      	beq.n	800dbfa <_ux_host_stack_initialize+0x13e>
            status = UX_SEMAPHORE_ERROR;
 800dbf6:	2315      	movs	r3, #21
 800dbf8:	60fb      	str	r3, [r7, #12]
    }

    /* Create the enumeration thread of USBX.  */
    if (status == UX_SUCCESS)
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d11d      	bne.n	800dc3c <_ux_host_stack_initialize+0x180>
    {
        status =  _ux_utility_thread_create(&_ux_system_host -> ux_system_host_enum_thread, "ux_system_host_enum_thread", _ux_host_stack_enum_thread_entry,
 800dc00:	4b22      	ldr	r3, [pc, #136]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f103 0028 	add.w	r0, r3, #40	; 0x28
                            0, _ux_system_host -> ux_system_host_enum_thread_stack,
 800dc08:	4b20      	ldr	r3, [pc, #128]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        status =  _ux_utility_thread_create(&_ux_system_host -> ux_system_host_enum_thread, "ux_system_host_enum_thread", _ux_host_stack_enum_thread_entry,
 800dc0e:	2201      	movs	r2, #1
 800dc10:	9205      	str	r2, [sp, #20]
 800dc12:	2200      	movs	r2, #0
 800dc14:	9204      	str	r2, [sp, #16]
 800dc16:	2214      	movs	r2, #20
 800dc18:	9203      	str	r2, [sp, #12]
 800dc1a:	2214      	movs	r2, #20
 800dc1c:	9202      	str	r2, [sp, #8]
 800dc1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc22:	9201      	str	r2, [sp, #4]
 800dc24:	9300      	str	r3, [sp, #0]
 800dc26:	2300      	movs	r3, #0
 800dc28:	4a1b      	ldr	r2, [pc, #108]	; (800dc98 <_ux_host_stack_initialize+0x1dc>)
 800dc2a:	491c      	ldr	r1, [pc, #112]	; (800dc9c <_ux_host_stack_initialize+0x1e0>)
 800dc2c:	f001 fa82 	bl	800f134 <_ux_utility_thread_create>
 800dc30:	60f8      	str	r0, [r7, #12]
                            UX_HOST_ENUM_THREAD_STACK_SIZE, UX_THREAD_PRIORITY_ENUM,
                            UX_THREAD_PRIORITY_ENUM, UX_NO_TIME_SLICE, UX_AUTO_START);
                            
        /* Check the completion status.  */
        if(status != UX_SUCCESS)
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d001      	beq.n	800dc3c <_ux_host_stack_initialize+0x180>
            status = UX_THREAD_ERROR;
 800dc38:	2316      	movs	r3, #22
 800dc3a:	60fb      	str	r3, [r7, #12]
    }

    /* Create the HCD thread of USBX.  */
    if (status == UX_SUCCESS)
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d11e      	bne.n	800dc80 <_ux_host_stack_initialize+0x1c4>
    {
        status =  _ux_utility_thread_create(&_ux_system_host -> ux_system_host_hcd_thread, "ux_host_stack_hcd_thread", _ux_host_stack_hcd_thread_entry,
 800dc42:	4b12      	ldr	r3, [pc, #72]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f103 00fc 	add.w	r0, r3, #252	; 0xfc
                            0, _ux_system_host -> ux_system_host_hcd_thread_stack,
 800dc4a:	4b10      	ldr	r3, [pc, #64]	; (800dc8c <_ux_host_stack_initialize+0x1d0>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
        status =  _ux_utility_thread_create(&_ux_system_host -> ux_system_host_hcd_thread, "ux_host_stack_hcd_thread", _ux_host_stack_hcd_thread_entry,
 800dc52:	2201      	movs	r2, #1
 800dc54:	9205      	str	r2, [sp, #20]
 800dc56:	2200      	movs	r2, #0
 800dc58:	9204      	str	r2, [sp, #16]
 800dc5a:	2202      	movs	r2, #2
 800dc5c:	9203      	str	r2, [sp, #12]
 800dc5e:	2202      	movs	r2, #2
 800dc60:	9202      	str	r2, [sp, #8]
 800dc62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dc66:	9201      	str	r2, [sp, #4]
 800dc68:	9300      	str	r3, [sp, #0]
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	4a0c      	ldr	r2, [pc, #48]	; (800dca0 <_ux_host_stack_initialize+0x1e4>)
 800dc6e:	490d      	ldr	r1, [pc, #52]	; (800dca4 <_ux_host_stack_initialize+0x1e8>)
 800dc70:	f001 fa60 	bl	800f134 <_ux_utility_thread_create>
 800dc74:	60f8      	str	r0, [r7, #12]
                            UX_HOST_HCD_THREAD_STACK_SIZE, UX_THREAD_PRIORITY_HCD,
                            UX_THREAD_PRIORITY_HCD, UX_NO_TIME_SLICE,UX_AUTO_START);

        /* Check the completion status.  */
        if(status != UX_SUCCESS)
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d001      	beq.n	800dc80 <_ux_host_stack_initialize+0x1c4>
            status = UX_THREAD_ERROR;
 800dc7c:	2316      	movs	r3, #22
 800dc7e:	60fb      	str	r3, [r7, #12]
    if (_ux_system_host -> ux_system_host_hcd_thread.tx_thread_id != 0)
        _ux_utility_thread_delete(&_ux_system_host -> ux_system_host_hcd_thread);
#else

    /* Return completion status to caller if success.  */
    if (status == UX_SUCCESS)
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d110      	bne.n	800dca8 <_ux_host_stack_initialize+0x1ec>
        return(status);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	e067      	b.n	800dd5a <_ux_host_stack_initialize+0x29e>
 800dc8a:	bf00      	nop
 800dc8c:	2400577c 	.word	0x2400577c
 800dc90:	08012900 	.word	0x08012900
 800dc94:	08012920 	.word	0x08012920
 800dc98:	0800d98d 	.word	0x0800d98d
 800dc9c:	08012940 	.word	0x08012940
 800dca0:	0800da45 	.word	0x0800da45
 800dca4:	0801295c 	.word	0x0801295c
     * no need to delete it.  */
#endif

#if !defined(UX_HOST_STANDALONE)
    /* Delete _ux_system_host -> ux_system_host_enum_thread.  */
    if (_ux_system_host -> ux_system_host_enum_thread.tx_thread_id != 0)
 800dca8:	4b2e      	ldr	r3, [pc, #184]	; (800dd64 <_ux_host_stack_initialize+0x2a8>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d005      	beq.n	800dcbe <_ux_host_stack_initialize+0x202>
        _ux_utility_thread_delete(&_ux_system_host -> ux_system_host_enum_thread);
 800dcb2:	4b2c      	ldr	r3, [pc, #176]	; (800dd64 <_ux_host_stack_initialize+0x2a8>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	3328      	adds	r3, #40	; 0x28
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f001 fa64 	bl	800f186 <_ux_utility_thread_delete>
    
    /* Delete _ux_system_host -> ux_system_host_hcd_semaphore.  */
    if (_ux_system_host -> ux_system_host_hcd_semaphore.tx_semaphore_id != 0)
 800dcbe:	4b29      	ldr	r3, [pc, #164]	; (800dd64 <_ux_host_stack_initialize+0x2a8>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d006      	beq.n	800dcd8 <_ux_host_stack_initialize+0x21c>
        _ux_utility_semaphore_delete(&_ux_system_host -> ux_system_host_hcd_semaphore);
 800dcca:	4b26      	ldr	r3, [pc, #152]	; (800dd64 <_ux_host_stack_initialize+0x2a8>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f001 f97f 	bl	800efd6 <_ux_utility_semaphore_delete>

    /* Delete _ux_system_host -> ux_system_host_enum_semaphore.  */
    if (_ux_system_host -> ux_system_host_enum_semaphore.tx_semaphore_id != 0)
 800dcd8:	4b22      	ldr	r3, [pc, #136]	; (800dd64 <_ux_host_stack_initialize+0x2a8>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d005      	beq.n	800dcf0 <_ux_host_stack_initialize+0x234>
        _ux_utility_semaphore_delete(&_ux_system_host -> ux_system_host_enum_semaphore);
 800dce4:	4b1f      	ldr	r3, [pc, #124]	; (800dd64 <_ux_host_stack_initialize+0x2a8>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	33d8      	adds	r3, #216	; 0xd8
 800dcea:	4618      	mov	r0, r3
 800dcec:	f001 f973 	bl	800efd6 <_ux_utility_semaphore_delete>

    /* Free _ux_system_host -> ux_system_host_hcd_thread_stack.  */
    if (_ux_system_host -> ux_system_host_hcd_thread_stack)
 800dcf0:	4b1c      	ldr	r3, [pc, #112]	; (800dd64 <_ux_host_stack_initialize+0x2a8>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d006      	beq.n	800dd0a <_ux_host_stack_initialize+0x24e>
        _ux_utility_memory_free(_ux_system_host -> ux_system_host_hcd_thread_stack);
 800dcfc:	4b19      	ldr	r3, [pc, #100]	; (800dd64 <_ux_host_stack_initialize+0x2a8>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800dd04:	4618      	mov	r0, r3
 800dd06:	f001 f819 	bl	800ed3c <_ux_utility_memory_free>

    /* Free _ux_system_host -> ux_system_host_enum_thread_stack.  */
    if (_ux_system_host -> ux_system_host_enum_thread_stack)
 800dd0a:	4b16      	ldr	r3, [pc, #88]	; (800dd64 <_ux_host_stack_initialize+0x2a8>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d005      	beq.n	800dd20 <_ux_host_stack_initialize+0x264>
        _ux_utility_memory_free(_ux_system_host -> ux_system_host_enum_thread_stack);
 800dd14:	4b13      	ldr	r3, [pc, #76]	; (800dd64 <_ux_host_stack_initialize+0x2a8>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f001 f80e 	bl	800ed3c <_ux_utility_memory_free>
#endif

    /* Free _ux_system_host -> ux_system_host_device_array.  */
    if (_ux_system_host -> ux_system_host_device_array)
 800dd20:	4b10      	ldr	r3, [pc, #64]	; (800dd64 <_ux_host_stack_initialize+0x2a8>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	695b      	ldr	r3, [r3, #20]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d005      	beq.n	800dd36 <_ux_host_stack_initialize+0x27a>
        _ux_utility_memory_free(_ux_system_host -> ux_system_host_device_array);
 800dd2a:	4b0e      	ldr	r3, [pc, #56]	; (800dd64 <_ux_host_stack_initialize+0x2a8>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	695b      	ldr	r3, [r3, #20]
 800dd30:	4618      	mov	r0, r3
 800dd32:	f001 f803 	bl	800ed3c <_ux_utility_memory_free>
    
    /* Free _ux_system_host -> ux_system_host_class_array.  */
    if (_ux_system_host -> ux_system_host_class_array)
 800dd36:	4b0b      	ldr	r3, [pc, #44]	; (800dd64 <_ux_host_stack_initialize+0x2a8>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d005      	beq.n	800dd4c <_ux_host_stack_initialize+0x290>
        _ux_utility_memory_free(_ux_system_host -> ux_system_host_class_array);
 800dd40:	4b08      	ldr	r3, [pc, #32]	; (800dd64 <_ux_host_stack_initialize+0x2a8>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	4618      	mov	r0, r3
 800dd48:	f000 fff8 	bl	800ed3c <_ux_utility_memory_free>

    /* Free _ux_system_host -> ux_system_host_hcd_array.  */
    _ux_utility_memory_free(_ux_system_host -> ux_system_host_hcd_array);
 800dd4c:	4b05      	ldr	r3, [pc, #20]	; (800dd64 <_ux_host_stack_initialize+0x2a8>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	4618      	mov	r0, r3
 800dd54:	f000 fff2 	bl	800ed3c <_ux_utility_memory_free>

    /* Return completion status to caller.  */
    return(status);
 800dd58:	68fb      	ldr	r3, [r7, #12]
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3714      	adds	r7, #20
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd90      	pop	{r4, r7, pc}
 800dd62:	bf00      	nop
 800dd64:	2400577c 	.word	0x2400577c

0800dd68 <_ux_host_stack_interface_endpoint_get>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_interface_endpoint_get(UX_INTERFACE *interface_ptr, UINT endpoint_index, UX_ENDPOINT **endpoint)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b086      	sub	sp, #24
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_INTERFACE_ENDPOINT_GET, interface_ptr, endpoint_index, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

    /* Do a sanity check on the interface handle.  */
    if (interface_ptr -> ux_interface_handle != (ULONG) (ALIGN_TYPE) interface_ptr)
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681a      	ldr	r2, [r3, #0]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d006      	beq.n	800dd8c <_ux_host_stack_interface_endpoint_get+0x24>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_INTERFACE_HANDLE_UNKNOWN);
 800dd7e:	2252      	movs	r2, #82	; 0x52
 800dd80:	2104      	movs	r1, #4
 800dd82:	2002      	movs	r0, #2
 800dd84:	f000 fd38 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 800dd88:	2352      	movs	r3, #82	; 0x52
 800dd8a:	e01d      	b.n	800ddc8 <_ux_host_stack_interface_endpoint_get+0x60>
    }
            
    /* Start with the endpoint attached to the interface.  */
    current_endpoint =  interface_ptr -> ux_interface_first_endpoint;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd90:	613b      	str	r3, [r7, #16]

    /* The first endpoint has the index 0.  */    
    current_endpoint_index =  0;
 800dd92:	2300      	movs	r3, #0
 800dd94:	617b      	str	r3, [r7, #20]
    
    /* Traverse the list of the endpoints until we found the right one.  */        
    while (current_endpoint != UX_NULL)
 800dd96:	e00e      	b.n	800ddb6 <_ux_host_stack_interface_endpoint_get+0x4e>
    {

        /* Check if the endpoint index matches the current one.  */
        if (endpoint_index == current_endpoint_index)
 800dd98:	68ba      	ldr	r2, [r7, #8]
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d104      	bne.n	800ddaa <_ux_host_stack_interface_endpoint_get+0x42>
        {

            /* Setup the return endpoint pointer.  */
            *endpoint=current_endpoint;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	693a      	ldr	r2, [r7, #16]
 800dda4:	601a      	str	r2, [r3, #0]

            /* Return success to the caller.  */
            return(UX_SUCCESS);
 800dda6:	2300      	movs	r3, #0
 800dda8:	e00e      	b.n	800ddc8 <_ux_host_stack_interface_endpoint_get+0x60>
        }
        
        /* Move to the next endpoint.  */
        current_endpoint =  current_endpoint -> ux_endpoint_next_endpoint;
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddae:	613b      	str	r3, [r7, #16]
        
        /* Move to the next index.  */
        current_endpoint_index++;
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	617b      	str	r3, [r7, #20]
    while (current_endpoint != UX_NULL)
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d1ed      	bne.n	800dd98 <_ux_host_stack_interface_endpoint_get+0x30>
    }

    /* Error trap. */
    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_ENDPOINT_HANDLE_UNKNOWN);
 800ddbc:	2253      	movs	r2, #83	; 0x53
 800ddbe:	2104      	movs	r1, #4
 800ddc0:	2002      	movs	r0, #2
 800ddc2:	f000 fd19 	bl	800e7f8 <_ux_system_error_handler>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_ENDPOINT_HANDLE_UNKNOWN, endpoint, 0, 0, UX_TRACE_ERRORS, 0, 0)

    /* Return an error!  */
    return(UX_ENDPOINT_HANDLE_UNKNOWN);
 800ddc6:	2353      	movs	r3, #83	; 0x53
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3718      	adds	r7, #24
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <_ux_host_stack_interface_instance_create>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_interface_instance_create(UX_INTERFACE *interface_ptr)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_INTERFACE_INSTANCE_CREATE, interface_ptr, 0, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

    /* Obtain the first endpoint for this alternate setting.  */
    endpoint =  interface_ptr -> ux_interface_first_endpoint;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dddc:	60fb      	str	r3, [r7, #12]

    /* Loop to create each endpoint.  */
    while (endpoint != UX_NULL)
 800ddde:	e00b      	b.n	800ddf8 <_ux_host_stack_interface_instance_create+0x28>
    {

        /* Create an endpoint for the instance.  */
        status = _ux_host_stack_endpoint_instance_create(endpoint);
 800dde0:	68f8      	ldr	r0, [r7, #12]
 800dde2:	f7ff fd45 	bl	800d870 <_ux_host_stack_endpoint_instance_create>
 800dde6:	60b8      	str	r0, [r7, #8]
        
        /* Check status, the controller may have refused the endpoint creation.  */
        if (status != UX_SUCCESS)
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d001      	beq.n	800ddf2 <_ux_host_stack_interface_instance_create+0x22>
        
            /* An error occurred at the controller level.  */
            return(status);
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	e006      	b.n	800de00 <_ux_host_stack_interface_instance_create+0x30>
        
        /* Move to next endpoint.  */
        endpoint =  endpoint -> ux_endpoint_next_endpoint;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf6:	60fb      	str	r3, [r7, #12]
    while (endpoint != UX_NULL)
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d1f0      	bne.n	800dde0 <_ux_host_stack_interface_instance_create+0x10>

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_HOST_OBJECT_TYPE_INTERFACE, interface_ptr, 0, 0, 0);

    /* Return completion status.  */
    return(UX_SUCCESS); 
 800ddfe:	2300      	movs	r3, #0
}
 800de00:	4618      	mov	r0, r3
 800de02:	3710      	adds	r7, #16
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <_ux_host_stack_interface_instance_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_host_stack_interface_instance_delete(UX_INTERFACE *interface_ptr)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(interface_ptr);

    /* Obtain the first endpoint for this alternate setting.  */
    endpoint =  interface_ptr -> ux_interface_first_endpoint;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de14:	60fb      	str	r3, [r7, #12]

    /* Loop to delete each endpoint.  */
    while (endpoint != UX_NULL)
 800de16:	e005      	b.n	800de24 <_ux_host_stack_interface_instance_delete+0x1c>
    {

        /* Delete endpoint.  */
        _ux_host_stack_endpoint_instance_delete(endpoint);
 800de18:	68f8      	ldr	r0, [r7, #12]
 800de1a:	f7ff fd7b 	bl	800d914 <_ux_host_stack_endpoint_instance_delete>

        /* Move to next endpoint. */
        endpoint =  endpoint -> ux_endpoint_next_endpoint;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de22:	60fb      	str	r3, [r7, #12]
    while (endpoint != UX_NULL)
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d1f6      	bne.n	800de18 <_ux_host_stack_interface_instance_delete+0x10>
    }

    /* Return to caller.  */
    return; 
 800de2a:	bf00      	nop
}
 800de2c:	3710      	adds	r7, #16
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
	...

0800de34 <_ux_host_stack_interfaces_scan>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_interfaces_scan(UX_CONFIGURATION *configuration, UCHAR * descriptor)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b090      	sub	sp, #64	; 0x40
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	6039      	str	r1, [r7, #0]
ULONG                               interface_association_descriptor_present;
ULONG                               interface_in_iad_count;
UX_INTERFACE_ASSOCIATION_DESCRIPTOR interface_association;

    /* Retrieve the size of all the configuration descriptor.  */
    total_configuration_length =  configuration -> ux_configuration_descriptor.wTotalLength;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	695b      	ldr	r3, [r3, #20]
 800de42:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    /* Set the IAD to false.  */
    interface_association_descriptor_present = UX_FALSE;
 800de44:	2300      	movs	r3, #0
 800de46:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Set the IAD interface count to zero.  */
    interface_in_iad_count = 0;
 800de48:	2300      	movs	r3, #0
 800de4a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Scan the entire descriptor and search for interfaces. We should also ensure that 
       the descriptor is valid by verifying the length of each descriptor scanned.  */
    while (total_configuration_length)
 800de4c:	e065      	b.n	800df1a <_ux_host_stack_interfaces_scan+0xe6>
    {

        /* Gather the length and type of the descriptor.  */
        descriptor_length =  *descriptor;
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	633b      	str	r3, [r7, #48]	; 0x30
        descriptor_type =    *(descriptor + 1);
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	3301      	adds	r3, #1
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Make sure this descriptor has at least the minimum length.  */
        if (descriptor_length < 3)
 800de5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de5e:	2b02      	cmp	r3, #2
 800de60:	d806      	bhi.n	800de70 <_ux_host_stack_interfaces_scan+0x3c>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_DESCRIPTOR_CORRUPTED);
 800de62:	2242      	movs	r2, #66	; 0x42
 800de64:	2104      	movs	r1, #4
 800de66:	2002      	movs	r0, #2
 800de68:	f000 fcc6 	bl	800e7f8 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, descriptor, 0, 0, UX_TRACE_ERRORS, 0, 0)

            return(UX_DESCRIPTOR_CORRUPTED);
 800de6c:	2342      	movs	r3, #66	; 0x42
 800de6e:	e058      	b.n	800df22 <_ux_host_stack_interfaces_scan+0xee>
        }            

        /* Check the type for an interface association descriptor.  */
        if (descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 800de70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de72:	2b0b      	cmp	r3, #11
 800de74:	d113      	bne.n	800de9e <_ux_host_stack_interfaces_scan+0x6a>
        {

            /* Parse the interface association descriptor and make it machine independent.  */
            _ux_utility_descriptor_parse(descriptor,
 800de76:	f107 0308 	add.w	r3, r7, #8
 800de7a:	2208      	movs	r2, #8
 800de7c:	492b      	ldr	r1, [pc, #172]	; (800df2c <_ux_host_stack_interfaces_scan+0xf8>)
 800de7e:	6838      	ldr	r0, [r7, #0]
 800de80:	f000 fda8 	bl	800e9d4 <_ux_utility_descriptor_parse>
                            _ux_system_interface_association_descriptor_structure,
                            UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ENTRIES,
                            (UCHAR *) &interface_association);

            /* Retrieve the CLASS/SUBCLASS from descriptor and store it in the configuration instance.  */
            configuration -> ux_configuration_iad_class    = interface_association.bFunctionClass;
 800de84:	69ba      	ldr	r2, [r7, #24]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	639a      	str	r2, [r3, #56]	; 0x38
            configuration -> ux_configuration_iad_subclass = interface_association.bFunctionSubClass;
 800de8a:	69fa      	ldr	r2, [r7, #28]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	63da      	str	r2, [r3, #60]	; 0x3c
            configuration -> ux_configuration_iad_protocol = interface_association.bFunctionProtocol;
 800de90:	6a3a      	ldr	r2, [r7, #32]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	641a      	str	r2, [r3, #64]	; 0x40

            /* We have an IAD.  */
            interface_association_descriptor_present = UX_TRUE;
 800de96:	2301      	movs	r3, #1
 800de98:	63bb      	str	r3, [r7, #56]	; 0x38
            
            /* Memorize the number of interfaces attached to this IAD.  */
            interface_in_iad_count = interface_association.bInterfaceCount;
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        
        /* Check the type for an interface descriptor.  */
        if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800de9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea0:	2b04      	cmp	r3, #4
 800dea2:	d11e      	bne.n	800dee2 <_ux_host_stack_interfaces_scan+0xae>
        {

            /* We have found an interface descriptor. This descriptor contains at least 
               the default alternate setting (with value 0) and may have others.  */
            status =  _ux_host_stack_new_interface_create(configuration, descriptor, total_configuration_length);
 800dea4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dea6:	6839      	ldr	r1, [r7, #0]
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 fa07 	bl	800e2bc <_ux_host_stack_new_interface_create>
 800deae:	62b8      	str	r0, [r7, #40]	; 0x28

            /* Are we within an IAD ? */
            if (interface_association_descriptor_present == UX_TRUE)
 800deb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb2:	2b01      	cmp	r3, #1
 800deb4:	d110      	bne.n	800ded8 <_ux_host_stack_interfaces_scan+0xa4>
            {

                /* Decrement the number of interfaces attached here.  */
                interface_in_iad_count--;
 800deb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deb8:	3b01      	subs	r3, #1
 800deba:	637b      	str	r3, [r7, #52]	; 0x34
                
                /* Are we at the end of the interface count ? */
                if (interface_in_iad_count == 0)
 800debc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d10a      	bne.n	800ded8 <_ux_host_stack_interfaces_scan+0xa4>
                {
    
                    /* Set the IAD to false now.  */
                    interface_association_descriptor_present = UX_FALSE;
 800dec2:	2300      	movs	r3, #0
 800dec4:	63bb      	str	r3, [r7, #56]	; 0x38

                    /* Reset the IAD Class/Subclass/Protocol. */
                    configuration -> ux_configuration_iad_class    = 0;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2200      	movs	r2, #0
 800deca:	639a      	str	r2, [r3, #56]	; 0x38
                    configuration -> ux_configuration_iad_subclass = 0;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2200      	movs	r2, #0
 800ded0:	63da      	str	r2, [r3, #60]	; 0x3c
                    configuration -> ux_configuration_iad_protocol = 0;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2200      	movs	r2, #0
 800ded6:	641a      	str	r2, [r3, #64]	; 0x40

                }
            }

            /* Check return status.  */
            if(status != UX_SUCCESS)
 800ded8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d001      	beq.n	800dee2 <_ux_host_stack_interfaces_scan+0xae>
                return(status);
 800dede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee0:	e01f      	b.n	800df22 <_ux_host_stack_interfaces_scan+0xee>
        }       

        /* Check the type for an OTG descriptor.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM)
 800dee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee4:	2b09      	cmp	r3, #9
 800dee6:	d105      	bne.n	800def4 <_ux_host_stack_interfaces_scan+0xc0>
        
            /* Retrieve the bmAttributes for SRP/HNP support.  */
            configuration -> ux_configuration_otg_capabilities = (ULONG) *(descriptor + UX_OTG_BM_ATTRIBUTES);
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	3302      	adds	r3, #2
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	461a      	mov	r2, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	609a      	str	r2, [r3, #8]

        /* Verify if the descriptor is still valid.  */
        if (descriptor_length > total_configuration_length)
 800def4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800def6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800def8:	429a      	cmp	r2, r3
 800defa:	d906      	bls.n	800df0a <_ux_host_stack_interfaces_scan+0xd6>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_DESCRIPTOR_CORRUPTED);
 800defc:	2242      	movs	r2, #66	; 0x42
 800defe:	2104      	movs	r1, #4
 800df00:	2002      	movs	r0, #2
 800df02:	f000 fc79 	bl	800e7f8 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, descriptor, 0, 0, UX_TRACE_ERRORS, 0, 0)

            return(UX_DESCRIPTOR_CORRUPTED);
 800df06:	2342      	movs	r3, #66	; 0x42
 800df08:	e00b      	b.n	800df22 <_ux_host_stack_interfaces_scan+0xee>
        }
        /* Jump to the next descriptor if we have not reached the end.  */
        descriptor +=  descriptor_length;
 800df0a:	683a      	ldr	r2, [r7, #0]
 800df0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0e:	4413      	add	r3, r2
 800df10:	603b      	str	r3, [r7, #0]

        /* And adjust the length left to parse in the descriptor.  */
        total_configuration_length -=  descriptor_length;
 800df12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df16:	1ad3      	subs	r3, r2, r3
 800df18:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (total_configuration_length)
 800df1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d196      	bne.n	800de4e <_ux_host_stack_interfaces_scan+0x1a>
    }

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800df20:	2300      	movs	r3, #0
}
 800df22:	4618      	mov	r0, r3
 800df24:	3740      	adds	r7, #64	; 0x40
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	24000068 	.word	0x24000068

0800df30 <_ux_host_stack_new_configuration_create>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_host_stack_new_configuration_create(UX_DEVICE *device, UX_CONFIGURATION *configuration)
{
 800df30:	b480      	push	{r7}
 800df32:	b085      	sub	sp, #20
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	6039      	str	r1, [r7, #0]
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_NEW_CONFIGURATION_CREATE, device, configuration, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

    /* The device that owns this configuration is memorized in the 
       configuration container itself, easier for back chaining.  */
    configuration -> ux_configuration_device =  device;
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	687a      	ldr	r2, [r7, #4]
 800df3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Save the configuration handle in the container, this is for ensuring the
       configuration container is not corrupted.  */
    configuration -> ux_configuration_handle =  (ULONG) (ALIGN_TYPE) configuration;
 800df40:	683a      	ldr	r2, [r7, #0]
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	601a      	str	r2, [r3, #0]

    /* There is 2 cases for the creation of the configuration descriptor 
       if this is the first one, the configuration descriptor is hooked
       to the device. If it is not the first one, the configuration is 
       hooked to the end of the chain of configurations.  */
    if (device -> ux_device_first_configuration == UX_NULL)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d103      	bne.n	800df56 <_ux_host_stack_new_configuration_create+0x26>
    {
        device -> ux_device_first_configuration =  configuration;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	683a      	ldr	r2, [r7, #0]
 800df52:	649a      	str	r2, [r3, #72]	; 0x48
        /* Hook the new configuration.  */
        list_configuration -> ux_configuration_next_configuration =  configuration;
    }

    /* Return to caller.  */
    return;
 800df54:	e00e      	b.n	800df74 <_ux_host_stack_new_configuration_create+0x44>
        list_configuration =  device -> ux_device_first_configuration;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df5a:	60fb      	str	r3, [r7, #12]
        while (list_configuration -> ux_configuration_next_configuration != UX_NULL)
 800df5c:	e002      	b.n	800df64 <_ux_host_stack_new_configuration_create+0x34>
            list_configuration =  list_configuration -> ux_configuration_next_configuration;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df62:	60fb      	str	r3, [r7, #12]
        while (list_configuration -> ux_configuration_next_configuration != UX_NULL)
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d1f8      	bne.n	800df5e <_ux_host_stack_new_configuration_create+0x2e>
        list_configuration -> ux_configuration_next_configuration =  configuration;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	683a      	ldr	r2, [r7, #0]
 800df70:	631a      	str	r2, [r3, #48]	; 0x30
    return;
 800df72:	bf00      	nop
}
 800df74:	3714      	adds	r7, #20
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr
	...

0800df80 <_ux_host_stack_new_device_create>:
/**************************************************************************/
UINT  _ux_host_stack_new_device_create(UX_HCD *hcd, UX_DEVICE *device_owner,
                                UINT port_index, UINT device_speed,
                                UINT port_max_power,
                                UX_DEVICE **created_device)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b088      	sub	sp, #32
 800df84:	af00      	add	r7, sp, #0
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	607a      	str	r2, [r7, #4]
 800df8c:	603b      	str	r3, [r7, #0]


#if UX_MAX_DEVICES > 1
    /* Verify the number of devices attached to the HCD already. Normally a HCD
       can have up to 127 devices but that can be tailored.  */
    if (hcd -> ux_hcd_nb_devices > UX_MAX_USB_DEVICES)
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df92:	2b7f      	cmp	r3, #127	; 0x7f
 800df94:	d906      	bls.n	800dfa4 <_ux_host_stack_new_device_create+0x24>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_TOO_MANY_DEVICES);
 800df96:	2211      	movs	r2, #17
 800df98:	2104      	movs	r1, #4
 800df9a:	2002      	movs	r0, #2
 800df9c:	f000 fc2c 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TOO_MANY_DEVICES, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_TOO_MANY_DEVICES);
 800dfa0:	2311      	movs	r3, #17
 800dfa2:	e0a3      	b.n	800e0ec <_ux_host_stack_new_device_create+0x16c>
    }
#endif

    /* Get a new device container to store this new device.  */
    device =  _ux_host_stack_new_device_get();
 800dfa4:	f000 f8aa 	bl	800e0fc <_ux_host_stack_new_device_get>
 800dfa8:	61b8      	str	r0, [r7, #24]
    if (device == UX_NULL)
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d106      	bne.n	800dfbe <_ux_host_stack_new_device_create+0x3e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_TOO_MANY_DEVICES);
 800dfb0:	2211      	movs	r2, #17
 800dfb2:	2104      	movs	r1, #4
 800dfb4:	2002      	movs	r0, #2
 800dfb6:	f000 fc1f 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TOO_MANY_DEVICES, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_TOO_MANY_DEVICES);
 800dfba:	2311      	movs	r3, #17
 800dfbc:	e096      	b.n	800e0ec <_ux_host_stack_new_device_create+0x16c>
    }

    /* Store the device instance.  */
    *created_device = device;
 800dfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc0:	69ba      	ldr	r2, [r7, #24]
 800dfc2:	601a      	str	r2, [r3, #0]

    /* Increment the number of devices on this bus.  */
    hcd -> ux_hcd_nb_devices++;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfc8:	1c5a      	adds	r2, r3, #1
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	661a      	str	r2, [r3, #96]	; 0x60
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_NEW_DEVICE_CREATE, hcd, device_owner, port_index, device, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

    /* At this stage the device is attached but not configured.
       we don't have to worry about power consumption yet.
       Initialize the device structure.  */
    device -> ux_device_handle =         (ULONG) (ALIGN_TYPE) device;
 800dfce:	69ba      	ldr	r2, [r7, #24]
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	601a      	str	r2, [r3, #0]
    device -> ux_device_state =          UX_DEVICE_ATTACHED;
 800dfd4:	69bb      	ldr	r3, [r7, #24]
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	609a      	str	r2, [r3, #8]
    device -> ux_device_address =        0;
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	2200      	movs	r2, #0
 800dfde:	60da      	str	r2, [r3, #12]
    device -> ux_device_speed =          device_speed;
 800dfe0:	69bb      	ldr	r3, [r7, #24]
 800dfe2:	683a      	ldr	r2, [r7, #0]
 800dfe4:	611a      	str	r2, [r3, #16]
    UX_DEVICE_MAX_POWER_SET(device, port_max_power);
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfea:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    UX_DEVICE_PARENT_SET(device, device_owner);
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	68ba      	ldr	r2, [r7, #8]
 800dff2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    UX_DEVICE_HCD_SET(device, hcd);
    UX_DEVICE_PORT_LOCATION_SET(device, port_index);
 800dff6:	69bb      	ldr	r3, [r7, #24]
 800dff8:	687a      	ldr	r2, [r7, #4]
 800dffa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    device -> ux_device_power_source =   UX_DEVICE_BUS_POWERED;
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	2201      	movs	r2, #1
 800e002:	615a      	str	r2, [r3, #20]

    /* Create a semaphore for the device. This is to protect endpoint 0 mostly for OTG HNP polling. The initial count is 1 as
       a mutex mechanism.  */
    status =  _ux_host_semaphore_create(&device -> ux_device_protection_semaphore, "ux_host_endpoint0_semaphore", 1);
 800e004:	69bb      	ldr	r3, [r7, #24]
 800e006:	3324      	adds	r3, #36	; 0x24
 800e008:	2201      	movs	r2, #1
 800e00a:	493a      	ldr	r1, [pc, #232]	; (800e0f4 <_ux_host_stack_new_device_create+0x174>)
 800e00c:	4618      	mov	r0, r3
 800e00e:	f000 ffc8 	bl	800efa2 <_ux_utility_semaphore_create>
 800e012:	61f8      	str	r0, [r7, #28]

    /* Check semaphore creation.  */
    if (status != UX_SUCCESS)
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d001      	beq.n	800e01e <_ux_host_stack_new_device_create+0x9e>
    {

        /* Return error. Device resources that have been allocated until this
           point should be freed by the caller via _ux_host_stack_device_resources_free.  */
        return(UX_SEMAPHORE_ERROR);
 800e01a:	2315      	movs	r3, #21
 800e01c:	e066      	b.n	800e0ec <_ux_host_stack_new_device_create+0x16c>
    }

    /* Initialize the default control endpoint permanently attached
       to the device.  */
    control_endpoint =                               &device -> ux_device_control_endpoint;
 800e01e:	69bb      	ldr	r3, [r7, #24]
 800e020:	3384      	adds	r3, #132	; 0x84
 800e022:	617b      	str	r3, [r7, #20]
    control_endpoint -> ux_endpoint =                (ULONG) (ALIGN_TYPE) control_endpoint;
 800e024:	697a      	ldr	r2, [r7, #20]
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	601a      	str	r2, [r3, #0]
    control_endpoint -> ux_endpoint_next_endpoint =  UX_NULL;
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	2200      	movs	r2, #0
 800e02e:	625a      	str	r2, [r3, #36]	; 0x24
    control_endpoint -> ux_endpoint_interface =      UX_NULL;
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	2200      	movs	r2, #0
 800e034:	629a      	str	r2, [r3, #40]	; 0x28
    control_endpoint -> ux_endpoint_device =         device;
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	69ba      	ldr	r2, [r7, #24]
 800e03a:	62da      	str	r2, [r3, #44]	; 0x2c
    control_endpoint -> ux_endpoint_transfer_request.ux_transfer_request_endpoint = control_endpoint;
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	697a      	ldr	r2, [r7, #20]
 800e040:	635a      	str	r2, [r3, #52]	; 0x34

    /* Create a semaphore for this endpoint to be attached to its transfer request.  */
    status =  _ux_host_semaphore_create(&control_endpoint -> ux_endpoint_transfer_request.ux_transfer_request_semaphore, "ux_host_transfer_request_semaphore", 0);
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	3374      	adds	r3, #116	; 0x74
 800e046:	2200      	movs	r2, #0
 800e048:	492b      	ldr	r1, [pc, #172]	; (800e0f8 <_ux_host_stack_new_device_create+0x178>)
 800e04a:	4618      	mov	r0, r3
 800e04c:	f000 ffa9 	bl	800efa2 <_ux_utility_semaphore_create>
 800e050:	61f8      	str	r0, [r7, #28]

    /* Check semaphore creation.  */
    if (status != UX_SUCCESS)
 800e052:	69fb      	ldr	r3, [r7, #28]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d001      	beq.n	800e05c <_ux_host_stack_new_device_create+0xdc>
    {

        /* Return error. Device resources that have been allocated until this
           point should be freed by the caller via _ux_host_stack_device_resources_free.  */
        return(UX_SEMAPHORE_ERROR);
 800e058:	2315      	movs	r3, #21
 800e05a:	e047      	b.n	800e0ec <_ux_host_stack_new_device_create+0x16c>
    }

    /* If the device is running in high speed the default max packet size for the control endpoint is 64.
       All other speeds the size is 8.  */
    if (device_speed == UX_HIGH_SPEED_DEVICE)
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	2b02      	cmp	r3, #2
 800e060:	d103      	bne.n	800e06a <_ux_host_stack_new_device_create+0xea>
        control_endpoint -> ux_endpoint_descriptor.wMaxPacketSize =  UX_DEFAULT_HS_MPS;
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	2240      	movs	r2, #64	; 0x40
 800e066:	61da      	str	r2, [r3, #28]
 800e068:	e002      	b.n	800e070 <_ux_host_stack_new_device_create+0xf0>
    else
        control_endpoint -> ux_endpoint_descriptor.wMaxPacketSize =  UX_DEFAULT_MPS;
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	2208      	movs	r2, #8
 800e06e:	61da      	str	r2, [r3, #28]

    /* Create the default control endpoint at the HCD level.  */
    status =  hcd -> ux_hcd_entry_function(hcd, UX_HCD_CREATE_ENDPOINT, (VOID *) control_endpoint);
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e074:	697a      	ldr	r2, [r7, #20]
 800e076:	210e      	movs	r1, #14
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	4798      	blx	r3
 800e07c:	61f8      	str	r0, [r7, #28]
    /* Enumeration steps will be done in task state machine.  */

#else

    /* Going on to do enumeration (requests).  */
    if (status == UX_SUCCESS)
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d114      	bne.n	800e0ae <_ux_host_stack_new_device_create+0x12e>
    {

        /* Now control endpoint is ready, set state to running. */
        control_endpoint -> ux_endpoint_state =          UX_ENDPOINT_RUNNING;
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	2201      	movs	r2, #1
 800e088:	605a      	str	r2, [r3, #4]

        /* Set the address of the device. The first time a USB device is
           accessed, it responds to the address 0. We need to change the address
           to a free device address between 1 and 127 ASAP.  */
        status =  _ux_host_stack_device_address_set(device);
 800e08a:	69b8      	ldr	r0, [r7, #24]
 800e08c:	f7ff f936 	bl	800d2fc <_ux_host_stack_device_address_set>
 800e090:	61f8      	str	r0, [r7, #28]
        if (status == UX_SUCCESS)
 800e092:	69fb      	ldr	r3, [r7, #28]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d10a      	bne.n	800e0ae <_ux_host_stack_new_device_create+0x12e>
        {

            /* Get the device descriptor.  */
            status =  _ux_host_stack_device_descriptor_read(device);
 800e098:	69b8      	ldr	r0, [r7, #24]
 800e09a:	f7ff fa23 	bl	800d4e4 <_ux_host_stack_device_descriptor_read>
 800e09e:	61f8      	str	r0, [r7, #28]
            if (status == UX_SUCCESS)
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d103      	bne.n	800e0ae <_ux_host_stack_new_device_create+0x12e>
            {

                /* Get the configuration descriptor(s) for the device
                   and parse all the configuration, interface, endpoints...  */
                status =  _ux_host_stack_configuration_enumerate(device);
 800e0a6:	69b8      	ldr	r0, [r7, #24]
 800e0a8:	f7fe ff68 	bl	800cf7c <_ux_host_stack_configuration_enumerate>
 800e0ac:	61f8      	str	r0, [r7, #28]
    }

    /* Check the status of the previous operations. If there was an
       error during any of the phases, the device resources must be
       freed based on if we want to retry.  */
    if (status == UX_SUCCESS)
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d11a      	bne.n	800e0ea <_ux_host_stack_new_device_create+0x16a>

        /* The device, configuration(s), interface(s), endpoint(s) are
           now in order for this device to work. No configuration is set
           yet. First we need to find a class driver that wants to own
           it. There is no need to have an orphan device in a configured state.   */
        status =  _ux_host_stack_class_device_scan(device);
 800e0b4:	69b8      	ldr	r0, [r7, #24]
 800e0b6:	f7fe fe0b 	bl	800ccd0 <_ux_host_stack_class_device_scan>
 800e0ba:	61f8      	str	r0, [r7, #28]
        if (status == UX_NO_CLASS_MATCH)
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	2b57      	cmp	r3, #87	; 0x57
 800e0c0:	d103      	bne.n	800e0ca <_ux_host_stack_new_device_create+0x14a>
        {

            status =  _ux_host_stack_class_interface_scan(device);
 800e0c2:	69b8      	ldr	r0, [r7, #24]
 800e0c4:	f7fe feab 	bl	800ce1e <_ux_host_stack_class_interface_scan>
 800e0c8:	61f8      	str	r0, [r7, #28]

        }

        /* Check if there is unnecessary resource to free.  */
        if (device -> ux_device_packed_configuration &&
 800e0ca:	69bb      	ldr	r3, [r7, #24]
 800e0cc:	69db      	ldr	r3, [r3, #28]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d00b      	beq.n	800e0ea <_ux_host_stack_new_device_create+0x16a>
            device -> ux_device_packed_configuration_keep_count == 0)
 800e0d2:	69bb      	ldr	r3, [r7, #24]
 800e0d4:	6a1b      	ldr	r3, [r3, #32]
        if (device -> ux_device_packed_configuration &&
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d107      	bne.n	800e0ea <_ux_host_stack_new_device_create+0x16a>
        {
            _ux_utility_memory_free(device -> ux_device_packed_configuration);
 800e0da:	69bb      	ldr	r3, [r7, #24]
 800e0dc:	69db      	ldr	r3, [r3, #28]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f000 fe2c 	bl	800ed3c <_ux_utility_memory_free>
            device -> ux_device_packed_configuration = UX_NULL;
 800e0e4:	69bb      	ldr	r3, [r7, #24]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	61da      	str	r2, [r3, #28]
    }
#endif

    /* Return status. If there's an error, device resources that have been 
       allocated until this point should be freed by the caller via _ux_host_stack_device_resources_free.  */
    return(status);
 800e0ea:	69fb      	ldr	r3, [r7, #28]
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3720      	adds	r7, #32
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	08012978 	.word	0x08012978
 800e0f8:	08012994 	.word	0x08012994

0800e0fc <_ux_host_stack_new_device_get>:
/*                                            fixed standalone enum init, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UX_DEVICE  *_ux_host_stack_new_device_get(VOID)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
#if defined(UX_HOST_STANDALONE)
UX_DEVICE       *enum_next;
#endif    

    /* Start with the first device.  */
    device =  _ux_system_host -> ux_system_host_device_array;    
 800e102:	4b13      	ldr	r3, [pc, #76]	; (800e150 <_ux_host_stack_new_device_get+0x54>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	695b      	ldr	r3, [r3, #20]
 800e108:	603b      	str	r3, [r7, #0]

#if UX_MAX_DEVICES > 1
    /* Reset the container index.  */
    container_index =  0;
 800e10a:	2300      	movs	r3, #0
 800e10c:	607b      	str	r3, [r7, #4]

    /* Search the list until the end.  */
    while (container_index++ < _ux_system_host -> ux_system_host_max_devices)
 800e10e:	e012      	b.n	800e136 <_ux_host_stack_new_device_get+0x3a>
#endif
    {

        /* Until we have found an unused entry.  */
        if (device -> ux_device_handle == UX_UNUSED)
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d10a      	bne.n	800e12e <_ux_host_stack_new_device_get+0x32>
            _ux_utility_memory_set(device, 0, sizeof(UX_DEVICE)); /* Use case of memset is verified. */
            device -> ux_device_enum_next = enum_next;
#else

            /* Reset the entire entry.  */
            _ux_utility_memory_set(device, 0, sizeof(UX_DEVICE)); /* Use case of memset is verified. */
 800e118:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e11c:	2100      	movs	r1, #0
 800e11e:	6838      	ldr	r0, [r7, #0]
 800e120:	f000 feea 	bl	800eef8 <_ux_utility_memory_set>
#endif

            /* This entry is now used.  */
            device -> ux_device_handle =  UX_USED;
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	2201      	movs	r2, #1
 800e128:	601a      	str	r2, [r3, #0]

            /* Return the device pointer.  */
            return(device);
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	e00c      	b.n	800e148 <_ux_host_stack_new_device_get+0x4c>
        }
#if UX_MAX_DEVICES > 1

        /* Move to the next device entry.  */
        device++;
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e134:	603b      	str	r3, [r7, #0]
    while (container_index++ < _ux_system_host -> ux_system_host_max_devices)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	1c5a      	adds	r2, r3, #1
 800e13a:	607a      	str	r2, [r7, #4]
 800e13c:	4a04      	ldr	r2, [pc, #16]	; (800e150 <_ux_host_stack_new_device_get+0x54>)
 800e13e:	6812      	ldr	r2, [r2, #0]
 800e140:	6912      	ldr	r2, [r2, #16]
 800e142:	4293      	cmp	r3, r2
 800e144:	d3e4      	bcc.n	800e110 <_ux_host_stack_new_device_get+0x14>
#endif
    }

    /* No unused devices, return NULL.  */
    return(UX_NULL);
 800e146:	2300      	movs	r3, #0
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3708      	adds	r7, #8
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}
 800e150:	2400577c 	.word	0x2400577c

0800e154 <_ux_host_stack_new_endpoint_create>:
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_new_endpoint_create(UX_INTERFACE *interface_ptr,
                                                 UCHAR * interface_endpoint)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b088      	sub	sp, #32
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
ULONG           endpoint_type;
ULONG           packet_size;
ULONG           n_tran;

    /* Obtain memory for storing this new endpoint.  */
    endpoint =  (UX_ENDPOINT *) _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_ENDPOINT));
 800e15e:	2294      	movs	r2, #148	; 0x94
 800e160:	2100      	movs	r1, #0
 800e162:	2000      	movs	r0, #0
 800e164:	f000 fcc8 	bl	800eaf8 <_ux_utility_memory_allocate>
 800e168:	6178      	str	r0, [r7, #20]
    if (endpoint == UX_NULL)
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d101      	bne.n	800e174 <_ux_host_stack_new_endpoint_create+0x20>
        return(UX_MEMORY_INSUFFICIENT);
 800e170:	2312      	movs	r3, #18
 800e172:	e09c      	b.n	800e2ae <_ux_host_stack_new_endpoint_create+0x15a>
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_NEW_ENDPOINT_CREATE, interface_ptr, endpoint, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

    /* Save the endpoint handle in the container, this is for ensuring the
       endpoint container is not corrupted.  */
    endpoint -> ux_endpoint =  (ULONG) (ALIGN_TYPE) endpoint;
 800e174:	697a      	ldr	r2, [r7, #20]
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	601a      	str	r2, [r3, #0]

    /* The endpoint container has a built in transfer_request. 
       The transfer_request needs to point to the endpoint as well.  */
    endpoint -> ux_endpoint_transfer_request.ux_transfer_request_endpoint =  endpoint;
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	697a      	ldr	r2, [r7, #20]
 800e17e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Save the pointer to the device. This is useful for the HCD layer.  */
    endpoint -> ux_endpoint_device =  interface_ptr -> ux_interface_configuration -> ux_configuration_device;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Parse the interface descriptor and make it machine independent.  */
    _ux_utility_descriptor_parse(interface_endpoint,
                            _ux_system_endpoint_descriptor_structure,
                            UX_ENDPOINT_DESCRIPTOR_ENTRIES,
                            (UCHAR *) &endpoint -> ux_endpoint_descriptor);
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(interface_endpoint,
 800e18e:	2206      	movs	r2, #6
 800e190:	4949      	ldr	r1, [pc, #292]	; (800e2b8 <_ux_host_stack_new_endpoint_create+0x164>)
 800e192:	6838      	ldr	r0, [r7, #0]
 800e194:	f000 fc1e 	bl	800e9d4 <_ux_utility_descriptor_parse>

    /* Check endpoint size and interval to see if they are valid.  */
    endpoint_type = endpoint -> ux_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE;
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	699b      	ldr	r3, [r3, #24]
 800e19c:	f003 0303 	and.w	r3, r3, #3
 800e1a0:	613b      	str	r3, [r7, #16]

    /* Endpoint size should not be zero.  */
    if (endpoint -> ux_endpoint_descriptor.wMaxPacketSize == 0)
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	69db      	ldr	r3, [r3, #28]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d104      	bne.n	800e1b4 <_ux_host_stack_new_endpoint_create+0x60>
    {
        _ux_utility_memory_free(endpoint);
 800e1aa:	6978      	ldr	r0, [r7, #20]
 800e1ac:	f000 fdc6 	bl	800ed3c <_ux_utility_memory_free>
        return(UX_DESCRIPTOR_CORRUPTED);
 800e1b0:	2342      	movs	r3, #66	; 0x42
 800e1b2:	e07c      	b.n	800e2ae <_ux_host_stack_new_endpoint_create+0x15a>
    }

    /* Control/bulk endpoint, 8, 16, 32, 64, ... 512 can be accepted.
       Note non-standard size in 2^N is accepted since they really works.  */
    if (endpoint_type == UX_CONTROL_ENDPOINT || endpoint_type == UX_BULK_ENDPOINT)
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d002      	beq.n	800e1c0 <_ux_host_stack_new_endpoint_create+0x6c>
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	2b02      	cmp	r3, #2
 800e1be:	d119      	bne.n	800e1f4 <_ux_host_stack_new_endpoint_create+0xa0>
    {
        for (packet_size = 8; packet_size <= 512; packet_size <<= 1)
 800e1c0:	2308      	movs	r3, #8
 800e1c2:	61bb      	str	r3, [r7, #24]
 800e1c4:	e007      	b.n	800e1d6 <_ux_host_stack_new_endpoint_create+0x82>
        {
            if (packet_size == endpoint -> ux_endpoint_descriptor.wMaxPacketSize)
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	69db      	ldr	r3, [r3, #28]
 800e1ca:	69ba      	ldr	r2, [r7, #24]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d007      	beq.n	800e1e0 <_ux_host_stack_new_endpoint_create+0x8c>
        for (packet_size = 8; packet_size <= 512; packet_size <<= 1)
 800e1d0:	69bb      	ldr	r3, [r7, #24]
 800e1d2:	005b      	lsls	r3, r3, #1
 800e1d4:	61bb      	str	r3, [r7, #24]
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1dc:	d9f3      	bls.n	800e1c6 <_ux_host_stack_new_endpoint_create+0x72>
 800e1de:	e000      	b.n	800e1e2 <_ux_host_stack_new_endpoint_create+0x8e>
                break;
 800e1e0:	bf00      	nop
        }

        /* If endpoint size not valid, return error.  */
        if (packet_size > 512)
 800e1e2:	69bb      	ldr	r3, [r7, #24]
 800e1e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1e8:	d944      	bls.n	800e274 <_ux_host_stack_new_endpoint_create+0x120>
        {
            _ux_utility_memory_free(endpoint);
 800e1ea:	6978      	ldr	r0, [r7, #20]
 800e1ec:	f000 fda6 	bl	800ed3c <_ux_utility_memory_free>
            return(UX_DESCRIPTOR_CORRUPTED);
 800e1f0:	2342      	movs	r3, #66	; 0x42
 800e1f2:	e05c      	b.n	800e2ae <_ux_host_stack_new_endpoint_create+0x15a>
    /* Interrupt/isochronous endpoint, max 1024 and 3 transactions can be accepted.  */
    else
    {

        /* Max size over 1024 is not allowed.  */
        packet_size = endpoint -> ux_endpoint_descriptor.wMaxPacketSize & UX_MAX_PACKET_SIZE_MASK;
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	69db      	ldr	r3, [r3, #28]
 800e1f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1fc:	61bb      	str	r3, [r7, #24]
        if (packet_size > 1024)
 800e1fe:	69bb      	ldr	r3, [r7, #24]
 800e200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e204:	d904      	bls.n	800e210 <_ux_host_stack_new_endpoint_create+0xbc>
        {
            _ux_utility_memory_free(endpoint);
 800e206:	6978      	ldr	r0, [r7, #20]
 800e208:	f000 fd98 	bl	800ed3c <_ux_utility_memory_free>
            return(UX_DESCRIPTOR_CORRUPTED);
 800e20c:	2342      	movs	r3, #66	; 0x42
 800e20e:	e04e      	b.n	800e2ae <_ux_host_stack_new_endpoint_create+0x15a>
        }

        /* Number transaction over 2 additional is not allowed.  */
        n_tran = endpoint -> ux_endpoint_descriptor.wMaxPacketSize & UX_MAX_NUMBER_OF_TRANSACTIONS_MASK;
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	69db      	ldr	r3, [r3, #28]
 800e214:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800e218:	60fb      	str	r3, [r7, #12]
        if (n_tran >= UX_MAX_NUMBER_OF_TRANSACTIONS_MASK)
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800e220:	d304      	bcc.n	800e22c <_ux_host_stack_new_endpoint_create+0xd8>
        {
            _ux_utility_memory_free(endpoint);
 800e222:	6978      	ldr	r0, [r7, #20]
 800e224:	f000 fd8a 	bl	800ed3c <_ux_utility_memory_free>
            return(UX_DESCRIPTOR_CORRUPTED);
 800e228:	2342      	movs	r3, #66	; 0x42
 800e22a:	e040      	b.n	800e2ae <_ux_host_stack_new_endpoint_create+0x15a>
        }

        /* Isochronous/high speed interrupt interval should be 1~16.  */
        if (endpoint -> ux_endpoint_descriptor.bInterval < 1)
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	6a1b      	ldr	r3, [r3, #32]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d104      	bne.n	800e23e <_ux_host_stack_new_endpoint_create+0xea>
        {
            _ux_utility_memory_free(endpoint);
 800e234:	6978      	ldr	r0, [r7, #20]
 800e236:	f000 fd81 	bl	800ed3c <_ux_utility_memory_free>
            return(UX_DESCRIPTOR_CORRUPTED);
 800e23a:	2342      	movs	r3, #66	; 0x42
 800e23c:	e037      	b.n	800e2ae <_ux_host_stack_new_endpoint_create+0x15a>
        }
        if ((endpoint_type == UX_ISOCHRONOUS_ENDPOINT) ||
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	2b01      	cmp	r3, #1
 800e242:	d005      	beq.n	800e250 <_ux_host_stack_new_endpoint_create+0xfc>
            (interface_ptr -> ux_interface_configuration -> ux_configuration_device
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                    -> ux_device_speed == UX_HIGH_SPEED_DEVICE)
 800e24a:	691b      	ldr	r3, [r3, #16]
        if ((endpoint_type == UX_ISOCHRONOUS_ENDPOINT) ||
 800e24c:	2b02      	cmp	r3, #2
 800e24e:	d108      	bne.n	800e262 <_ux_host_stack_new_endpoint_create+0x10e>
            )
        {
            if (endpoint -> ux_endpoint_descriptor.bInterval > 16)
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	6a1b      	ldr	r3, [r3, #32]
 800e254:	2b10      	cmp	r3, #16
 800e256:	d904      	bls.n	800e262 <_ux_host_stack_new_endpoint_create+0x10e>
            {
                _ux_utility_memory_free(endpoint);
 800e258:	6978      	ldr	r0, [r7, #20]
 800e25a:	f000 fd6f 	bl	800ed3c <_ux_utility_memory_free>
                return(UX_DESCRIPTOR_CORRUPTED);
 800e25e:	2342      	movs	r3, #66	; 0x42
 800e260:	e025      	b.n	800e2ae <_ux_host_stack_new_endpoint_create+0x15a>
            }
        }

        /* Save final packet size.  */
        n_tran >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	0adb      	lsrs	r3, r3, #11
 800e266:	60fb      	str	r3, [r7, #12]
        packet_size *= (n_tran + 1);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	1c5a      	adds	r2, r3, #1
 800e26c:	69bb      	ldr	r3, [r7, #24]
 800e26e:	fb02 f303 	mul.w	r3, r2, r3
 800e272:	61bb      	str	r3, [r7, #24]
    }

    /* Save transfer packet size.  */
    endpoint -> ux_endpoint_transfer_request.ux_transfer_request_packet_length = packet_size;
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	69ba      	ldr	r2, [r7, #24]
 800e278:	669a      	str	r2, [r3, #104]	; 0x68

    /* The interface that owns this endpoint is memorized in the 
       endpoint container itself, easier for back chaining.  */
    endpoint -> ux_endpoint_interface =  interface_ptr;
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	629a      	str	r2, [r3, #40]	; 0x28
    /* There is 2 cases for the creation of the endpoint descriptor 
       if this is the first one, the endpoint descriptor is hooked
       to the interface. 
       If it is not the first one, the endpoint is hooked to the
       end of the chain of endpoints.  */
    if (interface_ptr -> ux_interface_first_endpoint == UX_NULL)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e284:	2b00      	cmp	r3, #0
 800e286:	d103      	bne.n	800e290 <_ux_host_stack_new_endpoint_create+0x13c>
    {

        interface_ptr -> ux_interface_first_endpoint =  endpoint;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	697a      	ldr	r2, [r7, #20]
 800e28c:	639a      	str	r2, [r3, #56]	; 0x38
 800e28e:	e00d      	b.n	800e2ac <_ux_host_stack_new_endpoint_create+0x158>
    }
    else
    {

        list_endpoint =  interface_ptr -> ux_interface_first_endpoint;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e294:	61fb      	str	r3, [r7, #28]
        
        /* Traverse the list until the end.  */
        while (list_endpoint -> ux_endpoint_next_endpoint != UX_NULL)
 800e296:	e002      	b.n	800e29e <_ux_host_stack_new_endpoint_create+0x14a>
            list_endpoint =  list_endpoint -> ux_endpoint_next_endpoint;
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e29c:	61fb      	str	r3, [r7, #28]
        while (list_endpoint -> ux_endpoint_next_endpoint != UX_NULL)
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d1f8      	bne.n	800e298 <_ux_host_stack_new_endpoint_create+0x144>

        /* Hook the endpoint.  */
        list_endpoint -> ux_endpoint_next_endpoint =  endpoint;
 800e2a6:	69fb      	ldr	r3, [r7, #28]
 800e2a8:	697a      	ldr	r2, [r7, #20]
 800e2aa:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Return successful status.  */
    return(UX_SUCCESS);
 800e2ac:	2300      	movs	r3, #0
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3720      	adds	r7, #32
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	2400003c 	.word	0x2400003c

0800e2bc <_ux_host_stack_new_interface_create>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_new_interface_create(UX_CONFIGURATION *configuration,
                                            UCHAR * descriptor, ULONG length)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b08c      	sub	sp, #48	; 0x30
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	60f8      	str	r0, [r7, #12]
 800e2c4:	60b9      	str	r1, [r7, #8]
 800e2c6:	607a      	str	r2, [r7, #4]
UINT                descriptor_type;
UINT                status;
UCHAR               *this_interface_descriptor;

    /* Obtain memory for storing this new interface.  */
    interface_ptr =  (UX_INTERFACE *) _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_INTERFACE));
 800e2c8:	2250      	movs	r2, #80	; 0x50
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	f000 fc13 	bl	800eaf8 <_ux_utility_memory_allocate>
 800e2d2:	6278      	str	r0, [r7, #36]	; 0x24
    
    /* If no memory left, exit with error.  */        
    if (interface_ptr == UX_NULL)
 800e2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d101      	bne.n	800e2de <_ux_host_stack_new_interface_create+0x22>
        return(UX_MEMORY_INSUFFICIENT);
 800e2da:	2312      	movs	r3, #18
 800e2dc:	e076      	b.n	800e3cc <_ux_host_stack_new_interface_create+0x110>

    /* Save the interface handle in the container, this is for ensuring the
       interface container is not corrupted.  */
    interface_ptr -> ux_interface_handle =  (ULONG) (ALIGN_TYPE) interface_ptr;
 800e2de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e2:	601a      	str	r2, [r3, #0]

    /* Parse the interface descriptor and make it machine independent.  */
    _ux_utility_descriptor_parse(descriptor,
                            _ux_system_interface_descriptor_structure,
                            UX_INTERFACE_DESCRIPTOR_ENTRIES,
                            (UCHAR *) &interface_ptr -> ux_interface_descriptor);
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e6:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(descriptor,
 800e2e8:	2209      	movs	r2, #9
 800e2ea:	493a      	ldr	r1, [pc, #232]	; (800e3d4 <_ux_host_stack_new_interface_create+0x118>)
 800e2ec:	68b8      	ldr	r0, [r7, #8]
 800e2ee:	f000 fb71 	bl	800e9d4 <_ux_utility_descriptor_parse>

    /* The configuration that owns this interface is memorized in the 
       interface container itself, easier for back chaining.  */
    interface_ptr -> ux_interface_configuration =  configuration;
 800e2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f4:	68fa      	ldr	r2, [r7, #12]
 800e2f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* If the interface belongs to an IAD, remember the IAD Class/SubClass/Protocol.  */
    interface_ptr -> ux_interface_iad_class    = configuration -> ux_configuration_iad_class;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fe:	645a      	str	r2, [r3, #68]	; 0x44
    interface_ptr -> ux_interface_iad_subclass = configuration -> ux_configuration_iad_subclass;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e306:	649a      	str	r2, [r3, #72]	; 0x48
    interface_ptr -> ux_interface_iad_protocol = configuration -> ux_configuration_iad_protocol;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* There is 2 cases for the creation of the interface descriptor 
       if this is the first one, the interface descriptor is hooked
       to the configuration. If it is not the first one, the interface 
       is hooked to the end of the chain of interfaces.  */
    if (configuration -> ux_configuration_first_interface == UX_NULL)
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e314:	2b00      	cmp	r3, #0
 800e316:	d103      	bne.n	800e320 <_ux_host_stack_new_interface_create+0x64>
    {
        configuration -> ux_configuration_first_interface =  interface_ptr;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e31c:	62da      	str	r2, [r3, #44]	; 0x2c
 800e31e:	e00d      	b.n	800e33c <_ux_host_stack_new_interface_create+0x80>
    }
    else
    {
    
        list_interface =  configuration -> ux_configuration_first_interface;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e324:	62fb      	str	r3, [r7, #44]	; 0x2c
        
        /* Traverse the list until we reach the end */
        while (list_interface -> ux_interface_next_interface != UX_NULL)
 800e326:	e002      	b.n	800e32e <_ux_host_stack_new_interface_create+0x72>
        {

            list_interface =  list_interface -> ux_interface_next_interface;
 800e328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e32c:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (list_interface -> ux_interface_next_interface != UX_NULL)
 800e32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e332:	2b00      	cmp	r3, #0
 800e334:	d1f8      	bne.n	800e328 <_ux_host_stack_new_interface_create+0x6c>
        }

        /* Hook the interface.  */
        list_interface -> ux_interface_next_interface =  interface_ptr;
 800e336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e33a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Traverse the interface in search of all endpoints that belong to it.
       We need the length remaining in the descriptor and the number of endpoints
       reported for this interface.  */
    number_endpoints =  interface_ptr -> ux_interface_descriptor.bNumEndpoints;
 800e33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33e:	69db      	ldr	r3, [r3, #28]
 800e340:	62bb      	str	r3, [r7, #40]	; 0x28

    this_interface_descriptor = descriptor;
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	623b      	str	r3, [r7, #32]

    while (length && (number_endpoints != 0))
 800e346:	e03a      	b.n	800e3be <_ux_host_stack_new_interface_create+0x102>
    {

        /* Gather the length and type of the descriptor.  */
        descriptor_length =  *descriptor;
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	61fb      	str	r3, [r7, #28]
        descriptor_type =    *(descriptor+1);
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	3301      	adds	r3, #1
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	61bb      	str	r3, [r7, #24]

        /* make sure this descriptor has at least the minimum length.  */
        if (descriptor_length < 3)
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	2b02      	cmp	r3, #2
 800e35a:	d806      	bhi.n	800e36a <_ux_host_stack_new_interface_create+0xae>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_DESCRIPTOR_CORRUPTED);
 800e35c:	2242      	movs	r2, #66	; 0x42
 800e35e:	2104      	movs	r1, #4
 800e360:	2002      	movs	r0, #2
 800e362:	f000 fa49 	bl	800e7f8 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, descriptor, 0, 0, UX_TRACE_ERRORS, 0, 0)

            return(UX_DESCRIPTOR_CORRUPTED);
 800e366:	2342      	movs	r3, #66	; 0x42
 800e368:	e030      	b.n	800e3cc <_ux_host_stack_new_interface_create+0x110>
        }            

        /* Check the type for an interface descriptor.  */
        if (descriptor_type == UX_ENDPOINT_DESCRIPTOR_ITEM)
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	2b05      	cmp	r3, #5
 800e36e:	d10c      	bne.n	800e38a <_ux_host_stack_new_interface_create+0xce>
        {

            /* We have found an endpoint descriptor for this interface.  */
            status =  _ux_host_stack_new_endpoint_create(interface_ptr, descriptor);
 800e370:	68b9      	ldr	r1, [r7, #8]
 800e372:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e374:	f7ff feee 	bl	800e154 <_ux_host_stack_new_endpoint_create>
 800e378:	6178      	str	r0, [r7, #20]

            /* Check return status.  */
            if(status != UX_SUCCESS)
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d001      	beq.n	800e384 <_ux_host_stack_new_interface_create+0xc8>
                return(status);
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	e023      	b.n	800e3cc <_ux_host_stack_new_interface_create+0x110>

            number_endpoints--;
 800e384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e386:	3b01      	subs	r3, #1
 800e388:	62bb      	str	r3, [r7, #40]	; 0x28
        }       

        /* Verify if the descriptor is still valid, or we moved to next interface.  */
        if ((descriptor_length > length) || (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM && descriptor != this_interface_descriptor))
 800e38a:	69fa      	ldr	r2, [r7, #28]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d806      	bhi.n	800e3a0 <_ux_host_stack_new_interface_create+0xe4>
 800e392:	69bb      	ldr	r3, [r7, #24]
 800e394:	2b04      	cmp	r3, #4
 800e396:	d10a      	bne.n	800e3ae <_ux_host_stack_new_interface_create+0xf2>
 800e398:	68ba      	ldr	r2, [r7, #8]
 800e39a:	6a3b      	ldr	r3, [r7, #32]
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d006      	beq.n	800e3ae <_ux_host_stack_new_interface_create+0xf2>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ENUMERATOR, UX_DESCRIPTOR_CORRUPTED);
 800e3a0:	2242      	movs	r2, #66	; 0x42
 800e3a2:	2104      	movs	r1, #4
 800e3a4:	2002      	movs	r0, #2
 800e3a6:	f000 fa27 	bl	800e7f8 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, descriptor, 0, 0, UX_TRACE_ERRORS, 0, 0)

            return(UX_DESCRIPTOR_CORRUPTED);
 800e3aa:	2342      	movs	r3, #66	; 0x42
 800e3ac:	e00e      	b.n	800e3cc <_ux_host_stack_new_interface_create+0x110>
        }

        /* Jump to the next descriptor if we have not reached the end.  */
        descriptor +=  descriptor_length;
 800e3ae:	68ba      	ldr	r2, [r7, #8]
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	60bb      	str	r3, [r7, #8]
        length -=  descriptor_length;
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	1ad3      	subs	r3, r2, r3
 800e3bc:	607b      	str	r3, [r7, #4]
    while (length && (number_endpoints != 0))
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d002      	beq.n	800e3ca <_ux_host_stack_new_interface_create+0x10e>
 800e3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d1be      	bne.n	800e348 <_ux_host_stack_new_interface_create+0x8c>
    }

    /* Return success!  */
    return(UX_SUCCESS);
 800e3ca:	2300      	movs	r3, #0
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3730      	adds	r7, #48	; 0x30
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	2400005c 	.word	0x2400005c

0800e3d8 <_ux_host_stack_rh_change_process>:
/*                                            fixed registered HCD scan,  */
/*                                            resulting in version 6.1.2  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_host_stack_rh_change_process(VOID)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b08c      	sub	sp, #48	; 0x30
 800e3dc:	af00      	add	r7, sp, #0
UINT        port_index;
UX_INTERRUPT_SAVE_AREA

    /* This thread was maybe awaken by one or more HCD controllers. Check each 
       of the HCD to see where there has been a change of topology.  */
    for(hcd_index = 0; hcd_index < UX_SYSTEM_HOST_MAX_HCD_GET(); hcd_index++)
 800e3de:	2300      	movs	r3, #0
 800e3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3e2:	e088      	b.n	800e4f6 <_ux_host_stack_rh_change_process+0x11e>
    {

        /* Pickup HCD pointer.  */
        hcd =  &_ux_system_host -> ux_system_host_hcd_array[hcd_index];
 800e3e4:	4b48      	ldr	r3, [pc, #288]	; (800e508 <_ux_host_stack_rh_change_process+0x130>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	68da      	ldr	r2, [r3, #12]
 800e3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ec:	2194      	movs	r1, #148	; 0x94
 800e3ee:	fb01 f303 	mul.w	r3, r1, r3
 800e3f2:	4413      	add	r3, r2
 800e3f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Is this HCD operational?  */
        if (hcd -> ux_hcd_status == UX_HCD_STATUS_OPERATIONAL)
 800e3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3fa:	2b02      	cmp	r3, #2
 800e3fc:	d178      	bne.n	800e4f0 <_ux_host_stack_rh_change_process+0x118>
        {

            /* On each port of the root hub of the controller, get the port status */
            for (port_index = 0; port_index < hcd -> ux_hcd_nb_root_hubs; port_index++)
 800e3fe:	2300      	movs	r3, #0
 800e400:	62bb      	str	r3, [r7, #40]	; 0x28
 800e402:	e070      	b.n	800e4e6 <_ux_host_stack_rh_change_process+0x10e>
            {

                /* Was there any activity on this port ? */
                if (hcd -> ux_hcd_root_hub_signal[port_index] != 0)
 800e404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e408:	3214      	adds	r2, #20
 800e40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d066      	beq.n	800e4e0 <_ux_host_stack_rh_change_process+0x108>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e412:	f3ef 8310 	mrs	r3, PRIMASK
 800e416:	617b      	str	r3, [r7, #20]
    return(posture);
 800e418:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800e41a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e41c:	b672      	cpsid	i
    return(int_posture);
 800e41e:	693b      	ldr	r3, [r7, #16]

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_RH_CHANGE_PROCESS, port_index, 0, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

                    /* Reset that port activity signal.  */
                    UX_DISABLE
 800e420:	623b      	str	r3, [r7, #32]
                    hcd -> ux_hcd_root_hub_signal[port_index]--;
 800e422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e426:	3214      	adds	r2, #20
 800e428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e42c:	1e59      	subs	r1, r3, #1
 800e42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e432:	3214      	adds	r2, #20
 800e434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e438:	6a3b      	ldr	r3, [r7, #32]
 800e43a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e43c:	69bb      	ldr	r3, [r7, #24]
 800e43e:	f383 8810 	msr	PRIMASK, r3
}
 800e442:	bf00      	nop
                    UX_RESTORE

                    /* Call HCD for port status.  */
                    port_status =  hcd -> ux_hcd_entry_function(hcd, UX_HCD_GET_PORT_STATUS, (VOID *)((ALIGN_TYPE)port_index));
 800e444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e44a:	2102      	movs	r1, #2
 800e44c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e44e:	4798      	blx	r3
 800e450:	61f8      	str	r0, [r7, #28]
    
                    /* Check return status.  */
                    if (port_status != UX_PORT_INDEX_UNKNOWN)
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	2b56      	cmp	r3, #86	; 0x56
 800e456:	d043      	beq.n	800e4e0 <_ux_host_stack_rh_change_process+0x108>
                    {
    
                        /* The port_status value is valid and will tell us if there is
                           a device attached\detached on the downstream port.  */
                        if (port_status & UX_PS_CCS)
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	f003 0301 	and.w	r3, r3, #1
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d031      	beq.n	800e4c6 <_ux_host_stack_rh_change_process+0xee>
                        {
    
                            /* There is a device attached to this port. Check if we know 
                               about it. If not, this is a device insertion signal.  */
                            if ((hcd -> ux_hcd_rh_device_connection & (ULONG)(1 << port_index)) == 0)
 800e462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e466:	2101      	movs	r1, #1
 800e468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e46a:	fa01 f202 	lsl.w	r2, r1, r2
 800e46e:	4013      	ands	r3, r2
 800e470:	2b00      	cmp	r3, #0
 800e472:	d104      	bne.n	800e47e <_ux_host_stack_rh_change_process+0xa6>
                            {
                              
                                /* We have a simple device insertion, we have not lost any signals.  
                                   the root hub and the stack enumeration module are in synch.  */
                                _ux_host_stack_rh_device_insertion(hcd,port_index);
 800e474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e476:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e478:	f000 f862 	bl	800e540 <_ux_host_stack_rh_device_insertion>
 800e47c:	e030      	b.n	800e4e0 <_ux_host_stack_rh_change_process+0x108>
                                   but we may have missed them of they were too close or the stack got too busy.
                                   We check the number of events in the root hub signal. If it is not zero
                                   we are out of synch, meaning we got a disconnection followed very quickly
                                   by a insertion.  */
                                
                                if (hcd -> ux_hcd_root_hub_signal[port_index] != 0)
 800e47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e482:	3214      	adds	r2, #20
 800e484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d029      	beq.n	800e4e0 <_ux_host_stack_rh_change_process+0x108>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e48c:	f3ef 8310 	mrs	r3, PRIMASK
 800e490:	60bb      	str	r3, [r7, #8]
    return(posture);
 800e492:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 800e494:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e496:	b672      	cpsid	i
    return(int_posture);
 800e498:	687b      	ldr	r3, [r7, #4]
                                {

                                    /* We need to get back in synch now.  */
                                    UX_DISABLE
 800e49a:	623b      	str	r3, [r7, #32]
                                    hcd -> ux_hcd_root_hub_signal[port_index] = 0;
 800e49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4a0:	3214      	adds	r2, #20
 800e4a2:	2100      	movs	r1, #0
 800e4a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e4a8:	6a3b      	ldr	r3, [r7, #32]
 800e4aa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f383 8810 	msr	PRIMASK, r3
}
 800e4b2:	bf00      	nop
                                    UX_RESTORE
                            
                                    /* First extract the device.  */
                                    _ux_host_stack_rh_device_extraction(hcd,port_index);
 800e4b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4b8:	f000 f828 	bl	800e50c <_ux_host_stack_rh_device_extraction>
                                    
                                    /* Now, insert it again.  */
                                    _ux_host_stack_rh_device_insertion(hcd,port_index);
 800e4bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4c0:	f000 f83e 	bl	800e540 <_ux_host_stack_rh_device_insertion>
 800e4c4:	e00c      	b.n	800e4e0 <_ux_host_stack_rh_change_process+0x108>
                        else
                        {
                              
                            /* There is no device attached to this port. Check if we know 
                               about it. If not, this is a device removal signal.  */
                            if ((hcd -> ux_hcd_rh_device_connection & (ULONG)(1 << port_index)) !=0)
 800e4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e4ca:	2101      	movs	r1, #1
 800e4cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4ce:	fa01 f202 	lsl.w	r2, r1, r2
 800e4d2:	4013      	ands	r3, r2
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d003      	beq.n	800e4e0 <_ux_host_stack_rh_change_process+0x108>
                            {
                                _ux_host_stack_rh_device_extraction(hcd,port_index);
 800e4d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4dc:	f000 f816 	bl	800e50c <_ux_host_stack_rh_device_extraction>
            for (port_index = 0; port_index < hcd -> ux_hcd_nb_root_hubs; port_index++)
 800e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d389      	bcc.n	800e404 <_ux_host_stack_rh_change_process+0x2c>
    for(hcd_index = 0; hcd_index < UX_SYSTEM_HOST_MAX_HCD_GET(); hcd_index++)
 800e4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	f43f af73 	beq.w	800e3e4 <_ux_host_stack_rh_change_process+0xc>
                    }
                }
            }
        }               
    }
}
 800e4fe:	bf00      	nop
 800e500:	bf00      	nop
 800e502:	3730      	adds	r7, #48	; 0x30
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	2400577c 	.word	0x2400577c

0800e50c <_ux_host_stack_rh_device_extraction>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_rh_device_extraction(UX_HCD *hcd, UINT port_index)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_RH_DEVICE_EXTRACTION, hcd, port_index, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

    /* Ask the stack to remove the device, pass the value 0 as the parent root hub.  */
    _ux_host_stack_device_remove(hcd, 0, port_index);
 800e516:	683a      	ldr	r2, [r7, #0]
 800e518:	2100      	movs	r1, #0
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f7ff f878 	bl	800d610 <_ux_host_stack_device_remove>

    /* The device has been removed, so the port is free again.  */
    hcd -> ux_hcd_rh_device_connection &= (ULONG)~(1 << port_index);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e524:	2101      	movs	r1, #1
 800e526:	683a      	ldr	r2, [r7, #0]
 800e528:	fa01 f202 	lsl.w	r2, r1, r2
 800e52c:	43d2      	mvns	r2, r2
 800e52e:	401a      	ands	r2, r3
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	669a      	str	r2, [r3, #104]	; 0x68

    /* That command should never fail!  */
    return(UX_SUCCESS);
 800e534:	2300      	movs	r3, #0
}
 800e536:	4618      	mov	r0, r3
 800e538:	3708      	adds	r7, #8
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}
	...

0800e540 <_ux_host_stack_rh_device_insertion>:
/*                                            internal clean up,          */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_rh_device_insertion(UX_HCD *hcd, UINT port_index)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b08a      	sub	sp, #40	; 0x28
 800e544:	af02      	add	r7, sp, #8
 800e546:	6078      	str	r0, [r7, #4]
 800e548:	6039      	str	r1, [r7, #0]
        /* Done success.  */
        return(UX_SUCCESS);
    }

#else
UX_DEVICE   *device = UX_NULL;
 800e54a:	2300      	movs	r3, #0
 800e54c:	60fb      	str	r3, [r7, #12]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_RH_DEVICE_INSERTION, hcd, port_index, 0, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)

    /* Perform a PORT_ENABLE command.  */
    port_status =  hcd -> ux_hcd_entry_function(hcd, UX_HCD_ENABLE_PORT, (VOID *)((ALIGN_TYPE)port_index));
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e552:	683a      	ldr	r2, [r7, #0]
 800e554:	2103      	movs	r1, #3
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	4798      	blx	r3
 800e55a:	61b8      	str	r0, [r7, #24]

    /* Check return status.  */
    if (port_status == UX_PORT_INDEX_UNKNOWN)
 800e55c:	69bb      	ldr	r3, [r7, #24]
 800e55e:	2b56      	cmp	r3, #86	; 0x56
 800e560:	d101      	bne.n	800e566 <_ux_host_stack_rh_device_insertion+0x26>
        return(port_status);
 800e562:	69bb      	ldr	r3, [r7, #24]
 800e564:	e090      	b.n	800e688 <_ux_host_stack_rh_device_insertion+0x148>

    /* A debounce interval with a minimum duration of 100 ms on attach.  */
    _ux_utility_delay_ms(100);
 800e566:	2064      	movs	r0, #100	; 0x64
 800e568:	f000 fa1a 	bl	800e9a0 <_ux_utility_delay_ms>

    /* The first attempts to do a device enumeration may fail.
       Typically, after the port is reset and the first command is sent to
       the device, there is no answer. In this case, we reset the port again
       and retry. Usually that does the trick!  */
    for (index_loop = 0; index_loop < UX_RH_ENUMERATION_RETRY; index_loop++)
 800e56c:	2300      	movs	r3, #0
 800e56e:	61fb      	str	r3, [r7, #28]
 800e570:	e066      	b.n	800e640 <_ux_host_stack_rh_device_insertion+0x100>
    {

        /* Now we have to do a PORT_RESET command.  */
        port_status =  hcd -> ux_hcd_entry_function(hcd, UX_HCD_RESET_PORT, (VOID *)((ALIGN_TYPE)port_index));
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e576:	683a      	ldr	r2, [r7, #0]
 800e578:	2109      	movs	r1, #9
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	4798      	blx	r3
 800e57e:	61b8      	str	r0, [r7, #24]
        if (port_status == UX_SUCCESS)
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d156      	bne.n	800e634 <_ux_host_stack_rh_device_insertion+0xf4>
        {

            /* The port reset phase was successful. Before we invoke the device enumeration function,
               we need to know the speed of the device.  */
            port_status =  hcd -> ux_hcd_entry_function(hcd, UX_HCD_GET_PORT_STATUS, (VOID *)((ALIGN_TYPE)port_index));
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e58a:	683a      	ldr	r2, [r7, #0]
 800e58c:	2102      	movs	r1, #2
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	4798      	blx	r3
 800e592:	61b8      	str	r0, [r7, #24]

            /* Check return status.  */
            if (port_status == UX_PORT_INDEX_UNKNOWN)
 800e594:	69bb      	ldr	r3, [r7, #24]
 800e596:	2b56      	cmp	r3, #86	; 0x56
 800e598:	d106      	bne.n	800e5a8 <_ux_host_stack_rh_device_insertion+0x68>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ROOT_HUB, UX_DEVICE_ENUMERATION_FAILURE);
 800e59a:	2244      	movs	r2, #68	; 0x44
 800e59c:	2105      	movs	r1, #5
 800e59e:	2002      	movs	r0, #2
 800e5a0:	f000 f92a 	bl	800e7f8 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DEVICE_ENUMERATION_FAILURE, port_index, 0, 0, UX_TRACE_ERRORS, 0, 0)

                return(UX_DEVICE_ENUMERATION_FAILURE);
 800e5a4:	2344      	movs	r3, #68	; 0x44
 800e5a6:	e06f      	b.n	800e688 <_ux_host_stack_rh_device_insertion+0x148>
            }

            /* Check if device is still connected.  */
            if ((port_status & UX_PS_CCS) == 0)
 800e5a8:	69bb      	ldr	r3, [r7, #24]
 800e5aa:	f003 0301 	and.w	r3, r3, #1
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d101      	bne.n	800e5b6 <_ux_host_stack_rh_device_insertion+0x76>
            {

                /* Device disconnected during enumeration retries.  */
                return(UX_DEVICE_ENUMERATION_FAILURE);
 800e5b2:	2344      	movs	r3, #68	; 0x44
 800e5b4:	e068      	b.n	800e688 <_ux_host_stack_rh_device_insertion+0x148>
            }

            /* Set the device speed.  */
            device_speed =  port_status >> UX_PS_DS;
 800e5b6:	69bb      	ldr	r3, [r7, #24]
 800e5b8:	099b      	lsrs	r3, r3, #6
 800e5ba:	617b      	str	r3, [r7, #20]

            /* Ask the USB stack to enumerate this device. A root hub is considered self
               powered. */
            status =  _ux_host_stack_new_device_create(hcd, UX_NULL, port_index, device_speed, UX_MAX_SELF_POWER, &device);
 800e5bc:	f107 030c 	add.w	r3, r7, #12
 800e5c0:	9301      	str	r3, [sp, #4]
 800e5c2:	23fa      	movs	r3, #250	; 0xfa
 800e5c4:	9300      	str	r3, [sp, #0]
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	683a      	ldr	r2, [r7, #0]
 800e5ca:	2100      	movs	r1, #0
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f7ff fcd7 	bl	800df80 <_ux_host_stack_new_device_create>
 800e5d2:	6138      	str	r0, [r7, #16]

            /* Check return status.  */
            if (status == UX_SUCCESS)
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d118      	bne.n	800e60c <_ux_host_stack_rh_device_insertion+0xcc>
                /* Successful device create.  */

                /* The device has been mounted properly, we have to remember this
                   so when the device is removed, we have to invoke the enumeration
                   function again */
                hcd -> ux_hcd_rh_device_connection |= (ULONG)(1 << port_index);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5de:	2101      	movs	r1, #1
 800e5e0:	683a      	ldr	r2, [r7, #0]
 800e5e2:	fa01 f202 	lsl.w	r2, r1, r2
 800e5e6:	431a      	orrs	r2, r3
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	669a      	str	r2, [r3, #104]	; 0x68

                /* If the device instance is ready, notify application for connection.  */
                if (_ux_system_host -> ux_system_host_change_function)
 800e5ec:	4b28      	ldr	r3, [pc, #160]	; (800e690 <_ux_host_stack_rh_device_insertion+0x150>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d007      	beq.n	800e608 <_ux_host_stack_rh_device_insertion+0xc8>
                {
                    _ux_system_host -> ux_system_host_change_function(UX_DEVICE_CONNECTION, UX_NULL, (VOID*)device);
 800e5f8:	4b25      	ldr	r3, [pc, #148]	; (800e690 <_ux_host_stack_rh_device_insertion+0x150>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	2100      	movs	r1, #0
 800e604:	2081      	movs	r0, #129	; 0x81
 800e606:	4798      	blx	r3
                }

                /* Return success to the caller.  */
                return(UX_SUCCESS);
 800e608:	2300      	movs	r3, #0
 800e60a:	e03d      	b.n	800e688 <_ux_host_stack_rh_device_insertion+0x148>
            }
            else
            {

                /* Return error if HCD is dead.  */
                if (hcd -> ux_hcd_status != UX_HCD_STATUS_OPERATIONAL)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e610:	2b02      	cmp	r3, #2
 800e612:	d001      	beq.n	800e618 <_ux_host_stack_rh_device_insertion+0xd8>
                    return(UX_CONTROLLER_DEAD);
 800e614:	2333      	movs	r3, #51	; 0x33
 800e616:	e037      	b.n	800e688 <_ux_host_stack_rh_device_insertion+0x148>

                /* No retry if there are too many devices.  */
                if (status == UX_TOO_MANY_DEVICES)
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	2b11      	cmp	r3, #17
 800e61c:	d014      	beq.n	800e648 <_ux_host_stack_rh_device_insertion+0x108>
                    break;

                /* No retry if there is no class found.  */
                if (status == UX_NO_CLASS_MATCH)
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	2b57      	cmp	r3, #87	; 0x57
 800e622:	d013      	beq.n	800e64c <_ux_host_stack_rh_device_insertion+0x10c>
                    break;

                /* Simulate remove to free allocated resources if retry.  */
                if (index_loop < UX_RH_ENUMERATION_RETRY - 1)
 800e624:	69fb      	ldr	r3, [r7, #28]
 800e626:	2b01      	cmp	r3, #1
 800e628:	d804      	bhi.n	800e634 <_ux_host_stack_rh_device_insertion+0xf4>
                    _ux_host_stack_device_remove(hcd, UX_NULL, port_index);
 800e62a:	683a      	ldr	r2, [r7, #0]
 800e62c:	2100      	movs	r1, #0
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f7fe ffee 	bl	800d610 <_ux_host_stack_device_remove>
        }

        /* We get here if something did not go well. Either the port did not respond
           well to the ENABLE\RESET phases or the device did not enumerate well
           so we try again ! */
        _ux_utility_delay_ms(UX_RH_ENUMERATION_RETRY_DELAY);
 800e634:	2064      	movs	r0, #100	; 0x64
 800e636:	f000 f9b3 	bl	800e9a0 <_ux_utility_delay_ms>
    for (index_loop = 0; index_loop < UX_RH_ENUMERATION_RETRY; index_loop++)
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	3301      	adds	r3, #1
 800e63e:	61fb      	str	r3, [r7, #28]
 800e640:	69fb      	ldr	r3, [r7, #28]
 800e642:	2b02      	cmp	r3, #2
 800e644:	d995      	bls.n	800e572 <_ux_host_stack_rh_device_insertion+0x32>
 800e646:	e002      	b.n	800e64e <_ux_host_stack_rh_device_insertion+0x10e>
                    break;
 800e648:	bf00      	nop
 800e64a:	e000      	b.n	800e64e <_ux_host_stack_rh_device_insertion+0x10e>
                    break;
 800e64c:	bf00      	nop
#endif /* defined(UX_HOST_STANDALONE)  */

    /* If we get here, the device did not enumerate completely.
       The device is still attached to the root hub and therefore
       there could be a physical connection with a unconfigured device.  */
    hcd -> ux_hcd_rh_device_connection |= (ULONG)(1 << port_index);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e652:	2101      	movs	r1, #1
 800e654:	683a      	ldr	r2, [r7, #0]
 800e656:	fa01 f202 	lsl.w	r2, r1, r2
 800e65a:	431a      	orrs	r2, r3
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	669a      	str	r2, [r3, #104]	; 0x68

    /* Notify application for a physical connection failed to be enumed.
       Device instance NULL indicates too many devices.
       Device state unconfigured indicates enumeration fail.  */
    if (_ux_system_host -> ux_system_host_change_function)
 800e660:	4b0b      	ldr	r3, [pc, #44]	; (800e690 <_ux_host_stack_rh_device_insertion+0x150>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d007      	beq.n	800e67c <_ux_host_stack_rh_device_insertion+0x13c>
    {
        _ux_system_host -> ux_system_host_change_function(UX_DEVICE_CONNECTION, UX_NULL, (VOID*)device);
 800e66c:	4b08      	ldr	r3, [pc, #32]	; (800e690 <_ux_host_stack_rh_device_insertion+0x150>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800e674:	68fa      	ldr	r2, [r7, #12]
 800e676:	2100      	movs	r1, #0
 800e678:	2081      	movs	r0, #129	; 0x81
 800e67a:	4798      	blx	r3
    }

    /* Error trap. */
    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_ROOT_HUB, UX_DEVICE_ENUMERATION_FAILURE);
 800e67c:	2244      	movs	r2, #68	; 0x44
 800e67e:	2105      	movs	r1, #5
 800e680:	2002      	movs	r0, #2
 800e682:	f000 f8b9 	bl	800e7f8 <_ux_system_error_handler>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DEVICE_ENUMERATION_FAILURE, port_index, 0, 0, UX_TRACE_ERRORS, 0, 0)

    /* Return a failed enumeration.  */
    return(UX_DEVICE_ENUMERATION_FAILURE);
 800e686:	2344      	movs	r3, #68	; 0x44
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3720      	adds	r7, #32
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	2400577c 	.word	0x2400577c

0800e694 <_ux_host_stack_transfer_request>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_transfer_request(UX_TRANSFER *transfer_request)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b08c      	sub	sp, #48	; 0x30
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
UX_HCD          *hcd;
UINT            status;
    

    /* Get the endpoint container from the transfer_request */
    endpoint =  transfer_request -> ux_transfer_request_endpoint;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the device container from the endpoint.  */
    device =  endpoint -> ux_endpoint_device;
 800e6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6a6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e6a8:	f3ef 8310 	mrs	r3, PRIMASK
 800e6ac:	61bb      	str	r3, [r7, #24]
    return(posture);
 800e6ae:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800e6b0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e6b2:	b672      	cpsid	i
    return(int_posture);
 800e6b4:	697b      	ldr	r3, [r7, #20]

    /* Ensure we are not preempted by the enum thread while we check the device 
       state and set the transfer status.  */
    UX_DISABLE
 800e6b6:	627b      	str	r3, [r7, #36]	; 0x24

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device -> ux_device_state == UX_DEVICE_ATTACHED) || (device -> ux_device_state == UX_DEVICE_ADDRESSED)
 800e6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ba:	689b      	ldr	r3, [r3, #8]
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d007      	beq.n	800e6d0 <_ux_host_stack_transfer_request+0x3c>
 800e6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c2:	689b      	ldr	r3, [r3, #8]
 800e6c4:	2b02      	cmp	r3, #2
 800e6c6:	d003      	beq.n	800e6d0 <_ux_host_stack_transfer_request+0x3c>
            || (device -> ux_device_state == UX_DEVICE_CONFIGURED))
 800e6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ca:	689b      	ldr	r3, [r3, #8]
 800e6cc:	2b03      	cmp	r3, #3
 800e6ce:	d118      	bne.n	800e702 <_ux_host_stack_transfer_request+0x6e>
    {

        /* Set the transfer to pending.  */
        transfer_request -> ux_transfer_request_completion_code =  UX_TRANSFER_STATUS_PENDING;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	635a      	str	r2, [r3, #52]	; 0x34
#if !defined(UX_HOST_STANDALONE)
        /* Save the thread making this transfer. If we're under interrupt, this
           will be null.  */
        transfer_request -> ux_transfer_request_thread_pending =  _ux_utility_thread_identify();
 800e6d6:	f000 fd67 	bl	800f1a8 <_ux_utility_thread_identify>
 800e6da:	4602      	mov	r2, r0
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	661a      	str	r2, [r3, #96]	; 0x60
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	f383 8810 	msr	PRIMASK, r3
}
 800e6ea:	bf00      	nop

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_STACK_TRANSFER_REQUEST, device, endpoint, transfer_request, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)
    
    /* With the device we have the pointer to the HCD.  */
    hcd = UX_DEVICE_HCD_GET(device);
 800e6ec:	4b24      	ldr	r3, [pc, #144]	; (800e780 <_ux_host_stack_transfer_request+0xec>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	623b      	str	r3, [r7, #32]

    /* If this is endpoint 0, we protect the endpoint from a possible re-entry.  */
    if ((endpoint -> ux_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) == 0)
 800e6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f6:	695b      	ldr	r3, [r3, #20]
 800e6f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d017      	beq.n	800e730 <_ux_host_stack_transfer_request+0x9c>
 800e700:	e027      	b.n	800e752 <_ux_host_stack_transfer_request+0xbe>
 800e702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e704:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f383 8810 	msr	PRIMASK, r3
}
 800e70c:	bf00      	nop
        if ((endpoint -> ux_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) == 0)
 800e70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e710:	695b      	ldr	r3, [r3, #20]
 800e712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e716:	2b00      	cmp	r3, #0
 800e718:	d108      	bne.n	800e72c <_ux_host_stack_transfer_request+0x98>
            if (!_ux_host_semaphore_waiting(&device -> ux_device_protection_semaphore))
 800e71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d104      	bne.n	800e72c <_ux_host_stack_transfer_request+0x98>
                _ux_host_semaphore_put(&device -> ux_device_protection_semaphore);
 800e722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e724:	3324      	adds	r3, #36	; 0x24
 800e726:	4618      	mov	r0, r3
 800e728:	f000 fc9a 	bl	800f060 <_ux_utility_semaphore_put>
        return(UX_TRANSFER_NOT_READY);
 800e72c:	2325      	movs	r3, #37	; 0x25
 800e72e:	e023      	b.n	800e778 <_ux_host_stack_transfer_request+0xe4>
    {

        /* Check if the class has already protected it.  */
        if (_ux_host_semaphore_waiting(&device -> ux_device_protection_semaphore))        
 800e730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e734:	2b00      	cmp	r3, #0
 800e736:	d00c      	beq.n	800e752 <_ux_host_stack_transfer_request+0xbe>
        {

            /* We are using endpoint 0. Protect with semaphore.  */
            status =  _ux_host_semaphore_get(&device -> ux_device_protection_semaphore, UX_WAIT_FOREVER);
 800e738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e73a:	3324      	adds	r3, #36	; 0x24
 800e73c:	f04f 31ff 	mov.w	r1, #4294967295
 800e740:	4618      	mov	r0, r3
 800e742:	f000 fc55 	bl	800eff0 <_ux_utility_semaphore_get>
 800e746:	61f8      	str	r0, [r7, #28]
    
            /* Check for status.  */
            if (status != UX_SUCCESS)
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d001      	beq.n	800e752 <_ux_host_stack_transfer_request+0xbe>
            
                /* Something went wrong. */
                return(status);
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	e012      	b.n	800e778 <_ux_host_stack_transfer_request+0xe4>
        }        
    }             
    
    /* Send the command to the controller.  */    
    status =  hcd -> ux_hcd_entry_function(hcd, UX_HCD_TRANSFER_REQUEST, transfer_request);
 800e752:	6a3b      	ldr	r3, [r7, #32]
 800e754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e756:	687a      	ldr	r2, [r7, #4]
 800e758:	210c      	movs	r1, #12
 800e75a:	6a38      	ldr	r0, [r7, #32]
 800e75c:	4798      	blx	r3
 800e75e:	61f8      	str	r0, [r7, #28]

    /* If this is endpoint 0, we unprotect the endpoint. */
    if ((endpoint -> ux_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) == 0)
 800e760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e762:	695b      	ldr	r3, [r3, #20]
 800e764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d104      	bne.n	800e776 <_ux_host_stack_transfer_request+0xe2>

        /* We are using endpoint 0. Unprotect with semaphore.  */
        _ux_host_semaphore_put(&device -> ux_device_protection_semaphore);
 800e76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76e:	3324      	adds	r3, #36	; 0x24
 800e770:	4618      	mov	r0, r3
 800e772:	f000 fc75 	bl	800f060 <_ux_utility_semaphore_put>

    /* And return the status.  */
    return(status);
 800e776:	69fb      	ldr	r3, [r7, #28]
#endif
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3730      	adds	r7, #48	; 0x30
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	2400577c 	.word	0x2400577c

0800e784 <_ux_host_stack_transfer_request_abort>:
/*  10-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_stack_transfer_request_abort(UX_TRANSFER *transfer_request)
{
 800e784:	b590      	push	{r4, r7, lr}
 800e786:	b085      	sub	sp, #20
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
        transfer_request -> ux_transfer_request_endpoint -> ux_endpoint_device,
        transfer_request -> ux_transfer_request_endpoint,
        transfer_request, 0, UX_TRACE_HOST_STACK_EVENTS, 0, 0)
    
    /* With the device we have the pointer to the HCD.  */
    hcd = UX_DEVICE_HCD_GET(transfer_request -> ux_transfer_request_endpoint -> ux_endpoint_device);
 800e78c:	4b19      	ldr	r3, [pc, #100]	; (800e7f4 <_ux_host_stack_transfer_request_abort+0x70>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	68db      	ldr	r3, [r3, #12]
 800e792:	60fb      	str	r3, [r7, #12]

    /* Check pending transaction.  */
    if (transfer_request -> ux_transfer_request_completion_code == UX_TRANSFER_STATUS_PENDING)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e798:	2b01      	cmp	r3, #1
 800e79a:	d126      	bne.n	800e7ea <_ux_host_stack_transfer_request_abort+0x66>
    {

        /* Send the abort command to the controller.  */    
        hcd -> ux_hcd_entry_function(hcd, UX_HCD_TRANSFER_ABORT, transfer_request);
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	210d      	movs	r1, #13
 800e7a4:	68f8      	ldr	r0, [r7, #12]
 800e7a6:	4798      	blx	r3
           changed the completion code to SUCCESS and put the semaphore.
           Even it's recommended to keep completion code untouched to let things
           changed later here.
           Such a case is valid, and we want to make sure we don't put() the
           transfer request's semaphore again.  */
        completion_code =  transfer_request -> ux_transfer_request_completion_code;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ac:	60bb      	str	r3, [r7, #8]

        /* Set the transfer_request status to abort.  */
        transfer_request -> ux_transfer_request_completion_code =  UX_TRANSFER_STATUS_ABORT;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2204      	movs	r2, #4
 800e7b2:	635a      	str	r2, [r3, #52]	; 0x34

        /* We need to inform the class that owns this transfer_request of the 
           abort if there is a call back mechanism.  */
        if (transfer_request -> ux_transfer_request_completion_function != UX_NULL)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d003      	beq.n	800e7c4 <_ux_host_stack_transfer_request_abort+0x40>
            transfer_request -> ux_transfer_request_completion_function(transfer_request);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	4798      	blx	r3
       
        /* Is a thread waiting on the semaphore?  */
        if (/* Is the transfer pending?  */
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d10f      	bne.n	800e7ea <_ux_host_stack_transfer_request_abort+0x66>
            completion_code == UX_TRANSFER_STATUS_PENDING &&
#if !defined(UX_HOST_STANDALONE)
            /* Is the thread waiting not this one? (clearly we're not waiting!)  */
            transfer_request -> ux_transfer_request_thread_pending != _ux_utility_thread_identify() && 
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800e7ce:	f000 fceb 	bl	800f1a8 <_ux_utility_thread_identify>
 800e7d2:	4603      	mov	r3, r0
            completion_code == UX_TRANSFER_STATUS_PENDING &&
 800e7d4:	429c      	cmp	r4, r3
 800e7d6:	d008      	beq.n	800e7ea <_ux_host_stack_transfer_request_abort+0x66>
#endif
            /* Does the transfer request not have a completion function?  */
            transfer_request -> ux_transfer_request_completion_function == UX_NULL)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            transfer_request -> ux_transfer_request_thread_pending != _ux_utility_thread_identify() && 
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d104      	bne.n	800e7ea <_ux_host_stack_transfer_request_abort+0x66>

            /* Wake up the semaphore for this request.  */
            _ux_host_semaphore_put(&transfer_request -> ux_transfer_request_semaphore);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	3344      	adds	r3, #68	; 0x44
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f000 fc3b 	bl	800f060 <_ux_utility_semaphore_put>
    }
    
    /* This function never fails!  */
    return(UX_SUCCESS);       
 800e7ea:	2300      	movs	r3, #0
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3714      	adds	r7, #20
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd90      	pop	{r4, r7, pc}
 800e7f4:	2400577c 	.word	0x2400577c

0800e7f8 <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	60f8      	str	r0, [r7, #12]
 800e800:	60b9      	str	r1, [r7, #8]
 800e802:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 800e804:	4b0c      	ldr	r3, [pc, #48]	; (800e838 <_ux_system_error_handler+0x40>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	651a      	str	r2, [r3, #80]	; 0x50
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 800e80c:	4b0a      	ldr	r3, [pc, #40]	; (800e838 <_ux_system_error_handler+0x40>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e812:	3201      	adds	r2, #1
 800e814:	655a      	str	r2, [r3, #84]	; 0x54

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 800e816:	4b08      	ldr	r3, [pc, #32]	; (800e838 <_ux_system_error_handler+0x40>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d006      	beq.n	800e82e <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 800e820:	4b05      	ldr	r3, [pc, #20]	; (800e838 <_ux_system_error_handler+0x40>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	68b9      	ldr	r1, [r7, #8]
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	4798      	blx	r3
    }
}
 800e82e:	bf00      	nop
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	24005780 	.word	0x24005780

0800e83c <_ux_system_initialize>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size, 
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b08a      	sub	sp, #40	; 0x28
 800e840:	af00      	add	r7, sp, #0
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	60b9      	str	r1, [r7, #8]
 800e846:	607a      	str	r2, [r7, #4]
 800e848:	603b      	str	r3, [r7, #0]
UINT                status;
#endif


    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 800e84a:	68ba      	ldr	r2, [r7, #8]
 800e84c:	2100      	movs	r1, #0
 800e84e:	68f8      	ldr	r0, [r7, #12]
 800e850:	f000 fb52 	bl	800eef8 <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 800e854:	4a4f      	ldr	r2, [pc, #316]	; (800e994 <_ux_system_initialize+0x158>)
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 800e85a:	235c      	movs	r3, #92	; 0x5c
 800e85c:	627b      	str	r3, [r7, #36]	; 0x24

#ifndef UX_DEVICE_SIDE_ONLY

    /* Set the _ux_system_host structure.  */
    _ux_system_host =  (UX_SYSTEM_HOST *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800e85e:	68fa      	ldr	r2, [r7, #12]
 800e860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e862:	4413      	add	r3, r2
 800e864:	4a4c      	ldr	r2, [pc, #304]	; (800e998 <_ux_system_initialize+0x15c>)
 800e866:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_HOST);
 800e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800e86e:	627b      	str	r3, [r7, #36]	; 0x24
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif 


    /* Set the cache safe memory for the dynamic pool */
    _ux_system -> ux_system_regular_memory_pool_start =  (UX_MEMORY_BLOCK *) (((UCHAR *) regular_memory_pool_start) 
 800e870:	4b48      	ldr	r3, [pc, #288]	; (800e994 <_ux_system_initialize+0x158>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	68f9      	ldr	r1, [r7, #12]
 800e876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e878:	440a      	add	r2, r1
 800e87a:	601a      	str	r2, [r3, #0]
                                                            + memory_pool_offset);

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start =   (ALIGN_TYPE) _ux_system -> ux_system_regular_memory_pool_start;
 800e87c:	4b45      	ldr	r3, [pc, #276]	; (800e994 <_ux_system_initialize+0x158>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	623b      	str	r3, [r7, #32]
    int_memory_pool_start +=  UX_ALIGN_MIN;
 800e884:	6a3b      	ldr	r3, [r7, #32]
 800e886:	330f      	adds	r3, #15
 800e888:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800e88a:	6a3b      	ldr	r3, [r7, #32]
 800e88c:	f023 030f 	bic.w	r3, r3, #15
 800e890:	623b      	str	r3, [r7, #32]
    
    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 800e892:	68fa      	ldr	r2, [r7, #12]
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	4413      	add	r3, r2
 800e898:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 800e89a:	69fb      	ldr	r3, [r7, #28]
 800e89c:	6a3a      	ldr	r2, [r7, #32]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d301      	bcc.n	800e8a6 <_ux_system_initialize+0x6a>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 800e8a2:	2312      	movs	r3, #18
 800e8a4:	e071      	b.n	800e98a <_ux_system_initialize+0x14e>
    }

    /* Now, we have a project structure allocated, save the regular memory allocation details */
    _ux_system -> ux_system_regular_memory_pool_size =     (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 800e8a6:	69f9      	ldr	r1, [r7, #28]
 800e8a8:	4b3a      	ldr	r3, [pc, #232]	; (800e994 <_ux_system_initialize+0x158>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	6a3a      	ldr	r2, [r7, #32]
 800e8ae:	1a8a      	subs	r2, r1, r2
 800e8b0:	605a      	str	r2, [r3, #4]
    _ux_system -> ux_system_regular_memory_pool_free =     _ux_system -> ux_system_regular_memory_pool_size;
 800e8b2:	4b38      	ldr	r3, [pc, #224]	; (800e994 <_ux_system_initialize+0x158>)
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	4b37      	ldr	r3, [pc, #220]	; (800e994 <_ux_system_initialize+0x158>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	6852      	ldr	r2, [r2, #4]
 800e8bc:	609a      	str	r2, [r3, #8]
    _ux_system -> ux_system_regular_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 800e8be:	4b35      	ldr	r3, [pc, #212]	; (800e994 <_ux_system_initialize+0x158>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	6a3a      	ldr	r2, [r7, #32]
 800e8c4:	601a      	str	r2, [r3, #0]

    /* Build the first free memory block */
    memory_block =                             _ux_system -> ux_system_regular_memory_pool_start;
 800e8c6:	4b33      	ldr	r3, [pc, #204]	; (800e994 <_ux_system_initialize+0x158>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	61bb      	str	r3, [r7, #24]
    memory_block -> ux_memory_block_size =     _ux_system -> ux_system_regular_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800e8ce:	4b31      	ldr	r3, [pc, #196]	; (800e994 <_ux_system_initialize+0x158>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	f1a3 0210 	sub.w	r2, r3, #16
 800e8d8:	69bb      	ldr	r3, [r7, #24]
 800e8da:	601a      	str	r2, [r3, #0]
    memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 800e8dc:	69bb      	ldr	r3, [r7, #24]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	605a      	str	r2, [r3, #4]

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if (cache_safe_memory_pool_start == UX_NULL)
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d112      	bne.n	800e90e <_ux_system_initialize+0xd2>
    {

        /* Cache safe memory is the same as regular memory.  */
        _ux_system -> ux_system_cache_safe_memory_pool_size =  _ux_system -> ux_system_regular_memory_pool_size;
 800e8e8:	4b2a      	ldr	r3, [pc, #168]	; (800e994 <_ux_system_initialize+0x158>)
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	4b29      	ldr	r3, [pc, #164]	; (800e994 <_ux_system_initialize+0x158>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	6852      	ldr	r2, [r2, #4]
 800e8f2:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =  _ux_system -> ux_system_regular_memory_pool_free;
 800e8f4:	4b27      	ldr	r3, [pc, #156]	; (800e994 <_ux_system_initialize+0x158>)
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	4b26      	ldr	r3, [pc, #152]	; (800e994 <_ux_system_initialize+0x158>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	6892      	ldr	r2, [r2, #8]
 800e8fe:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start = _ux_system -> ux_system_regular_memory_pool_start;
 800e900:	4b24      	ldr	r3, [pc, #144]	; (800e994 <_ux_system_initialize+0x158>)
 800e902:	681a      	ldr	r2, [r3, #0]
 800e904:	4b23      	ldr	r3, [pc, #140]	; (800e994 <_ux_system_initialize+0x158>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	6812      	ldr	r2, [r2, #0]
 800e90a:	60da      	str	r2, [r3, #12]
 800e90c:	e02f      	b.n	800e96e <_ux_system_initialize+0x132>
    }
    else
    {
    
        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 800e912:	6a3b      	ldr	r3, [r7, #32]
 800e914:	330f      	adds	r3, #15
 800e916:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800e918:	6a3b      	ldr	r3, [r7, #32]
 800e91a:	f023 030f 	bic.w	r3, r3, #15
 800e91e:	623b      	str	r3, [r7, #32]
    
        /* Save the cache safe memory allocation details */
        _ux_system -> ux_system_cache_safe_memory_pool_size =     cache_safe_memory_size - UX_ALIGN_MIN;
 800e920:	4b1c      	ldr	r3, [pc, #112]	; (800e994 <_ux_system_initialize+0x158>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	683a      	ldr	r2, [r7, #0]
 800e926:	3a0f      	subs	r2, #15
 800e928:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =     _ux_system -> ux_system_cache_safe_memory_pool_size;
 800e92a:	4b1a      	ldr	r3, [pc, #104]	; (800e994 <_ux_system_initialize+0x158>)
 800e92c:	681a      	ldr	r2, [r3, #0]
 800e92e:	4b19      	ldr	r3, [pc, #100]	; (800e994 <_ux_system_initialize+0x158>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	6912      	ldr	r2, [r2, #16]
 800e934:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 800e936:	4b17      	ldr	r3, [pc, #92]	; (800e994 <_ux_system_initialize+0x158>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	6a3a      	ldr	r2, [r7, #32]
 800e93c:	60da      	str	r2, [r3, #12]
    
        /* Reset this memory block */
        _ux_utility_memory_set(_ux_system -> ux_system_cache_safe_memory_pool_start, 0, _ux_system -> ux_system_cache_safe_memory_pool_size); /* Use case of memset is verified. */
 800e93e:	4b15      	ldr	r3, [pc, #84]	; (800e994 <_ux_system_initialize+0x158>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	68d8      	ldr	r0, [r3, #12]
 800e944:	4b13      	ldr	r3, [pc, #76]	; (800e994 <_ux_system_initialize+0x158>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	691b      	ldr	r3, [r3, #16]
 800e94a:	461a      	mov	r2, r3
 800e94c:	2100      	movs	r1, #0
 800e94e:	f000 fad3 	bl	800eef8 <_ux_utility_memory_set>
    
        /* Build the first free memory block */
        memory_block =                             _ux_system -> ux_system_cache_safe_memory_pool_start;
 800e952:	4b10      	ldr	r3, [pc, #64]	; (800e994 <_ux_system_initialize+0x158>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	68db      	ldr	r3, [r3, #12]
 800e958:	61bb      	str	r3, [r7, #24]
        memory_block -> ux_memory_block_size =     _ux_system -> ux_system_cache_safe_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800e95a:	4b0e      	ldr	r3, [pc, #56]	; (800e994 <_ux_system_initialize+0x158>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	691b      	ldr	r3, [r3, #16]
 800e960:	f1a3 0210 	sub.w	r2, r3, #16
 800e964:	69bb      	ldr	r3, [r7, #24]
 800e966:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	2200      	movs	r2, #0
 800e96c:	605a      	str	r2, [r3, #4]
#endif

#if !defined(UX_STANDALONE)

    /* Create the Mutex object used by USBX to control critical sections.  */
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
 800e96e:	4b09      	ldr	r3, [pc, #36]	; (800e994 <_ux_system_initialize+0x158>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	331c      	adds	r3, #28
 800e974:	4909      	ldr	r1, [pc, #36]	; (800e99c <_ux_system_initialize+0x160>)
 800e976:	4618      	mov	r0, r3
 800e978:	f000 fad8 	bl	800ef2c <_ux_utility_mutex_create>
 800e97c:	6178      	str	r0, [r7, #20]
    if(status != UX_SUCCESS)
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d001      	beq.n	800e988 <_ux_system_initialize+0x14c>
        return(UX_MUTEX_ERROR);
 800e984:	2317      	movs	r3, #23
 800e986:	e000      	b.n	800e98a <_ux_system_initialize+0x14e>
#endif

    return(UX_SUCCESS);
 800e988:	2300      	movs	r3, #0
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3728      	adds	r7, #40	; 0x28
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	24005780 	.word	0x24005780
 800e998:	2400577c 	.word	0x2400577c
 800e99c:	080129b8 	.word	0x080129b8

0800e9a0 <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2264      	movs	r2, #100	; 0x64
 800e9ac:	fb02 f303 	mul.w	r3, r2, r3
 800e9b0:	4a07      	ldr	r2, [pc, #28]	; (800e9d0 <_ux_utility_delay_ms+0x30>)
 800e9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e9b6:	099b      	lsrs	r3, r3, #6
 800e9b8:	60fb      	str	r3, [r7, #12]
    
    /* For safety add 1 to ticks.  */
    ticks++;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	60fb      	str	r3, [r7, #12]

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 800e9c0:	68f8      	ldr	r0, [r7, #12]
 800e9c2:	f7fc f961 	bl	800ac88 <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
 800e9c6:	bf00      	nop
}
 800e9c8:	3710      	adds	r7, #16
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	10624dd3 	.word	0x10624dd3

0800e9d4 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	607a      	str	r2, [r7, #4]
 800e9e0:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 800e9e2:	e026      	b.n	800ea32 <_ux_utility_descriptor_parse+0x5e>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	1c5a      	adds	r2, r3, #1
 800e9e8:	60ba      	str	r2, [r7, #8]
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	2b02      	cmp	r3, #2
 800e9ee:	d00b      	beq.n	800ea08 <_ux_utility_descriptor_parse+0x34>
 800e9f0:	2b04      	cmp	r3, #4
 800e9f2:	d113      	bne.n	800ea1c <_ux_utility_descriptor_parse+0x48>

        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 800e9f4:	68f8      	ldr	r0, [r7, #12]
 800e9f6:	f000 f835 	bl	800ea64 <_ux_utility_long_get>
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	3304      	adds	r3, #4
 800ea04:	60fb      	str	r3, [r7, #12]
            break;                   
 800ea06:	e011      	b.n	800ea2c <_ux_utility_descriptor_parse+0x58>

        case 2:

            *((ULONG *) descriptor) = (ULONG) _ux_utility_short_get(raw_descriptor);
 800ea08:	68f8      	ldr	r0, [r7, #12]
 800ea0a:	f000 fb36 	bl	800f07a <_ux_utility_short_get>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	601a      	str	r2, [r3, #0]
            raw_descriptor += 2;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	3302      	adds	r3, #2
 800ea18:	60fb      	str	r3, [r7, #12]
            break;                   
 800ea1a:	e007      	b.n	800ea2c <_ux_utility_descriptor_parse+0x58>

        default:

            *((ULONG *) descriptor) =  (ULONG) *raw_descriptor;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	461a      	mov	r2, r3
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	601a      	str	r2, [r3, #0]
            raw_descriptor++;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	3301      	adds	r3, #1
 800ea2a:	60fb      	str	r3, [r7, #12]
        }

        /* Add the size of the component to the destination.  */
        descriptor +=  4;
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	3304      	adds	r3, #4
 800ea30:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	1e5a      	subs	r2, r3, #1
 800ea36:	607a      	str	r2, [r7, #4]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d1d3      	bne.n	800e9e4 <_ux_utility_descriptor_parse+0x10>
    }

    /* Return to caller.  */
    return;
 800ea3c:	bf00      	nop
}
 800ea3e:	3710      	adds	r7, #16
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <_ux_utility_error_callback_register>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_error_callback_register(VOID (*error_callback)(UINT system_level, UINT system_context, UINT error_code))

{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]

    /* The callback function is defined.  */
    _ux_system -> ux_system_error_callback_function = error_callback;
 800ea4c:	4b04      	ldr	r3, [pc, #16]	; (800ea60 <_ux_utility_error_callback_register+0x1c>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	659a      	str	r2, [r3, #88]	; 0x58

    /* We are done here. No return codes.  */
    return;
 800ea54:	bf00      	nop
}
 800ea56:	370c      	adds	r7, #12
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5e:	4770      	bx	lr
 800ea60:	24005780 	.word	0x24005780

0800ea64 <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b085      	sub	sp, #20
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	1c5a      	adds	r2, r3, #1
 800ea70:	607a      	str	r2, [r7, #4]
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	1c5a      	adds	r2, r3, #1
 800ea7a:	607a      	str	r2, [r7, #4]
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	021b      	lsls	r3, r3, #8
 800ea80:	68fa      	ldr	r2, [r7, #12]
 800ea82:	4313      	orrs	r3, r2
 800ea84:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	1c5a      	adds	r2, r3, #1
 800ea8a:	607a      	str	r2, [r7, #4]
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	041b      	lsls	r3, r3, #16
 800ea90:	68fa      	ldr	r2, [r7, #12]
 800ea92:	4313      	orrs	r3, r2
 800ea94:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	781b      	ldrb	r3, [r3, #0]
 800ea9a:	061b      	lsls	r3, r3, #24
 800ea9c:	68fa      	ldr	r2, [r7, #12]
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3714      	adds	r7, #20
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <_ux_utility_long_put>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b083      	sub	sp, #12
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	1c5a      	adds	r2, r3, #1
 800eabe:	607a      	str	r2, [r7, #4]
 800eac0:	683a      	ldr	r2, [r7, #0]
 800eac2:	b2d2      	uxtb	r2, r2
 800eac4:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	0a19      	lsrs	r1, r3, #8
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	1c5a      	adds	r2, r3, #1
 800eace:	607a      	str	r2, [r7, #4]
 800ead0:	b2ca      	uxtb	r2, r1
 800ead2:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	0c19      	lsrs	r1, r3, #16
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	1c5a      	adds	r2, r3, #1
 800eadc:	607a      	str	r2, [r7, #4]
 800eade:	b2ca      	uxtb	r2, r1
 800eae0:	701a      	strb	r2, [r3, #0]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	0e1b      	lsrs	r3, r3, #24
 800eae6:	b2da      	uxtb	r2, r3
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 800eaec:	bf00      	nop
}
 800eaee:	370c      	adds	r7, #12
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b08c      	sub	sp, #48	; 0x30
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
UCHAR               *memory_buffer;
ALIGN_TYPE          int_memory_buffer;


    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 800eb04:	4b7d      	ldr	r3, [pc, #500]	; (800ecfc <_ux_utility_memory_allocate+0x204>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	331c      	adds	r3, #28
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f000 fa32 	bl	800ef74 <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb16:	d101      	bne.n	800eb1c <_ux_utility_memory_allocate+0x24>
        memory_alignment = UX_NO_ALIGN;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	60fb      	str	r3, [r7, #12]
    
#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2b0e      	cmp	r3, #14
 800eb20:	d801      	bhi.n	800eb26 <_ux_utility_memory_allocate+0x2e>
        memory_alignment =  UX_ALIGN_MIN;
 800eb22:	230f      	movs	r3, #15
 800eb24:	60fb      	str	r3, [r7, #12]

    /* Adjust the memory alignment since our macros are one minus the desired alignment.
       Also determine the amount of extra memory we need for the alignment, which is one
       minus the actual alignment.  */
    memory_for_alignment =  memory_alignment;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	627b      	str	r3, [r7, #36]	; 0x24
    memory_alignment++;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	3301      	adds	r3, #1
 800eb2e:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 16, so we need
       to add the amount of memory required such that the memory buffer after the block has 
       the correct alignment. For example, if the memory block has a size of 24, then we need
       to make sure it is placed on an 8-byte alignment that is after a 16-byte alignment so
       that the memory right after the memory block is 16-byte aligned (8 + 24 = 32).  */
    memory_size_requested =  (memory_size_requested +    UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	330f      	adds	r3, #15
 800eb34:	f023 030f 	bic.w	r3, r3, #15
 800eb38:	607b      	str	r3, [r7, #4]
    /* Try to find the best block for this memory by requesting the maximum amount of
       memory we'll need which is calculated as follows: the amount memory requested by
       the caller plus the maximum amount of memory wasted due to alignment plus 2 memory
       blocks structs - one for the new memory block we'll create for the user block and one
       that we might create if there is extra memory after doing the alignment.  */
    memory_block =  _ux_utility_memory_free_block_best_get(memory_cache_flag, memory_size_requested + memory_for_alignment + (ULONG)sizeof(UX_MEMORY_BLOCK));
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3e:	4413      	add	r3, r2
 800eb40:	3310      	adds	r3, #16
 800eb42:	4619      	mov	r1, r3
 800eb44:	68b8      	ldr	r0, [r7, #8]
 800eb46:	f000 f995 	bl	800ee74 <_ux_utility_memory_free_block_best_get>
 800eb4a:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* If the block returned is NULL, there is no free memory in the pool
       for that size. */
    if (memory_block == UX_NULL)
 800eb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d10c      	bne.n	800eb6c <_ux_utility_memory_allocate+0x74>
    {

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800eb52:	4b6a      	ldr	r3, [pc, #424]	; (800ecfc <_ux_utility_memory_allocate+0x204>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	331c      	adds	r3, #28
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f000 fa00 	bl	800ef5e <_ux_utility_mutex_off>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 800eb5e:	2212      	movs	r2, #18
 800eb60:	2108      	movs	r1, #8
 800eb62:	2002      	movs	r0, #2
 800eb64:	f7ff fe48 	bl	800e7f8 <_ux_system_error_handler>

        /* Return NULL to indicate no block was found.  */
        return(UX_NULL);
 800eb68:	2300      	movs	r3, #0
 800eb6a:	e0c3      	b.n	800ecf4 <_ux_utility_memory_allocate+0x1fc>
    }

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 800eb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6e:	3310      	adds	r3, #16
 800eb70:	623b      	str	r3, [r7, #32]

    /* Are we already aligned?  */
    if ((int_memory_buffer & (memory_alignment - 1)) == 0)
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	1e5a      	subs	r2, r3, #1
 800eb76:	6a3b      	ldr	r3, [r7, #32]
 800eb78:	4013      	ands	r3, r2
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d126      	bne.n	800ebcc <_ux_utility_memory_allocate+0xd4>
    {

        /* Setup the new memory block.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	3310      	adds	r3, #16
 800eb82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb84:	4413      	add	r3, r2
 800eb86:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 800eb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8a:	689a      	ldr	r2, [r3, #8]
 800eb8c:	69fb      	ldr	r3, [r7, #28]
 800eb8e:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb94:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size - memory_size_requested - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800eb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	1ad3      	subs	r3, r2, r3
 800eb9e:	f1a3 0210 	sub.w	r2, r3, #16
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 800eba6:	69fb      	ldr	r3, [r7, #28]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        memory_block -> ux_memory_block_size =  memory_size_requested;
 800ebac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_next =  new_memory_block;
 800ebb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb4:	69fa      	ldr	r2, [r7, #28]
 800ebb6:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ebbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc0:	605a      	str	r2, [r3, #4]

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800ebc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	3310      	adds	r3, #16
 800ebc8:	62bb      	str	r3, [r7, #40]	; 0x28
 800ebca:	e05e      	b.n	800ec8a <_ux_utility_memory_allocate+0x192>
    {

        /* Align the buffer. The first thing we do is increment by the size of a
           memory block because we have to make sure we have enough memory for at
           least that.  */
        int_memory_buffer +=  (ULONG)sizeof(UX_MEMORY_BLOCK);
 800ebcc:	6a3b      	ldr	r3, [r7, #32]
 800ebce:	3310      	adds	r3, #16
 800ebd0:	623b      	str	r3, [r7, #32]
        int_memory_buffer +=  memory_alignment - 1;
 800ebd2:	68fa      	ldr	r2, [r7, #12]
 800ebd4:	6a3b      	ldr	r3, [r7, #32]
 800ebd6:	4413      	add	r3, r2
 800ebd8:	3b01      	subs	r3, #1
 800ebda:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~(((ALIGN_TYPE) memory_alignment) - 1);
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	425b      	negs	r3, r3
 800ebe0:	6a3a      	ldr	r2, [r7, #32]
 800ebe2:	4013      	ands	r3, r2
 800ebe4:	623b      	str	r3, [r7, #32]

        /* Setup the new memory block. Note that its size is updated again later.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) (int_memory_buffer - (ULONG)sizeof(UX_MEMORY_BLOCK));
 800ebe6:	6a3b      	ldr	r3, [r7, #32]
 800ebe8:	3b10      	subs	r3, #16
 800ebea:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebf0:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 800ebf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf4:	689a      	ldr	r2, [r3, #8]
 800ebf6:	69fb      	ldr	r3, [r7, #28]
 800ebf8:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size;
 800ebfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfc:	681a      	ldr	r2, [r3, #0]
 800ebfe:	69fb      	ldr	r3, [r7, #28]
 800ec00:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        int_memory_buffer =  (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 800ec0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0e:	3310      	adds	r3, #16
 800ec10:	623b      	str	r3, [r7, #32]
        memory_block -> ux_memory_block_next =  new_memory_block;
 800ec12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec14:	69fa      	ldr	r2, [r7, #28]
 800ec16:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size =  (ULONG) ((ALIGN_TYPE) new_memory_block - int_memory_buffer);
 800ec18:	69fa      	ldr	r2, [r7, #28]
 800ec1a:	6a3b      	ldr	r3, [r7, #32]
 800ec1c:	1ad2      	subs	r2, r2, r3
 800ec1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec20:	601a      	str	r2, [r3, #0]

        /* Update the new memory block's size.  */
        new_memory_block -> ux_memory_block_size -=  (memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK));
 800ec22:	69fb      	ldr	r3, [r7, #28]
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	1ad3      	subs	r3, r2, r3
 800ec2c:	f1a3 0210 	sub.w	r2, r3, #16
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	601a      	str	r2, [r3, #0]

        /* Calculate how much memory is leftover in the new memory block after doing
           the alignment.  */
        leftover =  new_memory_block -> ux_memory_block_size - memory_size_requested;
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	681a      	ldr	r2, [r3, #0]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	1ad3      	subs	r3, r2, r3
 800ec3c:	61bb      	str	r3, [r7, #24]

        /* Can we fit another block after the new block? */
        if (leftover > sizeof(UX_MEMORY_BLOCK))
 800ec3e:	69bb      	ldr	r3, [r7, #24]
 800ec40:	2b10      	cmp	r3, #16
 800ec42:	d91c      	bls.n	800ec7e <_ux_utility_memory_allocate+0x186>
        {

            /* Setup the leftover memory block.  */
            leftover_memory_block = (UX_MEMORY_BLOCK *) (((ALIGN_TYPE) new_memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested) & 0xFFFFFFFFu);
 800ec44:	69fa      	ldr	r2, [r7, #28]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	4413      	add	r3, r2
 800ec4a:	3310      	adds	r3, #16
 800ec4c:	617b      	str	r3, [r7, #20]
            leftover_memory_block -> ux_memory_block_next =  new_memory_block -> ux_memory_block_next;
 800ec4e:	69fb      	ldr	r3, [r7, #28]
 800ec50:	689a      	ldr	r2, [r3, #8]
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	609a      	str	r2, [r3, #8]
            leftover_memory_block -> ux_memory_block_previous =  new_memory_block;
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	69fa      	ldr	r2, [r7, #28]
 800ec5a:	60da      	str	r2, [r3, #12]
            leftover_memory_block -> ux_memory_block_size =  leftover - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800ec5c:	69bb      	ldr	r3, [r7, #24]
 800ec5e:	f1a3 0210 	sub.w	r2, r3, #16
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	601a      	str	r2, [r3, #0]
            leftover_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	605a      	str	r2, [r3, #4]

            new_memory_block -> ux_memory_block_next =  leftover_memory_block;
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	697a      	ldr	r2, [r7, #20]
 800ec70:	609a      	str	r2, [r3, #8]
            new_memory_block -> ux_memory_block_size -=  leftover;
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	681a      	ldr	r2, [r3, #0]
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	1ad2      	subs	r2, r2, r3
 800ec7a:	69fb      	ldr	r3, [r7, #28]
 800ec7c:	601a      	str	r2, [r3, #0]
        }

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  new_memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	3310      	adds	r3, #16
 800ec84:	62bb      	str	r3, [r7, #40]	; 0x28

        /* The new memory block is the one we give to the user.  */
        memory_block =  new_memory_block;
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* The memory to be returned is after the block header.  */
    memory_buffer =  ((UCHAR *) memory_block) + sizeof(UX_MEMORY_BLOCK);
 800ec8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8c:	3310      	adds	r3, #16
 800ec8e:	613b      	str	r3, [r7, #16]

    /* Clear the memory block.  */
    _ux_utility_memory_set(memory_buffer, 0, memory_size_requested); /* Use case of memset is verified. */
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	2100      	movs	r1, #0
 800ec94:	6938      	ldr	r0, [r7, #16]
 800ec96:	f000 f92f 	bl	800eef8 <_ux_utility_memory_set>

    /* Update the memory free in the pool.  */
    if (_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 800ec9a:	4b18      	ldr	r3, [pc, #96]	; (800ecfc <_ux_utility_memory_allocate+0x204>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	68da      	ldr	r2, [r3, #12]
 800eca0:	4b16      	ldr	r3, [pc, #88]	; (800ecfc <_ux_utility_memory_allocate+0x204>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d108      	bne.n	800ecbc <_ux_utility_memory_allocate+0x1c4>
    {

        /* There is only one memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 800ecaa:	4b14      	ldr	r3, [pc, #80]	; (800ecfc <_ux_utility_memory_allocate+0x204>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	6899      	ldr	r1, [r3, #8]
 800ecb0:	4b12      	ldr	r3, [pc, #72]	; (800ecfc <_ux_utility_memory_allocate+0x204>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecb6:	1a8a      	subs	r2, r1, r2
 800ecb8:	609a      	str	r2, [r3, #8]
 800ecba:	e014      	b.n	800ece6 <_ux_utility_memory_allocate+0x1ee>
    }
    else
    {

       switch (memory_cache_flag)
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	2b01      	cmp	r3, #1
 800ecc0:	d108      	bne.n	800ecd4 <_ux_utility_memory_allocate+0x1dc>
       {

            case UX_CACHE_SAFE_MEMORY:
                /* Update the amount of free memory in the cache safe memory pool.  */
                _ux_system -> ux_system_cache_safe_memory_pool_free -= memory_removed_from_pool;
 800ecc2:	4b0e      	ldr	r3, [pc, #56]	; (800ecfc <_ux_utility_memory_allocate+0x204>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	6959      	ldr	r1, [r3, #20]
 800ecc8:	4b0c      	ldr	r3, [pc, #48]	; (800ecfc <_ux_utility_memory_allocate+0x204>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecce:	1a8a      	subs	r2, r1, r2
 800ecd0:	615a      	str	r2, [r3, #20]

            break;
 800ecd2:	e008      	b.n	800ece6 <_ux_utility_memory_allocate+0x1ee>

            default:
                /* Update the amount of free memory in the regular memory pool.  */
                _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 800ecd4:	4b09      	ldr	r3, [pc, #36]	; (800ecfc <_ux_utility_memory_allocate+0x204>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	6899      	ldr	r1, [r3, #8]
 800ecda:	4b08      	ldr	r3, [pc, #32]	; (800ecfc <_ux_utility_memory_allocate+0x204>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ece0:	1a8a      	subs	r2, r1, r2
 800ece2:	609a      	str	r2, [r3, #8]
            break;
 800ece4:	bf00      	nop
        _ux_system -> ux_system_cache_safe_memory_pool_min_free = _ux_system -> ux_system_cache_safe_memory_pool_free;

#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800ece6:	4b05      	ldr	r3, [pc, #20]	; (800ecfc <_ux_utility_memory_allocate+0x204>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	331c      	adds	r3, #28
 800ecec:	4618      	mov	r0, r3
 800ecee:	f000 f936 	bl	800ef5e <_ux_utility_mutex_off>

    /* The memory block pointer contains a memory area properly
       aligned.  */
    return(memory_buffer);
 800ecf2:	693b      	ldr	r3, [r7, #16]
}                                
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3730      	adds	r7, #48	; 0x30
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	24005780 	.word	0x24005780

0800ed00 <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b087      	sub	sp, #28
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	60f8      	str	r0, [r7, #12]
 800ed08:	60b9      	str	r1, [r7, #8]
 800ed0a:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 800ed14:	e007      	b.n	800ed26 <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	1c53      	adds	r3, r2, #1
 800ed1a:	617b      	str	r3, [r7, #20]
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	1c59      	adds	r1, r3, #1
 800ed20:	6139      	str	r1, [r7, #16]
 800ed22:	7812      	ldrb	r2, [r2, #0]
 800ed24:	701a      	strb	r2, [r3, #0]
    while(length--)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	1e5a      	subs	r2, r3, #1
 800ed2a:	607a      	str	r2, [r7, #4]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d1f2      	bne.n	800ed16 <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 800ed30:	bf00      	nop
}
 800ed32:	371c      	adds	r7, #28
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <_ux_utility_memory_free>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b086      	sub	sp, #24
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
UCHAR               *regular_start, *regular_end;
UCHAR               *cache_safe_start, *cache_safe_end;
#endif

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 800ed44:	4b49      	ldr	r3, [pc, #292]	; (800ee6c <_ux_utility_memory_free+0x130>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	331c      	adds	r3, #28
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f000 f912 	bl	800ef74 <_ux_utility_mutex_on>
    }
#endif

    /* The memory block for this memory pointer is located right before the
       memory.  */
    memory_block =  (UX_MEMORY_BLOCK *) (((UCHAR *) memory) - sizeof(UX_MEMORY_BLOCK));
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	3b10      	subs	r3, #16
 800ed54:	617b      	str	r3, [r7, #20]
    
    /* Keep track of the memory returned to the pool.  */
    memory_size_returned = memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	3310      	adds	r3, #16
 800ed5c:	60fb      	str	r3, [r7, #12]

    /* Check this memory block to see if it valid.  */
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ed66:	d010      	beq.n	800ed8a <_ux_utility_memory_free+0x4e>
        memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_CACHE_SAFE_MEMORY))
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	685b      	ldr	r3, [r3, #4]
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 800ed6c:	4a40      	ldr	r2, [pc, #256]	; (800ee70 <_ux_utility_memory_free+0x134>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d00b      	beq.n	800ed8a <_ux_utility_memory_free+0x4e>
    {

        /* Not valid. Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800ed72:	4b3e      	ldr	r3, [pc, #248]	; (800ee6c <_ux_utility_memory_free+0x130>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	331c      	adds	r3, #28
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f000 f8f0 	bl	800ef5e <_ux_utility_mutex_off>

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);
 800ed7e:	2219      	movs	r2, #25
 800ed80:	2108      	movs	r1, #8
 800ed82:	2002      	movs	r0, #2
 800ed84:	f7ff fd38 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_CORRUPTED, memory, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return to caller.  */
        return;
 800ed88:	e06c      	b.n	800ee64 <_ux_utility_memory_free+0x128>
        _ux_system -> ux_system_cache_safe_memory_pool_alloc_total -= memory_block -> ux_memory_block_size;
    }
#endif

    /* We mark this memory block as being unused.  */
    memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	605a      	str	r2, [r3, #4]
    
    /* Now we must concatenate as many free blocks as possible,
       that include the blocks before and the blocks after the current
       block.  Scan memory backwards.  */

     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 800ed90:	e007      	b.n	800eda2 <_ux_utility_memory_free+0x66>
     {

        /* Check if the block is free.  */            
        if (memory_block -> ux_memory_block_previous -> ux_memory_block_status == UX_MEMORY_UNUSED)
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	68db      	ldr	r3, [r3, #12]
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d107      	bne.n	800edac <_ux_utility_memory_free+0x70>

            /* The memory block before is free. This will be our starting point to 
               concatenate memory.  */
            memory_block =  memory_block -> ux_memory_block_previous;
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	68db      	ldr	r3, [r3, #12]
 800eda0:	617b      	str	r3, [r7, #20]
     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	68db      	ldr	r3, [r3, #12]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d1f3      	bne.n	800ed92 <_ux_utility_memory_free+0x56>
 800edaa:	e000      	b.n	800edae <_ux_utility_memory_free+0x72>

        else

            /* The previous memory block is not free.  */
            break;
 800edac:	bf00      	nop
    }

    /* The pointer to the memory block is now our first free block. We use this 
       starting address to concatenate all the contiguous memory block.  */
    next_block =  memory_block -> ux_memory_block_next;
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 800edb4:	e01a      	b.n	800edec <_ux_utility_memory_free+0xb0>
    {

        /* Determine if the memory block is used.  */
        if (next_block -> ux_memory_block_status != UX_MEMORY_UNUSED)
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	685b      	ldr	r3, [r3, #4]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d006      	beq.n	800edcc <_ux_utility_memory_free+0x90>
        {

            /* Yes, move to next block.  */
            memory_block -> ux_memory_block_next =  next_block;
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	693a      	ldr	r2, [r7, #16]
 800edc2:	609a      	str	r2, [r3, #8]
            next_block -> ux_memory_block_previous =  memory_block;
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	697a      	ldr	r2, [r7, #20]
 800edc8:	60da      	str	r2, [r3, #12]
            break;
 800edca:	e012      	b.n	800edf2 <_ux_utility_memory_free+0xb6>
        }

        memory_block -> ux_memory_block_next =  next_block -> ux_memory_block_next;
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	689a      	ldr	r2, [r3, #8]
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size +=  next_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	4413      	add	r3, r2
 800edde:	f103 0210 	add.w	r2, r3, #16
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	601a      	str	r2, [r3, #0]
        next_block =  next_block -> ux_memory_block_next;                       
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	689b      	ldr	r3, [r3, #8]
 800edea:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 800edec:	693b      	ldr	r3, [r7, #16]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d1e1      	bne.n	800edb6 <_ux_utility_memory_free+0x7a>
    }

    /* Update the memory free in the appropriate pool.  We need to know if this 
       block is in regular memory or cache safe memory.  */
    if(_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 800edf2:	4b1e      	ldr	r3, [pc, #120]	; (800ee6c <_ux_utility_memory_free+0x130>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	68da      	ldr	r2, [r3, #12]
 800edf8:	4b1c      	ldr	r3, [pc, #112]	; (800ee6c <_ux_utility_memory_free+0x130>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d108      	bne.n	800ee14 <_ux_utility_memory_free+0xd8>
    {

        /* There is only one regular memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 800ee02:	4b1a      	ldr	r3, [pc, #104]	; (800ee6c <_ux_utility_memory_free+0x130>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	6899      	ldr	r1, [r3, #8]
 800ee08:	4b18      	ldr	r3, [pc, #96]	; (800ee6c <_ux_utility_memory_free+0x130>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	68fa      	ldr	r2, [r7, #12]
 800ee0e:	440a      	add	r2, r1
 800ee10:	609a      	str	r2, [r3, #8]
 800ee12:	e020      	b.n	800ee56 <_ux_utility_memory_free+0x11a>
    }
    else
    {

        /* Which pool is this memory in ?  */
        memory_address = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;
 800ee14:	4b15      	ldr	r3, [pc, #84]	; (800ee6c <_ux_utility_memory_free+0x130>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	60bb      	str	r3, [r7, #8]
        
        /* If the memory address is in this range, we are in the regular memory pool.  */
        if ((UCHAR *) memory_block >= memory_address && (UCHAR *) memory_block < (memory_address + _ux_system -> ux_system_regular_memory_pool_size))
 800ee1c:	697a      	ldr	r2, [r7, #20]
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d310      	bcc.n	800ee46 <_ux_utility_memory_free+0x10a>
 800ee24:	4b11      	ldr	r3, [pc, #68]	; (800ee6c <_ux_utility_memory_free+0x130>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	685b      	ldr	r3, [r3, #4]
 800ee2a:	68ba      	ldr	r2, [r7, #8]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	697a      	ldr	r2, [r7, #20]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d208      	bcs.n	800ee46 <_ux_utility_memory_free+0x10a>

            /* Update the regular memory pool.  */
            _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 800ee34:	4b0d      	ldr	r3, [pc, #52]	; (800ee6c <_ux_utility_memory_free+0x130>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	6899      	ldr	r1, [r3, #8]
 800ee3a:	4b0c      	ldr	r3, [pc, #48]	; (800ee6c <_ux_utility_memory_free+0x130>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	68fa      	ldr	r2, [r7, #12]
 800ee40:	440a      	add	r2, r1
 800ee42:	609a      	str	r2, [r3, #8]
 800ee44:	e007      	b.n	800ee56 <_ux_utility_memory_free+0x11a>

        else
        
            /* Update the cache safe memory pool.  */
            _ux_system -> ux_system_cache_safe_memory_pool_free += memory_size_returned;
 800ee46:	4b09      	ldr	r3, [pc, #36]	; (800ee6c <_ux_utility_memory_free+0x130>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	6959      	ldr	r1, [r3, #20]
 800ee4c:	4b07      	ldr	r3, [pc, #28]	; (800ee6c <_ux_utility_memory_free+0x130>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	68fa      	ldr	r2, [r7, #12]
 800ee52:	440a      	add	r2, r1
 800ee54:	615a      	str	r2, [r3, #20]
        
    }

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800ee56:	4b05      	ldr	r3, [pc, #20]	; (800ee6c <_ux_utility_memory_free+0x130>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	331c      	adds	r3, #28
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f000 f87e 	bl	800ef5e <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
 800ee62:	bf00      	nop
}
 800ee64:	3718      	adds	r7, #24
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
 800ee6a:	bf00      	nop
 800ee6c:	24005780 	.word	0x24005780
 800ee70:	80000001 	.word	0x80000001

0800ee74 <_ux_utility_memory_free_block_best_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UX_MEMORY_BLOCK  *_ux_utility_memory_free_block_best_get(ULONG memory_cache_flag, 
                                                        ULONG memory_size_requested)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b085      	sub	sp, #20
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6039      	str	r1, [r7, #0]
UX_MEMORY_BLOCK     *memory_block;
UX_MEMORY_BLOCK     *best_memory_block;
    

    /* Reset the free memory block.  */
    best_memory_block =  UX_NULL;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	60bb      	str	r3, [r7, #8]
    
    /* Check the type of memory we need.  */
    switch (memory_cache_flag)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d003      	beq.n	800ee90 <_ux_utility_memory_free_block_best_get+0x1c>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b01      	cmp	r3, #1
 800ee8c:	d005      	beq.n	800ee9a <_ux_utility_memory_free_block_best_get+0x26>
 800ee8e:	e009      	b.n	800eea4 <_ux_utility_memory_free_block_best_get+0x30>
    {

        case UX_REGULAR_MEMORY            :

            /* Start at the beginning of the regular memory pool.  */
            memory_block =  _ux_system -> ux_system_regular_memory_pool_start;
 800ee90:	4b18      	ldr	r3, [pc, #96]	; (800eef4 <_ux_utility_memory_free_block_best_get+0x80>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	60fb      	str	r3, [r7, #12]
            break;
 800ee98:	e006      	b.n	800eea8 <_ux_utility_memory_free_block_best_get+0x34>
            
        case UX_CACHE_SAFE_MEMORY       :

            /* Start at the beginning of the cache safe memory pool.  */
            memory_block =  _ux_system -> ux_system_cache_safe_memory_pool_start;
 800ee9a:	4b16      	ldr	r3, [pc, #88]	; (800eef4 <_ux_utility_memory_free_block_best_get+0x80>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	68db      	ldr	r3, [r3, #12]
 800eea0:	60fb      	str	r3, [r7, #12]
            break;
 800eea2:	e001      	b.n	800eea8 <_ux_utility_memory_free_block_best_get+0x34>
        
        default                            :
        
            /* Wrong memory type.  */
            return(UX_NULL);
 800eea4:	2300      	movs	r3, #0
 800eea6:	e01e      	b.n	800eee6 <_ux_utility_memory_free_block_best_get+0x72>

    }

    /* Loop on all memory blocks from the beginning.  */
    while (memory_block != UX_NULL)
 800eea8:	e019      	b.n	800eede <_ux_utility_memory_free_block_best_get+0x6a>
    {

        /* Check the memory block status.  */
        if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d112      	bne.n	800eed8 <_ux_utility_memory_free_block_best_get+0x64>
        {

            /* Check the size of this free block and see if it will 
               fit the memory requirement.  */
            if (memory_block -> ux_memory_block_size > memory_size_requested)
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	683a      	ldr	r2, [r7, #0]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d20d      	bcs.n	800eed8 <_ux_utility_memory_free_block_best_get+0x64>
            {
                
                /* This memory block will do. Now see if it is the best.
                   The best memory block is the one whose memory is closest
                   to the memory requested.  */
                if (best_memory_block == UX_NULL)
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d102      	bne.n	800eec8 <_ux_utility_memory_free_block_best_get+0x54>

                    /* Initialize the best block with the first free one.  */
                    best_memory_block =  memory_block;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	60bb      	str	r3, [r7, #8]
 800eec6:	e007      	b.n	800eed8 <_ux_utility_memory_free_block_best_get+0x64>
                else
                {

                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d201      	bcs.n	800eed8 <_ux_utility_memory_free_block_best_get+0x64>

                        /* We have discovered a better fit block.  */
                        best_memory_block =  memory_block;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	60bb      	str	r3, [r7, #8]
                }                    
            }
        }

        /* Search the next free block until the end.  */            
        memory_block =  memory_block -> ux_memory_block_next;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	689b      	ldr	r3, [r3, #8]
 800eedc:	60fb      	str	r3, [r7, #12]
    while (memory_block != UX_NULL)
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d1e2      	bne.n	800eeaa <_ux_utility_memory_free_block_best_get+0x36>
    }

    /* If no free memory block was found, the return value will be NULL.  */
    return(best_memory_block);        
 800eee4:	68bb      	ldr	r3, [r7, #8]
}                                
 800eee6:	4618      	mov	r0, r3
 800eee8:	3714      	adds	r7, #20
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr
 800eef2:	bf00      	nop
 800eef4:	24005780 	.word	0x24005780

0800eef8 <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b087      	sub	sp, #28
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	60f8      	str	r0, [r7, #12]
 800ef00:	460b      	mov	r3, r1
 800ef02:	607a      	str	r2, [r7, #4]
 800ef04:	72fb      	strb	r3, [r7, #11]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 800ef0a:	e004      	b.n	800ef16 <_ux_utility_memory_set+0x1e>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	1c5a      	adds	r2, r3, #1
 800ef10:	617a      	str	r2, [r7, #20]
 800ef12:	7afa      	ldrb	r2, [r7, #11]
 800ef14:	701a      	strb	r2, [r3, #0]
    while(length--)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	1e5a      	subs	r2, r3, #1
 800ef1a:	607a      	str	r2, [r7, #4]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d1f5      	bne.n	800ef0c <_ux_utility_memory_set+0x14>
    }

    /* Return to caller.  */
    return; 
 800ef20:	bf00      	nop
}
 800ef22:	371c      	adds	r7, #28
 800ef24:	46bd      	mov	sp, r7
 800ef26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2a:	4770      	bx	lr

0800ef2c <_ux_utility_mutex_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_create(UX_MUTEX *mutex, CHAR *mutex_name)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Call ThreadX to create the Mutex object.  */
    status =  tx_mutex_create(mutex, (CHAR *) mutex_name, TX_NO_INHERIT);   
 800ef36:	2334      	movs	r3, #52	; 0x34
 800ef38:	2200      	movs	r2, #0
 800ef3a:	6839      	ldr	r1, [r7, #0]
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7fc ffe3 	bl	800bf08 <_txe_mutex_create>
 800ef42:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d004      	beq.n	800ef54 <_ux_utility_mutex_create+0x28>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800ef4a:	68fa      	ldr	r2, [r7, #12]
 800ef4c:	2108      	movs	r1, #8
 800ef4e:	2002      	movs	r0, #2
 800ef50:	f7ff fc52 	bl	800e7f8 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 800ef54:	68fb      	ldr	r3, [r7, #12]
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3710      	adds	r7, #16
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}

0800ef5e <_ux_utility_mutex_off>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_off(UX_MUTEX *mutex)
{
 800ef5e:	b580      	push	{r7, lr}
 800ef60:	b082      	sub	sp, #8
 800ef62:	af00      	add	r7, sp, #0
 800ef64:	6078      	str	r0, [r7, #4]

    /* Call ThreadX to release protection.  */
    tx_mutex_put(mutex);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f7fd f8c6 	bl	800c0f8 <_txe_mutex_put>

    /* Return to caller.  */
    return;
 800ef6c:	bf00      	nop
}
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <_ux_utility_mutex_on>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_on(UX_MUTEX *mutex)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b084      	sub	sp, #16
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to get system mutex.  */
    status =  tx_mutex_get(mutex, TX_WAIT_FOREVER);
 800ef7c:	f04f 31ff 	mov.w	r1, #4294967295
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f7fd f85f 	bl	800c044 <_txe_mutex_get>
 800ef86:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d005      	beq.n	800ef9a <_ux_utility_mutex_on+0x26>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800ef8e:	68fa      	ldr	r2, [r7, #12]
 800ef90:	2108      	movs	r1, #8
 800ef92:	2002      	movs	r0, #2
 800ef94:	f7ff fc30 	bl	800e7f8 <_ux_system_error_handler>
    }

    /* Return to caller.  */
    return;
 800ef98:	bf00      	nop
 800ef9a:	bf00      	nop
}
 800ef9c:	3710      	adds	r7, #16
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}

0800efa2 <_ux_utility_semaphore_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 800efa2:	b580      	push	{r7, lr}
 800efa4:	b086      	sub	sp, #24
 800efa6:	af00      	add	r7, sp, #0
 800efa8:	60f8      	str	r0, [r7, #12]
 800efaa:	60b9      	str	r1, [r7, #8]
 800efac:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 800efae:	231c      	movs	r3, #28
 800efb0:	687a      	ldr	r2, [r7, #4]
 800efb2:	68b9      	ldr	r1, [r7, #8]
 800efb4:	68f8      	ldr	r0, [r7, #12]
 800efb6:	f7fd f8d9 	bl	800c16c <_txe_semaphore_create>
 800efba:	6178      	str	r0, [r7, #20]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d004      	beq.n	800efcc <_ux_utility_semaphore_create+0x2a>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800efc2:	697a      	ldr	r2, [r7, #20]
 800efc4:	2108      	movs	r1, #8
 800efc6:	2002      	movs	r0, #2
 800efc8:	f7ff fc16 	bl	800e7f8 <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_SEMAPHORE_ERROR, semaphore, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }

    /* Return completion status.  */
    return(status);
 800efcc:	697b      	ldr	r3, [r7, #20]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3718      	adds	r7, #24
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}

0800efd6 <_ux_utility_semaphore_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore)
{
 800efd6:	b580      	push	{r7, lr}
 800efd8:	b084      	sub	sp, #16
 800efda:	af00      	add	r7, sp, #0
 800efdc:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f7fd f95a 	bl	800c298 <_txe_semaphore_delete>
 800efe4:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800efe6:	68fb      	ldr	r3, [r7, #12]
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3710      	adds	r7, #16
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <_ux_utility_semaphore_get>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_get(UX_SEMAPHORE *semaphore, ULONG semaphore_signal)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b092      	sub	sp, #72	; 0x48
 800eff4:	af06      	add	r7, sp, #24
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
ULONG       time_slice;
UX_THREAD   *next_thread;
UX_THREAD   *suspended_thread;

    /* Call TX to know my own tread.  */
    my_thread = tx_thread_identify();
 800effa:	f7fb fc23 	bl	800a844 <_tx_thread_identify>
 800effe:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Retrieve information about the previously created thread "my_thread." */
    tx_thread_info_get(my_thread, &name, &state, &run_count,
 800f000:	f107 001c 	add.w	r0, r7, #28
 800f004:	f107 0220 	add.w	r2, r7, #32
 800f008:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800f00c:	f107 0308 	add.w	r3, r7, #8
 800f010:	9304      	str	r3, [sp, #16]
 800f012:	f107 030c 	add.w	r3, r7, #12
 800f016:	9303      	str	r3, [sp, #12]
 800f018:	f107 0310 	add.w	r3, r7, #16
 800f01c:	9302      	str	r3, [sp, #8]
 800f01e:	f107 0314 	add.w	r3, r7, #20
 800f022:	9301      	str	r3, [sp, #4]
 800f024:	f107 0318 	add.w	r3, r7, #24
 800f028:	9300      	str	r3, [sp, #0]
 800f02a:	4603      	mov	r3, r0
 800f02c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f02e:	f7fd faef 	bl	800c610 <_txe_thread_info_get>
                       &priority, &preemption_threshold,
                       &time_slice, &next_thread,&suspended_thread);

    /* Is this the lowest priority thread in the system trying to use TX services ? */
    if (priority > _ux_system -> ux_system_thread_lowest_priority)
 800f032:	4b0a      	ldr	r3, [pc, #40]	; (800f05c <_ux_utility_semaphore_get+0x6c>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	699a      	ldr	r2, [r3, #24]
 800f038:	69bb      	ldr	r3, [r7, #24]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d203      	bcs.n	800f046 <_ux_utility_semaphore_get+0x56>
    {

        /* We need to remember this thread priority.  */
        _ux_system -> ux_system_thread_lowest_priority = priority;
 800f03e:	4b07      	ldr	r3, [pc, #28]	; (800f05c <_ux_utility_semaphore_get+0x6c>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	69ba      	ldr	r2, [r7, #24]
 800f044:	619a      	str	r2, [r3, #24]
        
    }

    /* Get ThreadX semaphore instance.  */
    status =  tx_semaphore_get(semaphore, semaphore_signal);
 800f046:	6839      	ldr	r1, [r7, #0]
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f7fd f963 	bl	800c314 <_txe_semaphore_get>
 800f04e:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Return completion status.  */
    return(status);
 800f050:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800f052:	4618      	mov	r0, r3
 800f054:	3730      	adds	r7, #48	; 0x30
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
 800f05a:	bf00      	nop
 800f05c:	24005780 	.word	0x24005780

0800f060 <_ux_utility_semaphore_put>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b084      	sub	sp, #16
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f7fd f995 	bl	800c398 <_txe_semaphore_put>
 800f06e:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800f070:	68fb      	ldr	r3, [r7, #12]
}
 800f072:	4618      	mov	r0, r3
 800f074:	3710      	adds	r7, #16
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}

0800f07a <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 800f07a:	b480      	push	{r7}
 800f07c:	b085      	sub	sp, #20
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	1c5a      	adds	r2, r3, #1
 800f086:	607a      	str	r2, [r7, #4]
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	81fb      	strh	r3, [r7, #14]
    value |=  (USHORT)(*address << 8);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	b29b      	uxth	r3, r3
 800f092:	021b      	lsls	r3, r3, #8
 800f094:	b29a      	uxth	r2, r3
 800f096:	89fb      	ldrh	r3, [r7, #14]
 800f098:	4313      	orrs	r3, r2
 800f09a:	81fb      	strh	r3, [r7, #14]

    /* Return to caller.  */
    return((ULONG) value);
 800f09c:	89fb      	ldrh	r3, [r7, #14]
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3714      	adds	r7, #20
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a8:	4770      	bx	lr

0800f0aa <_ux_utility_short_put>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_short_put(UCHAR * address, USHORT value)
{
 800f0aa:	b480      	push	{r7}
 800f0ac:	b083      	sub	sp, #12
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	6078      	str	r0, [r7, #4]
 800f0b2:	460b      	mov	r3, r1
 800f0b4:	807b      	strh	r3, [r7, #2]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address */
    *address++ =  (UCHAR) (value & 0xff);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	1c5a      	adds	r2, r3, #1
 800f0ba:	607a      	str	r2, [r7, #4]
 800f0bc:	887a      	ldrh	r2, [r7, #2]
 800f0be:	b2d2      	uxtb	r2, r2
 800f0c0:	701a      	strb	r2, [r3, #0]
    *address = (UCHAR) ((value >> 8) & 0xff);
 800f0c2:	887b      	ldrh	r3, [r7, #2]
 800f0c4:	0a1b      	lsrs	r3, r3, #8
 800f0c6:	b29b      	uxth	r3, r3
 800f0c8:	b2da      	uxtb	r2, r3
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 800f0ce:	bf00      	nop
}
 800f0d0:	370c      	adds	r7, #12
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d8:	4770      	bx	lr

0800f0da <_ux_utility_string_length_check>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 800f0da:	b580      	push	{r7, lr}
 800f0dc:	b086      	sub	sp, #24
 800f0de:	af00      	add	r7, sp, #0
 800f0e0:	60f8      	str	r0, [r7, #12]
 800f0e2:	60b9      	str	r1, [r7, #8]
 800f0e4:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d101      	bne.n	800f0f0 <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 800f0ec:	23ff      	movs	r3, #255	; 0xff
 800f0ee:	e01d      	b.n	800f12c <_ux_utility_string_length_check+0x52>

    string_length = 0;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 800f0f4:	68fa      	ldr	r2, [r7, #12]
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	4413      	add	r3, r2
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d00d      	beq.n	800f11c <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	3301      	adds	r3, #1
 800f104:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 800f106:	697a      	ldr	r2, [r7, #20]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d9f2      	bls.n	800f0f4 <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 800f10e:	22ff      	movs	r2, #255	; 0xff
 800f110:	2108      	movs	r1, #8
 800f112:	2002      	movs	r0, #2
 800f114:	f7ff fb70 	bl	800e7f8 <_ux_system_error_handler>

            return(UX_ERROR);
 800f118:	23ff      	movs	r3, #255	; 0xff
 800f11a:	e007      	b.n	800f12c <_ux_utility_string_length_check+0x52>
            break;
 800f11c:	bf00      	nop
        }
    }

    if (string_length_ptr)
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d002      	beq.n	800f12a <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	697a      	ldr	r2, [r7, #20]
 800f128:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 800f12a:	2300      	movs	r3, #0
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3718      	adds	r7, #24
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}

0800f134 <_ux_utility_thread_create>:
UINT  _ux_utility_thread_create(UX_THREAD *thread_ptr, CHAR *name, 
                VOID (*entry_function)(ULONG), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b08e      	sub	sp, #56	; 0x38
 800f138:	af08      	add	r7, sp, #32
 800f13a:	60f8      	str	r0, [r7, #12]
 800f13c:	60b9      	str	r1, [r7, #8]
 800f13e:	607a      	str	r2, [r7, #4]
 800f140:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Call ThreadX to create USBX thread.  */
    status =  tx_thread_create(thread_ptr,name,entry_function,entry_input,
 800f142:	23b0      	movs	r3, #176	; 0xb0
 800f144:	9306      	str	r3, [sp, #24]
 800f146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f148:	9305      	str	r3, [sp, #20]
 800f14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f14c:	9304      	str	r3, [sp, #16]
 800f14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f150:	9303      	str	r3, [sp, #12]
 800f152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f154:	9302      	str	r3, [sp, #8]
 800f156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f158:	9301      	str	r3, [sp, #4]
 800f15a:	6a3b      	ldr	r3, [r7, #32]
 800f15c:	9300      	str	r3, [sp, #0]
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	687a      	ldr	r2, [r7, #4]
 800f162:	68b9      	ldr	r1, [r7, #8]
 800f164:	68f8      	ldr	r0, [r7, #12]
 800f166:	f7fd f935 	bl	800c3d4 <_txe_thread_create>
 800f16a:	6178      	str	r0, [r7, #20]
                    stack_start,stack_size, priority,preempt_threshold,time_slice,auto_start);

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d004      	beq.n	800f17c <_ux_utility_thread_create+0x48>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800f172:	697a      	ldr	r2, [r7, #20]
 800f174:	2108      	movs	r1, #8
 800f176:	2002      	movs	r0, #2
 800f178:	f7ff fb3e 	bl	800e7f8 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_THREAD_ERROR, thread_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 800f17c:	697b      	ldr	r3, [r7, #20]
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3718      	adds	r7, #24
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}

0800f186 <_ux_utility_thread_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_delete(UX_THREAD *thread_ptr)
{
 800f186:	b580      	push	{r7, lr}
 800f188:	b084      	sub	sp, #16
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to terminate the USBX thread.  */
    tx_thread_terminate(thread_ptr);
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f7fd fac4 	bl	800c71c <_txe_thread_terminate>

    /* Call ThreadX to delete the USBX thread.  */
    status =  tx_thread_delete(thread_ptr);
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f7fd fa0f 	bl	800c5b8 <_txe_thread_delete>
 800f19a:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800f19c:	68fb      	ldr	r3, [r7, #12]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3710      	adds	r7, #16
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
	...

0800f1a8 <_ux_utility_thread_identify>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UX_THREAD *_ux_utility_thread_identify(VOID)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f1ae:	f3ef 8305 	mrs	r3, IPSR
 800f1b2:	607b      	str	r3, [r7, #4]
    return(ipsr_value);
 800f1b4:	687a      	ldr	r2, [r7, #4]


    /* If we're under interrupt, the thread returned by tx_thread_identify
        is the thread running prior to the ISR. Instead, we set it to null.  */
    return(UX_THREAD_GET_SYSTEM_STATE() ? UX_NULL : tx_thread_identify());
 800f1b6:	4b07      	ldr	r3, [pc, #28]	; (800f1d4 <_ux_utility_thread_identify+0x2c>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	4313      	orrs	r3, r2
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d103      	bne.n	800f1c8 <_ux_utility_thread_identify+0x20>
 800f1c0:	f7fb fb40 	bl	800a844 <_tx_thread_identify>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	e000      	b.n	800f1ca <_ux_utility_thread_identify+0x22>
 800f1c8:	2300      	movs	r3, #0
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3708      	adds	r7, #8
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	24000010 	.word	0x24000010

0800f1d8 <_ux_utility_thread_relinquish>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_thread_relinquish(VOID)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	af00      	add	r7, sp, #0

    /* Call ThreadX to relinquish a USBX thread.  */
    tx_thread_relinquish();
 800f1dc:	f7fd fa82 	bl	800c6e4 <_txe_thread_relinquish>

}
 800f1e0:	bf00      	nop
 800f1e2:	bd80      	pop	{r7, pc}

0800f1e4 <_ux_utility_thread_schedule_other>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_schedule_other(UINT caller_priority)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b086      	sub	sp, #24
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
UX_THREAD   *my_thread;

    UX_PARAMETER_NOT_USED(caller_priority);

    /* Call TX to know my own tread.  */
    my_thread = tx_thread_identify();
 800f1ec:	f7fb fb2a 	bl	800a844 <_tx_thread_identify>
 800f1f0:	6138      	str	r0, [r7, #16]

    /* Call ThreadX to change thread priority .  */
    status =  tx_thread_priority_change(my_thread, _ux_system -> ux_system_thread_lowest_priority, &old_priority);
 800f1f2:	4b0e      	ldr	r3, [pc, #56]	; (800f22c <_ux_utility_thread_schedule_other+0x48>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	699b      	ldr	r3, [r3, #24]
 800f1f8:	f107 020c 	add.w	r2, r7, #12
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	6938      	ldr	r0, [r7, #16]
 800f200:	f7fd fa34 	bl	800c66c <_txe_thread_priority_change>
 800f204:	6178      	str	r0, [r7, #20]
    
    /* Check for error.  */
    if (status == TX_SUCCESS)
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d109      	bne.n	800f220 <_ux_utility_thread_schedule_other+0x3c>
    {
    
        /* Wait until all other threads passed into the scheduler. */
        _ux_utility_thread_relinquish();
 800f20c:	f7ff ffe4 	bl	800f1d8 <_ux_utility_thread_relinquish>
    
        /* And now return the priority of the thread to normal.  */
        status =  tx_thread_priority_change(my_thread, old_priority, &old_priority);
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f107 020c 	add.w	r2, r7, #12
 800f216:	4619      	mov	r1, r3
 800f218:	6938      	ldr	r0, [r7, #16]
 800f21a:	f7fd fa27 	bl	800c66c <_txe_thread_priority_change>
 800f21e:	6178      	str	r0, [r7, #20]
        
    }

    /* Return completion status.  */
    return(status);
 800f220:	697b      	ldr	r3, [r7, #20]
}
 800f222:	4618      	mov	r0, r3
 800f224:	3718      	adds	r7, #24
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	24005780 	.word	0x24005780

0800f230 <_ux_host_class_cdc_acm_activate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_class_cdc_acm_activate(UX_HOST_CLASS_COMMAND *command)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b08c      	sub	sp, #48	; 0x30
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
UX_HOST_CLASS_CDC_ACM_LINE_STATE    line_state;
#endif

    /* The CDC ACM class is always activated by the interface descriptor and not the
       device descriptor.  */
    interface_ptr =  (UX_INTERFACE *) command -> ux_host_class_command_container;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Obtain memory for this class instance.  */
    cdc_acm =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, sizeof(UX_HOST_CLASS_CDC_ACM));
 800f23e:	2254      	movs	r2, #84	; 0x54
 800f240:	2101      	movs	r1, #1
 800f242:	2000      	movs	r0, #0
 800f244:	f7ff fc58 	bl	800eaf8 <_ux_utility_memory_allocate>
 800f248:	6278      	str	r0, [r7, #36]	; 0x24

    /* Instance creation fail. */
    if (cdc_acm == UX_NULL)
 800f24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d101      	bne.n	800f254 <_ux_host_class_cdc_acm_activate+0x24>

        /* Memory allocation fail. */
        return(UX_MEMORY_INSUFFICIENT);
 800f250:	2312      	movs	r3, #18
 800f252:	e0ad      	b.n	800f3b0 <_ux_host_class_cdc_acm_activate+0x180>

#if !defined(UX_HOST_STANDALONE)

    /* Create the semaphore to protect 2 threads from accessing the same acm instance.  */
    status =  _ux_host_semaphore_create(&cdc_acm -> ux_host_class_cdc_acm_semaphore, "ux_host_class_cdc_acm_semaphore", 1);
 800f254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f256:	3338      	adds	r3, #56	; 0x38
 800f258:	2201      	movs	r2, #1
 800f25a:	4957      	ldr	r1, [pc, #348]	; (800f3b8 <_ux_host_class_cdc_acm_activate+0x188>)
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7ff fea0 	bl	800efa2 <_ux_utility_semaphore_create>
 800f262:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (status != UX_SUCCESS)
 800f264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f266:	2b00      	cmp	r3, #0
 800f268:	d004      	beq.n	800f274 <_ux_host_class_cdc_acm_activate+0x44>
    {

        /* Free instance memory. */
        _ux_utility_memory_free(cdc_acm);
 800f26a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f26c:	f7ff fd66 	bl	800ed3c <_ux_utility_memory_free>

        /* Semaphore creation error. */
        return(UX_SEMAPHORE_ERROR);
 800f270:	2315      	movs	r3, #21
 800f272:	e09d      	b.n	800f3b0 <_ux_host_class_cdc_acm_activate+0x180>
    }
#endif

    /* Store the class container into this instance.  */
    cdc_acm -> ux_host_class_cdc_acm_class =  command -> ux_host_class_command_class_ptr;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f27a:	605a      	str	r2, [r3, #4]

    /* Store the interface container into the cdc_acm class instance.  */
    cdc_acm -> ux_host_class_cdc_acm_interface =  interface_ptr;
 800f27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f27e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f280:	619a      	str	r2, [r3, #24]

    /* Store the device container into the cdc_acm class instance.  */
    cdc_acm -> ux_host_class_cdc_acm_device =  interface_ptr -> ux_interface_configuration -> ux_configuration_device;
 800f282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28a:	609a      	str	r2, [r3, #8]

    /* This instance of the device must also be stored in the interface container.  */
    interface_ptr -> ux_interface_class_instance =  (VOID *) cdc_acm;
 800f28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f290:	635a      	str	r2, [r3, #52]	; 0x34

    /* Create this class instance.  */
    _ux_host_stack_class_instance_create(cdc_acm -> ux_host_class_cdc_acm_class, (VOID *) cdc_acm);
 800f292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f298:	4618      	mov	r0, r3
 800f29a:	f7fd fd64 	bl	800cd66 <_ux_host_stack_class_instance_create>
    }

#else

    /* Configure the cdc_acm.  */
    status =  _ux_host_class_cdc_acm_configure(cdc_acm);
 800f29e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2a0:	f000 fa10 	bl	800f6c4 <_ux_host_class_cdc_acm_configure>
 800f2a4:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* If we are done success, go on to get endpoints.  */
    if (status == UX_SUCCESS)
 800f2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d103      	bne.n	800f2b4 <_ux_host_class_cdc_acm_activate+0x84>

        /* Get the cdc_acm endpoint(s). Depending on the interface type, we will need to search for
           Bulk Out and Bulk In endpoints and the optional interrupt endpoint.  */
        status =  _ux_host_class_cdc_acm_endpoints_get(cdc_acm);
 800f2ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2ae:	f000 facd 	bl	800f84c <_ux_host_class_cdc_acm_endpoints_get>
 800f2b2:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* If we are done success, go on to mount interface.  */
    if (status == UX_SUCCESS)
 800f2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d154      	bne.n	800f364 <_ux_host_class_cdc_acm_activate+0x134>
    {
        /* Mark the cdc_acm as mounting now.  Both interfaces need to be mounting. */
        cdc_acm -> ux_host_class_cdc_acm_state =  UX_HOST_CLASS_INSTANCE_MOUNTING;
 800f2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2bc:	2203      	movs	r2, #3
 800f2be:	621a      	str	r2, [r3, #32]

        /* If we have the Control Class, we have to configure the speed, parity ... */
        if (cdc_acm -> ux_host_class_cdc_acm_interface -> ux_interface_descriptor.bInterfaceClass == UX_HOST_CLASS_CDC_CONTROL_CLASS)
 800f2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c2:	699b      	ldr	r3, [r3, #24]
 800f2c4:	6a1b      	ldr	r3, [r3, #32]
 800f2c6:	2b02      	cmp	r3, #2
 800f2c8:	d135      	bne.n	800f336 <_ux_host_class_cdc_acm_activate+0x106>

            /* We need to wait for some device to settle. The Radicom USB Modem is an example of
               these device who fail the first Set_Line_Coding command if sent too quickly.
               The timing does not have to be precise so we use the thread sleep function.
               The default sleep value is 1 seconds.  */
            _ux_utility_delay_ms(UX_HOST_CLASS_CDC_ACM_DEVICE_INIT_DELAY);
 800f2ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f2ce:	f7ff fb67 	bl	800e9a0 <_ux_utility_delay_ms>

            /* Do a GET_LINE_CODING first.  */
            status = _ux_host_class_cdc_acm_ioctl(cdc_acm, UX_HOST_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING, (VOID *) &line_coding);
 800f2d2:	f107 0314 	add.w	r3, r7, #20
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	2101      	movs	r1, #1
 800f2da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2dc:	f000 fbd2 	bl	800fa84 <_ux_host_class_cdc_acm_ioctl>
 800f2e0:	62f8      	str	r0, [r7, #44]	; 0x2c

            /* If we are done success, go on.  */
            if (status == UX_SUCCESS)
 800f2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d110      	bne.n	800f30a <_ux_host_class_cdc_acm_activate+0xda>
            {

                /* Set the default values to the device, first line coding.  */
                line_coding.ux_host_class_cdc_acm_line_coding_dter      = UX_HOST_CLASS_CDC_ACM_LINE_CODING_DEFAULT_RATE;
 800f2e8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800f2ec:	617b      	str	r3, [r7, #20]
                line_coding.ux_host_class_cdc_acm_line_coding_stop_bit  = UX_HOST_CLASS_CDC_ACM_LINE_CODING_DEFAULT_STOP_BIT;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	61bb      	str	r3, [r7, #24]
                line_coding.ux_host_class_cdc_acm_line_coding_parity    = UX_HOST_CLASS_CDC_ACM_LINE_CODING_DEFAULT_PARITY;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	61fb      	str	r3, [r7, #28]
                line_coding.ux_host_class_cdc_acm_line_coding_data_bits = UX_HOST_CLASS_CDC_ACM_LINE_CODING_DEFAULT_DATA_BIT;
 800f2f6:	2308      	movs	r3, #8
 800f2f8:	623b      	str	r3, [r7, #32]
                status = _ux_host_class_cdc_acm_ioctl(cdc_acm, UX_HOST_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING, (VOID *) &line_coding);
 800f2fa:	f107 0314 	add.w	r3, r7, #20
 800f2fe:	461a      	mov	r2, r3
 800f300:	2100      	movs	r1, #0
 800f302:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f304:	f000 fbbe 	bl	800fa84 <_ux_host_class_cdc_acm_ioctl>
 800f308:	62f8      	str	r0, [r7, #44]	; 0x2c
            }

            /* If we are done success, go on.  */
            if (status == UX_SUCCESS)
 800f30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d10b      	bne.n	800f328 <_ux_host_class_cdc_acm_activate+0xf8>
            {

                /* Set the default values to the device, line state.  */
                line_state.ux_host_class_cdc_acm_line_state_rts       = 1;
 800f310:	2301      	movs	r3, #1
 800f312:	60fb      	str	r3, [r7, #12]
                line_state.ux_host_class_cdc_acm_line_state_dtr       = 1;
 800f314:	2301      	movs	r3, #1
 800f316:	613b      	str	r3, [r7, #16]
                status = _ux_host_class_cdc_acm_ioctl(cdc_acm, UX_HOST_CLASS_CDC_ACM_IOCTL_SET_LINE_STATE, (VOID *) &line_state);
 800f318:	f107 030c 	add.w	r3, r7, #12
 800f31c:	461a      	mov	r2, r3
 800f31e:	2102      	movs	r1, #2
 800f320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f322:	f000 fbaf 	bl	800fa84 <_ux_host_class_cdc_acm_ioctl>
 800f326:	62f8      	str	r0, [r7, #44]	; 0x2c
            }

            /* If we are done success, go on.  */
            if (status == UX_SUCCESS)
 800f328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d103      	bne.n	800f336 <_ux_host_class_cdc_acm_activate+0x106>
            {

                /* Get the capabilities of the device. We need to know if the commands are multiplexed over the comm
                interface or the data interface.  */
                status =  _ux_host_class_cdc_acm_capabilities_get(cdc_acm);
 800f32e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f330:	f000 f846 	bl	800f3c0 <_ux_host_class_cdc_acm_capabilities_get>
 800f334:	62f8      	str	r0, [r7, #44]	; 0x2c
            }
        }

        /* If we are done success, go on.  */
        if (status == UX_SUCCESS)
 800f336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d113      	bne.n	800f364 <_ux_host_class_cdc_acm_activate+0x134>
        {
            /* Mark the cdc_acm as live now.  Both interfaces need to be live. */
            cdc_acm -> ux_host_class_cdc_acm_state =  UX_HOST_CLASS_INSTANCE_LIVE;
 800f33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33e:	2201      	movs	r2, #1
 800f340:	621a      	str	r2, [r3, #32]

            /* If all is fine and the device is mounted, we may need to inform the application
               if a function has been programmed in the system structure.  */
            if (_ux_system_host -> ux_system_host_change_function != UX_NULL)
 800f342:	4b1e      	ldr	r3, [pc, #120]	; (800f3bc <_ux_host_class_cdc_acm_activate+0x18c>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d008      	beq.n	800f360 <_ux_host_class_cdc_acm_activate+0x130>
            {

                /* Call system change function.  */
                _ux_system_host ->  ux_system_host_change_function(UX_DEVICE_INSERTION, cdc_acm -> ux_host_class_cdc_acm_class, (VOID *) cdc_acm);
 800f34e:	4b1b      	ldr	r3, [pc, #108]	; (800f3bc <_ux_host_class_cdc_acm_activate+0x18c>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800f356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f358:	6851      	ldr	r1, [r2, #4]
 800f35a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f35c:	2001      	movs	r0, #1
 800f35e:	4798      	blx	r3

            /* If trace is enabled, register this object.  */
            UX_TRACE_OBJECT_REGISTER(UX_TRACE_HOST_OBJECT_TYPE_INTERFACE, cdc_acm, 0, 0, 0)

            /* We are done success. */
            return(UX_SUCCESS);
 800f360:	2300      	movs	r3, #0
 800f362:	e025      	b.n	800f3b0 <_ux_host_class_cdc_acm_activate+0x180>
        }
    }
#endif

    /* On error case, it's possible data buffer allocated for interrupt endpoint and transfer started, stop and free it.  */
    if (cdc_acm -> ux_host_class_cdc_acm_interrupt_endpoint && 
 800f364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f366:	695b      	ldr	r3, [r3, #20]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d00f      	beq.n	800f38c <_ux_host_class_cdc_acm_activate+0x15c>
        cdc_acm -> ux_host_class_cdc_acm_interrupt_endpoint -> ux_endpoint_transfer_request.ux_transfer_request_data_pointer)
 800f36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36e:	695b      	ldr	r3, [r3, #20]
 800f370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    if (cdc_acm -> ux_host_class_cdc_acm_interrupt_endpoint && 
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00a      	beq.n	800f38c <_ux_host_class_cdc_acm_activate+0x15c>
    {

        /* The first transfer request has already been initiated. Abort it.  */
        _ux_host_stack_endpoint_transfer_abort(cdc_acm -> ux_host_class_cdc_acm_interrupt_endpoint);
 800f376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f378:	695b      	ldr	r3, [r3, #20]
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fe faf6 	bl	800d96c <_ux_host_stack_endpoint_transfer_abort>

        /* Free the memory for the data pointer.  */
        _ux_utility_memory_free(cdc_acm -> ux_host_class_cdc_acm_interrupt_endpoint -> ux_endpoint_transfer_request.ux_transfer_request_data_pointer);
 800f380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f382:	695b      	ldr	r3, [r3, #20]
 800f384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f386:	4618      	mov	r0, r3
 800f388:	f7ff fcd8 	bl	800ed3c <_ux_utility_memory_free>
    }

    /* Destroy the instance.  */
    _ux_host_stack_class_instance_destroy(cdc_acm -> ux_host_class_cdc_acm_class, (VOID *) cdc_acm);
 800f38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f392:	4618      	mov	r0, r3
 800f394:	f7fd fd08 	bl	800cda8 <_ux_host_stack_class_instance_destroy>

#if !defined(UX_HOST_STANDALONE)

    /* Destroy the semaphore.  */
    _ux_host_semaphore_delete(&cdc_acm -> ux_host_class_cdc_acm_semaphore);
 800f398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39a:	3338      	adds	r3, #56	; 0x38
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7ff fe1a 	bl	800efd6 <_ux_utility_semaphore_delete>
#endif

    /* Unmount instance. */
    interface_ptr -> ux_interface_class_instance = UX_NULL;
 800f3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Free instance. */
    _ux_utility_memory_free(cdc_acm);
 800f3a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3aa:	f7ff fcc7 	bl	800ed3c <_ux_utility_memory_free>

    return(status);
 800f3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3730      	adds	r7, #48	; 0x30
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}
 800f3b8:	080129c8 	.word	0x080129c8
 800f3bc:	2400577c 	.word	0x2400577c

0800f3c0 <_ux_host_class_cdc_acm_capabilities_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_class_cdc_acm_capabilities_get(UX_HOST_CLASS_CDC_ACM *cdc_acm)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b0a4      	sub	sp, #144	; 0x90
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
UCHAR                       descriptor_type;
UCHAR                       descriptor_subtype;
ULONG                       interface_found;

    /* We need to get the default control endpoint transfer request pointer.  */
    control_endpoint =  &cdc_acm -> ux_host_class_cdc_acm_device -> ux_device_control_endpoint;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	3384      	adds	r3, #132	; 0x84
 800f3ce:	67bb      	str	r3, [r7, #120]	; 0x78
    transfer_request =  &control_endpoint -> ux_endpoint_transfer_request;
 800f3d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3d2:	3330      	adds	r3, #48	; 0x30
 800f3d4:	677b      	str	r3, [r7, #116]	; 0x74

    /* Need to allocate memory for the descriptor.  */
    descriptor =  _ux_utility_memory_allocate(UX_SAFE_ALIGN, UX_CACHE_SAFE_MEMORY, UX_CONFIGURATION_DESCRIPTOR_LENGTH);
 800f3d6:	2209      	movs	r2, #9
 800f3d8:	2101      	movs	r1, #1
 800f3da:	f04f 30ff 	mov.w	r0, #4294967295
 800f3de:	f7ff fb8b 	bl	800eaf8 <_ux_utility_memory_allocate>
 800f3e2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if (descriptor == UX_NULL)
 800f3e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d101      	bne.n	800f3f2 <_ux_host_class_cdc_acm_capabilities_get+0x32>
        return(UX_MEMORY_INSUFFICIENT);
 800f3ee:	2312      	movs	r3, #18
 800f3f0:	e0dd      	b.n	800f5ae <_ux_host_class_cdc_acm_capabilities_get+0x1ee>

    /* Save this descriptor address since we need to free it. */
    saved_descriptor = descriptor;
 800f3f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f3f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Create a transfer request for the GET_DESCRIPTOR request.  */
    transfer_request -> ux_transfer_request_data_pointer =      descriptor;
 800f3fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3fc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f400:	609a      	str	r2, [r3, #8]
    transfer_request -> ux_transfer_request_requested_length =  UX_CONFIGURATION_DESCRIPTOR_LENGTH;
 800f402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f404:	2209      	movs	r2, #9
 800f406:	60da      	str	r2, [r3, #12]
    transfer_request -> ux_transfer_request_function =          UX_GET_DESCRIPTOR;
 800f408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f40a:	2206      	movs	r2, #6
 800f40c:	619a      	str	r2, [r3, #24]
    transfer_request -> ux_transfer_request_type =              UX_REQUEST_IN | UX_REQUEST_TYPE_STANDARD | UX_REQUEST_TARGET_DEVICE;
 800f40e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f410:	2280      	movs	r2, #128	; 0x80
 800f412:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_transfer_request_value =             UX_CONFIGURATION_DESCRIPTOR_ITEM << 8;
 800f414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f41a:	61da      	str	r2, [r3, #28]
    transfer_request -> ux_transfer_request_index =             0;
 800f41c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f41e:	2200      	movs	r2, #0
 800f420:	621a      	str	r2, [r3, #32]

    /* Send request to HCD layer.  */
    status =  _ux_host_stack_transfer_request(transfer_request);
 800f422:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800f424:	f7ff f936 	bl	800e694 <_ux_host_stack_transfer_request>
 800f428:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

    /* Check for correct transfer and entire descriptor returned.  */
    if ((status == UX_SUCCESS) && (transfer_request -> ux_transfer_request_actual_length == UX_CONFIGURATION_DESCRIPTOR_LENGTH))
 800f42c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f430:	2b00      	cmp	r3, #0
 800f432:	f040 80b6 	bne.w	800f5a2 <_ux_host_class_cdc_acm_capabilities_get+0x1e2>
 800f436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f438:	691b      	ldr	r3, [r3, #16]
 800f43a:	2b09      	cmp	r3, #9
 800f43c:	f040 80b1 	bne.w	800f5a2 <_ux_host_class_cdc_acm_capabilities_get+0x1e2>
    {

        /* The descriptor is in a packed format, parse it locally.  */
        _ux_utility_descriptor_parse(descriptor, _ux_system_configuration_descriptor_structure,
 800f440:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f444:	330c      	adds	r3, #12
 800f446:	2208      	movs	r2, #8
 800f448:	495b      	ldr	r1, [pc, #364]	; (800f5b8 <_ux_host_class_cdc_acm_capabilities_get+0x1f8>)
 800f44a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800f44e:	f7ff fac1 	bl	800e9d4 <_ux_utility_descriptor_parse>
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES, (UCHAR *) &configuration.ux_configuration_descriptor);

        /* Now we have the configuration descriptor which will tell us how many
           bytes there are in the entire descriptor.  */
        total_descriptor_length =  configuration.ux_configuration_descriptor.wTotalLength;
 800f452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Free the previous descriptor.  */
        _ux_utility_memory_free(descriptor);
 800f458:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800f45c:	f7ff fc6e 	bl	800ed3c <_ux_utility_memory_free>

        /* Allocate enough memory to read all descriptors attached
          to this configuration.  */
        descriptor =  _ux_utility_memory_allocate(UX_SAFE_ALIGN, UX_CACHE_SAFE_MEMORY, total_descriptor_length);
 800f460:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f464:	2101      	movs	r1, #1
 800f466:	f04f 30ff 	mov.w	r0, #4294967295
 800f46a:	f7ff fb45 	bl	800eaf8 <_ux_utility_memory_allocate>
 800f46e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        if (descriptor == UX_NULL)
 800f472:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f476:	2b00      	cmp	r3, #0
 800f478:	d101      	bne.n	800f47e <_ux_host_class_cdc_acm_capabilities_get+0xbe>
            return(UX_MEMORY_INSUFFICIENT);
 800f47a:	2312      	movs	r3, #18
 800f47c:	e097      	b.n	800f5ae <_ux_host_class_cdc_acm_capabilities_get+0x1ee>

        /* Save this descriptor address since we need to free it. */
        saved_descriptor = descriptor;
 800f47e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f482:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        /* Set the length we need to retrieve.  */
        transfer_request -> ux_transfer_request_requested_length =  total_descriptor_length;
 800f486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f488:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f48c:	60da      	str	r2, [r3, #12]

        /* And reprogram the descriptor buffer address.  */
        transfer_request -> ux_transfer_request_data_pointer =  descriptor;
 800f48e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f490:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f494:	609a      	str	r2, [r3, #8]

        /* Send request to HCD layer.  */
        status =  _ux_host_stack_transfer_request(transfer_request);
 800f496:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800f498:	f7ff f8fc 	bl	800e694 <_ux_host_stack_transfer_request>
 800f49c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Check for correct transfer and entire descriptor returned.  */
        if ((status == UX_SUCCESS) && (transfer_request -> ux_transfer_request_actual_length == total_descriptor_length))
 800f4a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d17c      	bne.n	800f5a2 <_ux_host_class_cdc_acm_capabilities_get+0x1e2>
 800f4a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4aa:	691b      	ldr	r3, [r3, #16]
 800f4ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d176      	bne.n	800f5a2 <_ux_host_class_cdc_acm_capabilities_get+0x1e2>
        {

            /* Default is Interface descriptor not yet found.  */
            interface_found =  UX_FALSE;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	67fb      	str	r3, [r7, #124]	; 0x7c

            /* Scan the descriptor for the CDC Comm interface.  */
            while (total_descriptor_length)
 800f4b8:	e069      	b.n	800f58e <_ux_host_class_cdc_acm_capabilities_get+0x1ce>
            {

                /* Gather the length, type and subtype of the descriptor.  */
                descriptor_length =   *descriptor;
 800f4ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                descriptor_type =     *(descriptor + 1);
 800f4c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f4c8:	785b      	ldrb	r3, [r3, #1]
 800f4ca:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                descriptor_subtype =  *(descriptor + 2);
 800f4ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f4d2:	789b      	ldrb	r3, [r3, #2]
 800f4d4:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

                /* Make sure this descriptor has at least the minimum length.  */
                if (descriptor_length < 3)
 800f4d8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f4dc:	2b02      	cmp	r3, #2
 800f4de:	d80a      	bhi.n	800f4f6 <_ux_host_class_cdc_acm_capabilities_get+0x136>
                {

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_DESCRIPTOR_CORRUPTED);
 800f4e0:	2242      	movs	r2, #66	; 0x42
 800f4e2:	2107      	movs	r1, #7
 800f4e4:	2002      	movs	r0, #2
 800f4e6:	f7ff f987 	bl	800e7f8 <_ux_system_error_handler>

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, descriptor, 0, 0, UX_TRACE_ERRORS, 0, 0)

                    /* We can free the resource now.  */
                    _ux_utility_memory_free(saved_descriptor);
 800f4ea:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800f4ee:	f7ff fc25 	bl	800ed3c <_ux_utility_memory_free>

                    /* Descriptor is corrupted.  */
                    return(UX_DESCRIPTOR_CORRUPTED);
 800f4f2:	2342      	movs	r3, #66	; 0x42
 800f4f4:	e05b      	b.n	800f5ae <_ux_host_class_cdc_acm_capabilities_get+0x1ee>
                }

                /* Process relative to descriptor type.  */
                switch (descriptor_type)
 800f4f6:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800f4fa:	2b04      	cmp	r3, #4
 800f4fc:	d002      	beq.n	800f504 <_ux_host_class_cdc_acm_capabilities_get+0x144>
 800f4fe:	2b24      	cmp	r3, #36	; 0x24
 800f500:	d017      	beq.n	800f532 <_ux_host_class_cdc_acm_capabilities_get+0x172>
 800f502:	e025      	b.n	800f550 <_ux_host_class_cdc_acm_capabilities_get+0x190>


                case UX_INTERFACE_DESCRIPTOR_ITEM:

                    /* Parse the interface descriptor and make it machine independent.  */
                    _ux_utility_descriptor_parse(descriptor, _ux_system_interface_descriptor_structure,
 800f504:	f107 0308 	add.w	r3, r7, #8
 800f508:	2209      	movs	r2, #9
 800f50a:	492c      	ldr	r1, [pc, #176]	; (800f5bc <_ux_host_class_cdc_acm_capabilities_get+0x1fc>)
 800f50c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800f510:	f7ff fa60 	bl	800e9d4 <_ux_utility_descriptor_parse>
                                                    UX_INTERFACE_DESCRIPTOR_ENTRIES, (UCHAR *) &interface_descriptor);

                    /* Ensure we have the correct interface for Audio streaming.  */
                    if ((interface_descriptor.bInterfaceClass == UX_HOST_CLASS_CDC_CONTROL_CLASS) &&
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	2b02      	cmp	r3, #2
 800f518:	d108      	bne.n	800f52c <_ux_host_class_cdc_acm_capabilities_get+0x16c>
                        ((interface_descriptor.bInterfaceSubClass == UX_HOST_CLASS_CDC_ACM_SUBCLASS) ||
 800f51a:	6a3b      	ldr	r3, [r7, #32]
                    if ((interface_descriptor.bInterfaceClass == UX_HOST_CLASS_CDC_CONTROL_CLASS) &&
 800f51c:	2b02      	cmp	r3, #2
 800f51e:	d002      	beq.n	800f526 <_ux_host_class_cdc_acm_capabilities_get+0x166>
                        (interface_descriptor.bInterfaceSubClass == UX_HOST_CLASS_CDC_DLC_SUBCLASS)))
 800f520:	6a3b      	ldr	r3, [r7, #32]
                        ((interface_descriptor.bInterfaceSubClass == UX_HOST_CLASS_CDC_ACM_SUBCLASS) ||
 800f522:	2b01      	cmp	r3, #1
 800f524:	d102      	bne.n	800f52c <_ux_host_class_cdc_acm_capabilities_get+0x16c>
                    {

                        /* Mark we have found it.  */
                        interface_found =  UX_TRUE;
 800f526:	2301      	movs	r3, #1
 800f528:	67fb      	str	r3, [r7, #124]	; 0x7c
                    {

                        /* Haven't found it.  */
                        interface_found =  UX_FALSE;
                    }
                    break;
 800f52a:	e011      	b.n	800f550 <_ux_host_class_cdc_acm_capabilities_get+0x190>
                        interface_found =  UX_FALSE;
 800f52c:	2300      	movs	r3, #0
 800f52e:	67fb      	str	r3, [r7, #124]	; 0x7c
                    break;
 800f530:	e00e      	b.n	800f550 <_ux_host_class_cdc_acm_capabilities_get+0x190>


                case UX_HOST_CLASS_CDC_ACM_CS_INTERFACE:

                    /* First make sure we have found the correct generic interface descriptor.  */
                    if ((interface_found == UX_TRUE) && (descriptor_subtype == UX_HOST_CLASS_CDC_ACM_CALL_MANAGEMENT_DESCRIPTOR))
 800f532:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f534:	2b01      	cmp	r3, #1
 800f536:	d10a      	bne.n	800f54e <_ux_host_class_cdc_acm_capabilities_get+0x18e>
 800f538:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800f53c:	2b01      	cmp	r3, #1
 800f53e:	d106      	bne.n	800f54e <_ux_host_class_cdc_acm_capabilities_get+0x18e>
                    {

                        /* Retrieve the bmCapabilities field which indicates how ACM commands are sent to the device.  */
                        cdc_acm -> ux_host_class_cdc_acm_capabilities  = *(descriptor + UX_HOST_CLASS_CDC_ACM_CALL_MANAGEMENT_CAPABILITIES);
 800f540:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f544:	3303      	adds	r3, #3
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	461a      	mov	r2, r3
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	629a      	str	r2, [r3, #40]	; 0x28


                    }
                    break;
 800f54e:	bf00      	nop
                }

                /* Verify if the descriptor is still valid.  */
                if (descriptor_length > total_descriptor_length)
 800f550:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f554:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f558:	429a      	cmp	r2, r3
 800f55a:	d20a      	bcs.n	800f572 <_ux_host_class_cdc_acm_capabilities_get+0x1b2>
                {

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_DESCRIPTOR_CORRUPTED);
 800f55c:	2242      	movs	r2, #66	; 0x42
 800f55e:	2107      	movs	r1, #7
 800f560:	2002      	movs	r0, #2
 800f562:	f7ff f949 	bl	800e7f8 <_ux_system_error_handler>

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, descriptor, 0, 0, UX_TRACE_ERRORS, 0, 0)

                    /* We can free the resource now.  */
                    _ux_utility_memory_free(saved_descriptor);
 800f566:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800f56a:	f7ff fbe7 	bl	800ed3c <_ux_utility_memory_free>

                    return(UX_DESCRIPTOR_CORRUPTED);
 800f56e:	2342      	movs	r3, #66	; 0x42
 800f570:	e01d      	b.n	800f5ae <_ux_host_class_cdc_acm_capabilities_get+0x1ee>
                }

                /* Jump to the next descriptor if we have not reached the end.  */
                descriptor +=  descriptor_length;
 800f572:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f576:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f57a:	4413      	add	r3, r2
 800f57c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                /* And adjust the length left to parse in the descriptor.  */
                total_descriptor_length -=  descriptor_length;
 800f580:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f584:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f588:	1ad3      	subs	r3, r2, r3
 800f58a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            while (total_descriptor_length)
 800f58e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f592:	2b00      	cmp	r3, #0
 800f594:	d191      	bne.n	800f4ba <_ux_host_class_cdc_acm_capabilities_get+0xfa>
            }

            /* We can free the resource now.  */
            _ux_utility_memory_free(saved_descriptor);
 800f596:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800f59a:	f7ff fbcf 	bl	800ed3c <_ux_utility_memory_free>

            return(UX_SUCCESS);
 800f59e:	2300      	movs	r3, #0
 800f5a0:	e005      	b.n	800f5ae <_ux_host_class_cdc_acm_capabilities_get+0x1ee>
        }
    }

    /* Free all used resources.  */
    _ux_utility_memory_free(saved_descriptor);
 800f5a2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800f5a6:	f7ff fbc9 	bl	800ed3c <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 800f5aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	3790      	adds	r7, #144	; 0x90
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	24000054 	.word	0x24000054
 800f5bc:	2400005c 	.word	0x2400005c

0800f5c0 <_ux_host_class_cdc_acm_command>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_class_cdc_acm_command(UX_HOST_CLASS_CDC_ACM *cdc_acm, ULONG command,
                                    ULONG value, UCHAR *data_buffer, ULONG data_length)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b088      	sub	sp, #32
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	60f8      	str	r0, [r7, #12]
 800f5c8:	60b9      	str	r1, [r7, #8]
 800f5ca:	607a      	str	r2, [r7, #4]
 800f5cc:	603b      	str	r3, [r7, #0]
UINT            status;
ULONG           request_direction;


    /* We need to get the default control endpoint transfer request pointer.  */
    control_endpoint =  &cdc_acm -> ux_host_class_cdc_acm_device -> ux_device_control_endpoint;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	689b      	ldr	r3, [r3, #8]
 800f5d2:	3384      	adds	r3, #132	; 0x84
 800f5d4:	61bb      	str	r3, [r7, #24]
    transfer_request =  &control_endpoint -> ux_endpoint_transfer_request;
 800f5d6:	69bb      	ldr	r3, [r7, #24]
 800f5d8:	3330      	adds	r3, #48	; 0x30
 800f5da:	617b      	str	r3, [r7, #20]

    /* Check the direction of the command.  */
    switch (command)
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	2b15      	cmp	r3, #21
 800f5e0:	d82d      	bhi.n	800f63e <_ux_host_class_cdc_acm_command+0x7e>
 800f5e2:	e016      	b.n	800f612 <_ux_host_class_cdc_acm_command+0x52>
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	3b20      	subs	r3, #32
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	409a      	lsls	r2, r3
 800f5ec:	4b32      	ldr	r3, [pc, #200]	; (800f6b8 <_ux_host_class_cdc_acm_command+0xf8>)
 800f5ee:	4013      	ands	r3, r2
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	bf14      	ite	ne
 800f5f4:	2301      	movne	r3, #1
 800f5f6:	2300      	moveq	r3, #0
 800f5f8:	b2db      	uxtb	r3, r3
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d126      	bne.n	800f64c <_ux_host_class_cdc_acm_command+0x8c>
 800f5fe:	4b2f      	ldr	r3, [pc, #188]	; (800f6bc <_ux_host_class_cdc_acm_command+0xfc>)
 800f600:	4013      	ands	r3, r2
 800f602:	2b00      	cmp	r3, #0
 800f604:	bf14      	ite	ne
 800f606:	2301      	movne	r3, #1
 800f608:	2300      	moveq	r3, #0
 800f60a:	b2db      	uxtb	r3, r3
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d120      	bne.n	800f652 <_ux_host_class_cdc_acm_command+0x92>
 800f610:	e022      	b.n	800f658 <_ux_host_class_cdc_acm_command+0x98>
 800f612:	2201      	movs	r2, #1
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	409a      	lsls	r2, r3
 800f618:	4b29      	ldr	r3, [pc, #164]	; (800f6c0 <_ux_host_class_cdc_acm_command+0x100>)
 800f61a:	4013      	ands	r3, r2
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	bf14      	ite	ne
 800f620:	2301      	movne	r3, #1
 800f622:	2300      	moveq	r3, #0
 800f624:	b2db      	uxtb	r3, r3
 800f626:	2b00      	cmp	r3, #0
 800f628:	d110      	bne.n	800f64c <_ux_host_class_cdc_acm_command+0x8c>
 800f62a:	f002 030a 	and.w	r3, r2, #10
 800f62e:	2b00      	cmp	r3, #0
 800f630:	bf14      	ite	ne
 800f632:	2301      	movne	r3, #1
 800f634:	2300      	moveq	r3, #0
 800f636:	b2db      	uxtb	r3, r3
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d10a      	bne.n	800f652 <_ux_host_class_cdc_acm_command+0x92>
 800f63c:	e00c      	b.n	800f658 <_ux_host_class_cdc_acm_command+0x98>
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	2b35      	cmp	r3, #53	; 0x35
 800f642:	d809      	bhi.n	800f658 <_ux_host_class_cdc_acm_command+0x98>
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	2b20      	cmp	r3, #32
 800f648:	d2cc      	bcs.n	800f5e4 <_ux_host_class_cdc_acm_command+0x24>
 800f64a:	e005      	b.n	800f658 <_ux_host_class_cdc_acm_command+0x98>
    case UX_HOST_CLASS_CDC_ACM_REQ_SET_OPERATION_PARMS              :
    /* Fall through.  */
    case UX_HOST_CLASS_CDC_ACM_REQ_SET_LINE_PARMS                   :

        /* Direction is out */
        request_direction = UX_REQUEST_OUT;
 800f64c:	2300      	movs	r3, #0
 800f64e:	61fb      	str	r3, [r7, #28]
        break;
 800f650:	e004      	b.n	800f65c <_ux_host_class_cdc_acm_command+0x9c>
    case UX_HOST_CLASS_CDC_ACM_REQ_GET_OPERATION_PARMS              :
    /* Fall through.  */
    case UX_HOST_CLASS_CDC_ACM_REQ_GET_LINE_PARMS                   :

        /* Direction is in */
        request_direction = UX_REQUEST_IN;
 800f652:	2380      	movs	r3, #128	; 0x80
 800f654:	61fb      	str	r3, [r7, #28]
        break;
 800f656:	e001      	b.n	800f65c <_ux_host_class_cdc_acm_command+0x9c>


    default :

        return(UX_ERROR);
 800f658:	23ff      	movs	r3, #255	; 0xff
 800f65a:	e028      	b.n	800f6ae <_ux_host_class_cdc_acm_command+0xee>
    UX_RESTORE
#else

    /* Protect the control endpoint semaphore here.  It will be unprotected in the
       transfer request function.  */
    status =  _ux_host_semaphore_get(&cdc_acm -> ux_host_class_cdc_acm_device -> ux_device_protection_semaphore, UX_WAIT_FOREVER);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	689b      	ldr	r3, [r3, #8]
 800f660:	3324      	adds	r3, #36	; 0x24
 800f662:	f04f 31ff 	mov.w	r1, #4294967295
 800f666:	4618      	mov	r0, r3
 800f668:	f7ff fcc2 	bl	800eff0 <_ux_utility_semaphore_get>
 800f66c:	6138      	str	r0, [r7, #16]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d001      	beq.n	800f678 <_ux_host_class_cdc_acm_command+0xb8>

        /* Something went wrong. */
        return(status);
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	e01a      	b.n	800f6ae <_ux_host_class_cdc_acm_command+0xee>
#endif

    /* Create a transfer_request for the request.  */
    transfer_request -> ux_transfer_request_data_pointer     =  data_buffer;
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	683a      	ldr	r2, [r7, #0]
 800f67c:	609a      	str	r2, [r3, #8]
    transfer_request -> ux_transfer_request_requested_length =  data_length;
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f682:	60da      	str	r2, [r3, #12]
    transfer_request -> ux_transfer_request_function         =  command;
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	68ba      	ldr	r2, [r7, #8]
 800f688:	619a      	str	r2, [r3, #24]
    transfer_request -> ux_transfer_request_type             =  request_direction | UX_REQUEST_TYPE_CLASS | UX_REQUEST_TARGET_INTERFACE;
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	f043 0221 	orr.w	r2, r3, #33	; 0x21
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_transfer_request_value            =  value;
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	61da      	str	r2, [r3, #28]
    transfer_request -> ux_transfer_request_index            =  cdc_acm -> ux_host_class_cdc_acm_interface -> ux_interface_descriptor.bInterfaceNumber;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	699b      	ldr	r3, [r3, #24]
 800f69e:	695a      	ldr	r2, [r3, #20]
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	621a      	str	r2, [r3, #32]

    /* Send request to HCD layer.  */
    status =  _ux_host_stack_transfer_request(transfer_request);
 800f6a4:	6978      	ldr	r0, [r7, #20]
 800f6a6:	f7fe fff5 	bl	800e694 <_ux_host_stack_transfer_request>
 800f6aa:	6138      	str	r0, [r7, #16]

    /* Return completion status.  */
    return(status);
 800f6ac:	693b      	ldr	r3, [r7, #16]
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3720      	adds	r7, #32
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	0015000d 	.word	0x0015000d
 800f6bc:	002a0002 	.word	0x002a0002
 800f6c0:	003f0015 	.word	0x003f0015

0800f6c4 <_ux_host_class_cdc_acm_configure>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_class_cdc_acm_configure(UX_HOST_CLASS_CDC_ACM *cdc_acm)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b086      	sub	sp, #24
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
#endif


    /* If the device has been configured already, we don't need to do it
       again. */
    if (cdc_acm -> ux_host_class_cdc_acm_device -> ux_device_state == UX_DEVICE_CONFIGURED)
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	689b      	ldr	r3, [r3, #8]
 800f6d0:	689b      	ldr	r3, [r3, #8]
 800f6d2:	2b03      	cmp	r3, #3
 800f6d4:	d101      	bne.n	800f6da <_ux_host_class_cdc_acm_configure+0x16>
        return(UX_SUCCESS);
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	e044      	b.n	800f764 <_ux_host_class_cdc_acm_configure+0xa0>

    /* A cdc_acm normally has one configuration. So retrieve the 1st configuration
       only.  */
    status =  _ux_host_stack_device_configuration_get(cdc_acm -> ux_host_class_cdc_acm_device, 0, &configuration);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	689b      	ldr	r3, [r3, #8]
 800f6de:	f107 020c 	add.w	r2, r7, #12
 800f6e2:	2100      	movs	r1, #0
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7fd fe85 	bl	800d3f4 <_ux_host_stack_device_configuration_get>
 800f6ea:	6178      	str	r0, [r7, #20]
    if (status != UX_SUCCESS)
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d006      	beq.n	800f700 <_ux_host_class_cdc_acm_configure+0x3c>
    {
    
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 800f6f2:	2251      	movs	r2, #81	; 0x51
 800f6f4:	2107      	movs	r1, #7
 800f6f6:	2002      	movs	r0, #2
 800f6f8:	f7ff f87e 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, cdc_acm -> ux_host_class_cdc_acm_device, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 800f6fc:	2351      	movs	r3, #81	; 0x51
 800f6fe:	e031      	b.n	800f764 <_ux_host_class_cdc_acm_configure+0xa0>
    }

#if UX_MAX_DEVICES > 1
    /* Check the cdc_acm power source and check the parent power source for 
       incompatible connections.  */
    if (cdc_acm -> ux_host_class_cdc_acm_device -> ux_device_power_source == UX_DEVICE_BUS_POWERED)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	689b      	ldr	r3, [r3, #8]
 800f704:	695b      	ldr	r3, [r3, #20]
 800f706:	2b01      	cmp	r3, #1
 800f708:	d112      	bne.n	800f730 <_ux_host_class_cdc_acm_configure+0x6c>
    {

        /* Get parent device pointer.  */
        parent_device =  cdc_acm -> ux_host_class_cdc_acm_device -> ux_device_parent;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	689b      	ldr	r3, [r3, #8]
 800f70e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f712:	613b      	str	r3, [r7, #16]
        
        /* If the device is NULL, the parent is the root cdc_acm and we don't have to worry 
           if the parent is not the root cdc_acm, check for its power source.  */
        if ((parent_device != UX_NULL) && (parent_device -> ux_device_power_source == UX_DEVICE_BUS_POWERED))
 800f714:	693b      	ldr	r3, [r7, #16]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d00a      	beq.n	800f730 <_ux_host_class_cdc_acm_configure+0x6c>
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	695b      	ldr	r3, [r3, #20]
 800f71e:	2b01      	cmp	r3, #1
 800f720:	d106      	bne.n	800f730 <_ux_host_class_cdc_acm_configure+0x6c>
        {                        

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONNECTION_INCOMPATIBLE);
 800f722:	225a      	movs	r2, #90	; 0x5a
 800f724:	2107      	movs	r1, #7
 800f726:	2002      	movs	r0, #2
 800f728:	f7ff f866 	bl	800e7f8 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONNECTION_INCOMPATIBLE, cdc_acm, 0, 0, UX_TRACE_ERRORS, 0, 0)

            return(UX_CONNECTION_INCOMPATIBLE);
 800f72c:	235a      	movs	r3, #90	; 0x5a
 800f72e:	e019      	b.n	800f764 <_ux_host_class_cdc_acm_configure+0xa0>
        }            
    }
#endif

    /* We have the valid configuration. Ask the USBX stack to set this configuration.  */        
    status =  _ux_host_stack_device_configuration_select(configuration);
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	4618      	mov	r0, r3
 800f734:	f7fd fe92 	bl	800d45c <_ux_host_stack_device_configuration_select>
 800f738:	6178      	str	r0, [r7, #20]
    if (status != UX_SUCCESS)
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d001      	beq.n	800f744 <_ux_host_class_cdc_acm_configure+0x80>
        return(status);
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	e00f      	b.n	800f764 <_ux_host_class_cdc_acm_configure+0xa0>

    /* If the operation went well, the cdc_acm default alternate setting for the cdc_acm interface is 
       active and the interrupt endpoint is now enabled. We have to memorize the first interface since 
       the interrupt endpoint is hooked to it. */
    status =  _ux_host_stack_configuration_interface_get(configuration, 0, 0, &cdc_acm -> ux_host_class_cdc_acm_interface);
 800f744:	68f8      	ldr	r0, [r7, #12]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	3318      	adds	r3, #24
 800f74a:	2200      	movs	r2, #0
 800f74c:	2100      	movs	r1, #0
 800f74e:	f7fd fcd4 	bl	800d0fa <_ux_host_stack_configuration_interface_get>
 800f752:	6178      	str	r0, [r7, #20]
    if (status != UX_SUCCESS)
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d003      	beq.n	800f762 <_ux_host_class_cdc_acm_configure+0x9e>
    {

        /* Store the instance in the interface container, this is for the USB stack
           when it needs to invoke the class.  */        
        cdc_acm -> ux_host_class_cdc_acm_interface -> ux_interface_class_instance =  (VOID *) cdc_acm;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	699b      	ldr	r3, [r3, #24]
 800f75e:	687a      	ldr	r2, [r7, #4]
 800f760:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 800f762:	697b      	ldr	r3, [r7, #20]
}
 800f764:	4618      	mov	r0, r3
 800f766:	3718      	adds	r7, #24
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}

0800f76c <_ux_host_class_cdc_acm_deactivate>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_class_cdc_acm_deactivate(UX_HOST_CLASS_COMMAND *command)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b086      	sub	sp, #24
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
#if !defined(UX_HOST_STANDALONE)
UINT                        status;
#endif

    /* Get the instance for this class.  */
    cdc_acm =  (UX_HOST_CLASS_CDC_ACM *) command -> ux_host_class_command_instance;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	689b      	ldr	r3, [r3, #8]
 800f778:	617b      	str	r3, [r7, #20]

    /* The cdc_acm is being shut down.  */
    cdc_acm -> ux_host_class_cdc_acm_state =  UX_HOST_CLASS_INSTANCE_SHUTDOWN;
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	2202      	movs	r2, #2
 800f77e:	621a      	str	r2, [r3, #32]

#if !defined(UX_HOST_STANDALONE)

    /* Protect thread reentry to this instance.  */
    status =  _ux_host_semaphore_get(&cdc_acm -> ux_host_class_cdc_acm_semaphore, UX_WAIT_FOREVER);
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	3338      	adds	r3, #56	; 0x38
 800f784:	f04f 31ff 	mov.w	r1, #4294967295
 800f788:	4618      	mov	r0, r3
 800f78a:	f7ff fc31 	bl	800eff0 <_ux_utility_semaphore_get>
 800f78e:	6138      	str	r0, [r7, #16]
    if (status != UX_SUCCESS)
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d001      	beq.n	800f79a <_ux_host_class_cdc_acm_deactivate+0x2e>

        /* Return error.  */
        return(status);
 800f796:	693b      	ldr	r3, [r7, #16]
 800f798:	e052      	b.n	800f840 <_ux_host_class_cdc_acm_deactivate+0xd4>
#endif

    /* If we have the Control Class, we only unmount the interrupt endpoint if it is active.  */
    if (cdc_acm -> ux_host_class_cdc_acm_interface -> ux_interface_descriptor.bInterfaceClass == UX_HOST_CLASS_CDC_CONTROL_CLASS)
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	699b      	ldr	r3, [r3, #24]
 800f79e:	6a1b      	ldr	r3, [r3, #32]
 800f7a0:	2b02      	cmp	r3, #2
 800f7a2:	d112      	bne.n	800f7ca <_ux_host_class_cdc_acm_deactivate+0x5e>
    {

        /* If the interrupt endpoint is defined, clean any pending transfer.  */
        if (cdc_acm -> ux_host_class_cdc_acm_interrupt_endpoint != UX_NULL)
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	695b      	ldr	r3, [r3, #20]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d028      	beq.n	800f7fe <_ux_host_class_cdc_acm_deactivate+0x92>
        {    
            transfer_request =  &cdc_acm -> ux_host_class_cdc_acm_interrupt_endpoint -> ux_endpoint_transfer_request;
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	695b      	ldr	r3, [r3, #20]
 800f7b0:	3330      	adds	r3, #48	; 0x30
 800f7b2:	60fb      	str	r3, [r7, #12]
            
            /* And abort any transfer.  */
            _ux_host_stack_endpoint_transfer_abort(cdc_acm -> ux_host_class_cdc_acm_interrupt_endpoint);
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	695b      	ldr	r3, [r3, #20]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7fe f8d7 	bl	800d96c <_ux_host_stack_endpoint_transfer_abort>

            /* Free data buffer for the interrupt transfer.  */
            _ux_utility_memory_free(transfer_request -> ux_transfer_request_data_pointer);
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	689b      	ldr	r3, [r3, #8]
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7ff faba 	bl	800ed3c <_ux_utility_memory_free>
 800f7c8:	e019      	b.n	800f7fe <_ux_host_class_cdc_acm_deactivate+0x92>
           We make sure the transaction has been completed by the controller driver.
           When the device is extracted, the controller tries multiple times the transaction and retires it
           with a DEVICE_NOT_RESPONDING error code.  
           
           First we take care of endpoint IN.  */
        transfer_request =  &cdc_acm -> ux_host_class_cdc_acm_bulk_in_endpoint -> ux_endpoint_transfer_request;
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	68db      	ldr	r3, [r3, #12]
 800f7ce:	3330      	adds	r3, #48	; 0x30
 800f7d0:	60fb      	str	r3, [r7, #12]
        if (transfer_request -> ux_transfer_request_completion_code == UX_TRANSFER_STATUS_PENDING)
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7d6:	2b01      	cmp	r3, #1
 800f7d8:	d104      	bne.n	800f7e4 <_ux_host_class_cdc_acm_deactivate+0x78>

            /* We need to abort transactions on the bulk In pipe.  */
            _ux_host_stack_endpoint_transfer_abort(cdc_acm -> ux_host_class_cdc_acm_bulk_in_endpoint);
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	68db      	ldr	r3, [r3, #12]
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fe f8c4 	bl	800d96c <_ux_host_stack_endpoint_transfer_abort>
    
        /* Then endpoint OUT.  */       
        transfer_request =  &cdc_acm -> ux_host_class_cdc_acm_bulk_out_endpoint -> ux_endpoint_transfer_request;
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	691b      	ldr	r3, [r3, #16]
 800f7e8:	3330      	adds	r3, #48	; 0x30
 800f7ea:	60fb      	str	r3, [r7, #12]
        if (transfer_request -> ux_transfer_request_completion_code == UX_TRANSFER_STATUS_PENDING)
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	d104      	bne.n	800f7fe <_ux_host_class_cdc_acm_deactivate+0x92>
           
            /* We need to abort transactions on the bulk Out pipe. */
            _ux_host_stack_endpoint_transfer_abort(cdc_acm -> ux_host_class_cdc_acm_bulk_out_endpoint);
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	691b      	ldr	r3, [r3, #16]
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f7fe f8b7 	bl	800d96c <_ux_host_stack_endpoint_transfer_abort>

#if !defined(UX_HOST_STANDALONE)

    /* The enumeration thread needs to sleep a while to allow the application or the class that may be using
       endpoints to exit properly.  */
    _ux_host_thread_schedule_other(UX_THREAD_PRIORITY_ENUM); 
 800f7fe:	2014      	movs	r0, #20
 800f800:	f7ff fcf0 	bl	800f1e4 <_ux_utility_thread_schedule_other>
        _ux_utility_memory_free(cdc_acm -> ux_host_class_cdc_acm_allocated);
    }
#endif

    /* Destroy the instance.  */
    _ux_host_stack_class_instance_destroy(cdc_acm -> ux_host_class_cdc_acm_class, (VOID *) cdc_acm);
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	685b      	ldr	r3, [r3, #4]
 800f808:	6979      	ldr	r1, [r7, #20]
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7fd facc 	bl	800cda8 <_ux_host_stack_class_instance_destroy>

#if !defined(UX_HOST_STANDALONE)

    /* Destroy the semaphore.  */
    _ux_host_semaphore_delete(&cdc_acm -> ux_host_class_cdc_acm_semaphore);
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	3338      	adds	r3, #56	; 0x38
 800f814:	4618      	mov	r0, r3
 800f816:	f7ff fbde 	bl	800efd6 <_ux_utility_semaphore_delete>
#endif

    /* Before we free the device resources, we need to inform the application
        that the device is removed.  */
    if (_ux_system_host -> ux_system_host_change_function != UX_NULL)
 800f81a:	4b0b      	ldr	r3, [pc, #44]	; (800f848 <_ux_host_class_cdc_acm_deactivate+0xdc>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800f822:	2b00      	cmp	r3, #0
 800f824:	d008      	beq.n	800f838 <_ux_host_class_cdc_acm_deactivate+0xcc>
    {
        
        /* Inform the application the device is removed.  */
        _ux_system_host -> ux_system_host_change_function(UX_DEVICE_REMOVAL, cdc_acm -> ux_host_class_cdc_acm_class, (VOID *) cdc_acm);
 800f826:	4b08      	ldr	r3, [pc, #32]	; (800f848 <_ux_host_class_cdc_acm_deactivate+0xdc>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800f82e:	697a      	ldr	r2, [r7, #20]
 800f830:	6851      	ldr	r1, [r2, #4]
 800f832:	697a      	ldr	r2, [r7, #20]
 800f834:	2002      	movs	r0, #2
 800f836:	4798      	blx	r3
    }

    /* Free the cdc_acm instance memory.  */
    _ux_utility_memory_free(cdc_acm);
 800f838:	6978      	ldr	r0, [r7, #20]
 800f83a:	f7ff fa7f 	bl	800ed3c <_ux_utility_memory_free>

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(cdc_acm);

    /* Return successful status.  */
    return(UX_SUCCESS);         
 800f83e:	2300      	movs	r3, #0
}
 800f840:	4618      	mov	r0, r3
 800f842:	3718      	adds	r7, #24
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}
 800f848:	2400577c 	.word	0x2400577c

0800f84c <_ux_host_class_cdc_acm_endpoints_get>:
/*                                            internal clean up,          */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_class_cdc_acm_endpoints_get(UX_HOST_CLASS_CDC_ACM *cdc_acm)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b086      	sub	sp, #24
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
UX_ENDPOINT     *endpoint;
UX_TRANSFER     *transfer_request;


    /* Check what interface we are mounting.  */
    if (cdc_acm -> ux_host_class_cdc_acm_interface -> ux_interface_descriptor.bInterfaceClass == UX_HOST_CLASS_CDC_DATA_CLASS)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	699b      	ldr	r3, [r3, #24]
 800f858:	6a1b      	ldr	r3, [r3, #32]
 800f85a:	2b0a      	cmp	r3, #10
 800f85c:	d158      	bne.n	800f910 <_ux_host_class_cdc_acm_endpoints_get+0xc4>
    {

        /* Search the bulk OUT endpoint. It is attached to the interface container.  */
        for (endpoint_index = 0; endpoint_index < cdc_acm -> ux_host_class_cdc_acm_interface -> ux_interface_descriptor.bNumEndpoints;
 800f85e:	2300      	movs	r3, #0
 800f860:	617b      	str	r3, [r7, #20]
 800f862:	e03c      	b.n	800f8de <_ux_host_class_cdc_acm_endpoints_get+0x92>
                            endpoint_index++)
        {                        
    
            /* Get interface endpoint.  */
            _ux_host_stack_interface_endpoint_get(cdc_acm -> ux_host_class_cdc_acm_interface, endpoint_index, &endpoint);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	699b      	ldr	r3, [r3, #24]
 800f868:	f107 0208 	add.w	r2, r7, #8
 800f86c:	6979      	ldr	r1, [r7, #20]
 800f86e:	4618      	mov	r0, r3
 800f870:	f7fe fa7a 	bl	800dd68 <_ux_host_stack_interface_endpoint_get>
    
            /* Check if endpoint is bulk and OUT.  */
            if (((endpoint -> ux_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_OUT) &&
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	695b      	ldr	r3, [r3, #20]
 800f878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d112      	bne.n	800f8a6 <_ux_host_class_cdc_acm_endpoints_get+0x5a>
                ((endpoint -> ux_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == UX_BULK_ENDPOINT))
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	699b      	ldr	r3, [r3, #24]
 800f884:	f003 0303 	and.w	r3, r3, #3
            if (((endpoint -> ux_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_OUT) &&
 800f888:	2b02      	cmp	r3, #2
 800f88a:	d10c      	bne.n	800f8a6 <_ux_host_class_cdc_acm_endpoints_get+0x5a>
            {

                /* This transfer_request always have the OUT direction.  */
                endpoint -> ux_endpoint_transfer_request.ux_transfer_request_type =  UX_REQUEST_OUT;
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	2200      	movs	r2, #0
 800f890:	645a      	str	r2, [r3, #68]	; 0x44

                /* Set default timeout for transfer.  */
                endpoint -> ux_endpoint_transfer_request.ux_transfer_request_timeout_value = UX_HOST_CLASS_CDC_ACM_CLASS_TRANSFER_TIMEOUT;
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	4a4e      	ldr	r2, [pc, #312]	; (800f9d0 <_ux_host_class_cdc_acm_endpoints_get+0x184>)
 800f896:	661a      	str	r2, [r3, #96]	; 0x60

                /* We have found the bulk endpoint, save it.  */
                cdc_acm -> ux_host_class_cdc_acm_bulk_out_endpoint =  endpoint;
 800f898:	68ba      	ldr	r2, [r7, #8]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	611a      	str	r2, [r3, #16]

                /* If found all, we break.  */
                if (cdc_acm -> ux_host_class_cdc_acm_bulk_in_endpoint)
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	68db      	ldr	r3, [r3, #12]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d122      	bne.n	800f8ec <_ux_host_class_cdc_acm_endpoints_get+0xa0>
                    break;
            }

            /* Check if endpoint is bulk and IN.  */
            if (((endpoint -> ux_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN) &&
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	695b      	ldr	r3, [r3, #20]
 800f8aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d012      	beq.n	800f8d8 <_ux_host_class_cdc_acm_endpoints_get+0x8c>
                ((endpoint -> ux_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == UX_BULK_ENDPOINT))
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	699b      	ldr	r3, [r3, #24]
 800f8b6:	f003 0303 	and.w	r3, r3, #3
            if (((endpoint -> ux_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN) &&
 800f8ba:	2b02      	cmp	r3, #2
 800f8bc:	d10c      	bne.n	800f8d8 <_ux_host_class_cdc_acm_endpoints_get+0x8c>
            {

                /* This transfer_request always have the IN direction.  */
                endpoint -> ux_endpoint_transfer_request.ux_transfer_request_type =  UX_REQUEST_IN;
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	2280      	movs	r2, #128	; 0x80
 800f8c2:	645a      	str	r2, [r3, #68]	; 0x44

                /* Set default timeout for transfer.  */
                endpoint -> ux_endpoint_transfer_request.ux_transfer_request_timeout_value = UX_HOST_CLASS_CDC_ACM_CLASS_TRANSFER_TIMEOUT;
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	4a42      	ldr	r2, [pc, #264]	; (800f9d0 <_ux_host_class_cdc_acm_endpoints_get+0x184>)
 800f8c8:	661a      	str	r2, [r3, #96]	; 0x60

                /* We have found the bulk endpoint, save it.  */
                cdc_acm -> ux_host_class_cdc_acm_bulk_in_endpoint =  endpoint;
 800f8ca:	68ba      	ldr	r2, [r7, #8]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	60da      	str	r2, [r3, #12]

                /* If found all, we break.  */
                if (cdc_acm -> ux_host_class_cdc_acm_bulk_out_endpoint)
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	691b      	ldr	r3, [r3, #16]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d10b      	bne.n	800f8f0 <_ux_host_class_cdc_acm_endpoints_get+0xa4>
                            endpoint_index++)
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	3301      	adds	r3, #1
 800f8dc:	617b      	str	r3, [r7, #20]
        for (endpoint_index = 0; endpoint_index < cdc_acm -> ux_host_class_cdc_acm_interface -> ux_interface_descriptor.bNumEndpoints;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	699b      	ldr	r3, [r3, #24]
 800f8e2:	69db      	ldr	r3, [r3, #28]
 800f8e4:	697a      	ldr	r2, [r7, #20]
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d3bc      	bcc.n	800f864 <_ux_host_class_cdc_acm_endpoints_get+0x18>
 800f8ea:	e002      	b.n	800f8f2 <_ux_host_class_cdc_acm_endpoints_get+0xa6>
                    break;
 800f8ec:	bf00      	nop
 800f8ee:	e000      	b.n	800f8f2 <_ux_host_class_cdc_acm_endpoints_get+0xa6>
                    break;
 800f8f0:	bf00      	nop
            }
        }

        /* The both bulk endpoints are mandatory.  */
        if (cdc_acm -> ux_host_class_cdc_acm_bulk_out_endpoint == UX_NULL ||
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	691b      	ldr	r3, [r3, #16]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d003      	beq.n	800f902 <_ux_host_class_cdc_acm_endpoints_get+0xb6>
            cdc_acm -> ux_host_class_cdc_acm_bulk_in_endpoint == UX_NULL)
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	68db      	ldr	r3, [r3, #12]
        if (cdc_acm -> ux_host_class_cdc_acm_bulk_out_endpoint == UX_NULL ||
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d161      	bne.n	800f9c6 <_ux_host_class_cdc_acm_endpoints_get+0x17a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_ENDPOINT_HANDLE_UNKNOWN);
 800f902:	2253      	movs	r2, #83	; 0x53
 800f904:	2107      	movs	r1, #7
 800f906:	2002      	movs	r0, #2
 800f908:	f7fe ff76 	bl	800e7f8 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_ENDPOINT_HANDLE_UNKNOWN, cdc_acm, 0, 0, UX_TRACE_ERRORS, 0, 0)

            return(UX_ENDPOINT_HANDLE_UNKNOWN);
 800f90c:	2353      	movs	r3, #83	; 0x53
 800f90e:	e05b      	b.n	800f9c8 <_ux_host_class_cdc_acm_endpoints_get+0x17c>
        }
    }
    else
    {
        /* Search the Interrupt endpoint. It is attached to the interface container of the control interface. It is not mandatory.  */
        for (endpoint_index = 0; endpoint_index < cdc_acm -> ux_host_class_cdc_acm_interface -> ux_interface_descriptor.bNumEndpoints;
 800f910:	2300      	movs	r3, #0
 800f912:	617b      	str	r3, [r7, #20]
 800f914:	e04f      	b.n	800f9b6 <_ux_host_class_cdc_acm_endpoints_get+0x16a>
                            endpoint_index++)
        {                        
    
            /* Get the endpoint handle.  */
            _ux_host_stack_interface_endpoint_get(cdc_acm -> ux_host_class_cdc_acm_interface, endpoint_index, &endpoint);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	699b      	ldr	r3, [r3, #24]
 800f91a:	f107 0208 	add.w	r2, r7, #8
 800f91e:	6979      	ldr	r1, [r7, #20]
 800f920:	4618      	mov	r0, r3
 800f922:	f7fe fa21 	bl	800dd68 <_ux_host_stack_interface_endpoint_get>

            /* Check if endpoint is Interrupt and IN.  */
            if (((endpoint -> ux_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN) &&
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	695b      	ldr	r3, [r3, #20]
 800f92a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d03e      	beq.n	800f9b0 <_ux_host_class_cdc_acm_endpoints_get+0x164>
                ((endpoint -> ux_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == UX_INTERRUPT_ENDPOINT))
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	699b      	ldr	r3, [r3, #24]
 800f936:	f003 0303 	and.w	r3, r3, #3
            if (((endpoint -> ux_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN) &&
 800f93a:	2b03      	cmp	r3, #3
 800f93c:	d138      	bne.n	800f9b0 <_ux_host_class_cdc_acm_endpoints_get+0x164>
            {

                /* This transfer_request always have the IN direction.  */
                endpoint -> ux_endpoint_transfer_request.ux_transfer_request_type =  UX_REQUEST_IN;
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	2280      	movs	r2, #128	; 0x80
 800f942:	645a      	str	r2, [r3, #68]	; 0x44

                /* We have found the interrupt endpoint, save it.  */
                cdc_acm -> ux_host_class_cdc_acm_interrupt_endpoint =  endpoint;
 800f944:	68ba      	ldr	r2, [r7, #8]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	615a      	str	r2, [r3, #20]

                /* The endpoint is correct, Fill in the transfer request with the length requested for this endpoint.  */
                transfer_request =  &cdc_acm -> ux_host_class_cdc_acm_interrupt_endpoint -> ux_endpoint_transfer_request;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	695b      	ldr	r3, [r3, #20]
 800f94e:	3330      	adds	r3, #48	; 0x30
 800f950:	613b      	str	r3, [r7, #16]
                transfer_request -> ux_transfer_request_requested_length =  transfer_request -> ux_transfer_request_packet_length;
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	60da      	str	r2, [r3, #12]
                transfer_request -> ux_transfer_request_actual_length =     0;
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	2200      	movs	r2, #0
 800f95e:	611a      	str	r2, [r3, #16]

                /* The direction is always IN for the CDC interrupt endpoint.  */
                transfer_request -> ux_transfer_request_type =  UX_REQUEST_IN;
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	2280      	movs	r2, #128	; 0x80
 800f964:	615a      	str	r2, [r3, #20]

                /* There is a callback function associated with the transfer request, so we need the class instance.  */
                transfer_request -> ux_transfer_request_class_instance =  (VOID *) cdc_acm;
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	687a      	ldr	r2, [r7, #4]
 800f96a:	629a      	str	r2, [r3, #40]	; 0x28

                /* Interrupt transactions have a completion routine. */
                transfer_request -> ux_transfer_request_completion_function =  _ux_host_class_cdc_acm_transfer_request_completed;
 800f96c:	693b      	ldr	r3, [r7, #16]
 800f96e:	4a19      	ldr	r2, [pc, #100]	; (800f9d4 <_ux_host_class_cdc_acm_endpoints_get+0x188>)
 800f970:	625a      	str	r2, [r3, #36]	; 0x24

                /* Obtain a buffer for this transaction. The buffer will always be reused.  */
                transfer_request -> ux_transfer_request_data_pointer =  _ux_utility_memory_allocate(UX_SAFE_ALIGN, UX_CACHE_SAFE_MEMORY, 
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	68db      	ldr	r3, [r3, #12]
 800f976:	461a      	mov	r2, r3
 800f978:	2101      	movs	r1, #1
 800f97a:	f04f 30ff 	mov.w	r0, #4294967295
 800f97e:	f7ff f8bb 	bl	800eaf8 <_ux_utility_memory_allocate>
 800f982:	4602      	mov	r2, r0
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	609a      	str	r2, [r3, #8]
                                                                transfer_request -> ux_transfer_request_requested_length);

                /* If the endpoint is available and we have memory, we start the interrupt endpoint.  */
                if (transfer_request -> ux_transfer_request_data_pointer != UX_NULL)
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	689b      	ldr	r3, [r3, #8]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d008      	beq.n	800f9a2 <_ux_host_class_cdc_acm_endpoints_get+0x156>
                {
                    
                    /* The transfer on the interrupt endpoint can be started.  */
                    status =  _ux_host_stack_transfer_request(transfer_request);
 800f990:	6938      	ldr	r0, [r7, #16]
 800f992:	f7fe fe7f 	bl	800e694 <_ux_host_stack_transfer_request>
 800f996:	60f8      	str	r0, [r7, #12]
                    
                    /* Check error, if endpoint interrupt IN transfer not successful, do not proceed. */
                    if (status != UX_SUCCESS)
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d012      	beq.n	800f9c4 <_ux_host_class_cdc_acm_endpoints_get+0x178>
                    
                        /* Error, do not proceed.  */
                        return(status);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	e012      	b.n	800f9c8 <_ux_host_class_cdc_acm_endpoints_get+0x17c>
                }
                else
                {

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 800f9a2:	2212      	movs	r2, #18
 800f9a4:	2107      	movs	r1, #7
 800f9a6:	2002      	movs	r0, #2
 800f9a8:	f7fe ff26 	bl	800e7f8 <_ux_system_error_handler>

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, cdc_acm, 0, 0, UX_TRACE_ERRORS, 0, 0)

                    /* We must return an error.  */
                    return(UX_ENDPOINT_HANDLE_UNKNOWN);
 800f9ac:	2353      	movs	r3, #83	; 0x53
 800f9ae:	e00b      	b.n	800f9c8 <_ux_host_class_cdc_acm_endpoints_get+0x17c>
                            endpoint_index++)
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	617b      	str	r3, [r7, #20]
        for (endpoint_index = 0; endpoint_index < cdc_acm -> ux_host_class_cdc_acm_interface -> ux_interface_descriptor.bNumEndpoints;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	699b      	ldr	r3, [r3, #24]
 800f9ba:	69db      	ldr	r3, [r3, #28]
 800f9bc:	697a      	ldr	r2, [r7, #20]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d3a9      	bcc.n	800f916 <_ux_host_class_cdc_acm_endpoints_get+0xca>
 800f9c2:	e000      	b.n	800f9c6 <_ux_host_class_cdc_acm_endpoints_get+0x17a>
                }
                break;
 800f9c4:	bf00      	nop
            }
        }
    }

    /* All endpoints have been mounted.  */
    return(UX_SUCCESS);
 800f9c6:	2300      	movs	r3, #0
}
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	3718      	adds	r7, #24
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}
 800f9d0:	000493e0 	.word	0x000493e0
 800f9d4:	0800fd8d 	.word	0x0800fd8d

0800f9d8 <_ux_host_class_cdc_acm_entry>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_class_cdc_acm_entry(UX_HOST_CLASS_COMMAND *command)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b084      	sub	sp, #16
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
UINT    status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_host_class_command_request)
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	2b03      	cmp	r3, #3
 800f9e6:	d03c      	beq.n	800fa62 <_ux_host_class_cdc_acm_entry+0x8a>
 800f9e8:	2b03      	cmp	r3, #3
 800f9ea:	d840      	bhi.n	800fa6e <_ux_host_class_cdc_acm_entry+0x96>
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d002      	beq.n	800f9f6 <_ux_host_class_cdc_acm_entry+0x1e>
 800f9f0:	2b02      	cmp	r3, #2
 800f9f2:	d030      	beq.n	800fa56 <_ux_host_class_cdc_acm_entry+0x7e>
 800f9f4:	e03b      	b.n	800fa6e <_ux_host_class_cdc_acm_entry+0x96>

    case UX_HOST_CLASS_COMMAND_QUERY:

        /* The query command is used to let the stack enumeration process know if we want to own
           this device or not.  */
        if((command -> ux_host_class_command_usage == UX_HOST_CLASS_COMMAND_USAGE_CSP) &&
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	68db      	ldr	r3, [r3, #12]
 800f9fa:	2b02      	cmp	r3, #2
 800f9fc:	d129      	bne.n	800fa52 <_ux_host_class_cdc_acm_entry+0x7a>
                             ((command -> ux_host_class_command_class == UX_HOST_CLASS_CDC_DATA_CLASS) ||
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	699b      	ldr	r3, [r3, #24]
        if((command -> ux_host_class_command_usage == UX_HOST_CLASS_COMMAND_USAGE_CSP) &&
 800fa02:	2b0a      	cmp	r3, #10
 800fa04:	d00f      	beq.n	800fa26 <_ux_host_class_cdc_acm_entry+0x4e>
                             ((command -> ux_host_class_command_class == UX_HOST_CLASS_CDC_CONTROL_CLASS) &&
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	699b      	ldr	r3, [r3, #24]
                             ((command -> ux_host_class_command_class == UX_HOST_CLASS_CDC_DATA_CLASS) ||
 800fa0a:	2b02      	cmp	r3, #2
 800fa0c:	d103      	bne.n	800fa16 <_ux_host_class_cdc_acm_entry+0x3e>
                             (command -> ux_host_class_command_subclass == UX_HOST_CLASS_CDC_ACM_SUBCLASS)) ||
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	69db      	ldr	r3, [r3, #28]
                             ((command -> ux_host_class_command_class == UX_HOST_CLASS_CDC_CONTROL_CLASS) &&
 800fa12:	2b02      	cmp	r3, #2
 800fa14:	d007      	beq.n	800fa26 <_ux_host_class_cdc_acm_entry+0x4e>
                             ((command -> ux_host_class_command_class == UX_HOST_CLASS_CDC_CONTROL_CLASS) &&
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	699b      	ldr	r3, [r3, #24]
                             (command -> ux_host_class_command_subclass == UX_HOST_CLASS_CDC_ACM_SUBCLASS)) ||
 800fa1a:	2b02      	cmp	r3, #2
 800fa1c:	d119      	bne.n	800fa52 <_ux_host_class_cdc_acm_entry+0x7a>
                             (command -> ux_host_class_command_subclass == UX_HOST_CLASS_CDC_DLC_SUBCLASS))))
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	69db      	ldr	r3, [r3, #28]
                             ((command -> ux_host_class_command_class == UX_HOST_CLASS_CDC_CONTROL_CLASS) &&
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d115      	bne.n	800fa52 <_ux_host_class_cdc_acm_entry+0x7a>
        {
            /* Check for IAD presence.  */
            if ((command -> ux_host_class_command_iad_class == 0) && (command -> ux_host_class_command_iad_subclass == 0))
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d105      	bne.n	800fa3a <_ux_host_class_cdc_acm_entry+0x62>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d101      	bne.n	800fa3a <_ux_host_class_cdc_acm_entry+0x62>
            
                /* No IAD, we accept this class.  */
                return(UX_SUCCESS);            
 800fa36:	2300      	movs	r3, #0
 800fa38:	e01f      	b.n	800fa7a <_ux_host_class_cdc_acm_entry+0xa2>
            
            else
            {

                if ((command -> ux_host_class_command_iad_class == UX_HOST_CLASS_CDC_CONTROL_CLASS) &&
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3e:	2b02      	cmp	r3, #2
 800fa40:	d105      	bne.n	800fa4e <_ux_host_class_cdc_acm_entry+0x76>
                        (command -> ux_host_class_command_iad_subclass == UX_HOST_CLASS_CDC_ACM_SUBCLASS))
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                if ((command -> ux_host_class_command_iad_class == UX_HOST_CLASS_CDC_CONTROL_CLASS) &&
 800fa46:	2b02      	cmp	r3, #2
 800fa48:	d101      	bne.n	800fa4e <_ux_host_class_cdc_acm_entry+0x76>
            
                    /* There is an IAD and this is for CDC-ACM.  */
                    return(UX_SUCCESS);                        
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	e015      	b.n	800fa7a <_ux_host_class_cdc_acm_entry+0xa2>

                else
                
                    /* The IAD does not match with CDC-ACM.  */
                    return(UX_NO_CLASS_MATCH);                        
 800fa4e:	2357      	movs	r3, #87	; 0x57
 800fa50:	e013      	b.n	800fa7a <_ux_host_class_cdc_acm_entry+0xa2>
        }

        else            

            /* No match.  */
            return(UX_NO_CLASS_MATCH);                        
 800fa52:	2357      	movs	r3, #87	; 0x57
 800fa54:	e011      	b.n	800fa7a <_ux_host_class_cdc_acm_entry+0xa2>
                
    case UX_HOST_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the device inserted has found a parent and
           is ready to complete the enumeration.  */
        status =  _ux_host_class_cdc_acm_activate(command);
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f7ff fbea 	bl	800f230 <_ux_host_class_cdc_acm_activate>
 800fa5c:	60f8      	str	r0, [r7, #12]
        return(status);
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	e00b      	b.n	800fa7a <_ux_host_class_cdc_acm_entry+0xa2>

    case UX_HOST_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted either      
           directly or when its parents has been extracted.  */
        status =  _ux_host_class_cdc_acm_deactivate(command);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f7ff fe82 	bl	800f76c <_ux_host_class_cdc_acm_deactivate>
 800fa68:	60f8      	str	r0, [r7, #12]
        return(status);
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	e005      	b.n	800fa7a <_ux_host_class_cdc_acm_entry+0xa2>

    default: 
            
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 800fa6e:	2254      	movs	r2, #84	; 0x54
 800fa70:	2107      	movs	r1, #7
 800fa72:	2002      	movs	r0, #2
 800fa74:	f7fe fec0 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_FUNCTION_NOT_SUPPORTED);
 800fa78:	2354      	movs	r3, #84	; 0x54
    }   
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3710      	adds	r7, #16
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
	...

0800fa84 <_ux_host_class_cdc_acm_ioctl>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_class_cdc_acm_ioctl(UX_HOST_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,
                                    VOID *parameter)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b08c      	sub	sp, #48	; 0x30
 800fa88:	af02      	add	r7, sp, #8
 800fa8a:	60f8      	str	r0, [r7, #12]
 800fa8c:	60b9      	str	r1, [r7, #8]
 800fa8e:	607a      	str	r2, [r7, #4]
VOID                                    (*write_callback_function) (struct UX_HOST_CLASS_CDC_ACM_STRUCT *, UINT, ULONG );
UX_TRANSFER                             *transfer;
#endif

    /* Ensure the instance is valid.  */
    if ((cdc_acm -> ux_host_class_cdc_acm_state !=  UX_HOST_CLASS_INSTANCE_LIVE) && 
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	6a1b      	ldr	r3, [r3, #32]
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	d005      	beq.n	800faa4 <_ux_host_class_cdc_acm_ioctl+0x20>
        (cdc_acm -> ux_host_class_cdc_acm_state !=  UX_HOST_CLASS_INSTANCE_MOUNTING))
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	6a1b      	ldr	r3, [r3, #32]
    if ((cdc_acm -> ux_host_class_cdc_acm_state !=  UX_HOST_CLASS_INSTANCE_LIVE) && 
 800fa9c:	2b03      	cmp	r3, #3
 800fa9e:	d001      	beq.n	800faa4 <_ux_host_class_cdc_acm_ioctl+0x20>
    {        

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_HOST_CLASS_INSTANCE_UNKNOWN, cdc_acm, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_HOST_CLASS_INSTANCE_UNKNOWN);
 800faa0:	235b      	movs	r3, #91	; 0x5b
 800faa2:	e0cb      	b.n	800fc3c <_ux_host_class_cdc_acm_ioctl+0x1b8>
    }

    /* The command request will tell us what we need to do here.  */
    switch (ioctl_function)
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	2b08      	cmp	r3, #8
 800faa8:	f200 80c0 	bhi.w	800fc2c <_ux_host_class_cdc_acm_ioctl+0x1a8>
 800faac:	a201      	add	r2, pc, #4	; (adr r2, 800fab4 <_ux_host_class_cdc_acm_ioctl+0x30>)
 800faae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab2:	bf00      	nop
 800fab4:	0800fad9 	.word	0x0800fad9
 800fab8:	0800fb41 	.word	0x0800fb41
 800fabc:	0800fbaf 	.word	0x0800fbaf
 800fac0:	0800fbd5 	.word	0x0800fbd5
 800fac4:	0800fc2d 	.word	0x0800fc2d
 800fac8:	0800fbef 	.word	0x0800fbef
 800facc:	0800fbff 	.word	0x0800fbff
 800fad0:	0800fc0f 	.word	0x0800fc0f
 800fad4:	0800fc1f 	.word	0x0800fc1f
    
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING, cdc_acm, parameter, 0, 0, UX_TRACE_HOST_CLASS_EVENTS, 0, 0)
    
        /* Allocate some cache safe memory for the control command.  */
        data_buffer =  _ux_utility_memory_allocate(UX_SAFE_ALIGN, UX_CACHE_SAFE_MEMORY, UX_HOST_CLASS_CDC_ACM_LINE_CODING_LENGTH);
 800fad8:	2207      	movs	r2, #7
 800fada:	2101      	movs	r1, #1
 800fadc:	f04f 30ff 	mov.w	r0, #4294967295
 800fae0:	f7ff f80a 	bl	800eaf8 <_ux_utility_memory_allocate>
 800fae4:	6178      	str	r0, [r7, #20]
        
        /* Check if error. Return with error if no memory could be allocated.  */
        if (data_buffer == UX_NULL)
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d102      	bne.n	800faf2 <_ux_host_class_cdc_acm_ioctl+0x6e>
            
            /* Do not proceed. Set error code.  */
            status = UX_MEMORY_INSUFFICIENT;
 800faec:	2312      	movs	r3, #18
 800faee:	627b      	str	r3, [r7, #36]	; 0x24
                                    0, data_buffer, UX_HOST_CLASS_CDC_ACM_LINE_CODING_LENGTH);
            
            /* We free the resources allocated no matter what.  */
            _ux_utility_memory_free(data_buffer);            
        }        
        break;
 800faf0:	e0a3      	b.n	800fc3a <_ux_host_class_cdc_acm_ioctl+0x1b6>
            line_coding = (UX_HOST_CLASS_CDC_ACM_LINE_CODING *) parameter;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	613b      	str	r3, [r7, #16]
            _ux_utility_long_put(data_buffer + UX_HOST_CLASS_CDC_ACM_LINE_CODING_RATE, 
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	4619      	mov	r1, r3
 800fafc:	6978      	ldr	r0, [r7, #20]
 800fafe:	f7fe ffd7 	bl	800eab0 <_ux_utility_long_put>
            (UCHAR) line_coding -> ux_host_class_cdc_acm_line_coding_stop_bit;
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	685a      	ldr	r2, [r3, #4]
            *(data_buffer + UX_HOST_CLASS_CDC_ACM_LINE_CODING_STOP_BIT) = 
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	3304      	adds	r3, #4
            (UCHAR) line_coding -> ux_host_class_cdc_acm_line_coding_stop_bit;
 800fb0a:	b2d2      	uxtb	r2, r2
            *(data_buffer + UX_HOST_CLASS_CDC_ACM_LINE_CODING_STOP_BIT) = 
 800fb0c:	701a      	strb	r2, [r3, #0]
            (UCHAR) line_coding -> ux_host_class_cdc_acm_line_coding_parity;
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	689a      	ldr	r2, [r3, #8]
            *(data_buffer + UX_HOST_CLASS_CDC_ACM_LINE_CODING_PARITY) = 
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	3305      	adds	r3, #5
            (UCHAR) line_coding -> ux_host_class_cdc_acm_line_coding_parity;
 800fb16:	b2d2      	uxtb	r2, r2
            *(data_buffer + UX_HOST_CLASS_CDC_ACM_LINE_CODING_PARITY) = 
 800fb18:	701a      	strb	r2, [r3, #0]
            (UCHAR) line_coding -> ux_host_class_cdc_acm_line_coding_data_bits;
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	68da      	ldr	r2, [r3, #12]
            *(data_buffer + UX_HOST_CLASS_CDC_ACM_LINE_CODING_DATA_BIT) = 
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	3306      	adds	r3, #6
            (UCHAR) line_coding -> ux_host_class_cdc_acm_line_coding_data_bits;
 800fb22:	b2d2      	uxtb	r2, r2
            *(data_buffer + UX_HOST_CLASS_CDC_ACM_LINE_CODING_DATA_BIT) = 
 800fb24:	701a      	strb	r2, [r3, #0]
            status = _ux_host_class_cdc_acm_command(cdc_acm, UX_HOST_CLASS_CDC_ACM_REQ_SET_LINE_CODING,
 800fb26:	2307      	movs	r3, #7
 800fb28:	9300      	str	r3, [sp, #0]
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	2120      	movs	r1, #32
 800fb30:	68f8      	ldr	r0, [r7, #12]
 800fb32:	f7ff fd45 	bl	800f5c0 <_ux_host_class_cdc_acm_command>
 800fb36:	6278      	str	r0, [r7, #36]	; 0x24
            _ux_utility_memory_free(data_buffer);            
 800fb38:	6978      	ldr	r0, [r7, #20]
 800fb3a:	f7ff f8ff 	bl	800ed3c <_ux_utility_memory_free>
        break;
 800fb3e:	e07c      	b.n	800fc3a <_ux_host_class_cdc_acm_ioctl+0x1b6>
    
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING, cdc_acm, parameter, 0, 0, UX_TRACE_HOST_CLASS_EVENTS, 0, 0)
    
        /* Allocate some cache safe memory for the control command.  */
        data_buffer =  _ux_utility_memory_allocate(UX_SAFE_ALIGN, UX_CACHE_SAFE_MEMORY, UX_HOST_CLASS_CDC_ACM_LINE_CODING_LENGTH);
 800fb40:	2207      	movs	r2, #7
 800fb42:	2101      	movs	r1, #1
 800fb44:	f04f 30ff 	mov.w	r0, #4294967295
 800fb48:	f7fe ffd6 	bl	800eaf8 <_ux_utility_memory_allocate>
 800fb4c:	6178      	str	r0, [r7, #20]
        
        /* Check if error. Return with error if no memory could be allocated.  */
        if (data_buffer == UX_NULL)
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d102      	bne.n	800fb5a <_ux_host_class_cdc_acm_ioctl+0xd6>
            
            /* Do not proceed. Set error code.  */
            status = UX_MEMORY_INSUFFICIENT;
 800fb54:	2312      	movs	r3, #18
 800fb56:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* We free the resources allocated no matter what.  */
            _ux_utility_memory_free(data_buffer);            
        }        
        break;
 800fb58:	e06f      	b.n	800fc3a <_ux_host_class_cdc_acm_ioctl+0x1b6>
            status = _ux_host_class_cdc_acm_command(cdc_acm, UX_HOST_CLASS_CDC_ACM_REQ_GET_LINE_CODING,
 800fb5a:	2307      	movs	r3, #7
 800fb5c:	9300      	str	r3, [sp, #0]
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	2200      	movs	r2, #0
 800fb62:	2121      	movs	r1, #33	; 0x21
 800fb64:	68f8      	ldr	r0, [r7, #12]
 800fb66:	f7ff fd2b 	bl	800f5c0 <_ux_host_class_cdc_acm_command>
 800fb6a:	6278      	str	r0, [r7, #36]	; 0x24
            if (status == UX_SUCCESS)
 800fb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d119      	bne.n	800fba6 <_ux_host_class_cdc_acm_ioctl+0x122>
                line_coding = (UX_HOST_CLASS_CDC_ACM_LINE_CODING *) parameter;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	613b      	str	r3, [r7, #16]
                line_coding -> ux_host_class_cdc_acm_line_coding_dter = _ux_utility_long_get(data_buffer + UX_HOST_CLASS_CDC_ACM_LINE_CODING_RATE);
 800fb76:	6978      	ldr	r0, [r7, #20]
 800fb78:	f7fe ff74 	bl	800ea64 <_ux_utility_long_get>
 800fb7c:	4602      	mov	r2, r0
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	601a      	str	r2, [r3, #0]
                (ULONG) *(data_buffer + UX_HOST_CLASS_CDC_ACM_LINE_CODING_STOP_BIT);
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	3304      	adds	r3, #4
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	461a      	mov	r2, r3
                line_coding -> ux_host_class_cdc_acm_line_coding_stop_bit = 
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	605a      	str	r2, [r3, #4]
                (ULONG) *(data_buffer + UX_HOST_CLASS_CDC_ACM_LINE_CODING_PARITY);
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	3305      	adds	r3, #5
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	461a      	mov	r2, r3
                line_coding -> ux_host_class_cdc_acm_line_coding_parity = 
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	609a      	str	r2, [r3, #8]
                (ULONG) *(data_buffer + UX_HOST_CLASS_CDC_ACM_LINE_CODING_DATA_BIT); 
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	3306      	adds	r3, #6
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	461a      	mov	r2, r3
                line_coding -> ux_host_class_cdc_acm_line_coding_data_bits =
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	60da      	str	r2, [r3, #12]
            _ux_utility_memory_free(data_buffer);            
 800fba6:	6978      	ldr	r0, [r7, #20]
 800fba8:	f7ff f8c8 	bl	800ed3c <_ux_utility_memory_free>
        break;
 800fbac:	e045      	b.n	800fc3a <_ux_host_class_cdc_acm_ioctl+0x1b6>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_CLASS_CDC_ACM_IOCTL_SET_LINE_STATE, cdc_acm, parameter, 0, 0, UX_TRACE_HOST_CLASS_EVENTS, 0, 0)

        /* Cast the calling parameter.  */
        line_state = (UX_HOST_CLASS_CDC_ACM_LINE_STATE *) parameter;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	61bb      	str	r3, [r7, #24]
                    
        /* Build the value field.  */
        value = (line_state -> ux_host_class_cdc_acm_line_state_dtr | 
 800fbb2:	69bb      	ldr	r3, [r7, #24]
 800fbb4:	685a      	ldr	r2, [r3, #4]
                (line_state -> ux_host_class_cdc_acm_line_state_rts << 1));
 800fbb6:	69bb      	ldr	r3, [r7, #24]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	005b      	lsls	r3, r3, #1
        value = (line_state -> ux_host_class_cdc_acm_line_state_dtr | 
 800fbbc:	4313      	orrs	r3, r2
 800fbbe:	61fb      	str	r3, [r7, #28]
    
        /* Send the command to the device.  */
        status = _ux_host_class_cdc_acm_command(cdc_acm, UX_HOST_CLASS_CDC_ACM_REQ_SET_LINE_STATE,
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	9300      	str	r3, [sp, #0]
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	69fa      	ldr	r2, [r7, #28]
 800fbc8:	2122      	movs	r1, #34	; 0x22
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	f7ff fcf8 	bl	800f5c0 <_ux_host_class_cdc_acm_command>
 800fbd0:	6278      	str	r0, [r7, #36]	; 0x24
                                    value, UX_NULL,0);
        break;    
 800fbd2:	e032      	b.n	800fc3a <_ux_host_class_cdc_acm_ioctl+0x1b6>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_CLASS_CDC_ACM_IOCTL_SEND_BREAK, cdc_acm, parameter, 0, 0, UX_TRACE_HOST_CLASS_EVENTS, 0, 0)

        /* Build the value field.  */
        value = *((ULONG *) parameter);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	61fb      	str	r3, [r7, #28]
    
        /* Send the command to the device.  */
        status = _ux_host_class_cdc_acm_command(cdc_acm, UX_HOST_CLASS_CDC_ACM_REQ_SEND_BREAK,
 800fbda:	2300      	movs	r3, #0
 800fbdc:	9300      	str	r3, [sp, #0]
 800fbde:	2300      	movs	r3, #0
 800fbe0:	69fa      	ldr	r2, [r7, #28]
 800fbe2:	2123      	movs	r1, #35	; 0x23
 800fbe4:	68f8      	ldr	r0, [r7, #12]
 800fbe6:	f7ff fceb 	bl	800f5c0 <_ux_host_class_cdc_acm_command>
 800fbea:	6278      	str	r0, [r7, #36]	; 0x24
                                    value, UX_NULL,0);
        break;    
 800fbec:	e025      	b.n	800fc3a <_ux_host_class_cdc_acm_ioctl+0x1b6>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_CLASS_CDC_ACM_IOCTL_ABORT_IN_PIPE, cdc_acm, cdc_acm -> ux_host_class_cdc_acm_bulk_in_endpoint, 0, 0, UX_TRACE_HOST_CLASS_EVENTS, 0, 0)

        /* We need to abort transactions on the bulk In pipe.  */
        _ux_host_stack_endpoint_transfer_abort(cdc_acm -> ux_host_class_cdc_acm_bulk_in_endpoint);
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	68db      	ldr	r3, [r3, #12]
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7fd feba 	bl	800d96c <_ux_host_stack_endpoint_transfer_abort>

        /* Status is successful.  */
        status = UX_SUCCESS;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fbfc:	e01d      	b.n	800fc3a <_ux_host_class_cdc_acm_ioctl+0x1b6>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_CLASS_CDC_ACM_IOCTL_ABORT_OUT_PIPE, cdc_acm, cdc_acm -> ux_host_class_cdc_acm_bulk_out_endpoint, 0, 0, UX_TRACE_HOST_CLASS_EVENTS, 0, 0)

        /* We need to abort transactions on the bulk Out pipe.  */
        _ux_host_stack_endpoint_transfer_abort(cdc_acm -> ux_host_class_cdc_acm_bulk_out_endpoint);
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	691b      	ldr	r3, [r3, #16]
 800fc02:	4618      	mov	r0, r3
 800fc04:	f7fd feb2 	bl	800d96c <_ux_host_stack_endpoint_transfer_abort>
        /* Reset write state.  */
        cdc_acm -> ux_host_class_cdc_acm_write_state = UX_STATE_RESET;
#endif

        /* Status is successful.  */
        status = UX_SUCCESS;
 800fc08:	2300      	movs	r3, #0
 800fc0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fc0c:	e015      	b.n	800fc3a <_ux_host_class_cdc_acm_ioctl+0x1b6>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_CLASS_CDC_ACM_IOCTL_NOTIFICATION_CALLBACK, cdc_acm, parameter, 0, 0, UX_TRACE_HOST_CLASS_EVENTS, 0, 0)

        /* Register a callback when the line state has changed. */
        callback_function = ((VOID (*) (struct UX_HOST_CLASS_CDC_ACM_STRUCT *, ULONG, ULONG )) (ALIGN_TYPE)parameter);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	623b      	str	r3, [r7, #32]
        cdc_acm -> ux_host_class_cdc_acm_device_status_change_callback = callback_function;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	6a3a      	ldr	r2, [r7, #32]
 800fc16:	635a      	str	r2, [r3, #52]	; 0x34

        /* Status is successful.  */
        status = UX_SUCCESS;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fc1c:	e00d      	b.n	800fc3a <_ux_host_class_cdc_acm_ioctl+0x1b6>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_CLASS_CDC_ACM_IOCTL_GET_DEVICE_STATUS, cdc_acm, cdc_acm -> ux_host_class_cdc_acm_device_state, 0, 0, UX_TRACE_HOST_CLASS_EVENTS, 0, 0)

        /* Return the device status.  */
        *((ULONG *) parameter) = cdc_acm -> ux_host_class_cdc_acm_device_state;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	601a      	str	r2, [r3, #0]

        /* Status is successful.  */
        status = UX_SUCCESS;
 800fc26:	2300      	movs	r3, #0
 800fc28:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fc2a:	e006      	b.n	800fc3a <_ux_host_class_cdc_acm_ioctl+0x1b6>
#endif

    default: 

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 800fc2c:	2254      	movs	r2, #84	; 0x54
 800fc2e:	2107      	movs	r1, #7
 800fc30:	2002      	movs	r0, #2
 800fc32:	f7fe fde1 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Function not supported. Return an error.  */
        status =  UX_FUNCTION_NOT_SUPPORTED;
 800fc36:	2354      	movs	r3, #84	; 0x54
 800fc38:	627b      	str	r3, [r7, #36]	; 0x24
    }   

    /* Return status to caller.  */
    return(status);
 800fc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3728      	adds	r7, #40	; 0x28
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}

0800fc44 <_ux_host_class_cdc_acm_reception_callback>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_host_class_cdc_acm_reception_callback (UX_TRANSFER *transfer_request)
{
 800fc44:	b590      	push	{r4, r7, lr}
 800fc46:	b085      	sub	sp, #20
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]

UX_HOST_CLASS_CDC_ACM               *cdc_acm;
UX_HOST_CLASS_CDC_ACM_RECEPTION     *cdc_acm_reception;

    /* Get the class instance for this transfer request.  */
    cdc_acm =  (UX_HOST_CLASS_CDC_ACM *) transfer_request -> ux_transfer_request_class_instance;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc50:	60fb      	str	r3, [r7, #12]

    /* Get the pointer to the acm reception structure.  */
    cdc_acm_reception =  cdc_acm -> ux_host_class_cdc_acm_reception;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc56:	60bb      	str	r3, [r7, #8]

    /* Check the state of the transfer.  If there is an error, we do not proceed with this report.  */
    if (transfer_request -> ux_transfer_request_completion_code != UX_SUCCESS)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d003      	beq.n	800fc68 <_ux_host_class_cdc_acm_reception_callback+0x24>
    {

        /* The reception is stopped.  */
        cdc_acm_reception -> ux_host_class_cdc_acm_reception_state =  UX_HOST_CLASS_CDC_ACM_RECEPTION_STATE_STOPPED;
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	2200      	movs	r2, #0
 800fc64:	601a      	str	r2, [r3, #0]

        /* We do not proceed.  */
        return;
 800fc66:	e03f      	b.n	800fce8 <_ux_host_class_cdc_acm_reception_callback+0xa4>

    }

    /* Move to the next reception buffer.  Check if we are at the end of the application buffer.  */
    if (cdc_acm_reception -> ux_host_class_cdc_acm_reception_data_head + cdc_acm_reception -> ux_host_class_cdc_acm_reception_block_size >=
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	691a      	ldr	r2, [r3, #16]
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	685b      	ldr	r3, [r3, #4]
 800fc70:	441a      	add	r2, r3
        cdc_acm_reception -> ux_host_class_cdc_acm_reception_data_buffer + cdc_acm_reception -> ux_host_class_cdc_acm_reception_data_buffer_size)
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	6899      	ldr	r1, [r3, #8]
 800fc76:	68bb      	ldr	r3, [r7, #8]
 800fc78:	68db      	ldr	r3, [r3, #12]
 800fc7a:	440b      	add	r3, r1
    if (cdc_acm_reception -> ux_host_class_cdc_acm_reception_data_head + cdc_acm_reception -> ux_host_class_cdc_acm_reception_block_size >=
 800fc7c:	429a      	cmp	r2, r3
 800fc7e:	d304      	bcc.n	800fc8a <_ux_host_class_cdc_acm_reception_callback+0x46>

            /* Program the head to be at the beginning of the application buffer.  */
            cdc_acm_reception -> ux_host_class_cdc_acm_reception_data_head =  cdc_acm_reception -> ux_host_class_cdc_acm_reception_data_buffer;
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	689a      	ldr	r2, [r3, #8]
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	611a      	str	r2, [r3, #16]
 800fc88:	e006      	b.n	800fc98 <_ux_host_class_cdc_acm_reception_callback+0x54>

    else

            /* Program the head to be after the current buffer.  */
            cdc_acm_reception -> ux_host_class_cdc_acm_reception_data_head +=  cdc_acm_reception -> ux_host_class_cdc_acm_reception_block_size;
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	691a      	ldr	r2, [r3, #16]
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	685b      	ldr	r3, [r3, #4]
 800fc92:	441a      	add	r2, r3
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	611a      	str	r2, [r3, #16]

    /* OVERFLOW check: if the head reaches the tail buffer that contains reception data */
    if (cdc_acm_reception -> ux_host_class_cdc_acm_reception_data_tail ==  cdc_acm_reception -> ux_host_class_cdc_acm_reception_data_head)
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	695a      	ldr	r2, [r3, #20]
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	691b      	ldr	r3, [r3, #16]
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d10f      	bne.n	800fcc4 <_ux_host_class_cdc_acm_reception_callback+0x80>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_BUFFER_OVERFLOW);
 800fca4:	225d      	movs	r2, #93	; 0x5d
 800fca6:	2107      	movs	r1, #7
 800fca8:	2002      	movs	r0, #2
 800fcaa:	f7fe fda5 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_BUFFER_OVERFLOW, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* We have an overflow. We cannot continue.  Report to the application.  */
        cdc_acm_reception -> ux_host_class_cdc_acm_reception_callback(cdc_acm, UX_BUFFER_OVERFLOW, UX_NULL, 0);
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	699c      	ldr	r4, [r3, #24]
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	215d      	movs	r1, #93	; 0x5d
 800fcb8:	68f8      	ldr	r0, [r7, #12]
 800fcba:	47a0      	blx	r4

        /* And stop the transfer in progress flag.  */
        cdc_acm_reception -> ux_host_class_cdc_acm_reception_state =  UX_HOST_CLASS_CDC_ACM_RECEPTION_STATE_STOPPED;
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	601a      	str	r2, [r3, #0]

        return;
 800fcc2:	e011      	b.n	800fce8 <_ux_host_class_cdc_acm_reception_callback+0xa4>
    }

    /* We need to report this transfer to the application.  */
    cdc_acm_reception -> ux_host_class_cdc_acm_reception_callback(cdc_acm,
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	699c      	ldr	r4, [r3, #24]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	689a      	ldr	r2, [r3, #8]
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	691b      	ldr	r3, [r3, #16]
 800fcd4:	68f8      	ldr	r0, [r7, #12]
 800fcd6:	47a0      	blx	r4
                                                                    transfer_request -> ux_transfer_request_completion_code,
                                                                    transfer_request -> ux_transfer_request_data_pointer,
                                                                    transfer_request -> ux_transfer_request_actual_length);

    /* Set data pointer to the next reception buffer.  */
    transfer_request -> ux_transfer_request_data_pointer = cdc_acm_reception -> ux_host_class_cdc_acm_reception_data_head;
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	691a      	ldr	r2, [r3, #16]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	609a      	str	r2, [r3, #8]

    /* Arm another transfer.  */
    _ux_host_stack_transfer_request(transfer_request);
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f7fe fcd7 	bl	800e694 <_ux_host_stack_transfer_request>

    /* There is no status to be reported back to the stack.  */
    return;
 800fce6:	bf00      	nop
}
 800fce8:	3714      	adds	r7, #20
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd90      	pop	{r4, r7, pc}
	...

0800fcf0 <_ux_host_class_cdc_acm_reception_start>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_class_cdc_acm_reception_start (UX_HOST_CLASS_CDC_ACM *cdc_acm, 
                                    UX_HOST_CLASS_CDC_ACM_RECEPTION *cdc_acm_reception)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b084      	sub	sp, #16
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_CLASS_CDC_ACM_RECEPTION_START, cdc_acm, 0, 0, 0, UX_TRACE_HOST_CLASS_EVENTS, 0, 0)

    /* Ensure the instance is valid.  */
    if (cdc_acm -> ux_host_class_cdc_acm_state !=  UX_HOST_CLASS_INSTANCE_LIVE)
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6a1b      	ldr	r3, [r3, #32]
 800fcfe:	2b01      	cmp	r3, #1
 800fd00:	d006      	beq.n	800fd10 <_ux_host_class_cdc_acm_reception_start+0x20>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_HOST_CLASS_INSTANCE_UNKNOWN);
 800fd02:	225b      	movs	r2, #91	; 0x5b
 800fd04:	2107      	movs	r1, #7
 800fd06:	2002      	movs	r0, #2
 800fd08:	f7fe fd76 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_HOST_CLASS_INSTANCE_UNKNOWN, cdc_acm, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_HOST_CLASS_INSTANCE_UNKNOWN);
 800fd0c:	235b      	movs	r3, #91	; 0x5b
 800fd0e:	e036      	b.n	800fd7e <_ux_host_class_cdc_acm_reception_start+0x8e>
    }

    /* As further protection, we must ensure this instance of the interface is the data interface and not
       the control interface !  */
    if (cdc_acm -> ux_host_class_cdc_acm_interface -> ux_interface_descriptor.bInterfaceClass != UX_HOST_CLASS_CDC_DATA_CLASS)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	699b      	ldr	r3, [r3, #24]
 800fd14:	6a1b      	ldr	r3, [r3, #32]
 800fd16:	2b0a      	cmp	r3, #10
 800fd18:	d006      	beq.n	800fd28 <_ux_host_class_cdc_acm_reception_start+0x38>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_HOST_CLASS_INSTANCE_UNKNOWN);
 800fd1a:	225b      	movs	r2, #91	; 0x5b
 800fd1c:	2107      	movs	r1, #7
 800fd1e:	2002      	movs	r0, #2
 800fd20:	f7fe fd6a 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_HOST_CLASS_INSTANCE_UNKNOWN, cdc_acm, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_HOST_CLASS_INSTANCE_UNKNOWN);
 800fd24:	235b      	movs	r3, #91	; 0x5b
 800fd26:	e02a      	b.n	800fd7e <_ux_host_class_cdc_acm_reception_start+0x8e>
    }
    
    /* Start by aligning the head and tail of buffers to the same address supplied by the application.  */
    cdc_acm_reception -> ux_host_class_cdc_acm_reception_data_head =  cdc_acm_reception -> ux_host_class_cdc_acm_reception_data_buffer;
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	689a      	ldr	r2, [r3, #8]
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	611a      	str	r2, [r3, #16]
    cdc_acm_reception -> ux_host_class_cdc_acm_reception_data_tail =  cdc_acm_reception -> ux_host_class_cdc_acm_reception_data_buffer;
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	689a      	ldr	r2, [r3, #8]
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	615a      	str	r2, [r3, #20]

    /* Get the pointer to the bulk in endpoint in the transfer_request.  */
    transfer_request =  &cdc_acm -> ux_host_class_cdc_acm_bulk_in_endpoint -> ux_endpoint_transfer_request;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	68db      	ldr	r3, [r3, #12]
 800fd3c:	3330      	adds	r3, #48	; 0x30
 800fd3e:	60fb      	str	r3, [r7, #12]
    
    /* Initialize the transfer request.  */
    transfer_request -> ux_transfer_request_class_instance      =  (VOID *) cdc_acm;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	687a      	ldr	r2, [r7, #4]
 800fd44:	629a      	str	r2, [r3, #40]	; 0x28
    transfer_request -> ux_transfer_request_data_pointer        =  cdc_acm_reception -> ux_host_class_cdc_acm_reception_data_head;
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	691a      	ldr	r2, [r3, #16]
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	609a      	str	r2, [r3, #8]
    transfer_request -> ux_transfer_request_requested_length    =  cdc_acm_reception -> ux_host_class_cdc_acm_reception_block_size;
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	685a      	ldr	r2, [r3, #4]
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	60da      	str	r2, [r3, #12]
    transfer_request -> ux_transfer_request_completion_function =  _ux_host_class_cdc_acm_reception_callback;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	4a0b      	ldr	r2, [pc, #44]	; (800fd88 <_ux_host_class_cdc_acm_reception_start+0x98>)
 800fd5a:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Save the acm reception structure in the acm structure.  */
    cdc_acm -> ux_host_class_cdc_acm_reception = cdc_acm_reception;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	683a      	ldr	r2, [r7, #0]
 800fd60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* And declare we have a transfer in progress.  */
    cdc_acm_reception -> ux_host_class_cdc_acm_reception_state =  UX_HOST_CLASS_CDC_ACM_RECEPTION_STATE_STARTED;
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	2201      	movs	r2, #1
 800fd66:	601a      	str	r2, [r3, #0]

    /* Arm a first transfer on the bulk in endpoint. There is a callback to this function so we return to the caller
       right away. */
    status =  _ux_host_stack_transfer_request(transfer_request);
 800fd68:	68f8      	ldr	r0, [r7, #12]
 800fd6a:	f7fe fc93 	bl	800e694 <_ux_host_stack_transfer_request>
 800fd6e:	60b8      	str	r0, [r7, #8]

    /* We do not know if the first transfer was successful yet.  If the status is not OK, we need to stop the transfer
       in progress flag. */
    if (status != UX_SUCCESS)
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d002      	beq.n	800fd7c <_ux_host_class_cdc_acm_reception_start+0x8c>
        cdc_acm_reception -> ux_host_class_cdc_acm_reception_state =  UX_HOST_CLASS_CDC_ACM_RECEPTION_STATE_STOPPED;
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	2200      	movs	r2, #0
 800fd7a:	601a      	str	r2, [r3, #0]
    
    return(status); 
 800fd7c:	68bb      	ldr	r3, [r7, #8]
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3710      	adds	r7, #16
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
 800fd86:	bf00      	nop
 800fd88:	0800fc45 	.word	0x0800fc45

0800fd8c <_ux_host_class_cdc_acm_transfer_request_completed>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_host_class_cdc_acm_transfer_request_completed(UX_TRANSFER *transfer_request)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b086      	sub	sp, #24
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
ULONG                                    notification_type;
ULONG                                    notification_value;


    /* Get the class instance for this transfer request.  */
    cdc_acm =  (UX_HOST_CLASS_CDC_ACM *) transfer_request -> ux_transfer_request_class_instance;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd98:	617b      	str	r3, [r7, #20]
    
    /* Check the state of the transfer.  If there is an error, we do not proceed with this notification.  */
    if (transfer_request -> ux_transfer_request_completion_code != UX_SUCCESS)
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d11e      	bne.n	800fde0 <_ux_host_class_cdc_acm_transfer_request_completed+0x54>

        /* We do not proceed.  */
        return;

    /* Increment the notification count.   */
    cdc_acm -> ux_host_class_cdc_acm_notification_count++;
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fda6:	1c5a      	adds	r2, r3, #1
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Get the notification.  */
    notification_type = (ULONG) *(transfer_request -> ux_transfer_request_data_pointer + UX_HOST_CLASS_CDC_ACM_NPF_NOTIFICATION_TYPE);    
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	689b      	ldr	r3, [r3, #8]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	613b      	str	r3, [r7, #16]
    
    /* And the value.  */
    notification_value = (ULONG) _ux_utility_short_get(transfer_request -> ux_transfer_request_data_pointer + UX_HOST_CLASS_CDC_ACM_NPF_VALUE);    
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	689b      	ldr	r3, [r3, #8]
 800fdba:	3302      	adds	r3, #2
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f7ff f95c 	bl	800f07a <_ux_utility_short_get>
 800fdc2:	60f8      	str	r0, [r7, #12]
    
    /* If there is a callback present, invoke it.  */
    if (cdc_acm -> ux_host_class_cdc_acm_device_status_change_callback != UX_NULL)
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d005      	beq.n	800fdd8 <_ux_host_class_cdc_acm_transfer_request_completed+0x4c>
    
        /* There is a callback, send the status change to the application.  */
        cdc_acm -> ux_host_class_cdc_acm_device_status_change_callback(cdc_acm, notification_type, notification_value);
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdd0:	68fa      	ldr	r2, [r7, #12]
 800fdd2:	6939      	ldr	r1, [r7, #16]
 800fdd4:	6978      	ldr	r0, [r7, #20]
 800fdd6:	4798      	blx	r3
        
    /* Reactivate the CDC_ACM interrupt pipe.  */
    _ux_host_stack_transfer_request(transfer_request);
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f7fe fc5b 	bl	800e694 <_ux_host_stack_transfer_request>

    /* Return to caller.  */
    return;
 800fdde:	e000      	b.n	800fde2 <_ux_host_class_cdc_acm_transfer_request_completed+0x56>
        return;
 800fde0:	bf00      	nop
}
 800fde2:	3718      	adds	r7, #24
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}

0800fde8 <_ux_host_class_cdc_acm_write>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_host_class_cdc_acm_write(UX_HOST_CLASS_CDC_ACM *cdc_acm, UCHAR *data_pointer, 
                                    ULONG requested_length, ULONG *actual_length)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b088      	sub	sp, #32
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	60b9      	str	r1, [r7, #8]
 800fdf2:	607a      	str	r2, [r7, #4]
 800fdf4:	603b      	str	r3, [r7, #0]
    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_HOST_CLASS_CDC_ACM_WRITE, cdc_acm, 0, 0, 0, UX_TRACE_HOST_CLASS_EVENTS, 0, 0)

    /* Ensure the instance is valid.  */
    if (cdc_acm -> ux_host_class_cdc_acm_state !=  UX_HOST_CLASS_INSTANCE_LIVE)
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	6a1b      	ldr	r3, [r3, #32]
 800fdfa:	2b01      	cmp	r3, #1
 800fdfc:	d006      	beq.n	800fe0c <_ux_host_class_cdc_acm_write+0x24>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_HOST_CLASS_INSTANCE_UNKNOWN);
 800fdfe:	225b      	movs	r2, #91	; 0x5b
 800fe00:	2107      	movs	r1, #7
 800fe02:	2002      	movs	r0, #2
 800fe04:	f7fe fcf8 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_HOST_CLASS_INSTANCE_UNKNOWN, cdc_acm, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_HOST_CLASS_INSTANCE_UNKNOWN);
 800fe08:	235b      	movs	r3, #91	; 0x5b
 800fe0a:	e067      	b.n	800fedc <_ux_host_class_cdc_acm_write+0xf4>
    }

    /* As further protection, we must ensure this instance of the interface is the data interface and not
       the control interface !  */
    if (cdc_acm -> ux_host_class_cdc_acm_interface -> ux_interface_descriptor.bInterfaceClass != UX_HOST_CLASS_CDC_DATA_CLASS)
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	699b      	ldr	r3, [r3, #24]
 800fe10:	6a1b      	ldr	r3, [r3, #32]
 800fe12:	2b0a      	cmp	r3, #10
 800fe14:	d006      	beq.n	800fe24 <_ux_host_class_cdc_acm_write+0x3c>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_HOST_CLASS_INSTANCE_UNKNOWN);
 800fe16:	225b      	movs	r2, #91	; 0x5b
 800fe18:	2107      	movs	r1, #7
 800fe1a:	2002      	movs	r0, #2
 800fe1c:	f7fe fcec 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_HOST_CLASS_INSTANCE_UNKNOWN, cdc_acm, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_HOST_CLASS_INSTANCE_UNKNOWN);
 800fe20:	235b      	movs	r3, #91	; 0x5b
 800fe22:	e05b      	b.n	800fedc <_ux_host_class_cdc_acm_write+0xf4>
        return(UX_BUSY);
    cdc_acm -> ux_host_class_cdc_acm_write_state = UX_STATE_WAIT;
#endif

    /* Start by resetting the actual length of the transfer.  */
    *actual_length =  0;
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	2200      	movs	r2, #0
 800fe28:	601a      	str	r2, [r3, #0]

    /* Get the pointer to the bulk out endpoint transfer request.  */
    transfer_request =  &cdc_acm -> ux_host_class_cdc_acm_bulk_out_endpoint -> ux_endpoint_transfer_request;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	691b      	ldr	r3, [r3, #16]
 800fe2e:	3330      	adds	r3, #48	; 0x30
 800fe30:	61bb      	str	r3, [r7, #24]
       completed or when there is an error.  */
    do
    {

        /* Program the maximum authorized length for this transfer_request.  */
        if (requested_length > transfer_request -> ux_transfer_request_maximum_length)
 800fe32:	69bb      	ldr	r3, [r7, #24]
 800fe34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe36:	687a      	ldr	r2, [r7, #4]
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d903      	bls.n	800fe44 <_ux_host_class_cdc_acm_write+0x5c>
            transfer_request_length =  transfer_request -> ux_transfer_request_maximum_length;
 800fe3c:	69bb      	ldr	r3, [r7, #24]
 800fe3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe40:	61fb      	str	r3, [r7, #28]
 800fe42:	e001      	b.n	800fe48 <_ux_host_class_cdc_acm_write+0x60>
        else
            transfer_request_length =  requested_length;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	61fb      	str	r3, [r7, #28]
                    
        /* Initialize the transfer_request.  */
        transfer_request -> ux_transfer_request_data_pointer =  data_pointer;
 800fe48:	69bb      	ldr	r3, [r7, #24]
 800fe4a:	68ba      	ldr	r2, [r7, #8]
 800fe4c:	609a      	str	r2, [r3, #8]
        transfer_request -> ux_transfer_request_requested_length =  transfer_request_length;
 800fe4e:	69bb      	ldr	r3, [r7, #24]
 800fe50:	69fa      	ldr	r2, [r7, #28]
 800fe52:	60da      	str	r2, [r3, #12]
        
        /* Perform the transfer.  */
        status =  _ux_host_stack_transfer_request(transfer_request);
 800fe54:	69b8      	ldr	r0, [r7, #24]
 800fe56:	f7fe fc1d 	bl	800e694 <_ux_host_stack_transfer_request>
 800fe5a:	6178      	str	r0, [r7, #20]

        /* If the transfer is successful, we need to wait for the transfer request to be completed.  */
        if (status == UX_SUCCESS)
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d120      	bne.n	800fea4 <_ux_host_class_cdc_acm_write+0xbc>
        {

#if !defined(UX_HOST_STANDALONE)
            /* Wait for the completion of the transfer request.  */
            status =  _ux_host_semaphore_get(&transfer_request -> ux_transfer_request_semaphore,
 800fe62:	69bb      	ldr	r3, [r7, #24]
 800fe64:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800fe68:	69bb      	ldr	r3, [r7, #24]
 800fe6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe6c:	4619      	mov	r1, r3
 800fe6e:	4610      	mov	r0, r2
 800fe70:	f7ff f8be 	bl	800eff0 <_ux_utility_semaphore_get>
 800fe74:	6178      	str	r0, [r7, #20]
                                             transfer_request -> ux_transfer_request_timeout_value);

            /* If the semaphore did not succeed we probably have a time out.  */
            if (status != UX_SUCCESS)
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d015      	beq.n	800fea8 <_ux_host_class_cdc_acm_write+0xc0>
            {

                /* All transfers pending need to abort. There may have been a partial transfer.  */
                _ux_host_stack_transfer_request_abort(transfer_request);
 800fe7c:	69b8      	ldr	r0, [r7, #24]
 800fe7e:	f7fe fc81 	bl	800e784 <_ux_host_stack_transfer_request_abort>
                
                /* Update the length of the actual data transferred. We do this after the 
                   abort of the transfer_request in case some data actually went out.  */
                *actual_length +=  transfer_request -> ux_transfer_request_actual_length;
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	69bb      	ldr	r3, [r7, #24]
 800fe88:	691b      	ldr	r3, [r3, #16]
 800fe8a:	441a      	add	r2, r3
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	601a      	str	r2, [r3, #0]
            
                /* Set the completion code.  */
                transfer_request -> ux_transfer_request_completion_code =  UX_TRANSFER_TIMEOUT;
 800fe90:	69bb      	ldr	r3, [r7, #24]
 800fe92:	225c      	movs	r2, #92	; 0x5c
 800fe94:	635a      	str	r2, [r3, #52]	; 0x34
        
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_TIMEOUT);
 800fe96:	225c      	movs	r2, #92	; 0x5c
 800fe98:	2107      	movs	r1, #7
 800fe9a:	2002      	movs	r0, #2
 800fe9c:	f7fe fcac 	bl	800e7f8 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_TIMEOUT, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)
        
                /* There was an error, return to the caller.  */
                return(UX_TRANSFER_TIMEOUT);
 800fea0:	235c      	movs	r3, #92	; 0x5c
 800fea2:	e01b      	b.n	800fedc <_ux_host_class_cdc_acm_write+0xf4>
            /* Not busy any more.  */
            cdc_acm -> ux_host_class_cdc_acm_write_state = UX_STATE_RESET;
#endif

            /* There was a non transfer error, no partial transfer to be checked */
            return(status);
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	e019      	b.n	800fedc <_ux_host_class_cdc_acm_write+0xf4>
        }

        /* Update the length of the transfer. Normally all the data has to be sent.  */
        *actual_length +=  transfer_request -> ux_transfer_request_actual_length;
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	69bb      	ldr	r3, [r7, #24]
 800feae:	691b      	ldr	r3, [r3, #16]
 800feb0:	441a      	add	r2, r3
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	601a      	str	r2, [r3, #0]
        
        /* Check for completion of transfer. If the transfer is partial, return to caller.
           The transfer is marked as successful but the caller will need to check the length
           actually sent and determine if a partial transfer is OK. */
        if (transfer_request_length !=  transfer_request -> ux_transfer_request_actual_length)
 800feb6:	69bb      	ldr	r3, [r7, #24]
 800feb8:	691b      	ldr	r3, [r3, #16]
 800feba:	69fa      	ldr	r2, [r7, #28]
 800febc:	429a      	cmp	r2, r3
 800febe:	d001      	beq.n	800fec4 <_ux_host_class_cdc_acm_write+0xdc>
        {

            /* Return success.  */
            return(UX_SUCCESS);
 800fec0:	2300      	movs	r3, #0
 800fec2:	e00b      	b.n	800fedc <_ux_host_class_cdc_acm_write+0xf4>
        }

        /* Update the data pointer for next transfer.  */        
        data_pointer +=  transfer_request_length;
 800fec4:	68ba      	ldr	r2, [r7, #8]
 800fec6:	69fb      	ldr	r3, [r7, #28]
 800fec8:	4413      	add	r3, r2
 800feca:	60bb      	str	r3, [r7, #8]
        
        /* Update what is left to send out.  */
        requested_length -=  transfer_request_length;          
 800fecc:	687a      	ldr	r2, [r7, #4]
 800fece:	69fb      	ldr	r3, [r7, #28]
 800fed0:	1ad3      	subs	r3, r2, r3
 800fed2:	607b      	str	r3, [r7, #4]

    } while (requested_length);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d1ab      	bne.n	800fe32 <_ux_host_class_cdc_acm_write+0x4a>
    /* Not busy any more.  */
    cdc_acm -> ux_host_class_cdc_acm_write_state = UX_STATE_RESET;
#endif

    /* We get here when all the transfers went through without errors.  */
    return(UX_SUCCESS); 
 800feda:	2300      	movs	r3, #0
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3720      	adds	r7, #32
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <HAL_HCD_Connect_Callback>:
/*                                            refined macros names,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b084      	sub	sp, #16
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
UX_HCD              *hcd;
UX_HCD_STM32        *hcd_stm32;


    /* Get the pointer to the HCD & HCD_STM32.  */
    hcd = (UX_HCD*)hhcd -> pData;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fef2:	60fb      	str	r3, [r7, #12]
    hcd_stm32 = (UX_HCD_STM32*)hcd -> ux_hcd_controller_hardware;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fef8:	60bb      	str	r3, [r7, #8]

    /* Something happened on the root hub port. Signal it to the root hub     thread.  */
    hcd -> ux_hcd_root_hub_signal[0]++;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fefe:	1c5a      	adds	r2, r3, #1
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	651a      	str	r2, [r3, #80]	; 0x50

    /* The controller has issued a ATTACH Root HUB signal.  */
    hcd_stm32 -> ux_hcd_stm32_controller_flag |= UX_HCD_STM32_CONTROLLER_FLAG_DEVICE_ATTACHED;
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff08:	f043 0201 	orr.w	r2, r3, #1
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	655a      	str	r2, [r3, #84]	; 0x54
    hcd_stm32 -> ux_hcd_stm32_controller_flag &= ~UX_HCD_STM32_CONTROLLER_FLAG_DEVICE_DETACHED;
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff14:	f023 0202 	bic.w	r2, r3, #2
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Wake up the root hub thread.  */
    _ux_host_semaphore_put(&_ux_system_host -> ux_system_host_enum_semaphore);
 800ff1c:	4b04      	ldr	r3, [pc, #16]	; (800ff30 <HAL_HCD_Connect_Callback+0x4c>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	33d8      	adds	r3, #216	; 0xd8
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7ff f89c 	bl	800f060 <_ux_utility_semaphore_put>
}
 800ff28:	bf00      	nop
 800ff2a:	3710      	adds	r7, #16
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}
 800ff30:	2400577c 	.word	0x2400577c

0800ff34 <HAL_HCD_Disconnect_Callback>:
/*                                            refined macros names,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
UX_HCD              *hcd;
UX_HCD_STM32        *hcd_stm32;


    /* Get the pointer to the HCD & HCD_STM32.  */
    hcd = (UX_HCD*)hhcd -> pData;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ff42:	60fb      	str	r3, [r7, #12]
    hcd_stm32 = (UX_HCD_STM32*)hcd -> ux_hcd_controller_hardware;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff48:	60bb      	str	r3, [r7, #8]

    /* Something happened on the root hub port. Signal it to the root hub     thread.  */
    hcd -> ux_hcd_root_hub_signal[0]++;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff4e:	1c5a      	adds	r2, r3, #1
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	651a      	str	r2, [r3, #80]	; 0x50

    /* The controller has issued a DETACH Root HUB signal.  */
    hcd_stm32 -> ux_hcd_stm32_controller_flag |= UX_HCD_STM32_CONTROLLER_FLAG_DEVICE_DETACHED;
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff58:	f043 0202 	orr.w	r2, r3, #2
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	655a      	str	r2, [r3, #84]	; 0x54
    hcd_stm32 -> ux_hcd_stm32_controller_flag &= ~UX_HCD_STM32_CONTROLLER_FLAG_DEVICE_ATTACHED;
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff64:	f023 0201 	bic.w	r2, r3, #1
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Wake up the root hub thread.  */
    _ux_host_semaphore_put(&_ux_system_host -> ux_system_host_enum_semaphore);
 800ff6c:	4b04      	ldr	r3, [pc, #16]	; (800ff80 <HAL_HCD_Disconnect_Callback+0x4c>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	33d8      	adds	r3, #216	; 0xd8
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7ff f874 	bl	800f060 <_ux_utility_semaphore_put>
}
 800ff78:	bf00      	nop
 800ff7a:	3710      	adds	r7, #16
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	2400577c 	.word	0x2400577c

0800ff84 <HAL_HCD_HC_NotifyURBChange_Callback>:
/*                                            added ISO transfer support, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ff84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff86:	b08d      	sub	sp, #52	; 0x34
 800ff88:	af04      	add	r7, sp, #16
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	460b      	mov	r3, r1
 800ff8e:	70fb      	strb	r3, [r7, #3]
 800ff90:	4613      	mov	r3, r2
 800ff92:	70bb      	strb	r3, [r7, #2]
UX_TRANSFER         *transfer_request;
UX_TRANSFER         *transfer_next;


    /* Check the URB state.  */
    if (urb_state == URB_DONE || urb_state == URB_STALL || urb_state == URB_ERROR || urb_state == URB_NOTREADY)
 800ff94:	78bb      	ldrb	r3, [r7, #2]
 800ff96:	2b01      	cmp	r3, #1
 800ff98:	d009      	beq.n	800ffae <HAL_HCD_HC_NotifyURBChange_Callback+0x2a>
 800ff9a:	78bb      	ldrb	r3, [r7, #2]
 800ff9c:	2b05      	cmp	r3, #5
 800ff9e:	d006      	beq.n	800ffae <HAL_HCD_HC_NotifyURBChange_Callback+0x2a>
 800ffa0:	78bb      	ldrb	r3, [r7, #2]
 800ffa2:	2b04      	cmp	r3, #4
 800ffa4:	d003      	beq.n	800ffae <HAL_HCD_HC_NotifyURBChange_Callback+0x2a>
 800ffa6:	78bb      	ldrb	r3, [r7, #2]
 800ffa8:	2b02      	cmp	r3, #2
 800ffaa:	f040 8182 	bne.w	80102b2 <HAL_HCD_HC_NotifyURBChange_Callback+0x32e>
    {

        /* Get the pointer to the HCD & HCD_STM32.  */
        hcd = (UX_HCD*)hhcd -> pData;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ffb4:	61fb      	str	r3, [r7, #28]
        hcd_stm32 = (UX_HCD_STM32*)hcd -> ux_hcd_controller_hardware;
 800ffb6:	69fb      	ldr	r3, [r7, #28]
 800ffb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffba:	61bb      	str	r3, [r7, #24]

        /* Check if driver is still valid.  */
        if (hcd_stm32 == UX_NULL)
 800ffbc:	69bb      	ldr	r3, [r7, #24]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	f000 8170 	beq.w	80102a4 <HAL_HCD_HC_NotifyURBChange_Callback+0x320>
            return;

        /* Load the ED for the channel.  */
        ed =  hcd_stm32 -> ux_hcd_stm32_channels_ed[chnum];
 800ffc4:	78fa      	ldrb	r2, [r7, #3]
 800ffc6:	69bb      	ldr	r3, [r7, #24]
 800ffc8:	3202      	adds	r2, #2
 800ffca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffce:	617b      	str	r3, [r7, #20]

        /* Check if ED is still valid.  */
        if (ed == UX_NULL)
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	f000 8168 	beq.w	80102a8 <HAL_HCD_HC_NotifyURBChange_Callback+0x324>
        {
            return;
        }

        /* Get transfer request.  */
        transfer_request = ed -> ux_stm32_ed_transfer_request;
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	689b      	ldr	r3, [r3, #8]
 800ffdc:	613b      	str	r3, [r7, #16]

        /* Check if request is still valid.  */
        if (transfer_request == UX_NULL)
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	f000 8163 	beq.w	80102ac <HAL_HCD_HC_NotifyURBChange_Callback+0x328>
        {
            return;
        }

        /* Check if URB state is not URB_NOTREADY.  */
        if (urb_state != URB_NOTREADY)
 800ffe6:	78bb      	ldrb	r3, [r7, #2]
 800ffe8:	2b02      	cmp	r3, #2
 800ffea:	f000 811d 	beq.w	8010228 <HAL_HCD_HC_NotifyURBChange_Callback+0x2a4>
        {

            /* Handle URB states.  */
            switch (urb_state)
 800ffee:	78bb      	ldrb	r3, [r7, #2]
 800fff0:	2b01      	cmp	r3, #1
 800fff2:	d006      	beq.n	8010002 <HAL_HCD_HC_NotifyURBChange_Callback+0x7e>
 800fff4:	2b05      	cmp	r3, #5
 800fff6:	f040 80b0 	bne.w	801015a <HAL_HCD_HC_NotifyURBChange_Callback+0x1d6>
            {
            case URB_STALL:

                /* Set the completion code to stalled.  */
                transfer_request -> ux_transfer_request_completion_code =  UX_TRANSFER_STALLED;
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	2221      	movs	r2, #33	; 0x21
 800fffe:	635a      	str	r2, [r3, #52]	; 0x34
                break;
 8010000:	e0ae      	b.n	8010160 <HAL_HCD_HC_NotifyURBChange_Callback+0x1dc>

            case URB_DONE:

                /* Check the request direction.  */
                if (ed -> ux_stm32_ed_dir == 1)
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8010008:	2b01      	cmp	r3, #1
 801000a:	d163      	bne.n	80100d4 <HAL_HCD_HC_NotifyURBChange_Callback+0x150>
                {
                  if ((ed -> ux_stm32_ed_type == EP_TYPE_CTRL) || (ed -> ux_stm32_ed_type == EP_TYPE_BULK))
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010012:	2b00      	cmp	r3, #0
 8010014:	d004      	beq.n	8010020 <HAL_HCD_HC_NotifyURBChange_Callback+0x9c>
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801001c:	2b02      	cmp	r3, #2
 801001e:	d14b      	bne.n	80100b8 <HAL_HCD_HC_NotifyURBChange_Callback+0x134>
                  {
                    /* Get transfer size for receiving direction. */
                    transfer_request -> ux_transfer_request_actual_length += HAL_HCD_HC_GetXferCount(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel);
 8010020:	69bb      	ldr	r3, [r7, #24]
 8010022:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801002a:	4619      	mov	r1, r3
 801002c:	4610      	mov	r0, r2
 801002e:	f7f1 ffd1 	bl	8001fd4 <HAL_HCD_HC_GetXferCount>
 8010032:	4602      	mov	r2, r0
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	691b      	ldr	r3, [r3, #16]
 8010038:	441a      	add	r2, r3
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	611a      	str	r2, [r3, #16]

                    /* Check if there is more data to be received. */
                    if ((transfer_request -> ux_transfer_request_requested_length > transfer_request -> ux_transfer_request_actual_length) &&
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	68da      	ldr	r2, [r3, #12]
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	691b      	ldr	r3, [r3, #16]
 8010046:	429a      	cmp	r2, r3
 8010048:	d943      	bls.n	80100d2 <HAL_HCD_HC_NotifyURBChange_Callback+0x14e>
                       (HAL_HCD_HC_GetXferCount(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel) == ed->ux_stm32_ed_endpoint->ux_endpoint_descriptor.wMaxPacketSize))
 801004a:	69bb      	ldr	r3, [r7, #24]
 801004c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010054:	4619      	mov	r1, r3
 8010056:	4610      	mov	r0, r2
 8010058:	f7f1 ffbc 	bl	8001fd4 <HAL_HCD_HC_GetXferCount>
 801005c:	4602      	mov	r2, r0
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	685b      	ldr	r3, [r3, #4]
 8010062:	69db      	ldr	r3, [r3, #28]
                    if ((transfer_request -> ux_transfer_request_requested_length > transfer_request -> ux_transfer_request_actual_length) &&
 8010064:	429a      	cmp	r2, r3
 8010066:	d134      	bne.n	80100d2 <HAL_HCD_HC_NotifyURBChange_Callback+0x14e>
                    {
                      /* Adjust the transmit length.  */
                      ed -> ux_stm32_ed_packet_length = UX_MIN(ed->ux_stm32_ed_endpoint->ux_endpoint_descriptor.wMaxPacketSize,
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	68da      	ldr	r2, [r3, #12]
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	691b      	ldr	r3, [r3, #16]
 8010070:	1ad2      	subs	r2, r2, r3
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	69db      	ldr	r3, [r3, #28]
 8010078:	429a      	cmp	r2, r3
 801007a:	bf28      	it	cs
 801007c:	461a      	movcs	r2, r3
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	619a      	str	r2, [r3, #24]
                                                               transfer_request -> ux_transfer_request_requested_length - transfer_request -> ux_transfer_request_actual_length);

                      /* Submit the transmit request.  */
                      HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel,
 8010082:	69bb      	ldr	r3, [r7, #24]
 8010084:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	f893 402c 	ldrb.w	r4, [r3, #44]	; 0x2c
                                               1U,
                                               ed -> ux_stm32_ed_type,
                                               USBH_PID_DATA,
                                               ed -> ux_stm32_ed_data + transfer_request -> ux_transfer_request_actual_length,
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	691a      	ldr	r2, [r3, #16]
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	691b      	ldr	r3, [r3, #16]
 801009a:	4413      	add	r3, r2
                                               ed -> ux_stm32_ed_packet_length, 0);
 801009c:	697a      	ldr	r2, [r7, #20]
 801009e:	6992      	ldr	r2, [r2, #24]
                      HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel,
 80100a0:	b292      	uxth	r2, r2
 80100a2:	2500      	movs	r5, #0
 80100a4:	9503      	str	r5, [sp, #12]
 80100a6:	9202      	str	r2, [sp, #8]
 80100a8:	9301      	str	r3, [sp, #4]
 80100aa:	2301      	movs	r3, #1
 80100ac:	9300      	str	r3, [sp, #0]
 80100ae:	4623      	mov	r3, r4
 80100b0:	2201      	movs	r2, #1
 80100b2:	f7f1 fce5 	bl	8001a80 <HAL_HCD_HC_SubmitRequest>
                      return;
 80100b6:	e0fc      	b.n	80102b2 <HAL_HCD_HC_NotifyURBChange_Callback+0x32e>
                    }
                  }
                  else
                  {
                    /* Get transfer size for receiving direction. */
                    transfer_request -> ux_transfer_request_actual_length = HAL_HCD_HC_GetXferCount(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel);
 80100b8:	69bb      	ldr	r3, [r7, #24]
 80100ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80100c2:	4619      	mov	r1, r3
 80100c4:	4610      	mov	r0, r2
 80100c6:	f7f1 ff85 	bl	8001fd4 <HAL_HCD_HC_GetXferCount>
 80100ca:	4602      	mov	r2, r0
 80100cc:	693b      	ldr	r3, [r7, #16]
 80100ce:	611a      	str	r2, [r3, #16]
 80100d0:	e000      	b.n	80100d4 <HAL_HCD_HC_NotifyURBChange_Callback+0x150>
                    if ((transfer_request -> ux_transfer_request_requested_length > transfer_request -> ux_transfer_request_actual_length) &&
 80100d2:	bf00      	nop
                  }
                }

                /* Check if the request is for OUT transfer.  */
                if (ed -> ux_stm32_ed_dir == 0U)
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d139      	bne.n	8010152 <HAL_HCD_HC_NotifyURBChange_Callback+0x1ce>
                  }
                  else
#endif /*defined (USBH_HAL_HUB_SPLIT_SUPPORTED) */
                  {
                    /* Update actual transfer length.  */
                    transfer_request -> ux_transfer_request_actual_length += ed -> ux_stm32_ed_packet_length;
 80100de:	693b      	ldr	r3, [r7, #16]
 80100e0:	691a      	ldr	r2, [r3, #16]
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	699b      	ldr	r3, [r3, #24]
 80100e6:	441a      	add	r2, r3
 80100e8:	693b      	ldr	r3, [r7, #16]
 80100ea:	611a      	str	r2, [r3, #16]
                  }

                    /* Check if there is more data to send.  */
                    if (transfer_request -> ux_transfer_request_requested_length >
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	68da      	ldr	r2, [r3, #12]
                        transfer_request -> ux_transfer_request_actual_length)
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	691b      	ldr	r3, [r3, #16]
                    if (transfer_request -> ux_transfer_request_requested_length >
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d92c      	bls.n	8010152 <HAL_HCD_HC_NotifyURBChange_Callback+0x1ce>
                        return;
                      }
#endif /* defined (USBH_HAL_HUB_SPLIT_SUPPORTED) */

                        /* Periodic transfer that needs schedule is not started here.  */
                        if (ed -> ux_stm32_ed_sch_mode)
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80100fe:	2b00      	cmp	r3, #0
 8010100:	f040 80d6 	bne.w	80102b0 <HAL_HCD_HC_NotifyURBChange_Callback+0x32c>
                            return;

                        /* Adjust the transmit length.  */
                        ed -> ux_stm32_ed_packet_length =
                            UX_MIN(transfer_request -> ux_transfer_request_packet_length,
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	68da      	ldr	r2, [r3, #12]
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	691b      	ldr	r3, [r3, #16]
 801010c:	1ad2      	subs	r2, r2, r3
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010112:	429a      	cmp	r2, r3
 8010114:	bf28      	it	cs
 8010116:	461a      	movcs	r2, r3
                        ed -> ux_stm32_ed_packet_length =
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	619a      	str	r2, [r3, #24]
                                   transfer_request -> ux_transfer_request_requested_length -
                                   transfer_request -> ux_transfer_request_actual_length);

                        /* Submit the transmit request.  */
                        HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel,
 801011c:	69bb      	ldr	r3, [r7, #24]
 801011e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	f893 402c 	ldrb.w	r4, [r3, #44]	; 0x2c
                                                 0, ed -> ux_stm32_ed_type, USBH_PID_DATA,
                                                 ed -> ux_stm32_ed_data + transfer_request -> ux_transfer_request_actual_length,
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	691a      	ldr	r2, [r3, #16]
 8010130:	693b      	ldr	r3, [r7, #16]
 8010132:	691b      	ldr	r3, [r3, #16]
 8010134:	4413      	add	r3, r2
                                                 ed -> ux_stm32_ed_packet_length, 0);
 8010136:	697a      	ldr	r2, [r7, #20]
 8010138:	6992      	ldr	r2, [r2, #24]
                        HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel,
 801013a:	b292      	uxth	r2, r2
 801013c:	2500      	movs	r5, #0
 801013e:	9503      	str	r5, [sp, #12]
 8010140:	9202      	str	r2, [sp, #8]
 8010142:	9301      	str	r3, [sp, #4]
 8010144:	2301      	movs	r3, #1
 8010146:	9300      	str	r3, [sp, #0]
 8010148:	4623      	mov	r3, r4
 801014a:	2200      	movs	r2, #0
 801014c:	f7f1 fc98 	bl	8001a80 <HAL_HCD_HC_SubmitRequest>
                        return;
 8010150:	e0af      	b.n	80102b2 <HAL_HCD_HC_NotifyURBChange_Callback+0x32e>
                    }
                }

                /* Set the completion code to SUCCESS.  */
                transfer_request -> ux_transfer_request_completion_code =  UX_SUCCESS;
 8010152:	693b      	ldr	r3, [r7, #16]
 8010154:	2200      	movs	r2, #0
 8010156:	635a      	str	r2, [r3, #52]	; 0x34
                break;
 8010158:	e002      	b.n	8010160 <HAL_HCD_HC_NotifyURBChange_Callback+0x1dc>

            default:
                /* Set the completion code to transfer error.  */
                transfer_request -> ux_transfer_request_completion_code =  UX_TRANSFER_ERROR;
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	2223      	movs	r2, #35	; 0x23
 801015e:	635a      	str	r2, [r3, #52]	; 0x34
            }

            /* Finish current transfer.  */
            _ux_hcd_stm32_request_trans_finish(hcd_stm32, ed);
 8010160:	6979      	ldr	r1, [r7, #20]
 8010162:	69b8      	ldr	r0, [r7, #24]
 8010164:	f001 f839 	bl	80111da <_ux_hcd_stm32_request_trans_finish>

            /* Move to next transfer.  */
            transfer_next = transfer_request -> ux_transfer_request_next_transfer_request;
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801016c:	60fb      	str	r3, [r7, #12]
            ed -> ux_stm32_ed_transfer_request = transfer_next;
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	68fa      	ldr	r2, [r7, #12]
 8010172:	609a      	str	r2, [r3, #8]

            /* If there is transfer to start, start it.  */
            if (transfer_next)
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d03a      	beq.n	80101f0 <HAL_HCD_HC_NotifyURBChange_Callback+0x26c>
            {

                /* If transfer is not started by schedular, start here.  */
                if (!ed -> ux_stm32_ed_sch_mode)
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010180:	2b00      	cmp	r3, #0
 8010182:	d143      	bne.n	801020c <HAL_HCD_HC_NotifyURBChange_Callback+0x288>
                {

                    /* For ISO OUT, packet size is from request variable,
                    * otherwise, use request length.  */
                    if ((ed -> ux_stm32_ed_type == EP_TYPE_ISOC) && (ed -> ux_stm32_ed_dir == 0))
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801018a:	2b01      	cmp	r3, #1
 801018c:	d109      	bne.n	80101a2 <HAL_HCD_HC_NotifyURBChange_Callback+0x21e>
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8010194:	2b00      	cmp	r3, #0
 8010196:	d104      	bne.n	80101a2 <HAL_HCD_HC_NotifyURBChange_Callback+0x21e>
                        ed -> ux_stm32_ed_packet_length = transfer_next -> ux_transfer_request_packet_length;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	619a      	str	r2, [r3, #24]
 80101a0:	e003      	b.n	80101aa <HAL_HCD_HC_NotifyURBChange_Callback+0x226>
                    else
                        ed -> ux_stm32_ed_packet_length = transfer_next -> ux_transfer_request_requested_length;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	68da      	ldr	r2, [r3, #12]
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	619a      	str	r2, [r3, #24]

                    /* Prepare transactions.  */
                    _ux_hcd_stm32_request_trans_prepare(hcd_stm32, ed, transfer_next);
 80101aa:	68fa      	ldr	r2, [r7, #12]
 80101ac:	6979      	ldr	r1, [r7, #20]
 80101ae:	69b8      	ldr	r0, [r7, #24]
 80101b0:	f001 f847 	bl	8011242 <_ux_hcd_stm32_request_trans_prepare>

                    /* Call HAL driver to submit the transfer request.  */
                    HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel,
 80101b4:	69bb      	ldr	r3, [r7, #24]
 80101b6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	f893 502c 	ldrb.w	r5, [r3, #44]	; 0x2c
                                             ed -> ux_stm32_ed_dir,
                                             ed -> ux_stm32_ed_type, USBH_PID_DATA,
                                             ed -> ux_stm32_ed_data + transfer_next -> ux_transfer_request_actual_length,
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	691a      	ldr	r2, [r3, #16]
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	691b      	ldr	r3, [r3, #16]
 80101d2:	4413      	add	r3, r2
                                             ed -> ux_stm32_ed_packet_length, 0);
 80101d4:	697a      	ldr	r2, [r7, #20]
 80101d6:	6992      	ldr	r2, [r2, #24]
                    HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel,
 80101d8:	b292      	uxth	r2, r2
 80101da:	2600      	movs	r6, #0
 80101dc:	9603      	str	r6, [sp, #12]
 80101de:	9202      	str	r2, [sp, #8]
 80101e0:	9301      	str	r3, [sp, #4]
 80101e2:	2301      	movs	r3, #1
 80101e4:	9300      	str	r3, [sp, #0]
 80101e6:	462b      	mov	r3, r5
 80101e8:	4622      	mov	r2, r4
 80101ea:	f7f1 fc49 	bl	8001a80 <HAL_HCD_HC_SubmitRequest>
 80101ee:	e00d      	b.n	801020c <HAL_HCD_HC_NotifyURBChange_Callback+0x288>
            }
            else
            {

                /* Transfer not continued, periodic needs re-schedule.  */
                if ((ed -> ux_stm32_ed_type == EP_TYPE_INTR) ||
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80101f6:	2b03      	cmp	r3, #3
 80101f8:	d004      	beq.n	8010204 <HAL_HCD_HC_NotifyURBChange_Callback+0x280>
                    (ed -> ux_stm32_ed_type == EP_TYPE_ISOC))
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
                if ((ed -> ux_stm32_ed_type == EP_TYPE_INTR) ||
 8010200:	2b01      	cmp	r3, #1
 8010202:	d103      	bne.n	801020c <HAL_HCD_HC_NotifyURBChange_Callback+0x288>
                    ed -> ux_stm32_ed_sch_mode = 1;
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	2201      	movs	r2, #1
 8010208:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            transfer_request -> ux_transfer_request_status = UX_TRANSFER_STATUS_COMPLETED;
            ed -> ux_stm32_ed_status |= UX_HCD_STM32_ED_STATUS_TRANSFER_DONE;
#endif /* defined(UX_HOST_STANDALONE) */

            /* Invoke callback function.  */
            if (transfer_request -> ux_transfer_request_completion_function)
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010210:	2b00      	cmp	r3, #0
 8010212:	d003      	beq.n	801021c <HAL_HCD_HC_NotifyURBChange_Callback+0x298>
                transfer_request -> ux_transfer_request_completion_function(transfer_request);
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010218:	6938      	ldr	r0, [r7, #16]
 801021a:	4798      	blx	r3

            /* Wake up the transfer request thread.  */
            _ux_host_semaphore_put(&transfer_request -> ux_transfer_request_semaphore);
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	3344      	adds	r3, #68	; 0x44
 8010220:	4618      	mov	r0, r3
 8010222:	f7fe ff1d 	bl	800f060 <_ux_utility_semaphore_put>
 8010226:	e044      	b.n	80102b2 <HAL_HCD_HC_NotifyURBChange_Callback+0x32e>
        else
        {

            /* Handle URB_NOTREADY state here.  */
            /* Check if we need to retry the transfer by checking the status.  */
            if ((ed -> ux_stm32_ed_status == UX_HCD_STM32_ED_STATUS_CONTROL_SETUP) ||
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801022e:	2b03      	cmp	r3, #3
 8010230:	d00e      	beq.n	8010250 <HAL_HCD_HC_NotifyURBChange_Callback+0x2cc>
                (ed -> ux_stm32_ed_status == UX_HCD_STM32_ED_STATUS_CONTROL_DATA_OUT) ||
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
            if ((ed -> ux_stm32_ed_status == UX_HCD_STM32_ED_STATUS_CONTROL_SETUP) ||
 8010238:	2b05      	cmp	r3, #5
 801023a:	d009      	beq.n	8010250 <HAL_HCD_HC_NotifyURBChange_Callback+0x2cc>
                (ed -> ux_stm32_ed_status == UX_HCD_STM32_ED_STATUS_CONTROL_STATUS_OUT) ||
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                (ed -> ux_stm32_ed_status == UX_HCD_STM32_ED_STATUS_CONTROL_DATA_OUT) ||
 8010242:	2b07      	cmp	r3, #7
 8010244:	d004      	beq.n	8010250 <HAL_HCD_HC_NotifyURBChange_Callback+0x2cc>
                (ed -> ux_stm32_ed_status == UX_HCD_STM32_ED_STATUS_BULK_OUT))
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                (ed -> ux_stm32_ed_status == UX_HCD_STM32_ED_STATUS_CONTROL_STATUS_OUT) ||
 801024c:	2b09      	cmp	r3, #9
 801024e:	d130      	bne.n	80102b2 <HAL_HCD_HC_NotifyURBChange_Callback+0x32e>
            {

                /* Submit the transmit request.  */
                HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel, 0,
 8010250:	69bb      	ldr	r3, [r7, #24]
 8010252:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
                                        ((ed -> ux_stm32_ed_endpoint -> ux_endpoint_descriptor.bmAttributes) & UX_MASK_ENDPOINT_TYPE) == UX_BULK_ENDPOINT ? EP_TYPE_BULK : EP_TYPE_CTRL,
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	699b      	ldr	r3, [r3, #24]
 8010260:	f003 0303 	and.w	r3, r3, #3
                HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel, 0,
 8010264:	2b02      	cmp	r3, #2
 8010266:	d101      	bne.n	801026c <HAL_HCD_HC_NotifyURBChange_Callback+0x2e8>
 8010268:	2402      	movs	r4, #2
 801026a:	e000      	b.n	801026e <HAL_HCD_HC_NotifyURBChange_Callback+0x2ea>
 801026c:	2400      	movs	r4, #0
                                         ed -> ux_stm32_ed_status == UX_HCD_STM32_ED_STATUS_CONTROL_SETUP ? USBH_PID_SETUP : USBH_PID_DATA,
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel, 0,
 8010274:	2b03      	cmp	r3, #3
 8010276:	bf14      	ite	ne
 8010278:	2301      	movne	r3, #1
 801027a:	2300      	moveq	r3, #0
 801027c:	b2db      	uxtb	r3, r3
 801027e:	461e      	mov	r6, r3
                                         ed -> ux_stm32_ed_data + transfer_request -> ux_transfer_request_actual_length,
 8010280:	697b      	ldr	r3, [r7, #20]
 8010282:	691a      	ldr	r2, [r3, #16]
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	691b      	ldr	r3, [r3, #16]
 8010288:	4413      	add	r3, r2
                                         ed -> ux_stm32_ed_packet_length, 0);
 801028a:	697a      	ldr	r2, [r7, #20]
 801028c:	6992      	ldr	r2, [r2, #24]
                HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel, 0,
 801028e:	b292      	uxth	r2, r2
 8010290:	2500      	movs	r5, #0
 8010292:	9503      	str	r5, [sp, #12]
 8010294:	9202      	str	r2, [sp, #8]
 8010296:	9301      	str	r3, [sp, #4]
 8010298:	9600      	str	r6, [sp, #0]
 801029a:	4623      	mov	r3, r4
 801029c:	2200      	movs	r2, #0
 801029e:	f7f1 fbef 	bl	8001a80 <HAL_HCD_HC_SubmitRequest>
 80102a2:	e006      	b.n	80102b2 <HAL_HCD_HC_NotifyURBChange_Callback+0x32e>
            return;
 80102a4:	bf00      	nop
 80102a6:	e004      	b.n	80102b2 <HAL_HCD_HC_NotifyURBChange_Callback+0x32e>
            return;
 80102a8:	bf00      	nop
 80102aa:	e002      	b.n	80102b2 <HAL_HCD_HC_NotifyURBChange_Callback+0x32e>
            return;
 80102ac:	bf00      	nop
 80102ae:	e000      	b.n	80102b2 <HAL_HCD_HC_NotifyURBChange_Callback+0x32e>
                            return;
 80102b0:	bf00      	nop
            }

        }
    }
}
 80102b2:	3724      	adds	r7, #36	; 0x24
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080102b8 <HAL_HCD_SOF_Callback>:
/*                                            refined macros names,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b084      	sub	sp, #16
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
UX_HCD              *hcd;
UX_HCD_STM32        *hcd_stm32;


    /* Get the pointer to the HCD & HCD_STM32.  */
    hcd = (UX_HCD*)hhcd -> pData;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80102c6:	60fb      	str	r3, [r7, #12]
    hcd_stm32 = (UX_HCD_STM32*)hcd -> ux_hcd_controller_hardware;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102cc:	60bb      	str	r3, [r7, #8]

    if ((hcd_stm32 -> ux_hcd_stm32_controller_flag & UX_HCD_STM32_CONTROLLER_FLAG_SOF) == 0)
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102d2:	f003 0304 	and.w	r3, r3, #4
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d111      	bne.n	80102fe <HAL_HCD_SOF_Callback+0x46>
    {
        hcd_stm32 -> ux_hcd_stm32_controller_flag |= UX_HCD_STM32_CONTROLLER_FLAG_SOF;
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102de:	f043 0204 	orr.w	r2, r3, #4
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	655a      	str	r2, [r3, #84]	; 0x54
        hcd -> ux_hcd_thread_signal++;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102ea:	1c5a      	adds	r2, r3, #1
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	665a      	str	r2, [r3, #100]	; 0x64

        /* Wake up the scheduler.  */
        _ux_host_semaphore_put(&_ux_system_host -> ux_system_host_hcd_semaphore);
 80102f0:	4b05      	ldr	r3, [pc, #20]	; (8010308 <HAL_HCD_SOF_Callback+0x50>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7fe feb1 	bl	800f060 <_ux_utility_semaphore_put>
    }
}
 80102fe:	bf00      	nop
 8010300:	3710      	adds	r7, #16
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
 8010306:	bf00      	nop
 8010308:	2400577c 	.word	0x2400577c

0801030c <_ux_hcd_stm32_controller_disable>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_controller_disable(UX_HCD_STM32 *hcd_stm32)
{
 801030c:	b480      	push	{r7}
 801030e:	b085      	sub	sp, #20
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]

UX_HCD      *hcd;

    /* Point to the generic portion of the host controller structure instance.  */
    hcd =  hcd_stm32 -> ux_hcd_stm32_hcd_owner;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	60fb      	str	r3, [r7, #12]

    /* Reflect the state of the controller in the main structure.  */
    hcd -> ux_hcd_status =  UX_HCD_STATUS_HALTED;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	2201      	movs	r2, #1
 801031e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8010320:	2300      	movs	r3, #0
}
 8010322:	4618      	mov	r0, r3
 8010324:	3714      	adds	r7, #20
 8010326:	46bd      	mov	sp, r7
 8010328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032c:	4770      	bx	lr
	...

08010330 <_ux_hcd_stm32_ed_obtain>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UX_HCD_STM32_ED  *_ux_hcd_stm32_ed_obtain(UX_HCD_STM32 *hcd_stm32)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b084      	sub	sp, #16
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
UX_HCD_STM32_ED       *ed;
ULONG                 ed_index;


    /* Start the search from the beginning of the list.  */
    ed =  hcd_stm32 -> ux_hcd_stm32_ed_list;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	60fb      	str	r3, [r7, #12]
    for (ed_index = 0; ed_index < _ux_system_host -> ux_system_host_max_ed; ed_index++)
 801033e:	2300      	movs	r3, #0
 8010340:	60bb      	str	r3, [r7, #8]
 8010342:	e019      	b.n	8010378 <_ux_hcd_stm32_ed_obtain+0x48>
    {

        /* Check the ED status, a free ED is marked with the UNUSED flag.  */
        if (ed -> ux_stm32_ed_status == UX_HCD_STM32_ED_STATUS_FREE)
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801034a:	2b00      	cmp	r3, #0
 801034c:	d10e      	bne.n	801036c <_ux_hcd_stm32_ed_obtain+0x3c>
        {

            /* The ED may have been used, so we reset all fields.  */
            _ux_utility_memory_set(ed, 0, sizeof(UX_HCD_STM32_ED));
 801034e:	2230      	movs	r2, #48	; 0x30
 8010350:	2100      	movs	r1, #0
 8010352:	68f8      	ldr	r0, [r7, #12]
 8010354:	f7fe fdd0 	bl	800eef8 <_ux_utility_memory_set>

            /* This ED is now marked as ALLOCATED.  */
            ed -> ux_stm32_ed_status =  UX_HCD_STM32_ED_STATUS_ALLOCATED;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	2201      	movs	r2, #1
 801035c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

            /* Reset the channel.  */
            ed -> ux_stm32_ed_channel =  UX_HCD_STM32_NO_CHANNEL_ASSIGNED;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	22ff      	movs	r2, #255	; 0xff
 8010364:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

            /* Return ED pointer.  */
            return(ed);
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	e00c      	b.n	8010386 <_ux_hcd_stm32_ed_obtain+0x56>
        }

        /* Point to the next ED.  */
        ed++;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	3330      	adds	r3, #48	; 0x30
 8010370:	60fb      	str	r3, [r7, #12]
    for (ed_index = 0; ed_index < _ux_system_host -> ux_system_host_max_ed; ed_index++)
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	3301      	adds	r3, #1
 8010376:	60bb      	str	r3, [r7, #8]
 8010378:	4b05      	ldr	r3, [pc, #20]	; (8010390 <_ux_hcd_stm32_ed_obtain+0x60>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	699b      	ldr	r3, [r3, #24]
 801037e:	68ba      	ldr	r2, [r7, #8]
 8010380:	429a      	cmp	r2, r3
 8010382:	d3df      	bcc.n	8010344 <_ux_hcd_stm32_ed_obtain+0x14>
    }

    /* There is no available ED in the ED list.  */
    return(UX_NULL);
 8010384:	2300      	movs	r3, #0
}
 8010386:	4618      	mov	r0, r3
 8010388:	3710      	adds	r7, #16
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	2400577c 	.word	0x2400577c

08010394 <_ux_hcd_stm32_endpoint_create>:
/*                                            added ISO transfer support, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_endpoint_create(UX_HCD_STM32 *hcd_stm32, UX_ENDPOINT *endpoint)
{
 8010394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010396:	b08f      	sub	sp, #60	; 0x3c
 8010398:	af04      	add	r7, sp, #16
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
ULONG                   packet_size;
ULONG                   endpoint_bInterval;


    /* Get the pointer to the device.  */
    device =  endpoint -> ux_endpoint_device;
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103a2:	617b      	str	r3, [r7, #20]

    /* Set device speed.  */
    switch (device -> ux_device_speed)
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	691b      	ldr	r3, [r3, #16]
 80103a8:	2b02      	cmp	r3, #2
 80103aa:	d006      	beq.n	80103ba <_ux_hcd_stm32_endpoint_create+0x26>
 80103ac:	2b02      	cmp	r3, #2
 80103ae:	d80d      	bhi.n	80103cc <_ux_hcd_stm32_endpoint_create+0x38>
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d008      	beq.n	80103c6 <_ux_hcd_stm32_endpoint_create+0x32>
 80103b4:	2b01      	cmp	r3, #1
 80103b6:	d003      	beq.n	80103c0 <_ux_hcd_stm32_endpoint_create+0x2c>
 80103b8:	e008      	b.n	80103cc <_ux_hcd_stm32_endpoint_create+0x38>
    {
    case UX_HIGH_SPEED_DEVICE:
        device_speed =  HCD_DEVICE_SPEED_HIGH;
 80103ba:	2300      	movs	r3, #0
 80103bc:	623b      	str	r3, [r7, #32]
        break;
 80103be:	e007      	b.n	80103d0 <_ux_hcd_stm32_endpoint_create+0x3c>
    case UX_FULL_SPEED_DEVICE:
        device_speed =  HCD_DEVICE_SPEED_FULL;
 80103c0:	2301      	movs	r3, #1
 80103c2:	623b      	str	r3, [r7, #32]
        break;
 80103c4:	e004      	b.n	80103d0 <_ux_hcd_stm32_endpoint_create+0x3c>
    case UX_LOW_SPEED_DEVICE:
        device_speed =  HCD_DEVICE_SPEED_LOW;
 80103c6:	2302      	movs	r3, #2
 80103c8:	623b      	str	r3, [r7, #32]
        break;
 80103ca:	e001      	b.n	80103d0 <_ux_hcd_stm32_endpoint_create+0x3c>
    default:
        return(UX_ERROR);
 80103cc:	23ff      	movs	r3, #255	; 0xff
 80103ce:	e12b      	b.n	8010628 <_ux_hcd_stm32_endpoint_create+0x294>
    }

    /* Set endpoint type.  */
    switch ((endpoint -> ux_endpoint_descriptor.bmAttributes) & UX_MASK_ENDPOINT_TYPE)
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	699b      	ldr	r3, [r3, #24]
 80103d4:	f003 0303 	and.w	r3, r3, #3
 80103d8:	2b03      	cmp	r3, #3
 80103da:	d817      	bhi.n	801040c <_ux_hcd_stm32_endpoint_create+0x78>
 80103dc:	a201      	add	r2, pc, #4	; (adr r2, 80103e4 <_ux_hcd_stm32_endpoint_create+0x50>)
 80103de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103e2:	bf00      	nop
 80103e4:	080103f5 	.word	0x080103f5
 80103e8:	08010407 	.word	0x08010407
 80103ec:	080103fb 	.word	0x080103fb
 80103f0:	08010401 	.word	0x08010401
    {
    case UX_CONTROL_ENDPOINT:
        endpoint_type =  EP_TYPE_CTRL;
 80103f4:	2300      	movs	r3, #0
 80103f6:	61fb      	str	r3, [r7, #28]
        break;
 80103f8:	e00a      	b.n	8010410 <_ux_hcd_stm32_endpoint_create+0x7c>
    case UX_BULK_ENDPOINT:
        endpoint_type =  EP_TYPE_BULK;
 80103fa:	2302      	movs	r3, #2
 80103fc:	61fb      	str	r3, [r7, #28]
        break;
 80103fe:	e007      	b.n	8010410 <_ux_hcd_stm32_endpoint_create+0x7c>
    case UX_INTERRUPT_ENDPOINT:
        endpoint_type =  EP_TYPE_INTR;
 8010400:	2303      	movs	r3, #3
 8010402:	61fb      	str	r3, [r7, #28]
       break;
 8010404:	e004      	b.n	8010410 <_ux_hcd_stm32_endpoint_create+0x7c>
    case UX_ISOCHRONOUS_ENDPOINT:
        endpoint_type =  EP_TYPE_ISOC;
 8010406:	2301      	movs	r3, #1
 8010408:	61fb      	str	r3, [r7, #28]
        break;
 801040a:	e001      	b.n	8010410 <_ux_hcd_stm32_endpoint_create+0x7c>
    default:
        return(UX_FUNCTION_NOT_SUPPORTED);
 801040c:	2354      	movs	r3, #84	; 0x54
 801040e:	e10b      	b.n	8010628 <_ux_hcd_stm32_endpoint_create+0x294>
    }

    /* Obtain a ED for this new endpoint. This ED will live as long as the endpoint is active
       and will be the container for the tds.  */
    ed =  _ux_hcd_stm32_ed_obtain(hcd_stm32);
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f7ff ff8d 	bl	8010330 <_ux_hcd_stm32_ed_obtain>
 8010416:	6138      	str	r0, [r7, #16]
    if (ed == UX_NULL)
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d101      	bne.n	8010422 <_ux_hcd_stm32_endpoint_create+0x8e>
        return(UX_NO_ED_AVAILABLE);
 801041e:	2314      	movs	r3, #20
 8010420:	e102      	b.n	8010628 <_ux_hcd_stm32_endpoint_create+0x294>

    /* And get a channel. */
    for (channel_index = 0; channel_index < hcd_stm32 -> ux_hcd_stm32_nb_channels; channel_index++)
 8010422:	2300      	movs	r3, #0
 8010424:	627b      	str	r3, [r7, #36]	; 0x24
 8010426:	e015      	b.n	8010454 <_ux_hcd_stm32_endpoint_create+0xc0>
    {

        /* Check if that Channel is free.  */
        if (hcd_stm32 -> ux_hcd_stm32_channels_ed[channel_index]  == UX_NULL)
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801042c:	3202      	adds	r2, #2
 801042e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d10b      	bne.n	801044e <_ux_hcd_stm32_endpoint_create+0xba>
        {

            /* We have a channel. Save it. */
            hcd_stm32 -> ux_hcd_stm32_channels_ed[channel_index] = ed;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801043a:	3202      	adds	r2, #2
 801043c:	6939      	ldr	r1, [r7, #16]
 801043e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            /* And in the endpoint too. */
            ed -> ux_stm32_ed_channel = channel_index;
 8010442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010444:	b2da      	uxtb	r2, r3
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

            /* Done here.  */
            break;
 801044c:	e007      	b.n	801045e <_ux_hcd_stm32_endpoint_create+0xca>
    for (channel_index = 0; channel_index < hcd_stm32 -> ux_hcd_stm32_nb_channels; channel_index++)
 801044e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010450:	3301      	adds	r3, #1
 8010452:	627b      	str	r3, [r7, #36]	; 0x24
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801045a:	429a      	cmp	r2, r3
 801045c:	d3e4      	bcc.n	8010428 <_ux_hcd_stm32_endpoint_create+0x94>

        }
    }

    /* Check for channel assignment.  */
    if (ed -> ux_stm32_ed_channel ==  UX_HCD_STM32_NO_CHANNEL_ASSIGNED)
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010464:	2bff      	cmp	r3, #255	; 0xff
 8010466:	d105      	bne.n	8010474 <_ux_hcd_stm32_endpoint_create+0xe0>
    {

        /* Free the ED.  */
        ed -> ux_stm32_ed_status =  UX_HCD_STM32_ED_STATUS_FREE;
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	2200      	movs	r2, #0
 801046c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

        /* Could not allocate a channel.  */
        return(UX_NO_ED_AVAILABLE);
 8010470:	2314      	movs	r3, #20
 8010472:	e0d9      	b.n	8010628 <_ux_hcd_stm32_endpoint_create+0x294>
    }

    /* Check for interrupt and isochronous endpoints.  */
    if ((endpoint_type == EP_TYPE_INTR) || (endpoint_type == EP_TYPE_ISOC))
 8010474:	69fb      	ldr	r3, [r7, #28]
 8010476:	2b03      	cmp	r3, #3
 8010478:	d002      	beq.n	8010480 <_ux_hcd_stm32_endpoint_create+0xec>
 801047a:	69fb      	ldr	r3, [r7, #28]
 801047c:	2b01      	cmp	r3, #1
 801047e:	d169      	bne.n	8010554 <_ux_hcd_stm32_endpoint_create+0x1c0>
    {
      if (device_speed == HCD_DEVICE_SPEED_HIGH)
 8010480:	6a3b      	ldr	r3, [r7, #32]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d118      	bne.n	80104b8 <_ux_hcd_stm32_endpoint_create+0x124>
      {
        if ((device->ux_device_current_configuration->ux_configuration_first_interface->ux_interface_descriptor.bInterfaceClass == 0x9U) &&
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	699b      	ldr	r3, [r3, #24]
 801048a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801048c:	6a1b      	ldr	r3, [r3, #32]
 801048e:	2b09      	cmp	r3, #9
 8010490:	d106      	bne.n	80104a0 <_ux_hcd_stm32_endpoint_create+0x10c>
            (endpoint -> ux_endpoint_descriptor.bInterval > 9U))
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	6a1b      	ldr	r3, [r3, #32]
        if ((device->ux_device_current_configuration->ux_configuration_first_interface->ux_interface_descriptor.bInterfaceClass == 0x9U) &&
 8010496:	2b09      	cmp	r3, #9
 8010498:	d902      	bls.n	80104a0 <_ux_hcd_stm32_endpoint_create+0x10c>
        {
          /* Some hubs has an issue with larger binterval scheduling */
            endpoint_bInterval = UX_HCD_STM32_MAX_HUB_BINTERVAL;
 801049a:	2308      	movs	r3, #8
 801049c:	61bb      	str	r3, [r7, #24]
 801049e:	e002      	b.n	80104a6 <_ux_hcd_stm32_endpoint_create+0x112>
        }
        else
        {
          endpoint_bInterval = endpoint -> ux_endpoint_descriptor.bInterval;
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	6a1b      	ldr	r3, [r3, #32]
 80104a4:	61bb      	str	r3, [r7, #24]
        }

        /* Set the interval mask for high speed or isochronous endpoints.  */
        ed -> ux_stm32_ed_interval_mask = (1 << (endpoint_bInterval - 1U)) - 1U;
 80104a6:	69bb      	ldr	r3, [r7, #24]
 80104a8:	3b01      	subs	r3, #1
 80104aa:	2201      	movs	r2, #1
 80104ac:	fa02 f303 	lsl.w	r3, r2, r3
 80104b0:	1e5a      	subs	r2, r3, #1
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	61da      	str	r2, [r3, #28]
 80104b6:	e030      	b.n	801051a <_ux_hcd_stm32_endpoint_create+0x186>
      }
      else
      {

        /* Set the interval mask for other endpoints.  */
        ed -> ux_stm32_ed_interval_mask = endpoint -> ux_endpoint_descriptor.bInterval;
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	6a1a      	ldr	r2, [r3, #32]
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	61da      	str	r2, [r3, #28]

        if (device->ux_device_parent != NULL)
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d00a      	beq.n	80104e0 <_ux_hcd_stm32_endpoint_create+0x14c>
        {
          if (device->ux_device_parent->ux_device_speed == UX_HIGH_SPEED_DEVICE)
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80104d0:	691b      	ldr	r3, [r3, #16]
 80104d2:	2b02      	cmp	r3, #2
 80104d4:	d104      	bne.n	80104e0 <_ux_hcd_stm32_endpoint_create+0x14c>
          {
            ed -> ux_stm32_ed_interval_mask <<= 3U;
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	69db      	ldr	r3, [r3, #28]
 80104da:	00da      	lsls	r2, r3, #3
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	61da      	str	r2, [r3, #28]
          }
        }

        ed -> ux_stm32_ed_interval_mask |= ed -> ux_stm32_ed_interval_mask >> 1;
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	69da      	ldr	r2, [r3, #28]
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	69db      	ldr	r3, [r3, #28]
 80104e8:	085b      	lsrs	r3, r3, #1
 80104ea:	431a      	orrs	r2, r3
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	61da      	str	r2, [r3, #28]
        ed -> ux_stm32_ed_interval_mask |= ed -> ux_stm32_ed_interval_mask >> 2;
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	69da      	ldr	r2, [r3, #28]
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	69db      	ldr	r3, [r3, #28]
 80104f8:	089b      	lsrs	r3, r3, #2
 80104fa:	431a      	orrs	r2, r3
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	61da      	str	r2, [r3, #28]
        ed -> ux_stm32_ed_interval_mask |= ed -> ux_stm32_ed_interval_mask >> 4;
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	69da      	ldr	r2, [r3, #28]
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	69db      	ldr	r3, [r3, #28]
 8010508:	091b      	lsrs	r3, r3, #4
 801050a:	431a      	orrs	r2, r3
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	61da      	str	r2, [r3, #28]
        ed -> ux_stm32_ed_interval_mask >>= 1;
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	69db      	ldr	r3, [r3, #28]
 8010514:	085a      	lsrs	r2, r3, #1
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	61da      	str	r2, [r3, #28]
      }

        /* Select a transfer time slot with least traffic.  */
        if (ed -> ux_stm32_ed_interval_mask == 0)
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	69db      	ldr	r3, [r3, #28]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d103      	bne.n	801052a <_ux_hcd_stm32_endpoint_create+0x196>
            ed -> ux_stm32_ed_interval_position = 0;
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	2200      	movs	r2, #0
 8010526:	621a      	str	r2, [r3, #32]
 8010528:	e005      	b.n	8010536 <_ux_hcd_stm32_endpoint_create+0x1a2>
        else
        ed -> ux_stm32_ed_interval_position =  _ux_hcd_stm32_least_traffic_list_get(hcd_stm32);
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f000 fa60 	bl	80109f0 <_ux_hcd_stm32_least_traffic_list_get>
 8010530:	4602      	mov	r2, r0
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	621a      	str	r2, [r3, #32]

        /* No transfer on going.  */
        ed -> ux_stm32_ed_transfer_request = UX_NULL;
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	2200      	movs	r2, #0
 801053a:	609a      	str	r2, [r3, #8]

        /* Attach the ed to periodic ed list.  */
        ed -> ux_stm32_ed_next_ed = hcd_stm32 -> ux_hcd_stm32_periodic_ed_head;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	601a      	str	r2, [r3, #0]
        hcd_stm32 -> ux_hcd_stm32_periodic_ed_head = ed;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	693a      	ldr	r2, [r7, #16]
 8010548:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Activate periodic scheduler.  */
        hcd_stm32 -> ux_hcd_stm32_periodic_scheduler_active ++;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801054e:	1c5a      	adds	r2, r3, #1
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Attach the ED to the endpoint container.  */
    endpoint -> ux_endpoint_ed =  (VOID *) ed;
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	693a      	ldr	r2, [r7, #16]
 8010558:	609a      	str	r2, [r3, #8]

    /* Now do the opposite, attach the ED container to the physical ED.  */
    ed -> ux_stm32_ed_endpoint =  endpoint;
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	683a      	ldr	r2, [r7, #0]
 801055e:	605a      	str	r2, [r3, #4]
    ed -> ux_stm32_ed_speed = (UCHAR)device_speed;
 8010560:	6a3b      	ldr	r3, [r7, #32]
 8010562:	b2da      	uxtb	r2, r3
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    ed -> ux_stm32_ed_dir = (endpoint -> ux_endpoint_descriptor.bEndpointAddress & 0x80) ? 1 : 0;
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	695b      	ldr	r3, [r3, #20]
 801056e:	09db      	lsrs	r3, r3, #7
 8010570:	b2db      	uxtb	r3, r3
 8010572:	f003 0301 	and.w	r3, r3, #1
 8010576:	b2da      	uxtb	r2, r3
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    ed -> ux_stm32_ed_type     =  endpoint_type;
 801057e:	69fb      	ldr	r3, [r7, #28]
 8010580:	b2da      	uxtb	r2, r3
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    packet_size                =  endpoint -> ux_endpoint_descriptor.wMaxPacketSize & UX_MAX_PACKET_SIZE_MASK;
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	69db      	ldr	r3, [r3, #28]
 801058c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010590:	60fb      	str	r3, [r7, #12]
    if (endpoint -> ux_endpoint_descriptor.wMaxPacketSize & UX_MAX_NUMBER_OF_TRANSACTIONS_MASK)
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	69db      	ldr	r3, [r3, #28]
 8010596:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 801059a:	2b00      	cmp	r3, #0
 801059c:	d005      	beq.n	80105aa <_ux_hcd_stm32_endpoint_create+0x216>
    {

        /* Free the ED.  */
        ed -> ux_stm32_ed_status =  UX_HCD_STM32_ED_STATUS_FREE;
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	2200      	movs	r2, #0
 80105a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

        /* High bandwidth are not supported for now.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 80105a6:	2354      	movs	r3, #84	; 0x54
 80105a8:	e03e      	b.n	8010628 <_ux_hcd_stm32_endpoint_create+0x294>
    }

    /* By default scheduler is not needed.  */
    ed -> ux_stm32_ed_sch_mode = 0;
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	2200      	movs	r2, #0
 80105ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* By default data pointer is not used.  */
    ed -> ux_stm32_ed_data = UX_NULL;
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	2200      	movs	r2, #0
 80105b6:	611a      	str	r2, [r3, #16]

    /* Call HAL to initialize the host channel.  */
    HAL_HCD_HC_Init(hcd_stm32->hcd_handle,
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80105bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105be:	b2dc      	uxtb	r4, r3
                    channel_index,
                    endpoint -> ux_endpoint_descriptor.bEndpointAddress,
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	695b      	ldr	r3, [r3, #20]
    HAL_HCD_HC_Init(hcd_stm32->hcd_handle,
 80105c4:	b2dd      	uxtb	r5, r3
                    device -> ux_device_address,
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	68db      	ldr	r3, [r3, #12]
    HAL_HCD_HC_Init(hcd_stm32->hcd_handle,
 80105ca:	b2de      	uxtb	r6, r3
 80105cc:	6a3b      	ldr	r3, [r7, #32]
 80105ce:	b2db      	uxtb	r3, r3
 80105d0:	69fa      	ldr	r2, [r7, #28]
 80105d2:	b2d2      	uxtb	r2, r2
                    device_speed,
                    endpoint_type,
                    endpoint -> ux_endpoint_descriptor.wMaxPacketSize);
 80105d4:	6839      	ldr	r1, [r7, #0]
 80105d6:	69c9      	ldr	r1, [r1, #28]
    HAL_HCD_HC_Init(hcd_stm32->hcd_handle,
 80105d8:	b289      	uxth	r1, r1
 80105da:	9102      	str	r1, [sp, #8]
 80105dc:	9201      	str	r2, [sp, #4]
 80105de:	9300      	str	r3, [sp, #0]
 80105e0:	4633      	mov	r3, r6
 80105e2:	462a      	mov	r2, r5
 80105e4:	4621      	mov	r1, r4
 80105e6:	f7f1 f998 	bl	800191a <HAL_HCD_HC_Init>

    /* Reset toggles.  */
    hcd_stm32 -> hcd_handle -> hc[ed -> ux_stm32_ed_channel].toggle_in = 0;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80105f4:	4619      	mov	r1, r3
 80105f6:	232c      	movs	r3, #44	; 0x2c
 80105f8:	fb01 f303 	mul.w	r3, r1, r3
 80105fc:	4413      	add	r3, r2
 80105fe:	3354      	adds	r3, #84	; 0x54
 8010600:	2200      	movs	r2, #0
 8010602:	701a      	strb	r2, [r3, #0]
    hcd_stm32 -> hcd_handle -> hc[ed -> ux_stm32_ed_channel].toggle_out = 0;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801060e:	4619      	mov	r1, r3
 8010610:	232c      	movs	r3, #44	; 0x2c
 8010612:	fb01 f303 	mul.w	r3, r1, r3
 8010616:	4413      	add	r3, r2
 8010618:	3355      	adds	r3, #85	; 0x55
 801061a:	2200      	movs	r2, #0
 801061c:	701a      	strb	r2, [r3, #0]
    }
#endif /* USBH_HAL_HUB_SPLIT_SUPPORTED */

    /* We need to take into account the nature of the HCD to define the max size
       of any transfer in the transfer request.  */
    endpoint -> ux_endpoint_transfer_request.ux_transfer_request_maximum_length =  UX_HCD_STM32_MAX_PACKET_COUNT * packet_size;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	021a      	lsls	r2, r3, #8
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8010626:	2300      	movs	r3, #0
}
 8010628:	4618      	mov	r0, r3
 801062a:	372c      	adds	r7, #44	; 0x2c
 801062c:	46bd      	mov	sp, r7
 801062e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010630 <_ux_hcd_stm32_endpoint_destroy>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_endpoint_destroy(UX_HCD_STM32 *hcd_stm32, UX_ENDPOINT *endpoint)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b086      	sub	sp, #24
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	6039      	str	r1, [r7, #0]
UX_HCD_STM32_ED       *ed;
UX_HCD_STM32_ED       *next_ed;
UINT                   endpoint_type;

    /* From the endpoint container fetch the STM32 ED descriptor.  */
    ed =  (UX_HCD_STM32_ED *) endpoint -> ux_endpoint_ed;
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	689b      	ldr	r3, [r3, #8]
 801063e:	613b      	str	r3, [r7, #16]

    /* Check if this physical endpoint has been initialized properly!  */
    if (ed == UX_NULL)
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d106      	bne.n	8010654 <_ux_hcd_stm32_endpoint_destroy+0x24>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_HCD, UX_ENDPOINT_HANDLE_UNKNOWN);
 8010646:	2253      	movs	r2, #83	; 0x53
 8010648:	2101      	movs	r1, #1
 801064a:	2002      	movs	r0, #2
 801064c:	f7fe f8d4 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_ENDPOINT_HANDLE_UNKNOWN, endpoint, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_ENDPOINT_HANDLE_UNKNOWN);
 8010650:	2353      	movs	r3, #83	; 0x53
 8010652:	e045      	b.n	80106e0 <_ux_hcd_stm32_endpoint_destroy+0xb0>
    /* There is no background thread, just remove the ED from processing list.  */
    UX_DISABLE
#else

    /* Wait for the controller to finish the current frame processing.  */
    _ux_utility_delay_ms(1);
 8010654:	2001      	movs	r0, #1
 8010656:	f7fe f9a3 	bl	800e9a0 <_ux_utility_delay_ms>
#endif /* defined(UX_HOST_STANDALONE) */

    /* We need to free the channel.  */
    hcd_stm32 -> ux_hcd_stm32_channels_ed[ed -> ux_stm32_ed_channel] =  UX_NULL;
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010660:	461a      	mov	r2, r3
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	3202      	adds	r2, #2
 8010666:	2100      	movs	r1, #0
 8010668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Get endpoint type.  */
    endpoint_type = (endpoint -> ux_endpoint_descriptor.bmAttributes) & UX_MASK_ENDPOINT_TYPE;
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	699b      	ldr	r3, [r3, #24]
 8010670:	f003 0303 	and.w	r3, r3, #3
 8010674:	60fb      	str	r3, [r7, #12]

    /* Check for periodic endpoints.  */
    if ((endpoint_type == UX_INTERRUPT_ENDPOINT) || (endpoint_type == UX_ISOCHRONOUS_ENDPOINT))
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	2b03      	cmp	r3, #3
 801067a:	d002      	beq.n	8010682 <_ux_hcd_stm32_endpoint_destroy+0x52>
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	2b01      	cmp	r3, #1
 8010680:	d125      	bne.n	80106ce <_ux_hcd_stm32_endpoint_destroy+0x9e>
    {

        /* Remove the ED from periodic ED list.  */
        if (hcd_stm32 -> ux_hcd_stm32_periodic_ed_head == ed)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010686:	693a      	ldr	r2, [r7, #16]
 8010688:	429a      	cmp	r2, r3
 801068a:	d104      	bne.n	8010696 <_ux_hcd_stm32_endpoint_destroy+0x66>
        {

            /* The head one in the list, just set the pointer to it's next.  */
            hcd_stm32 -> ux_hcd_stm32_periodic_ed_head = ed -> ux_stm32_ed_next_ed;
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	65da      	str	r2, [r3, #92]	; 0x5c
 8010694:	e016      	b.n	80106c4 <_ux_hcd_stm32_endpoint_destroy+0x94>
        }
        else
        {

            /* Get the first ED in the list.  */
            next_ed = hcd_stm32 -> ux_hcd_stm32_periodic_ed_head;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801069a:	617b      	str	r3, [r7, #20]

            /* Search for the ED in the list.  */
            while( (next_ed != UX_NULL) && (next_ed -> ux_stm32_ed_next_ed != ed) )
 801069c:	e002      	b.n	80106a4 <_ux_hcd_stm32_endpoint_destroy+0x74>
            {

                /* Move to next ED.  */
                next_ed = next_ed -> ux_stm32_ed_next_ed;
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	617b      	str	r3, [r7, #20]
            while( (next_ed != UX_NULL) && (next_ed -> ux_stm32_ed_next_ed != ed) )
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d004      	beq.n	80106b4 <_ux_hcd_stm32_endpoint_destroy+0x84>
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	693a      	ldr	r2, [r7, #16]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d1f4      	bne.n	801069e <_ux_hcd_stm32_endpoint_destroy+0x6e>
            }

            /* Check if we found the ED.  */
            if (next_ed)
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d004      	beq.n	80106c4 <_ux_hcd_stm32_endpoint_destroy+0x94>
            {

                /* Remove the ED from list.  */
                next_ed -> ux_stm32_ed_next_ed = next_ed -> ux_stm32_ed_next_ed -> ux_stm32_ed_next_ed;
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	681a      	ldr	r2, [r3, #0]
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Decrease the periodic active count.  */
        hcd_stm32 -> ux_hcd_stm32_periodic_scheduler_active --;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106c8:	1e5a      	subs	r2, r3, #1
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Now we can safely make the ED free.  */
    ed -> ux_stm32_ed_status =  UX_HCD_STM32_ED_STATUS_FREE;
 80106ce:	693b      	ldr	r3, [r7, #16]
 80106d0:	2200      	movs	r2, #0
 80106d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if defined (USBH_HAL_HUB_SPLIT_SUPPORTED)
    HAL_HCD_HC_ClearHubInfo(hcd_stm32->hcd_handle, ed -> ux_stm32_ed_channel);
#endif /* USBH_HAL_HUB_SPLIT_SUPPORTED */

    /* Finish current transfer.  */
    _ux_hcd_stm32_request_trans_finish(hcd_stm32, ed);
 80106d6:	6939      	ldr	r1, [r7, #16]
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f000 fd7e 	bl	80111da <_ux_hcd_stm32_request_trans_finish>

    UX_RESTORE
#endif /* defined(UX_HOST_STANDALONE) */

    /* Return successful completion.  */
    return(UX_SUCCESS);
 80106de:	2300      	movs	r3, #0
}
 80106e0:	4618      	mov	r0, r3
 80106e2:	3718      	adds	r7, #24
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}

080106e8 <_ux_hcd_stm32_endpoint_reset>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_endpoint_reset(UX_HCD_STM32 *hcd_stm32, UX_ENDPOINT *endpoint)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b084      	sub	sp, #16
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	6039      	str	r1, [r7, #0]

UX_HCD_STM32_ED       *ed;


    /* From the endpoint container fetch the STM32 ED descriptor.  */
    ed =  (UX_HCD_STM32_ED *) endpoint -> ux_endpoint_ed;
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	689b      	ldr	r3, [r3, #8]
 80106f6:	60fb      	str	r3, [r7, #12]

    /* Finish current transfer.  */
    _ux_hcd_stm32_request_trans_finish(hcd_stm32, ed);
 80106f8:	68f9      	ldr	r1, [r7, #12]
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f000 fd6d 	bl	80111da <_ux_hcd_stm32_request_trans_finish>

    /* Reset the data0/data1 toggle bit.  */
    hcd_stm32 -> hcd_handle -> hc[ed -> ux_stm32_ed_channel].toggle_in = 0;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801070a:	4619      	mov	r1, r3
 801070c:	232c      	movs	r3, #44	; 0x2c
 801070e:	fb01 f303 	mul.w	r3, r1, r3
 8010712:	4413      	add	r3, r2
 8010714:	3354      	adds	r3, #84	; 0x54
 8010716:	2200      	movs	r2, #0
 8010718:	701a      	strb	r2, [r3, #0]
    hcd_stm32 -> hcd_handle -> hc[ed -> ux_stm32_ed_channel].toggle_out = 0;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010724:	4619      	mov	r1, r3
 8010726:	232c      	movs	r3, #44	; 0x2c
 8010728:	fb01 f303 	mul.w	r3, r1, r3
 801072c:	4413      	add	r3, r2
 801072e:	3355      	adds	r3, #85	; 0x55
 8010730:	2200      	movs	r2, #0
 8010732:	701a      	strb	r2, [r3, #0]

    /* This operation never fails.  */
    return(UX_SUCCESS);
 8010734:	2300      	movs	r3, #0
}
 8010736:	4618      	mov	r0, r3
 8010738:	3710      	adds	r7, #16
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
	...

08010740 <_ux_hcd_stm32_entry>:
/*                                            refined macros names,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_entry(UX_HCD *hcd, UINT function, VOID *parameter)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b08a      	sub	sp, #40	; 0x28
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	607a      	str	r2, [r7, #4]
UX_HCD_STM32       *hcd_stm32;
UX_INTERRUPT_SAVE_AREA


    /* Check the status of the controller.  */
    if (hcd -> ux_hcd_status == UX_UNUSED)
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010750:	2b00      	cmp	r3, #0
 8010752:	d106      	bne.n	8010762 <_ux_hcd_stm32_entry+0x22>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_HCD, UX_CONTROLLER_UNKNOWN);
 8010754:	2255      	movs	r2, #85	; 0x55
 8010756:	2101      	movs	r1, #1
 8010758:	2002      	movs	r0, #2
 801075a:	f7fe f84d 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 801075e:	2355      	movs	r3, #85	; 0x55
 8010760:	e0c0      	b.n	80108e4 <_ux_hcd_stm32_entry+0x1a4>
    }

    /* Get the pointer to the STM32 HCD.  */
    hcd_stm32 =  (UX_HCD_STM32 *) hcd -> ux_hcd_controller_hardware;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010766:	623b      	str	r3, [r7, #32]

    /* look at the function and route it.  */
    switch(function)
 8010768:	68bb      	ldr	r3, [r7, #8]
 801076a:	3b01      	subs	r3, #1
 801076c:	2b11      	cmp	r3, #17
 801076e:	f200 80b0 	bhi.w	80108d2 <_ux_hcd_stm32_entry+0x192>
 8010772:	a201      	add	r2, pc, #4	; (adr r2, 8010778 <_ux_hcd_stm32_entry+0x38>)
 8010774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010778:	080107c1 	.word	0x080107c1
 801077c:	080107cb 	.word	0x080107cb
 8010780:	080107d9 	.word	0x080107d9
 8010784:	080107e7 	.word	0x080107e7
 8010788:	080107f5 	.word	0x080107f5
 801078c:	08010803 	.word	0x08010803
 8010790:	08010811 	.word	0x08010811
 8010794:	0801081f 	.word	0x0801081f
 8010798:	0801082d 	.word	0x0801082d
 801079c:	0801083b 	.word	0x0801083b
 80107a0:	080108d3 	.word	0x080108d3
 80107a4:	08010847 	.word	0x08010847
 80107a8:	08010853 	.word	0x08010853
 80107ac:	0801085f 	.word	0x0801085f
 80107b0:	0801086b 	.word	0x0801086b
 80107b4:	08010877 	.word	0x08010877
 80107b8:	08010883 	.word	0x08010883
 80107bc:	080108b7 	.word	0x080108b7
    {

    case UX_HCD_DISABLE_CONTROLLER:

        status =  _ux_hcd_stm32_controller_disable(hcd_stm32);
 80107c0:	6a38      	ldr	r0, [r7, #32]
 80107c2:	f7ff fda3 	bl	801030c <_ux_hcd_stm32_controller_disable>
 80107c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80107c8:	e08b      	b.n	80108e2 <_ux_hcd_stm32_entry+0x1a2>


    case UX_HCD_GET_PORT_STATUS:

        status =  _ux_hcd_stm32_port_status_get(hcd_stm32, (ULONG) parameter);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	4619      	mov	r1, r3
 80107ce:	6a38      	ldr	r0, [r7, #32]
 80107d0:	f000 f9fc 	bl	8010bcc <_ux_hcd_stm32_port_status_get>
 80107d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80107d6:	e084      	b.n	80108e2 <_ux_hcd_stm32_entry+0x1a2>


    case UX_HCD_ENABLE_PORT:

        status =  _ux_hcd_stm32_port_enable(hcd_stm32, (ULONG) parameter);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	4619      	mov	r1, r3
 80107dc:	6a38      	ldr	r0, [r7, #32]
 80107de:	f000 f9b7 	bl	8010b50 <_ux_hcd_stm32_port_enable>
 80107e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80107e4:	e07d      	b.n	80108e2 <_ux_hcd_stm32_entry+0x1a2>


    case UX_HCD_DISABLE_PORT:

        status =  _ux_hcd_stm32_port_disable(hcd_stm32, (ULONG) parameter);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	4619      	mov	r1, r3
 80107ea:	6a38      	ldr	r0, [r7, #32]
 80107ec:	f000 f9a4 	bl	8010b38 <_ux_hcd_stm32_port_disable>
 80107f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80107f2:	e076      	b.n	80108e2 <_ux_hcd_stm32_entry+0x1a2>


    case UX_HCD_POWER_ON_PORT:

        status =  _ux_hcd_stm32_power_on_port(hcd_stm32, (ULONG) parameter);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	4619      	mov	r1, r3
 80107f8:	6a38      	ldr	r0, [r7, #32]
 80107fa:	f000 fa3e 	bl	8010c7a <_ux_hcd_stm32_power_on_port>
 80107fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010800:	e06f      	b.n	80108e2 <_ux_hcd_stm32_entry+0x1a2>


    case UX_HCD_POWER_DOWN_PORT:

        status =  _ux_hcd_stm32_power_down_port(hcd_stm32, (ULONG) parameter);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	4619      	mov	r1, r3
 8010806:	6a38      	ldr	r0, [r7, #32]
 8010808:	f000 fa2b 	bl	8010c62 <_ux_hcd_stm32_power_down_port>
 801080c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801080e:	e068      	b.n	80108e2 <_ux_hcd_stm32_entry+0x1a2>


    case UX_HCD_SUSPEND_PORT:

        status =  _ux_hcd_stm32_port_suspend(hcd_stm32, (ULONG) parameter);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	4619      	mov	r1, r3
 8010814:	6a38      	ldr	r0, [r7, #32]
 8010816:	f000 fa18 	bl	8010c4a <_ux_hcd_stm32_port_suspend>
 801081a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801081c:	e061      	b.n	80108e2 <_ux_hcd_stm32_entry+0x1a2>


    case UX_HCD_RESUME_PORT:

        status =  _ux_hcd_stm32_port_resume(hcd_stm32, (UINT) parameter);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	4619      	mov	r1, r3
 8010822:	6a38      	ldr	r0, [r7, #32]
 8010824:	f000 f9c6 	bl	8010bb4 <_ux_hcd_stm32_port_resume>
 8010828:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801082a:	e05a      	b.n	80108e2 <_ux_hcd_stm32_entry+0x1a2>


    case UX_HCD_RESET_PORT:

        status =  _ux_hcd_stm32_port_reset(hcd_stm32, (ULONG) parameter);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	4619      	mov	r1, r3
 8010830:	6a38      	ldr	r0, [r7, #32]
 8010832:	f000 f999 	bl	8010b68 <_ux_hcd_stm32_port_reset>
 8010836:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010838:	e053      	b.n	80108e2 <_ux_hcd_stm32_entry+0x1a2>


    case UX_HCD_GET_FRAME_NUMBER:

        status =  _ux_hcd_stm32_frame_number_get(hcd_stm32, (ULONG *) parameter);
 801083a:	6879      	ldr	r1, [r7, #4]
 801083c:	6a38      	ldr	r0, [r7, #32]
 801083e:	f000 f855 	bl	80108ec <_ux_hcd_stm32_frame_number_get>
 8010842:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010844:	e04d      	b.n	80108e2 <_ux_hcd_stm32_entry+0x1a2>


    case UX_HCD_TRANSFER_REQUEST:

        status =  _ux_hcd_stm32_request_transfer(hcd_stm32, (UX_TRANSFER *) parameter);
 8010846:	6879      	ldr	r1, [r7, #4]
 8010848:	6a38      	ldr	r0, [r7, #32]
 801084a:	f000 fd3f 	bl	80112cc <_ux_hcd_stm32_request_transfer>
 801084e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010850:	e047      	b.n	80108e2 <_ux_hcd_stm32_entry+0x1a2>


    case UX_HCD_TRANSFER_ABORT:

        status =  _ux_hcd_stm32_transfer_abort(hcd_stm32, (UX_TRANSFER *) parameter);
 8010852:	6879      	ldr	r1, [r7, #4]
 8010854:	6a38      	ldr	r0, [r7, #32]
 8010856:	f000 fd7d 	bl	8011354 <_ux_hcd_stm32_transfer_abort>
 801085a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801085c:	e041      	b.n	80108e2 <_ux_hcd_stm32_entry+0x1a2>


    case UX_HCD_CREATE_ENDPOINT:

        status =  _ux_hcd_stm32_endpoint_create(hcd_stm32, (UX_ENDPOINT*) parameter);
 801085e:	6879      	ldr	r1, [r7, #4]
 8010860:	6a38      	ldr	r0, [r7, #32]
 8010862:	f7ff fd97 	bl	8010394 <_ux_hcd_stm32_endpoint_create>
 8010866:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010868:	e03b      	b.n	80108e2 <_ux_hcd_stm32_entry+0x1a2>

    case UX_HCD_DESTROY_ENDPOINT:

        status =  _ux_hcd_stm32_endpoint_destroy(hcd_stm32, (UX_ENDPOINT*) parameter);
 801086a:	6879      	ldr	r1, [r7, #4]
 801086c:	6a38      	ldr	r0, [r7, #32]
 801086e:	f7ff fedf 	bl	8010630 <_ux_hcd_stm32_endpoint_destroy>
 8010872:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010874:	e035      	b.n	80108e2 <_ux_hcd_stm32_entry+0x1a2>

    case UX_HCD_RESET_ENDPOINT:

        status =  _ux_hcd_stm32_endpoint_reset(hcd_stm32, (UX_ENDPOINT*) parameter);
 8010876:	6879      	ldr	r1, [r7, #4]
 8010878:	6a38      	ldr	r0, [r7, #32]
 801087a:	f7ff ff35 	bl	80106e8 <_ux_hcd_stm32_endpoint_reset>
 801087e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010880:	e02f      	b.n	80108e2 <_ux_hcd_stm32_entry+0x1a2>

    case UX_HCD_PROCESS_DONE_QUEUE:

        /* Process periodic queue.  */
        _ux_hcd_stm32_periodic_schedule(hcd_stm32);
 8010882:	6a38      	ldr	r0, [r7, #32]
 8010884:	f000 f8ef 	bl	8010a66 <_ux_hcd_stm32_periodic_schedule>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010888:	f3ef 8310 	mrs	r3, PRIMASK
 801088c:	617b      	str	r3, [r7, #20]
    return(posture);
 801088e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010890:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010892:	b672      	cpsid	i
    return(int_posture);
 8010894:	693b      	ldr	r3, [r7, #16]

        /* Reset the SOF flag.  */
        UX_DISABLE
 8010896:	61fb      	str	r3, [r7, #28]
        hcd_stm32 -> ux_hcd_stm32_controller_flag &= ~UX_HCD_STM32_CONTROLLER_FLAG_SOF;
 8010898:	6a3b      	ldr	r3, [r7, #32]
 801089a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801089c:	f023 0204 	bic.w	r2, r3, #4
 80108a0:	6a3b      	ldr	r3, [r7, #32]
 80108a2:	655a      	str	r2, [r3, #84]	; 0x54
 80108a4:	69fb      	ldr	r3, [r7, #28]
 80108a6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80108a8:	69bb      	ldr	r3, [r7, #24]
 80108aa:	f383 8810 	msr	PRIMASK, r3
}
 80108ae:	bf00      	nop
        UX_RESTORE

        status =  UX_SUCCESS;
 80108b0:	2300      	movs	r3, #0
 80108b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80108b4:	e015      	b.n	80108e2 <_ux_hcd_stm32_entry+0x1a2>

    case UX_HCD_UNINITIALIZE:

        /* free HCD resources */
        if (hcd_stm32 != UX_NULL)
 80108b6:	6a3b      	ldr	r3, [r7, #32]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d007      	beq.n	80108cc <_ux_hcd_stm32_entry+0x18c>
        {
          _ux_utility_memory_free(hcd_stm32 -> ux_hcd_stm32_ed_list);
 80108bc:	6a3b      	ldr	r3, [r7, #32]
 80108be:	685b      	ldr	r3, [r3, #4]
 80108c0:	4618      	mov	r0, r3
 80108c2:	f7fe fa3b 	bl	800ed3c <_ux_utility_memory_free>
          _ux_utility_memory_free(hcd_stm32);
 80108c6:	6a38      	ldr	r0, [r7, #32]
 80108c8:	f7fe fa38 	bl	800ed3c <_ux_utility_memory_free>
        }

        status =  UX_SUCCESS;
 80108cc:	2300      	movs	r3, #0
 80108ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80108d0:	e007      	b.n	80108e2 <_ux_hcd_stm32_entry+0x1a2>

    default:

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_HCD, UX_FUNCTION_NOT_SUPPORTED);
 80108d2:	2254      	movs	r2, #84	; 0x54
 80108d4:	2101      	movs	r1, #1
 80108d6:	2002      	movs	r0, #2
 80108d8:	f7fd ff8e 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Unknown request, return an error.  */
        status =  UX_FUNCTION_NOT_SUPPORTED;
 80108dc:	2354      	movs	r3, #84	; 0x54
 80108de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80108e0:	bf00      	nop

    }

    /* Return completion status.  */
    return(status);
 80108e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80108e4:	4618      	mov	r0, r3
 80108e6:	3728      	adds	r7, #40	; 0x28
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}

080108ec <_ux_hcd_stm32_frame_number_get>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_frame_number_get(UX_HCD_STM32 *hcd_stm32, ULONG *frame_number)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]

    /* Call HAL to get the frame number.  */
    *frame_number = (ULONG)HAL_HCD_GetCurrentFrame(hcd_stm32 -> hcd_handle);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7f1 fb7e 	bl	8001ffc <HAL_HCD_GetCurrentFrame>
 8010900:	4602      	mov	r2, r0
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS);
 8010906:	2300      	movs	r3, #0
}
 8010908:	4618      	mov	r0, r3
 801090a:	3708      	adds	r7, #8
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}

08010910 <_ux_hcd_stm32_initialize>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_initialize(UX_HCD *hcd)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b084      	sub	sp, #16
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]

UX_HCD_STM32          *hcd_stm32;


    /* The controller initialized here is of STM32 type.  */
    hcd -> ux_hcd_controller_type =  UX_HCD_STM32_CONTROLLER;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2206      	movs	r2, #6
 801091c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the max bandwidth for periodic endpoints. On STM32, the spec says
       no more than 90% to be allocated for periodic.  */
#if UX_MAX_DEVICES > 1
    hcd -> ux_hcd_available_bandwidth =  UX_HCD_STM32_AVAILABLE_BANDWIDTH;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f241 7270 	movw	r2, #6000	; 0x1770
 8010924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif

    /* Allocate memory for this STM32 HCD instance.  */
    hcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_HCD_STM32));
 8010928:	2260      	movs	r2, #96	; 0x60
 801092a:	2100      	movs	r1, #0
 801092c:	2000      	movs	r0, #0
 801092e:	f7fe f8e3 	bl	800eaf8 <_ux_utility_memory_allocate>
 8010932:	60f8      	str	r0, [r7, #12]
    if (hcd_stm32 == UX_NULL)
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d101      	bne.n	801093e <_ux_hcd_stm32_initialize+0x2e>
        return(UX_MEMORY_INSUFFICIENT);
 801093a:	2312      	movs	r3, #18
 801093c:	e04f      	b.n	80109de <_ux_hcd_stm32_initialize+0xce>

    /* Set the pointer to the STM32 HCD.  */
    hcd -> ux_hcd_controller_hardware =  (VOID *) hcd_stm32;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	68fa      	ldr	r2, [r7, #12]
 8010942:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the generic HCD owner for the STM32 HCD.  */
    hcd_stm32 -> ux_hcd_stm32_hcd_owner =  hcd;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	687a      	ldr	r2, [r7, #4]
 8010948:	601a      	str	r2, [r3, #0]

    /* Initialize the function collector for this HCD.  */
    hcd -> ux_hcd_entry_function =  _ux_hcd_stm32_entry;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	4a26      	ldr	r2, [pc, #152]	; (80109e8 <_ux_hcd_stm32_initialize+0xd8>)
 801094e:	671a      	str	r2, [r3, #112]	; 0x70

    /* Set the state of the controller to HALTED first.  */
    hcd -> ux_hcd_status =  UX_HCD_STATUS_HALTED;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2201      	movs	r2, #1
 8010954:	641a      	str	r2, [r3, #64]	; 0x40

    /* Initialize the number of channels.  */
    hcd_stm32 -> ux_hcd_stm32_nb_channels =  UX_HCD_STM32_MAX_NB_CHANNELS;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	2210      	movs	r2, #16
 801095a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the parameter is null.  */
    if (hcd -> ux_hcd_irq == 0)
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010960:	2b00      	cmp	r3, #0
 8010962:	d104      	bne.n	801096e <_ux_hcd_stm32_initialize+0x5e>
    {
        _ux_utility_memory_free(hcd_stm32);
 8010964:	68f8      	ldr	r0, [r7, #12]
 8010966:	f7fe f9e9 	bl	800ed3c <_ux_utility_memory_free>
        return(UX_ERROR);
 801096a:	23ff      	movs	r3, #255	; 0xff
 801096c:	e037      	b.n	80109de <_ux_hcd_stm32_initialize+0xce>
    }

    /* Get HCD handle from parameter.  */
    hcd_stm32 -> hcd_handle = (HCD_HandleTypeDef*)hcd -> ux_hcd_irq;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010972:	461a      	mov	r2, r3
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	659a      	str	r2, [r3, #88]	; 0x58
    hcd_stm32 -> hcd_handle -> pData = hcd;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801097c:	687a      	ldr	r2, [r7, #4]
 801097e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

    /* Allocate the list of eds.   */
    hcd_stm32 -> ux_hcd_stm32_ed_list =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_HCD_STM32_ED) *_ux_system_host -> ux_system_host_max_ed);
 8010982:	4b1a      	ldr	r3, [pc, #104]	; (80109ec <_ux_hcd_stm32_initialize+0xdc>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	699a      	ldr	r2, [r3, #24]
 8010988:	4613      	mov	r3, r2
 801098a:	005b      	lsls	r3, r3, #1
 801098c:	4413      	add	r3, r2
 801098e:	011b      	lsls	r3, r3, #4
 8010990:	461a      	mov	r2, r3
 8010992:	2100      	movs	r1, #0
 8010994:	2000      	movs	r0, #0
 8010996:	f7fe f8af 	bl	800eaf8 <_ux_utility_memory_allocate>
 801099a:	4602      	mov	r2, r0
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	605a      	str	r2, [r3, #4]
    if (hcd_stm32 -> ux_hcd_stm32_ed_list == UX_NULL)
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d104      	bne.n	80109b2 <_ux_hcd_stm32_initialize+0xa2>
    {
        _ux_utility_memory_free(hcd_stm32);
 80109a8:	68f8      	ldr	r0, [r7, #12]
 80109aa:	f7fe f9c7 	bl	800ed3c <_ux_utility_memory_free>
        return(UX_MEMORY_INSUFFICIENT);
 80109ae:	2312      	movs	r3, #18
 80109b0:	e015      	b.n	80109de <_ux_hcd_stm32_initialize+0xce>
    }

    /* Since we know this is a high-speed controller, we can hardwire the version.  */
#if UX_MAX_DEVICES > 1
    hcd -> ux_hcd_version =  0x200;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80109b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

    /* The number of ports on the controller is fixed to 1. The number of ports needs to be reflected both
       for the generic HCD container and the local stm32 container.  */
    hcd -> ux_hcd_nb_root_hubs             =  UX_HCD_STM32_NB_ROOT_PORTS;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2201      	movs	r2, #1
 80109c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* The root port must now be powered to pick up device insertion.  */
    _ux_hcd_stm32_power_on_port(hcd_stm32, 0);
 80109c2:	2100      	movs	r1, #0
 80109c4:	68f8      	ldr	r0, [r7, #12]
 80109c6:	f000 f958 	bl	8010c7a <_ux_hcd_stm32_power_on_port>

    /* The asynchronous queues are empty for now.  */
    hcd_stm32 -> ux_hcd_stm32_queue_empty =  UX_TRUE;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	2201      	movs	r2, #1
 80109ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* The periodic scheduler is not active.  */
    hcd_stm32 -> ux_hcd_stm32_periodic_scheduler_active =  0;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	2200      	movs	r2, #0
 80109d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Set the host controller into the operational state.  */
    hcd -> ux_hcd_status =  UX_HCD_STATUS_OPERATIONAL;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	2202      	movs	r2, #2
 80109da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return successful completion.  */
    return(UX_SUCCESS);
 80109dc:	2300      	movs	r3, #0
}
 80109de:	4618      	mov	r0, r3
 80109e0:	3710      	adds	r7, #16
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	08010741 	.word	0x08010741
 80109ec:	2400577c 	.word	0x2400577c

080109f0 <_ux_hcd_stm32_least_traffic_list_get>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_least_traffic_list_get(UX_HCD_STM32 *hcd_stm32)
{
 80109f0:	b480      	push	{r7}
 80109f2:	b089      	sub	sp, #36	; 0x24
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
ULONG               bandwidth_used;
UINT                min_bandwidth_slot;


    /* Set the min bandwidth used to a arbitrary maximum value.  */
    min_bandwidth_used =  0xffffffff;
 80109f8:	f04f 33ff 	mov.w	r3, #4294967295
 80109fc:	617b      	str	r3, [r7, #20]

    /* The first ED is the list candidate for now.  */
    min_bandwidth_slot =  0;
 80109fe:	2300      	movs	r3, #0
 8010a00:	60fb      	str	r3, [r7, #12]

    /* All list will be scanned.  */
    for (list_index = 0; list_index < 32; list_index++)
 8010a02:	2300      	movs	r3, #0
 8010a04:	61bb      	str	r3, [r7, #24]
 8010a06:	e024      	b.n	8010a52 <_ux_hcd_stm32_least_traffic_list_get+0x62>
    {

        /* Reset the bandwidth for this list.  */
        bandwidth_used =  0;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	613b      	str	r3, [r7, #16]

        /* Get the ED of the beginning of the list we parse now.  */
        ed =  hcd_stm32 -> ux_hcd_stm32_periodic_ed_head;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a10:	61fb      	str	r3, [r7, #28]

        /* Parse the eds in the list.  */
        while (ed != UX_NULL)
 8010a12:	e010      	b.n	8010a36 <_ux_hcd_stm32_least_traffic_list_get+0x46>
        {

            if ((list_index & ed -> ux_stm32_ed_interval_mask) == ed -> ux_stm32_ed_interval_position)
 8010a14:	69fb      	ldr	r3, [r7, #28]
 8010a16:	69da      	ldr	r2, [r3, #28]
 8010a18:	69bb      	ldr	r3, [r7, #24]
 8010a1a:	401a      	ands	r2, r3
 8010a1c:	69fb      	ldr	r3, [r7, #28]
 8010a1e:	6a1b      	ldr	r3, [r3, #32]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d105      	bne.n	8010a30 <_ux_hcd_stm32_least_traffic_list_get+0x40>
            {

                /* Add to the bandwidth used the max packet size pointed by this ED.  */
                bandwidth_used +=  (ULONG) ed -> ux_stm32_ed_endpoint -> ux_endpoint_descriptor.wMaxPacketSize;
 8010a24:	69fb      	ldr	r3, [r7, #28]
 8010a26:	685b      	ldr	r3, [r3, #4]
 8010a28:	69db      	ldr	r3, [r3, #28]
 8010a2a:	693a      	ldr	r2, [r7, #16]
 8010a2c:	4413      	add	r3, r2
 8010a2e:	613b      	str	r3, [r7, #16]
            }

            /* Move to next ED.  */
            ed =  ed -> ux_stm32_ed_next_ed;
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	61fb      	str	r3, [r7, #28]
        while (ed != UX_NULL)
 8010a36:	69fb      	ldr	r3, [r7, #28]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d1eb      	bne.n	8010a14 <_ux_hcd_stm32_least_traffic_list_get+0x24>
        }

        /* We have processed a list, check the bandwidth used by this list.
           If this bandwidth is the minimum, we memorize the ED.  */
        if (bandwidth_used < min_bandwidth_used)
 8010a3c:	693a      	ldr	r2, [r7, #16]
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d203      	bcs.n	8010a4c <_ux_hcd_stm32_least_traffic_list_get+0x5c>
        {

            /* We have found a better list with a lower used bandwidth, memorize the bandwidth
               for this list.  */
            min_bandwidth_used =  bandwidth_used;
 8010a44:	693b      	ldr	r3, [r7, #16]
 8010a46:	617b      	str	r3, [r7, #20]

            /* Memorize the begin ED for this list.  */
            min_bandwidth_slot =  list_index;
 8010a48:	69bb      	ldr	r3, [r7, #24]
 8010a4a:	60fb      	str	r3, [r7, #12]
    for (list_index = 0; list_index < 32; list_index++)
 8010a4c:	69bb      	ldr	r3, [r7, #24]
 8010a4e:	3301      	adds	r3, #1
 8010a50:	61bb      	str	r3, [r7, #24]
 8010a52:	69bb      	ldr	r3, [r7, #24]
 8010a54:	2b1f      	cmp	r3, #31
 8010a56:	d9d7      	bls.n	8010a08 <_ux_hcd_stm32_least_traffic_list_get+0x18>
        }
    }

    /* Return the ED list with the lowest bandwidth.  */
    return(min_bandwidth_slot);
 8010a58:	68fb      	ldr	r3, [r7, #12]
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3724      	adds	r7, #36	; 0x24
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a64:	4770      	bx	lr

08010a66 <_ux_hcd_stm32_periodic_schedule>:
/*                                            added ISO transfer support, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_periodic_schedule(UX_HCD_STM32 *hcd_stm32)
{
 8010a66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a68:	b08b      	sub	sp, #44	; 0x2c
 8010a6a:	af04      	add	r7, sp, #16
 8010a6c:	6078      	str	r0, [r7, #4]
ULONG               ep_schedule = 1U;
USHORT              port_status_change_bits;
#endif /* defined (USBH_HAL_HUB_SPLIT_SUPPORTED) */

    /* Get the current frame number.  */
    frame_index = HAL_HCD_GetCurrentFrame(hcd_stm32 -> hcd_handle);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7f1 fac2 	bl	8001ffc <HAL_HCD_GetCurrentFrame>
 8010a78:	6138      	str	r0, [r7, #16]

    /* Get the first ED in the periodic list.  */
    ed =  hcd_stm32 -> ux_hcd_stm32_periodic_ed_head;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a7e:	617b      	str	r3, [r7, #20]

    /* Search for an entry in the periodic tree.  */
    while (ed != UX_NULL)
 8010a80:	e052      	b.n	8010b28 <_ux_hcd_stm32_periodic_schedule+0xc2>
#endif /* defined (USBH_HAL_HUB_SPLIT_SUPPORTED) */
      {
        /* Check if the periodic transfer should be scheduled in this frame.  */
        /* Interval Mask is 0:     it's scheduled every SOF/uSOF.  */
        /* Interval Mask is not 0: check position to see if it's scheduled.  */
        if ((frame_index & ed -> ux_stm32_ed_interval_mask) == ed -> ux_stm32_ed_interval_position)
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	69da      	ldr	r2, [r3, #28]
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	401a      	ands	r2, r3
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	6a1b      	ldr	r3, [r3, #32]
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	d147      	bne.n	8010b22 <_ux_hcd_stm32_periodic_schedule+0xbc>
        {

          /* Get the transfer request.  */
          transfer_request = ed -> ux_stm32_ed_transfer_request;
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	689b      	ldr	r3, [r3, #8]
 8010a96:	60fb      	str	r3, [r7, #12]

          /* Check if there is transfer needs schedule.  */
          if (transfer_request && ed -> ux_stm32_ed_sch_mode)
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d041      	beq.n	8010b22 <_ux_hcd_stm32_periodic_schedule+0xbc>
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d03c      	beq.n	8010b22 <_ux_hcd_stm32_periodic_schedule+0xbc>
          {

            /* If it's scheduled each SOF/uSOF, the request should be submitted
            * immediately after packet is done. This is performed in callback.  */
            if (ed -> ux_stm32_ed_interval_mask == 0)
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	69db      	ldr	r3, [r3, #28]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d103      	bne.n	8010ab8 <_ux_hcd_stm32_periodic_schedule+0x52>
              ed -> ux_stm32_ed_sch_mode = 0;
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

            /* For ISO OUT, packet size is from request variable,
            * otherwise, use request length.  */
            if ((ed -> ux_stm32_ed_type == EP_TYPE_ISOC) && (ed -> ux_stm32_ed_dir == 0U))
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010abe:	2b01      	cmp	r3, #1
 8010ac0:	d109      	bne.n	8010ad6 <_ux_hcd_stm32_periodic_schedule+0x70>
 8010ac2:	697b      	ldr	r3, [r7, #20]
 8010ac4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d104      	bne.n	8010ad6 <_ux_hcd_stm32_periodic_schedule+0x70>
              ed -> ux_stm32_ed_packet_length = transfer_request -> ux_transfer_request_packet_length;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	619a      	str	r2, [r3, #24]
 8010ad4:	e003      	b.n	8010ade <_ux_hcd_stm32_periodic_schedule+0x78>
            else
              ed -> ux_stm32_ed_packet_length = transfer_request -> ux_transfer_request_requested_length;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	68da      	ldr	r2, [r3, #12]
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	619a      	str	r2, [r3, #24]

            /* Prepare transactions.  */
            _ux_hcd_stm32_request_trans_prepare(hcd_stm32, ed, transfer_request);
 8010ade:	68fa      	ldr	r2, [r7, #12]
 8010ae0:	6979      	ldr	r1, [r7, #20]
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f000 fbad 	bl	8011242 <_ux_hcd_stm32_request_trans_prepare>


            /* Call HAL driver to submit the transfer request.  */
            HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel,
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010aec:	697b      	ldr	r3, [r7, #20]
 8010aee:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	f893 502c 	ldrb.w	r5, [r3, #44]	; 0x2c
                                     ed -> ux_stm32_ed_dir,
                                     ed -> ux_stm32_ed_type, USBH_PID_DATA,
                                     transfer_request -> ux_transfer_request_data_pointer +
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	689a      	ldr	r2, [r3, #8]
                                       transfer_request -> ux_transfer_request_actual_length,
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	691b      	ldr	r3, [r3, #16]
                                     transfer_request -> ux_transfer_request_data_pointer +
 8010b06:	4413      	add	r3, r2
                                       ed -> ux_stm32_ed_packet_length, 0);
 8010b08:	697a      	ldr	r2, [r7, #20]
 8010b0a:	6992      	ldr	r2, [r2, #24]
            HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel,
 8010b0c:	b292      	uxth	r2, r2
 8010b0e:	2600      	movs	r6, #0
 8010b10:	9603      	str	r6, [sp, #12]
 8010b12:	9202      	str	r2, [sp, #8]
 8010b14:	9301      	str	r3, [sp, #4]
 8010b16:	2301      	movs	r3, #1
 8010b18:	9300      	str	r3, [sp, #0]
 8010b1a:	462b      	mov	r3, r5
 8010b1c:	4622      	mov	r2, r4
 8010b1e:	f7f0 ffaf 	bl	8001a80 <HAL_HCD_HC_SubmitRequest>
          }
        }
      }

        /* Point to the next ED in the list.  */
        ed =  ed -> ux_stm32_ed_next_ed;
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	617b      	str	r3, [r7, #20]
    while (ed != UX_NULL)
 8010b28:	697b      	ldr	r3, [r7, #20]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d1a9      	bne.n	8010a82 <_ux_hcd_stm32_periodic_schedule+0x1c>
    }

    /* Return to caller.  */
    return(UX_FALSE);
 8010b2e:	2300      	movs	r3, #0
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	371c      	adds	r7, #28
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b38 <_ux_hcd_stm32_port_disable>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_port_disable(UX_HCD_STM32 *hcd_stm32, ULONG port_index)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b083      	sub	sp, #12
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6039      	str	r1, [r7, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8010b42:	2300      	movs	r3, #0
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	370c      	adds	r7, #12
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4e:	4770      	bx	lr

08010b50 <_ux_hcd_stm32_port_enable>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_port_enable(UX_HCD_STM32 *hcd_stm32, ULONG port_index)
{
 8010b50:	b480      	push	{r7}
 8010b52:	b083      	sub	sp, #12
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
 8010b58:	6039      	str	r1, [r7, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8010b5a:	2300      	movs	r3, #0
}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	370c      	adds	r7, #12
 8010b60:	46bd      	mov	sp, r7
 8010b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b66:	4770      	bx	lr

08010b68 <_ux_hcd_stm32_port_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_port_reset(UX_HCD_STM32 *hcd_stm32, ULONG port_index)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	6039      	str	r1, [r7, #0]

    /* Check to see if this port is valid on this controller.  On STM32, there is only one. */
    if (port_index != 0)
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d006      	beq.n	8010b86 <_ux_hcd_stm32_port_reset+0x1e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_HCD, UX_PORT_INDEX_UNKNOWN);
 8010b78:	2256      	movs	r2, #86	; 0x56
 8010b7a:	2101      	movs	r1, #1
 8010b7c:	2002      	movs	r0, #2
 8010b7e:	f7fd fe3b 	bl	800e7f8 <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_PORT_INDEX_UNKNOWN, port_index, 0, 0, UX_TRACE_ERRORS, 0, 0)

#if defined(UX_HOST_STANDALONE)
        return(UX_STATE_ERROR);
#else
        return(UX_PORT_INDEX_UNKNOWN);
 8010b82:	2356      	movs	r3, #86	; 0x56
 8010b84:	e012      	b.n	8010bac <_ux_hcd_stm32_port_reset+0x44>
#endif /* defined(UX_HOST_STANDALONE) */
    }

    /* Ensure that the downstream port has a device attached. It is unnatural
       to perform a port reset if there is no device.  */
    if ((hcd_stm32 -> ux_hcd_stm32_controller_flag & UX_HCD_STM32_CONTROLLER_FLAG_DEVICE_ATTACHED) == 0)
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b8a:	f003 0301 	and.w	r3, r3, #1
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d106      	bne.n	8010ba0 <_ux_hcd_stm32_port_reset+0x38>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_HCD, UX_NO_DEVICE_CONNECTED);
 8010b92:	225f      	movs	r2, #95	; 0x5f
 8010b94:	2101      	movs	r1, #1
 8010b96:	2002      	movs	r0, #2
 8010b98:	f7fd fe2e 	bl	800e7f8 <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_NO_DEVICE_CONNECTED, port_index, 0, 0, UX_TRACE_ERRORS, 0, 0)

#if defined(UX_HOST_STANDALONE)
        return(UX_STATE_ERROR);
#else
        return(UX_NO_DEVICE_CONNECTED);
 8010b9c:	235f      	movs	r3, #95	; 0x5f
 8010b9e:	e005      	b.n	8010bac <_ux_hcd_stm32_port_reset+0x44>
#if defined(UX_HOST_STANDALONE)
    /* There is no way for non-blocking reset in HCD, just do blocking operation here.  */
    HAL_HCD_ResetPort(hcd_stm32 -> hcd_handle);
    return(UX_STATE_NEXT);
#else
    HAL_HCD_ResetPort(hcd_stm32 -> hcd_handle);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7f1 fa07 	bl	8001fb8 <HAL_HCD_ResetPort>

    /* This function should never fail.  */
    return(UX_SUCCESS);
 8010baa:	2300      	movs	r3, #0
#endif /* defined(UX_HOST_STANDALONE) */

}
 8010bac:	4618      	mov	r0, r3
 8010bae:	3708      	adds	r7, #8
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}

08010bb4 <_ux_hcd_stm32_port_resume>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_port_resume(UX_HCD_STM32 *hcd_stm32, UINT port_index)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6039      	str	r1, [r7, #0]

    /* Return error status.  */
    return(UX_FUNCTION_NOT_SUPPORTED);
 8010bbe:	2354      	movs	r3, #84	; 0x54
}
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	370c      	adds	r7, #12
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bca:	4770      	bx	lr

08010bcc <_ux_hcd_stm32_port_status_get>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_hcd_stm32_port_status_get(UX_HCD_STM32 *hcd_stm32, ULONG port_index)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b084      	sub	sp, #16
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
 8010bd4:	6039      	str	r1, [r7, #0]

ULONG       port_status;


    /* Check to see if this port is valid on this controller.  */
    if (UX_HCD_STM32_NB_ROOT_PORTS < port_index)
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	2b01      	cmp	r3, #1
 8010bda:	d906      	bls.n	8010bea <_ux_hcd_stm32_port_status_get+0x1e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_HCD, UX_PORT_INDEX_UNKNOWN);
 8010bdc:	2256      	movs	r2, #86	; 0x56
 8010bde:	2101      	movs	r1, #1
 8010be0:	2002      	movs	r0, #2
 8010be2:	f7fd fe09 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_PORT_INDEX_UNKNOWN, port_index, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_PORT_INDEX_UNKNOWN);
 8010be6:	2356      	movs	r3, #86	; 0x56
 8010be8:	e02b      	b.n	8010c42 <_ux_hcd_stm32_port_status_get+0x76>
    }

    /* The port is valid, build the status mask for this port. This function
       returns a controller agnostic bit field.  */
    port_status =  0;
 8010bea:	2300      	movs	r3, #0
 8010bec:	60fb      	str	r3, [r7, #12]

    /* Device Connection Status.  */
    if (hcd_stm32 -> ux_hcd_stm32_controller_flag & UX_HCD_STM32_CONTROLLER_FLAG_DEVICE_ATTACHED)
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bf2:	f003 0301 	and.w	r3, r3, #1
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d003      	beq.n	8010c02 <_ux_hcd_stm32_port_status_get+0x36>
        port_status |=  UX_PS_CCS;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	f043 0301 	orr.w	r3, r3, #1
 8010c00:	60fb      	str	r3, [r7, #12]

    switch (HAL_HCD_GetCurrentSpeed(hcd_stm32 -> hcd_handle))
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7f1 fa06 	bl	8002018 <HAL_HCD_GetCurrentSpeed>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	2b02      	cmp	r3, #2
 8010c10:	d015      	beq.n	8010c3e <_ux_hcd_stm32_port_status_get+0x72>
 8010c12:	2b02      	cmp	r3, #2
 8010c14:	d80e      	bhi.n	8010c34 <_ux_hcd_stm32_port_status_get+0x68>
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d002      	beq.n	8010c20 <_ux_hcd_stm32_port_status_get+0x54>
 8010c1a:	2b01      	cmp	r3, #1
 8010c1c:	d005      	beq.n	8010c2a <_ux_hcd_stm32_port_status_get+0x5e>
 8010c1e:	e009      	b.n	8010c34 <_ux_hcd_stm32_port_status_get+0x68>
    {
    case 0:
        /* High Speed.  */
        port_status |=  UX_PS_DS_HS;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c26:	60fb      	str	r3, [r7, #12]
        break;
 8010c28:	e00a      	b.n	8010c40 <_ux_hcd_stm32_port_status_get+0x74>

    case 1:
        /* Full Speed.  */
        port_status |=  UX_PS_DS_FS;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c30:	60fb      	str	r3, [r7, #12]
        break;
 8010c32:	e005      	b.n	8010c40 <_ux_hcd_stm32_port_status_get+0x74>
        port_status |=  UX_PS_DS_LS;
        break;

    default:
        /* Full Speed.  */
        port_status |=  UX_PS_DS_FS;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c3a:	60fb      	str	r3, [r7, #12]
        break;
 8010c3c:	e000      	b.n	8010c40 <_ux_hcd_stm32_port_status_get+0x74>
        break;
 8010c3e:	bf00      	nop
    }

    /* Return port status.  */
    return(port_status);
 8010c40:	68fb      	ldr	r3, [r7, #12]
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3710      	adds	r7, #16
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}

08010c4a <_ux_hcd_stm32_port_suspend>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_port_suspend(UX_HCD_STM32 *hcd_stm32, ULONG port_index)
{
 8010c4a:	b480      	push	{r7}
 8010c4c:	b083      	sub	sp, #12
 8010c4e:	af00      	add	r7, sp, #0
 8010c50:	6078      	str	r0, [r7, #4]
 8010c52:	6039      	str	r1, [r7, #0]

    /* Return error status.  */
    return(UX_FUNCTION_NOT_SUPPORTED);
 8010c54:	2354      	movs	r3, #84	; 0x54
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	370c      	adds	r7, #12
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c60:	4770      	bx	lr

08010c62 <_ux_hcd_stm32_power_down_port>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_power_down_port(UX_HCD_STM32 *hcd_stm32, ULONG port_index)
{
 8010c62:	b480      	push	{r7}
 8010c64:	b083      	sub	sp, #12
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]
 8010c6a:	6039      	str	r1, [r7, #0]

    /* Return error status.  */
    return(UX_FUNCTION_NOT_SUPPORTED);
 8010c6c:	2354      	movs	r3, #84	; 0x54
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	370c      	adds	r7, #12
 8010c72:	46bd      	mov	sp, r7
 8010c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c78:	4770      	bx	lr

08010c7a <_ux_hcd_stm32_power_on_port>:
/*                                                                        */
/*  05-19-2020     Chaoqiong Xiao           Initial Version 6.0           */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_power_on_port(UX_HCD_STM32 *hcd_stm32, ULONG port_index)
{
 8010c7a:	b580      	push	{r7, lr}
 8010c7c:	b082      	sub	sp, #8
 8010c7e:	af00      	add	r7, sp, #0
 8010c80:	6078      	str	r0, [r7, #4]
 8010c82:	6039      	str	r1, [r7, #0]

    /* Check to see if this port is valid on this controller.  On STM32, there is only one. */
    if (port_index != 0)
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d006      	beq.n	8010c98 <_ux_hcd_stm32_power_on_port+0x1e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_HCD, UX_PORT_INDEX_UNKNOWN);
 8010c8a:	2256      	movs	r2, #86	; 0x56
 8010c8c:	2101      	movs	r1, #1
 8010c8e:	2002      	movs	r0, #2
 8010c90:	f7fd fdb2 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_PORT_INDEX_UNKNOWN, port_index, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_PORT_INDEX_UNKNOWN);
 8010c94:	2356      	movs	r3, #86	; 0x56
 8010c96:	e000      	b.n	8010c9a <_ux_hcd_stm32_power_on_port+0x20>
    }

    /* This function never fails.  */
    return(UX_SUCCESS);
 8010c98:	2300      	movs	r3, #0
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3708      	adds	r7, #8
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}

08010ca2 <_ux_hcd_stm32_request_bulk_transfer>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_request_bulk_transfer(UX_HCD_STM32 *hcd_stm32, UX_TRANSFER *transfer_request)
{
 8010ca2:	b5b0      	push	{r4, r5, r7, lr}
 8010ca4:	b08a      	sub	sp, #40	; 0x28
 8010ca6:	af04      	add	r7, sp, #16
 8010ca8:	6078      	str	r0, [r7, #4]
 8010caa:	6039      	str	r1, [r7, #0]
UX_HCD_STM32_ED     *ed;
UINT                direction;
UINT                length;

    /* Get the pointer to the Endpoint.  */
    endpoint =  (UX_ENDPOINT *) transfer_request -> ux_transfer_request_endpoint;
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	613b      	str	r3, [r7, #16]

    /* Now get the physical ED attached to this endpoint.  */
    ed =  endpoint -> ux_endpoint_ed;
 8010cb2:	693b      	ldr	r3, [r7, #16]
 8010cb4:	689b      	ldr	r3, [r3, #8]
 8010cb6:	60fb      	str	r3, [r7, #12]

    UX_RESTORE
#endif /* defined(UX_HOST_STANDALONE) */

    /* Save the pending transfer in the ED.  */
    ed -> ux_stm32_ed_transfer_request = transfer_request;
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	683a      	ldr	r2, [r7, #0]
 8010cbc:	609a      	str	r2, [r3, #8]

    /* Direction, 0 : Output / 1 : Input */
    direction = ed -> ux_stm32_ed_dir;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8010cc4:	60bb      	str	r3, [r7, #8]
    else
#endif /* USBH_HAL_HUB_SPLIT_SUPPORTED */
    {

      /* If DMA enabled, use max possible transfer length.  */
      if (hcd_stm32 -> hcd_handle -> Init.dma_enable)
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cca:	68db      	ldr	r3, [r3, #12]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d00d      	beq.n	8010cec <_ux_hcd_stm32_request_bulk_transfer+0x4a>
      {
        if (transfer_request -> ux_transfer_request_requested_length > endpoint -> ux_endpoint_transfer_request.ux_transfer_request_maximum_length)
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	68da      	ldr	r2, [r3, #12]
 8010cd4:	693b      	ldr	r3, [r7, #16]
 8010cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d903      	bls.n	8010ce4 <_ux_hcd_stm32_request_bulk_transfer+0x42>
          length = endpoint -> ux_endpoint_transfer_request.ux_transfer_request_maximum_length;
 8010cdc:	693b      	ldr	r3, [r7, #16]
 8010cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ce0:	617b      	str	r3, [r7, #20]
 8010ce2:	e013      	b.n	8010d0c <_ux_hcd_stm32_request_bulk_transfer+0x6a>
        else
          length = transfer_request -> ux_transfer_request_requested_length;
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	68db      	ldr	r3, [r3, #12]
 8010ce8:	617b      	str	r3, [r7, #20]
 8010cea:	e00f      	b.n	8010d0c <_ux_hcd_stm32_request_bulk_transfer+0x6a>
      }
      else
      {
        /* If the direction is OUT, request size is larger than MPS, and DMA is not used, we need to set transfer length to MPS.  */
        if ((direction == 0) && (transfer_request -> ux_transfer_request_requested_length > endpoint -> ux_endpoint_descriptor.wMaxPacketSize))
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d109      	bne.n	8010d06 <_ux_hcd_stm32_request_bulk_transfer+0x64>
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	68da      	ldr	r2, [r3, #12]
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	69db      	ldr	r3, [r3, #28]
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d903      	bls.n	8010d06 <_ux_hcd_stm32_request_bulk_transfer+0x64>
        {

          /* Set transfer length to MPS.  */
          length = endpoint -> ux_endpoint_descriptor.wMaxPacketSize;
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	69db      	ldr	r3, [r3, #28]
 8010d02:	617b      	str	r3, [r7, #20]
 8010d04:	e002      	b.n	8010d0c <_ux_hcd_stm32_request_bulk_transfer+0x6a>
        }
        else
        {

          /* Keep the original transfer length.  */
          length = transfer_request -> ux_transfer_request_requested_length;
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	68db      	ldr	r3, [r3, #12]
 8010d0a:	617b      	str	r3, [r7, #20]
        }
      }
    }

    /* Save the transfer status in the ED.  */
    ed -> ux_stm32_ed_status = direction == 0 ? UX_HCD_STM32_ED_STATUS_BULK_OUT : UX_HCD_STM32_ED_STATUS_BULK_IN;
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d101      	bne.n	8010d16 <_ux_hcd_stm32_request_bulk_transfer+0x74>
 8010d12:	2209      	movs	r2, #9
 8010d14:	e000      	b.n	8010d18 <_ux_hcd_stm32_request_bulk_transfer+0x76>
 8010d16:	2208      	movs	r2, #8
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    /* Save the transfer length.  */
    ed -> ux_stm32_ed_packet_length = length;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	697a      	ldr	r2, [r7, #20]
 8010d22:	619a      	str	r2, [r3, #24]

    /* Prepare transactions.  */
    _ux_hcd_stm32_request_trans_prepare(hcd_stm32, ed, transfer_request);
 8010d24:	683a      	ldr	r2, [r7, #0]
 8010d26:	68f9      	ldr	r1, [r7, #12]
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f000 fa8a 	bl	8011242 <_ux_hcd_stm32_request_trans_prepare>

    /* Submit the transfer request.  */
    HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel,
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8010d38:	68bb      	ldr	r3, [r7, #8]
 8010d3a:	b2dc      	uxtb	r4, r3
                             direction,
                             EP_TYPE_BULK, USBH_PID_DATA,
                             ed -> ux_stm32_ed_data,
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	691b      	ldr	r3, [r3, #16]
    HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel,
 8010d40:	697a      	ldr	r2, [r7, #20]
 8010d42:	b292      	uxth	r2, r2
 8010d44:	2500      	movs	r5, #0
 8010d46:	9503      	str	r5, [sp, #12]
 8010d48:	9202      	str	r2, [sp, #8]
 8010d4a:	9301      	str	r3, [sp, #4]
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	9300      	str	r3, [sp, #0]
 8010d50:	2302      	movs	r3, #2
 8010d52:	4622      	mov	r2, r4
 8010d54:	f7f0 fe94 	bl	8001a80 <HAL_HCD_HC_SubmitRequest>
    /* Background transfer started but not done yet.  */
    return(UX_STATE_WAIT);
#else

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8010d58:	2300      	movs	r3, #0
#endif /* defined(UX_HOST_STANDALONE) */

}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	3718      	adds	r7, #24
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bdb0      	pop	{r4, r5, r7, pc}

08010d62 <_ux_hcd_stm32_request_control_transfer>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_request_control_transfer(UX_HCD_STM32 *hcd_stm32, UX_TRANSFER *transfer_request)
{
 8010d62:	b580      	push	{r7, lr}
 8010d64:	b086      	sub	sp, #24
 8010d66:	af00      	add	r7, sp, #0
 8010d68:	6078      	str	r0, [r7, #4]
 8010d6a:	6039      	str	r1, [r7, #0]
#endif /* defined(UX_HOST_STANDALONE) */
UX_ENDPOINT             *endpoint;
UX_HCD_STM32_ED         *ed;

    /* Get the pointer to the Endpoint.  */
    endpoint =  (UX_ENDPOINT *) transfer_request -> ux_transfer_request_endpoint;
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	617b      	str	r3, [r7, #20]

    /* Now get the physical ED attached to this endpoint.  */
    ed =  endpoint -> ux_endpoint_ed;
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	689b      	ldr	r3, [r3, #8]
 8010d76:	613b      	str	r3, [r7, #16]
        return(UX_STATE_EXIT);
    }
#else

    /* Setup for SETUP packet.  */
    _ux_hcd_stm32_request_control_setup(hcd_stm32, ed, endpoint, transfer_request);
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	697a      	ldr	r2, [r7, #20]
 8010d7c:	6939      	ldr	r1, [r7, #16]
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f000 f870 	bl	8010e64 <_ux_hcd_stm32_request_control_setup>
    if (ed -> ux_stm32_ed_setup == UX_NULL)
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	68db      	ldr	r3, [r3, #12]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d101      	bne.n	8010d90 <_ux_hcd_stm32_request_control_transfer+0x2e>
        return(UX_MEMORY_INSUFFICIENT);
 8010d8c:	2312      	movs	r3, #18
 8010d8e:	e065      	b.n	8010e5c <_ux_hcd_stm32_request_control_transfer+0xfa>

    /* Wait for the completion of the transfer request.  */
    status =  _ux_host_semaphore_get(&transfer_request -> ux_transfer_request_semaphore, MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT));
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	3344      	adds	r3, #68	; 0x44
 8010d94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7fe f929 	bl	800eff0 <_ux_utility_semaphore_get>
 8010d9e:	60f8      	str	r0, [r7, #12]

    /* Free the resources.  */
    _ux_utility_memory_free(ed -> ux_stm32_ed_setup);
 8010da0:	693b      	ldr	r3, [r7, #16]
 8010da2:	68db      	ldr	r3, [r3, #12]
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7fd ffc9 	bl	800ed3c <_ux_utility_memory_free>

    /* If the semaphore did not succeed we probably have a time out.  */
    if (status != UX_SUCCESS)
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d007      	beq.n	8010dc0 <_ux_hcd_stm32_request_control_transfer+0x5e>
    {

        /* All transfers pending need to abort. There may have been a partial transfer.  */
        _ux_host_stack_transfer_request_abort(transfer_request);
 8010db0:	6838      	ldr	r0, [r7, #0]
 8010db2:	f7fd fce7 	bl	800e784 <_ux_host_stack_transfer_request_abort>

        /* There was an error, return to the caller.  */
        transfer_request -> ux_transfer_request_completion_code =  UX_TRANSFER_TIMEOUT;
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	225c      	movs	r2, #92	; 0x5c
 8010dba:	635a      	str	r2, [r3, #52]	; 0x34

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_TIMEOUT, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_TRANSFER_TIMEOUT);
 8010dbc:	235c      	movs	r3, #92	; 0x5c
 8010dbe:	e04d      	b.n	8010e5c <_ux_hcd_stm32_request_control_transfer+0xfa>
    }

    /* Check the transfer request completion code.  */
    if (transfer_request -> ux_transfer_request_completion_code != UX_SUCCESS)
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d002      	beq.n	8010dce <_ux_hcd_stm32_request_control_transfer+0x6c>
    {

        /* Return completion to caller.  */
        return(transfer_request -> ux_transfer_request_completion_code);
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dcc:	e046      	b.n	8010e5c <_ux_hcd_stm32_request_control_transfer+0xfa>
    }

    /* Check if there is data phase.  */
    if (ed -> ux_stm32_ed_saved_length)
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	8a9b      	ldrh	r3, [r3, #20]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d01f      	beq.n	8010e16 <_ux_hcd_stm32_request_control_transfer+0xb4>
    {

        /* Prepare data stage.  */
        _ux_hcd_stm32_request_control_data(hcd_stm32, ed, endpoint, transfer_request);
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	697a      	ldr	r2, [r7, #20]
 8010dda:	6939      	ldr	r1, [r7, #16]
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 f8d9 	bl	8010f94 <_ux_hcd_stm32_request_control_data>

        /* Wait for the completion of the transfer request.  */
        status =  _ux_host_semaphore_get(&transfer_request -> ux_transfer_request_semaphore, MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT));
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	3344      	adds	r3, #68	; 0x44
 8010de6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7fe f900 	bl	800eff0 <_ux_utility_semaphore_get>
 8010df0:	60f8      	str	r0, [r7, #12]

        /* If the semaphore did not succeed we probably have a time out.  */
        if (status != UX_SUCCESS)
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d007      	beq.n	8010e08 <_ux_hcd_stm32_request_control_transfer+0xa6>
        {

            /* All transfers pending need to abort. There may have been a partial transfer.  */
            _ux_host_stack_transfer_request_abort(transfer_request);
 8010df8:	6838      	ldr	r0, [r7, #0]
 8010dfa:	f7fd fcc3 	bl	800e784 <_ux_host_stack_transfer_request_abort>

            /* There was an error, return to the caller.  */
            transfer_request -> ux_transfer_request_completion_code =  UX_TRANSFER_TIMEOUT;
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	225c      	movs	r2, #92	; 0x5c
 8010e02:	635a      	str	r2, [r3, #52]	; 0x34

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_TIMEOUT, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

            return(UX_TRANSFER_TIMEOUT);
 8010e04:	235c      	movs	r3, #92	; 0x5c
 8010e06:	e029      	b.n	8010e5c <_ux_hcd_stm32_request_control_transfer+0xfa>

        }

        /* Check the transfer request completion code.  */
        if (transfer_request -> ux_transfer_request_completion_code != UX_SUCCESS)
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d002      	beq.n	8010e16 <_ux_hcd_stm32_request_control_transfer+0xb4>
        {

            /* Return completion to caller.  */
            return(transfer_request -> ux_transfer_request_completion_code);
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e14:	e022      	b.n	8010e5c <_ux_hcd_stm32_request_control_transfer+0xfa>
        }
    }

    /* Prepare status stage.  */
    _ux_hcd_stm32_request_control_status(hcd_stm32, ed, endpoint, transfer_request);
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	697a      	ldr	r2, [r7, #20]
 8010e1a:	6939      	ldr	r1, [r7, #16]
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f000 f931 	bl	8011084 <_ux_hcd_stm32_request_control_status>

    /* Wait for the completion of the transfer request.  */
    status =  _ux_host_semaphore_get(&transfer_request -> ux_transfer_request_semaphore, UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT));
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	3344      	adds	r3, #68	; 0x44
 8010e26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7fe f8e0 	bl	800eff0 <_ux_utility_semaphore_get>
 8010e30:	60f8      	str	r0, [r7, #12]

    /* Restore the original transfer parameter.  */
    transfer_request -> ux_transfer_request_requested_length = ed -> ux_stm32_ed_saved_length;
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	8a9b      	ldrh	r3, [r3, #20]
 8010e36:	461a      	mov	r2, r3
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	60da      	str	r2, [r3, #12]
    transfer_request -> ux_transfer_request_actual_length    = ed -> ux_stm32_ed_saved_actual_length;
 8010e3c:	693b      	ldr	r3, [r7, #16]
 8010e3e:	8adb      	ldrh	r3, [r3, #22]
 8010e40:	461a      	mov	r2, r3
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	611a      	str	r2, [r3, #16]

    /* If the semaphore did not succeed we probably have a time out.  */
    if (status != UX_SUCCESS)
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d005      	beq.n	8010e58 <_ux_hcd_stm32_request_control_transfer+0xf6>
    {

        /* All transfers pending need to abort. There may have been a partial transfer.  */
        _ux_host_stack_transfer_request_abort(transfer_request);
 8010e4c:	6838      	ldr	r0, [r7, #0]
 8010e4e:	f7fd fc99 	bl	800e784 <_ux_host_stack_transfer_request_abort>

        /* There was an error, return to the caller.  */
        transfer_request -> ux_transfer_request_completion_code =  UX_TRANSFER_TIMEOUT;
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	225c      	movs	r2, #92	; 0x5c
 8010e56:	635a      	str	r2, [r3, #52]	; 0x34
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_TIMEOUT, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }

    /* Return completion to caller.  */
    return(transfer_request -> ux_transfer_request_completion_code);
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
#endif /* defined(UX_HOST_STANDALONE) */
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3718      	adds	r7, #24
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <_ux_hcd_stm32_request_control_setup>:

static inline VOID _ux_hcd_stm32_request_control_setup(UX_HCD_STM32 *hcd_stm32,
    UX_HCD_STM32_ED *ed, UX_ENDPOINT *endpoint, UX_TRANSFER *transfer_request)
{
 8010e64:	b590      	push	{r4, r7, lr}
 8010e66:	b08b      	sub	sp, #44	; 0x2c
 8010e68:	af04      	add	r7, sp, #16
 8010e6a:	60f8      	str	r0, [r7, #12]
 8010e6c:	60b9      	str	r1, [r7, #8]
 8010e6e:	607a      	str	r2, [r7, #4]
 8010e70:	603b      	str	r3, [r7, #0]
UCHAR                   *setup_request;

    /* Save the pending transfer in the ED.  */
    ed -> ux_stm32_ed_transfer_request = transfer_request;
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	683a      	ldr	r2, [r7, #0]
 8010e76:	609a      	str	r2, [r3, #8]

    /* Build the SETUP packet (phase 1 of the control transfer).  */
    ed -> ux_stm32_ed_setup = UX_NULL;
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	60da      	str	r2, [r3, #12]
    setup_request = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SETUP_SIZE);
 8010e7e:	2208      	movs	r2, #8
 8010e80:	2101      	movs	r1, #1
 8010e82:	2000      	movs	r0, #0
 8010e84:	f7fd fe38 	bl	800eaf8 <_ux_utility_memory_allocate>
 8010e88:	6178      	str	r0, [r7, #20]

    if (setup_request == UX_NULL)
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d07d      	beq.n	8010f8c <_ux_hcd_stm32_request_control_setup+0x128>
        return;

    ed -> ux_stm32_ed_setup = setup_request;
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	697a      	ldr	r2, [r7, #20]
 8010e94:	60da      	str	r2, [r3, #12]

    /* Build the SETUP request.  */
    *(setup_request + UX_SETUP_REQUEST_TYPE) =  transfer_request -> ux_transfer_request_type;
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	695b      	ldr	r3, [r3, #20]
 8010e9a:	b2da      	uxtb	r2, r3
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	701a      	strb	r2, [r3, #0]
    *(setup_request + UX_SETUP_REQUEST) =       transfer_request -> ux_transfer_request_function;
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	699a      	ldr	r2, [r3, #24]
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	b2d2      	uxtb	r2, r2
 8010eaa:	701a      	strb	r2, [r3, #0]
    _ux_utility_short_put(setup_request + UX_SETUP_VALUE, transfer_request -> ux_transfer_request_value);
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	1c9a      	adds	r2, r3, #2
 8010eb0:	683b      	ldr	r3, [r7, #0]
 8010eb2:	69db      	ldr	r3, [r3, #28]
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	4619      	mov	r1, r3
 8010eb8:	4610      	mov	r0, r2
 8010eba:	f7fe f8f6 	bl	800f0aa <_ux_utility_short_put>
    _ux_utility_short_put(setup_request + UX_SETUP_INDEX, transfer_request -> ux_transfer_request_index);
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	1d1a      	adds	r2, r3, #4
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	6a1b      	ldr	r3, [r3, #32]
 8010ec6:	b29b      	uxth	r3, r3
 8010ec8:	4619      	mov	r1, r3
 8010eca:	4610      	mov	r0, r2
 8010ecc:	f7fe f8ed 	bl	800f0aa <_ux_utility_short_put>
    _ux_utility_short_put(setup_request + UX_SETUP_LENGTH, (USHORT) transfer_request -> ux_transfer_request_requested_length);
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	1d9a      	adds	r2, r3, #6
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	68db      	ldr	r3, [r3, #12]
 8010ed8:	b29b      	uxth	r3, r3
 8010eda:	4619      	mov	r1, r3
 8010edc:	4610      	mov	r0, r2
 8010ede:	f7fe f8e4 	bl	800f0aa <_ux_utility_short_put>

    /* Save the original transfer parameter.  */
    ed -> ux_stm32_ed_saved_length = transfer_request -> ux_transfer_request_requested_length;
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	68db      	ldr	r3, [r3, #12]
 8010ee6:	b29a      	uxth	r2, r3
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	829a      	strh	r2, [r3, #20]
    ed -> ux_stm32_ed_data = setup_request;
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	697a      	ldr	r2, [r7, #20]
 8010ef0:	611a      	str	r2, [r3, #16]

    /* Reset requested length for SETUP packet.  */
    transfer_request -> ux_transfer_request_requested_length = 0;
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	60da      	str	r2, [r3, #12]

    /* Set the packet length for SETUP packet.  */
    ed -> ux_stm32_ed_packet_length = 8;
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	2208      	movs	r2, #8
 8010efc:	619a      	str	r2, [r3, #24]

    /* Set the current status.  */
    ed -> ux_stm32_ed_status = UX_HCD_STM32_ED_STATUS_CONTROL_SETUP;
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	2203      	movs	r2, #3
 8010f02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    /* Set device speed.  */
    switch (endpoint -> ux_endpoint_device -> ux_device_speed)
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f0a:	691b      	ldr	r3, [r3, #16]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d006      	beq.n	8010f1e <_ux_hcd_stm32_request_control_setup+0xba>
 8010f10:	2b02      	cmp	r3, #2
 8010f12:	d109      	bne.n	8010f28 <_ux_hcd_stm32_request_control_setup+0xc4>
    {
    case UX_HIGH_SPEED_DEVICE:
        ed -> ux_stm32_ed_speed =  HCD_DEVICE_SPEED_HIGH;
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	2200      	movs	r2, #0
 8010f18:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        break;
 8010f1c:	e009      	b.n	8010f32 <_ux_hcd_stm32_request_control_setup+0xce>
    case UX_LOW_SPEED_DEVICE:
        ed -> ux_stm32_ed_speed =  HCD_DEVICE_SPEED_LOW;
 8010f1e:	68bb      	ldr	r3, [r7, #8]
 8010f20:	2202      	movs	r2, #2
 8010f22:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        break;
 8010f26:	e004      	b.n	8010f32 <_ux_hcd_stm32_request_control_setup+0xce>
    default:
        ed -> ux_stm32_ed_speed =  HCD_DEVICE_SPEED_FULL;
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	2201      	movs	r2, #1
 8010f2c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        break;
 8010f30:	bf00      	nop
    }

    /* Initialize the host channel for SETUP phase.  */
    ed -> ux_stm32_ed_dir = 0;
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	2200      	movs	r2, #0
 8010f36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    HAL_HCD_HC_Init(hcd_stm32 -> hcd_handle,
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
                    ed -> ux_stm32_ed_channel,
                    0,
                    endpoint -> ux_endpoint_device -> ux_device_address,
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f48:	68db      	ldr	r3, [r3, #12]
    HAL_HCD_HC_Init(hcd_stm32 -> hcd_handle,
 8010f4a:	b2dc      	uxtb	r4, r3
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
                    ed -> ux_stm32_ed_speed,
                    EP_TYPE_CTRL,
                    endpoint -> ux_endpoint_descriptor.wMaxPacketSize);
 8010f52:	687a      	ldr	r2, [r7, #4]
 8010f54:	69d2      	ldr	r2, [r2, #28]
    HAL_HCD_HC_Init(hcd_stm32 -> hcd_handle,
 8010f56:	b292      	uxth	r2, r2
 8010f58:	9202      	str	r2, [sp, #8]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	9201      	str	r2, [sp, #4]
 8010f5e:	9300      	str	r3, [sp, #0]
 8010f60:	4623      	mov	r3, r4
 8010f62:	2200      	movs	r2, #0
 8010f64:	f7f0 fcd9 	bl	800191a <HAL_HCD_HC_Init>
                            endpoint->ux_endpoint_device->ux_device_port_location);
    }
#endif /* USBH_HAL_HUB_SPLIT_SUPPORTED */

    /* Send the SETUP packet.  */
    HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel,
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8010f72:	2300      	movs	r3, #0
 8010f74:	9303      	str	r3, [sp, #12]
 8010f76:	2308      	movs	r3, #8
 8010f78:	9302      	str	r3, [sp, #8]
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	9301      	str	r3, [sp, #4]
 8010f7e:	2300      	movs	r3, #0
 8010f80:	9300      	str	r3, [sp, #0]
 8010f82:	2300      	movs	r3, #0
 8010f84:	2200      	movs	r2, #0
 8010f86:	f7f0 fd7b 	bl	8001a80 <HAL_HCD_HC_SubmitRequest>
 8010f8a:	e000      	b.n	8010f8e <_ux_hcd_stm32_request_control_setup+0x12a>
        return;
 8010f8c:	bf00      	nop
                             0, EP_TYPE_CTRL, USBH_PID_SETUP, setup_request, 8, 0);
}
 8010f8e:	371c      	adds	r7, #28
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd90      	pop	{r4, r7, pc}

08010f94 <_ux_hcd_stm32_request_control_data>:

static inline VOID _ux_hcd_stm32_request_control_data(UX_HCD_STM32 *hcd_stm32,
    UX_HCD_STM32_ED *ed, UX_ENDPOINT *endpoint, UX_TRANSFER *transfer_request)
{
 8010f94:	b5b0      	push	{r4, r5, r7, lr}
 8010f96:	b088      	sub	sp, #32
 8010f98:	af04      	add	r7, sp, #16
 8010f9a:	60f8      	str	r0, [r7, #12]
 8010f9c:	60b9      	str	r1, [r7, #8]
 8010f9e:	607a      	str	r2, [r7, #4]
 8010fa0:	603b      	str	r3, [r7, #0]

    /* Check the direction of the transaction.  */
    if ((transfer_request -> ux_transfer_request_type & UX_REQUEST_DIRECTION) ==
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	695b      	ldr	r3, [r3, #20]
 8010fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d01f      	beq.n	8010fee <_ux_hcd_stm32_request_control_data+0x5a>
         UX_REQUEST_IN)
    {

        /* Re-initialize the host channel to IN direction.  */
        ed -> ux_stm32_ed_dir = 1;
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	2201      	movs	r2, #1
 8010fb2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        HAL_HCD_HC_Init(hcd_stm32 -> hcd_handle,
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
                        ed -> ux_stm32_ed_channel,
                        0x80,
                        endpoint -> ux_endpoint_device -> ux_device_address,
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fc4:	68db      	ldr	r3, [r3, #12]
        HAL_HCD_HC_Init(hcd_stm32 -> hcd_handle,
 8010fc6:	b2dc      	uxtb	r4, r3
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
                        ed -> ux_stm32_ed_speed,
                        EP_TYPE_CTRL,
                        endpoint -> ux_endpoint_descriptor.wMaxPacketSize);
 8010fce:	687a      	ldr	r2, [r7, #4]
 8010fd0:	69d2      	ldr	r2, [r2, #28]
        HAL_HCD_HC_Init(hcd_stm32 -> hcd_handle,
 8010fd2:	b292      	uxth	r2, r2
 8010fd4:	9202      	str	r2, [sp, #8]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	9201      	str	r2, [sp, #4]
 8010fda:	9300      	str	r3, [sp, #0]
 8010fdc:	4623      	mov	r3, r4
 8010fde:	2280      	movs	r2, #128	; 0x80
 8010fe0:	f7f0 fc9b 	bl	800191a <HAL_HCD_HC_Init>
                                endpoint->ux_endpoint_device->ux_device_port_location);
        }
#endif /* USBH_HAL_HUB_SPLIT_SUPPORTED */

        /* Set the current status to data IN.  */
        ed -> ux_stm32_ed_status = UX_HCD_STM32_ED_STATUS_CONTROL_DATA_IN;
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	2204      	movs	r2, #4
 8010fe8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8010fec:	e003      	b.n	8010ff6 <_ux_hcd_stm32_request_control_data+0x62>
    }
    else
    {

        /* Set the current status to data OUT.  */
        ed -> ux_stm32_ed_status = UX_HCD_STM32_ED_STATUS_CONTROL_DATA_OUT;
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	2205      	movs	r2, #5
 8010ff2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Save the pending transfer in the ED.  */
    ed -> ux_stm32_ed_transfer_request = transfer_request;
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	683a      	ldr	r2, [r7, #0]
 8010ffa:	609a      	str	r2, [r3, #8]

    /* Set the transfer to pending.  */
    transfer_request -> ux_transfer_request_completion_code =  UX_TRANSFER_STATUS_PENDING;
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	2201      	movs	r2, #1
 8011000:	635a      	str	r2, [r3, #52]	; 0x34

    /* Restore requested length.  */
    transfer_request -> ux_transfer_request_requested_length = ed -> ux_stm32_ed_saved_length;
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	8a9b      	ldrh	r3, [r3, #20]
 8011006:	461a      	mov	r2, r3
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	60da      	str	r2, [r3, #12]

    /* If the direction is OUT, request size is larger than MPS, and DMA is not used, we need to set transfer length to MPS.  */
    if ((ed -> ux_stm32_ed_dir == 0) &&
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8011012:	2b00      	cmp	r3, #0
 8011014:	d10f      	bne.n	8011036 <_ux_hcd_stm32_request_control_data+0xa2>
            (transfer_request -> ux_transfer_request_requested_length > endpoint -> ux_endpoint_descriptor.wMaxPacketSize) &&
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	68da      	ldr	r2, [r3, #12]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	69db      	ldr	r3, [r3, #28]
    if ((ed -> ux_stm32_ed_dir == 0) &&
 801101e:	429a      	cmp	r2, r3
 8011020:	d909      	bls.n	8011036 <_ux_hcd_stm32_request_control_data+0xa2>
            (hcd_stm32 -> hcd_handle -> Init.dma_enable == 0))
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011026:	68db      	ldr	r3, [r3, #12]
            (transfer_request -> ux_transfer_request_requested_length > endpoint -> ux_endpoint_descriptor.wMaxPacketSize) &&
 8011028:	2b00      	cmp	r3, #0
 801102a:	d104      	bne.n	8011036 <_ux_hcd_stm32_request_control_data+0xa2>
    {

        /* Set transfer length to MPS.  */
        ed -> ux_stm32_ed_packet_length = endpoint -> ux_endpoint_descriptor.wMaxPacketSize;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	69da      	ldr	r2, [r3, #28]
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	619a      	str	r2, [r3, #24]
 8011034:	e003      	b.n	801103e <_ux_hcd_stm32_request_control_data+0xaa>
    }
    else
    {

        /* Keep the original transfer length.  */
        ed -> ux_stm32_ed_packet_length = transfer_request -> ux_transfer_request_requested_length;
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	68da      	ldr	r2, [r3, #12]
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	619a      	str	r2, [r3, #24]
    }

    /* Reset actual length.  */
    transfer_request -> ux_transfer_request_actual_length = 0;
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	2200      	movs	r2, #0
 8011042:	611a      	str	r2, [r3, #16]

    /* Prepare transactions.  */
    _ux_hcd_stm32_request_trans_prepare(hcd_stm32, ed, transfer_request);
 8011044:	683a      	ldr	r2, [r7, #0]
 8011046:	68b9      	ldr	r1, [r7, #8]
 8011048:	68f8      	ldr	r0, [r7, #12]
 801104a:	f000 f8fa 	bl	8011242 <_ux_hcd_stm32_request_trans_prepare>

    /* Submit the transfer request.  */
    HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel,
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
                                ed -> ux_stm32_ed_dir,
                                EP_TYPE_CTRL, USBH_PID_DATA,
                                ed -> ux_stm32_ed_data,
 801105e:	68bb      	ldr	r3, [r7, #8]
 8011060:	691b      	ldr	r3, [r3, #16]
                                ed -> ux_stm32_ed_packet_length, 0);
 8011062:	68ba      	ldr	r2, [r7, #8]
 8011064:	6992      	ldr	r2, [r2, #24]
    HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel,
 8011066:	b292      	uxth	r2, r2
 8011068:	2500      	movs	r5, #0
 801106a:	9503      	str	r5, [sp, #12]
 801106c:	9202      	str	r2, [sp, #8]
 801106e:	9301      	str	r3, [sp, #4]
 8011070:	2301      	movs	r3, #1
 8011072:	9300      	str	r3, [sp, #0]
 8011074:	2300      	movs	r3, #0
 8011076:	4622      	mov	r2, r4
 8011078:	f7f0 fd02 	bl	8001a80 <HAL_HCD_HC_SubmitRequest>
}
 801107c:	bf00      	nop
 801107e:	3710      	adds	r7, #16
 8011080:	46bd      	mov	sp, r7
 8011082:	bdb0      	pop	{r4, r5, r7, pc}

08011084 <_ux_hcd_stm32_request_control_status>:

static inline VOID _ux_hcd_stm32_request_control_status(UX_HCD_STM32 *hcd_stm32,
    UX_HCD_STM32_ED *ed, UX_ENDPOINT *endpoint, UX_TRANSFER *transfer_request)
{
 8011084:	b5b0      	push	{r4, r5, r7, lr}
 8011086:	b088      	sub	sp, #32
 8011088:	af04      	add	r7, sp, #16
 801108a:	60f8      	str	r0, [r7, #12]
 801108c:	60b9      	str	r1, [r7, #8]
 801108e:	607a      	str	r2, [r7, #4]
 8011090:	603b      	str	r3, [r7, #0]

    /* Setup status phase direction.  */
    ed -> ux_stm32_ed_dir = !ed -> ux_stm32_ed_dir;
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8011098:	2b00      	cmp	r3, #0
 801109a:	bf0c      	ite	eq
 801109c:	2301      	moveq	r3, #1
 801109e:	2300      	movne	r3, #0
 80110a0:	b2db      	uxtb	r3, r3
 80110a2:	461a      	mov	r2, r3
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    HAL_HCD_HC_Init(hcd_stm32 -> hcd_handle,
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
                ed -> ux_stm32_ed_channel,
                ed -> ux_stm32_ed_dir ? 0x80 : 0,
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    HAL_HCD_HC_Init(hcd_stm32 -> hcd_handle,
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d001      	beq.n	80110c2 <_ux_hcd_stm32_request_control_status+0x3e>
 80110be:	2480      	movs	r4, #128	; 0x80
 80110c0:	e000      	b.n	80110c4 <_ux_hcd_stm32_request_control_status+0x40>
 80110c2:	2400      	movs	r4, #0
                endpoint -> ux_endpoint_device -> ux_device_address,
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110c8:	68db      	ldr	r3, [r3, #12]
    HAL_HCD_HC_Init(hcd_stm32 -> hcd_handle,
 80110ca:	b2dd      	uxtb	r5, r3
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
                ed -> ux_stm32_ed_speed,
                EP_TYPE_CTRL,
                endpoint -> ux_endpoint_descriptor.wMaxPacketSize);
 80110d2:	687a      	ldr	r2, [r7, #4]
 80110d4:	69d2      	ldr	r2, [r2, #28]
    HAL_HCD_HC_Init(hcd_stm32 -> hcd_handle,
 80110d6:	b292      	uxth	r2, r2
 80110d8:	9202      	str	r2, [sp, #8]
 80110da:	2200      	movs	r2, #0
 80110dc:	9201      	str	r2, [sp, #4]
 80110de:	9300      	str	r3, [sp, #0]
 80110e0:	462b      	mov	r3, r5
 80110e2:	4622      	mov	r2, r4
 80110e4:	f7f0 fc19 	bl	800191a <HAL_HCD_HC_Init>
                            endpoint->ux_endpoint_device->ux_device_port_location);
    }
#endif /* USBH_HAL_HUB_SPLIT_SUPPORTED */

    /* Save the pending transfer in the ED.  */
    ed -> ux_stm32_ed_transfer_request = transfer_request;
 80110e8:	68bb      	ldr	r3, [r7, #8]
 80110ea:	683a      	ldr	r2, [r7, #0]
 80110ec:	609a      	str	r2, [r3, #8]

    /* Set the transfer to pending.  */
    transfer_request -> ux_transfer_request_completion_code =  UX_TRANSFER_STATUS_PENDING;
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	2201      	movs	r2, #1
 80110f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Save the original transfer parameter.  */
    ed -> ux_stm32_ed_saved_length = (USHORT)
                    transfer_request -> ux_transfer_request_requested_length;
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	68db      	ldr	r3, [r3, #12]
    ed -> ux_stm32_ed_saved_length = (USHORT)
 80110f8:	b29a      	uxth	r2, r3
 80110fa:	68bb      	ldr	r3, [r7, #8]
 80110fc:	829a      	strh	r2, [r3, #20]
    transfer_request -> ux_transfer_request_requested_length = 0;
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	2200      	movs	r2, #0
 8011102:	60da      	str	r2, [r3, #12]

    ed -> ux_stm32_ed_saved_actual_length = (USHORT)
                    transfer_request -> ux_transfer_request_actual_length;
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	691b      	ldr	r3, [r3, #16]
    ed -> ux_stm32_ed_saved_actual_length = (USHORT)
 8011108:	b29a      	uxth	r2, r3
 801110a:	68bb      	ldr	r3, [r7, #8]
 801110c:	82da      	strh	r2, [r3, #22]
    transfer_request -> ux_transfer_request_actual_length = 0;
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	2200      	movs	r2, #0
 8011112:	611a      	str	r2, [r3, #16]

    /* Reset the packet length.  */
    ed -> ux_stm32_ed_packet_length = 0;
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	2200      	movs	r2, #0
 8011118:	619a      	str	r2, [r3, #24]

    /* Set the current status to data OUT.  */
    ed -> ux_stm32_ed_status = ed -> ux_stm32_ed_dir ?
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8011120:	2b00      	cmp	r3, #0
 8011122:	d001      	beq.n	8011128 <_ux_hcd_stm32_request_control_status+0xa4>
 8011124:	2206      	movs	r2, #6
 8011126:	e000      	b.n	801112a <_ux_hcd_stm32_request_control_status+0xa6>
 8011128:	2207      	movs	r2, #7
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                    UX_HCD_STM32_ED_STATUS_CONTROL_STATUS_IN :
                                    UX_HCD_STM32_ED_STATUS_CONTROL_STATUS_OUT;

    /* Submit the request for status phase.  */
    HAL_HCD_HC_SubmitRequest(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel,
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8011140:	2300      	movs	r3, #0
 8011142:	9303      	str	r3, [sp, #12]
 8011144:	2300      	movs	r3, #0
 8011146:	9302      	str	r3, [sp, #8]
 8011148:	2300      	movs	r3, #0
 801114a:	9301      	str	r3, [sp, #4]
 801114c:	2301      	movs	r3, #1
 801114e:	9300      	str	r3, [sp, #0]
 8011150:	2300      	movs	r3, #0
 8011152:	f7f0 fc95 	bl	8001a80 <HAL_HCD_HC_SubmitRequest>
                             ed -> ux_stm32_ed_dir,
                             EP_TYPE_CTRL, USBH_PID_DATA, 0, 0, 0);
}
 8011156:	bf00      	nop
 8011158:	3710      	adds	r7, #16
 801115a:	46bd      	mov	sp, r7
 801115c:	bdb0      	pop	{r4, r5, r7, pc}

0801115e <_ux_hcd_stm32_request_periodic_transfer>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_request_periodic_transfer(UX_HCD_STM32 *hcd_stm32, UX_TRANSFER *transfer_request)
{
 801115e:	b480      	push	{r7}
 8011160:	b08b      	sub	sp, #44	; 0x2c
 8011162:	af00      	add	r7, sp, #0
 8011164:	6078      	str	r0, [r7, #4]
 8011166:	6039      	str	r1, [r7, #0]
UX_TRANSFER             *transfer;
UX_INTERRUPT_SAVE_AREA


    /* Get the pointer to the Endpoint.  */
    endpoint =  (UX_ENDPOINT *) transfer_request -> ux_transfer_request_endpoint;
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	685b      	ldr	r3, [r3, #4]
 801116c:	623b      	str	r3, [r7, #32]

    /* Now get the physical ED attached to this endpoint.  */
    ed =  endpoint -> ux_endpoint_ed;
 801116e:	6a3b      	ldr	r3, [r7, #32]
 8011170:	689b      	ldr	r3, [r3, #8]
 8011172:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011174:	f3ef 8310 	mrs	r3, PRIMASK
 8011178:	617b      	str	r3, [r7, #20]
    return(posture);
 801117a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801117c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801117e:	b672      	cpsid	i
    return(int_posture);
 8011180:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupt.  */
    UX_DISABLE
 8011182:	61bb      	str	r3, [r7, #24]
    transfer_request -> ux_transfer_request_status = UX_TRANSFER_STATUS_PENDING;

#endif /* defined(UX_HOST_STANDALONE) */

    /* Save the transfer status in the ED.  */
    ed -> ux_stm32_ed_status = UX_HCD_STM32_ED_STATUS_PERIODIC_TRANSFER;
 8011184:	69fb      	ldr	r3, [r7, #28]
 8011186:	220a      	movs	r2, #10
 8011188:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    /* Isochronous transfer supports transfer list.  */
    if (ed -> ux_stm32_ed_transfer_request == UX_NULL)
 801118c:	69fb      	ldr	r3, [r7, #28]
 801118e:	689b      	ldr	r3, [r3, #8]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d107      	bne.n	80111a4 <_ux_hcd_stm32_request_periodic_transfer+0x46>
    {

        /* Scheduler is needed to start, and kept if interval is more than 1 SOF/uSOF.  */
        ed -> ux_stm32_ed_sch_mode = 1;
 8011194:	69fb      	ldr	r3, [r7, #28]
 8011196:	2201      	movs	r2, #1
 8011198:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Save the pending transfer in the ED.  */
    ed -> ux_stm32_ed_transfer_request = transfer_request;
 801119c:	69fb      	ldr	r3, [r7, #28]
 801119e:	683a      	ldr	r2, [r7, #0]
 80111a0:	609a      	str	r2, [r3, #8]
 80111a2:	e00d      	b.n	80111c0 <_ux_hcd_stm32_request_periodic_transfer+0x62>
    }
    else
    {

        /* Link the pending transfer to list tail.  */
        transfer = ed -> ux_stm32_ed_transfer_request;
 80111a4:	69fb      	ldr	r3, [r7, #28]
 80111a6:	689b      	ldr	r3, [r3, #8]
 80111a8:	627b      	str	r3, [r7, #36]	; 0x24
        while(transfer -> ux_transfer_request_next_transfer_request != UX_NULL)
 80111aa:	e002      	b.n	80111b2 <_ux_hcd_stm32_request_periodic_transfer+0x54>
            transfer = transfer -> ux_transfer_request_next_transfer_request;
 80111ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111b0:	627b      	str	r3, [r7, #36]	; 0x24
        while(transfer -> ux_transfer_request_next_transfer_request != UX_NULL)
 80111b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d1f8      	bne.n	80111ac <_ux_hcd_stm32_request_periodic_transfer+0x4e>
        transfer -> ux_transfer_request_next_transfer_request = transfer_request;
 80111ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111bc:	683a      	ldr	r2, [r7, #0]
 80111be:	63da      	str	r2, [r3, #60]	; 0x3c
 80111c0:	69bb      	ldr	r3, [r7, #24]
 80111c2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	f383 8810 	msr	PRIMASK, r3
}
 80111ca:	bf00      	nop
#else

    /* There is no need to wake up the stm32 controller on this transfer
       since periodic transactions will be picked up when the interrupt
       tree is scanned.  */
    return(UX_SUCCESS);
 80111cc:	2300      	movs	r3, #0
#endif /* defined(UX_HOST_STANDALONE) */

}
 80111ce:	4618      	mov	r0, r3
 80111d0:	372c      	adds	r7, #44	; 0x2c
 80111d2:	46bd      	mov	sp, r7
 80111d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d8:	4770      	bx	lr

080111da <_ux_hcd_stm32_request_trans_finish>:
/*                                                                        */
/*  07-29-2022     Chaoqiong Xiao           Initial Version 6.1.12        */
/*                                                                        */
/**************************************************************************/
VOID  _ux_hcd_stm32_request_trans_finish(UX_HCD_STM32 *hcd_stm32, UX_HCD_STM32_ED *ed)
{
 80111da:	b580      	push	{r7, lr}
 80111dc:	b084      	sub	sp, #16
 80111de:	af00      	add	r7, sp, #0
 80111e0:	6078      	str	r0, [r7, #4]
 80111e2:	6039      	str	r1, [r7, #0]
UX_TRANSFER *transfer = ed -> ux_stm32_ed_transfer_request;
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	689b      	ldr	r3, [r3, #8]
 80111e8:	60fb      	str	r3, [r7, #12]

    /* If there is no transfer, it's OK.  */
    if (transfer == UX_NULL)
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d020      	beq.n	8011232 <_ux_hcd_stm32_request_trans_finish+0x58>
        return;

    /* If there is no data, it's OK.  */
    if (ed -> ux_stm32_ed_data == UX_NULL)
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	691b      	ldr	r3, [r3, #16]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d01e      	beq.n	8011236 <_ux_hcd_stm32_request_trans_finish+0x5c>
        return;

    /* If the data is aligned, it's OK.  */
    if (ed -> ux_stm32_ed_data == transfer -> ux_transfer_request_data_pointer)
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	691a      	ldr	r2, [r3, #16]
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	689b      	ldr	r3, [r3, #8]
 8011200:	429a      	cmp	r2, r3
 8011202:	d01a      	beq.n	801123a <_ux_hcd_stm32_request_trans_finish+0x60>
        return;

    /* If the data is IN, copy it.  */
    if (ed -> ux_stm32_ed_dir)
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801120a:	2b00      	cmp	r3, #0
 801120c:	d008      	beq.n	8011220 <_ux_hcd_stm32_request_trans_finish+0x46>
    {
        _ux_utility_memory_copy(transfer -> ux_transfer_request_data_pointer,
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	6898      	ldr	r0, [r3, #8]
                                ed -> ux_stm32_ed_data,
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	6919      	ldr	r1, [r3, #16]
        _ux_utility_memory_copy(transfer -> ux_transfer_request_data_pointer,
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	691b      	ldr	r3, [r3, #16]
 801121a:	461a      	mov	r2, r3
 801121c:	f7fd fd70 	bl	800ed00 <_ux_utility_memory_copy>
                                transfer -> ux_transfer_request_actual_length);
    }

    /* Free the aligned memory.  */
    _ux_utility_memory_free(ed -> ux_stm32_ed_data);
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	691b      	ldr	r3, [r3, #16]
 8011224:	4618      	mov	r0, r3
 8011226:	f7fd fd89 	bl	800ed3c <_ux_utility_memory_free>
    ed -> ux_stm32_ed_data = UX_NULL;
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	2200      	movs	r2, #0
 801122e:	611a      	str	r2, [r3, #16]
 8011230:	e004      	b.n	801123c <_ux_hcd_stm32_request_trans_finish+0x62>
        return;
 8011232:	bf00      	nop
 8011234:	e002      	b.n	801123c <_ux_hcd_stm32_request_trans_finish+0x62>
        return;
 8011236:	bf00      	nop
 8011238:	e000      	b.n	801123c <_ux_hcd_stm32_request_trans_finish+0x62>
        return;
 801123a:	bf00      	nop
}
 801123c:	3710      	adds	r7, #16
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}

08011242 <_ux_hcd_stm32_request_trans_prepare>:
/*                                                                        */
/*  07-29-2022     Chaoqiong Xiao           Initial Version 6.1.12        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_request_trans_prepare(UX_HCD_STM32 *hcd_stm32, UX_HCD_STM32_ED *ed, UX_TRANSFER *transfer)
{
 8011242:	b580      	push	{r7, lr}
 8011244:	b084      	sub	sp, #16
 8011246:	af00      	add	r7, sp, #0
 8011248:	60f8      	str	r0, [r7, #12]
 801124a:	60b9      	str	r1, [r7, #8]
 801124c:	607a      	str	r2, [r7, #4]

    /* Save transfer data pointer.  */
    ed -> ux_stm32_ed_data = transfer -> ux_transfer_request_data_pointer;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	689a      	ldr	r2, [r3, #8]
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	611a      	str	r2, [r3, #16]

    /* If DMA not enabled, nothing to do.  */
    if (!hcd_stm32 -> hcd_handle -> Init.dma_enable)
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d101      	bne.n	8011264 <_ux_hcd_stm32_request_trans_prepare+0x22>
        return(UX_SUCCESS);
 8011260:	2300      	movs	r3, #0
 8011262:	e02e      	b.n	80112c2 <_ux_hcd_stm32_request_trans_prepare+0x80>

    /* If there is no data, nothing to do.  */
    if (transfer -> ux_transfer_request_requested_length == 0)
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	68db      	ldr	r3, [r3, #12]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d101      	bne.n	8011270 <_ux_hcd_stm32_request_trans_prepare+0x2e>
        return(UX_SUCCESS);
 801126c:	2300      	movs	r3, #0
 801126e:	e028      	b.n	80112c2 <_ux_hcd_stm32_request_trans_prepare+0x80>

    /* If transfer buffer aligned, nothing to do.  */
    if (((ALIGN_TYPE)ed -> ux_stm32_ed_data & 0x3UL) == 0)
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	691b      	ldr	r3, [r3, #16]
 8011274:	f003 0303 	and.w	r3, r3, #3
 8011278:	2b00      	cmp	r3, #0
 801127a:	d101      	bne.n	8011280 <_ux_hcd_stm32_request_trans_prepare+0x3e>
        return(UX_SUCCESS);
 801127c:	2300      	movs	r3, #0
 801127e:	e020      	b.n	80112c2 <_ux_hcd_stm32_request_trans_prepare+0x80>

    /* Allocate aligned data buffer for transfer.  */
    ed -> ux_stm32_ed_data = _ux_utility_memory_allocate(UX_NO_ALIGN,
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	68db      	ldr	r3, [r3, #12]
 8011284:	461a      	mov	r2, r3
 8011286:	2101      	movs	r1, #1
 8011288:	2000      	movs	r0, #0
 801128a:	f7fd fc35 	bl	800eaf8 <_ux_utility_memory_allocate>
 801128e:	4602      	mov	r2, r0
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	611a      	str	r2, [r3, #16]
                            UX_CACHE_SAFE_MEMORY,
                            transfer -> ux_transfer_request_requested_length);
    if (ed -> ux_stm32_ed_data == UX_NULL)
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	691b      	ldr	r3, [r3, #16]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d101      	bne.n	80112a0 <_ux_hcd_stm32_request_trans_prepare+0x5e>
        return(UX_MEMORY_INSUFFICIENT);
 801129c:	2312      	movs	r3, #18
 801129e:	e010      	b.n	80112c2 <_ux_hcd_stm32_request_trans_prepare+0x80>

    /* For data IN it's done.  */
    if (ed -> ux_stm32_ed_dir)
 80112a0:	68bb      	ldr	r3, [r7, #8]
 80112a2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d001      	beq.n	80112ae <_ux_hcd_stm32_request_trans_prepare+0x6c>
        return(UX_SUCCESS);
 80112aa:	2300      	movs	r3, #0
 80112ac:	e009      	b.n	80112c2 <_ux_hcd_stm32_request_trans_prepare+0x80>

    /* For data OUT, copy buffer.  */
    _ux_utility_memory_copy(ed -> ux_stm32_ed_data,
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	6918      	ldr	r0, [r3, #16]
                            transfer -> ux_transfer_request_data_pointer,
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6899      	ldr	r1, [r3, #8]
    _ux_utility_memory_copy(ed -> ux_stm32_ed_data,
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	68db      	ldr	r3, [r3, #12]
 80112ba:	461a      	mov	r2, r3
 80112bc:	f7fd fd20 	bl	800ed00 <_ux_utility_memory_copy>
                            transfer -> ux_transfer_request_requested_length); /* Use case of memcpy is verified.  */

    /* Done.  */
    return(UX_SUCCESS);
 80112c0:	2300      	movs	r3, #0
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3710      	adds	r7, #16
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}
	...

080112cc <_ux_hcd_stm32_request_transfer>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_request_transfer(UX_HCD_STM32 *hcd_stm32, UX_TRANSFER *transfer_request)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b084      	sub	sp, #16
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
 80112d4:	6039      	str	r1, [r7, #0]

UX_ENDPOINT     *endpoint;
UINT            status;

    /* Device Connection Status.  */
    if (hcd_stm32 -> ux_hcd_stm32_controller_flag & UX_HCD_STM32_CONTROLLER_FLAG_DEVICE_ATTACHED)
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112da:	f003 0301 	and.w	r3, r3, #1
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d02d      	beq.n	801133e <_ux_hcd_stm32_request_transfer+0x72>
    {

        /* Get the pointer to the Endpoint.  */
        endpoint =  (UX_ENDPOINT *) transfer_request -> ux_transfer_request_endpoint;
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	685b      	ldr	r3, [r3, #4]
 80112e6:	60bb      	str	r3, [r7, #8]

#if !defined(UX_HOST_STANDALONE)

        /* We reset the actual length field of the transfer request as a safety measure.  */
        transfer_request -> ux_transfer_request_actual_length =  0;
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	2200      	movs	r2, #0
 80112ec:	611a      	str	r2, [r3, #16]
#endif /* !defined(UX_HOST_STANDALONE) */

        /* Isolate the endpoint type and route the transfer request.  */
        switch ((endpoint -> ux_endpoint_descriptor.bmAttributes) & UX_MASK_ENDPOINT_TYPE)
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	699b      	ldr	r3, [r3, #24]
 80112f2:	f003 0303 	and.w	r3, r3, #3
 80112f6:	2b03      	cmp	r3, #3
 80112f8:	d81c      	bhi.n	8011334 <_ux_hcd_stm32_request_transfer+0x68>
 80112fa:	a201      	add	r2, pc, #4	; (adr r2, 8011300 <_ux_hcd_stm32_request_transfer+0x34>)
 80112fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011300:	08011311 	.word	0x08011311
 8011304:	08011329 	.word	0x08011329
 8011308:	0801131d 	.word	0x0801131d
 801130c:	08011329 	.word	0x08011329
        {

        case UX_CONTROL_ENDPOINT:

            status = _ux_hcd_stm32_request_control_transfer(hcd_stm32, transfer_request);
 8011310:	6839      	ldr	r1, [r7, #0]
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f7ff fd25 	bl	8010d62 <_ux_hcd_stm32_request_control_transfer>
 8011318:	60f8      	str	r0, [r7, #12]
            break;
 801131a:	e015      	b.n	8011348 <_ux_hcd_stm32_request_transfer+0x7c>

        case UX_BULK_ENDPOINT:

            status = _ux_hcd_stm32_request_bulk_transfer(hcd_stm32, transfer_request);
 801131c:	6839      	ldr	r1, [r7, #0]
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f7ff fcbf 	bl	8010ca2 <_ux_hcd_stm32_request_bulk_transfer>
 8011324:	60f8      	str	r0, [r7, #12]
            break;
 8011326:	e00f      	b.n	8011348 <_ux_hcd_stm32_request_transfer+0x7c>

        case UX_INTERRUPT_ENDPOINT:
        case UX_ISOCHRONOUS_ENDPOINT:

            status = _ux_hcd_stm32_request_periodic_transfer(hcd_stm32, transfer_request);
 8011328:	6839      	ldr	r1, [r7, #0]
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f7ff ff17 	bl	801115e <_ux_hcd_stm32_request_periodic_transfer>
 8011330:	60f8      	str	r0, [r7, #12]
            break;
 8011332:	e009      	b.n	8011348 <_ux_hcd_stm32_request_transfer+0x7c>
        default:

#if defined(UX_HOST_STANDALONE)
            status =  UX_ERROR;
#else
            transfer_request -> ux_transfer_request_completion_code = UX_ERROR;
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	22ff      	movs	r2, #255	; 0xff
 8011338:	635a      	str	r2, [r3, #52]	; 0x34
            return(UX_STATE_EXIT);
 801133a:	2301      	movs	r3, #1
 801133c:	e005      	b.n	801134a <_ux_hcd_stm32_request_transfer+0x7e>

        /* Error, no device attached.  */
#if defined(UX_HOST_STANDALONE)
        status = UX_NO_DEVICE_CONNECTED;
#else
        transfer_request -> ux_transfer_request_completion_code = UX_NO_DEVICE_CONNECTED;
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	225f      	movs	r2, #95	; 0x5f
 8011342:	635a      	str	r2, [r3, #52]	; 0x34
        status = UX_STATE_EXIT;
 8011344:	2301      	movs	r3, #1
 8011346:	60fb      	str	r3, [r7, #12]
#endif /* defined(UX_HOST_STANDALONE) */

    }

    return(status);
 8011348:	68fb      	ldr	r3, [r7, #12]
}
 801134a:	4618      	mov	r0, r3
 801134c:	3710      	adds	r7, #16
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
 8011352:	bf00      	nop

08011354 <_ux_hcd_stm32_transfer_abort>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_hcd_stm32_transfer_abort(UX_HCD_STM32 *hcd_stm32, UX_TRANSFER *transfer_request)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b08a      	sub	sp, #40	; 0x28
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	6039      	str	r1, [r7, #0]
UX_HCD_STM32_ED     *ed;
UX_TRANSFER         *transfer;
UX_INTERRUPT_SAVE_AREA

    /* Get the pointer to the endpoint associated with the transfer request.  */
    endpoint =  (UX_ENDPOINT *) transfer_request -> ux_transfer_request_endpoint;
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	685b      	ldr	r3, [r3, #4]
 8011362:	623b      	str	r3, [r7, #32]

    /* From the endpoint container, get the address of the physical endpoint.  */
    ed =  (UX_HCD_STM32_ED *) endpoint -> ux_endpoint_ed;
 8011364:	6a3b      	ldr	r3, [r7, #32]
 8011366:	689b      	ldr	r3, [r3, #8]
 8011368:	61fb      	str	r3, [r7, #28]

    /* Check if this physical endpoint has been initialized properly!  */
    if (ed == UX_NULL)
 801136a:	69fb      	ldr	r3, [r7, #28]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d106      	bne.n	801137e <_ux_hcd_stm32_transfer_abort+0x2a>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_HCD, UX_ENDPOINT_HANDLE_UNKNOWN);
 8011370:	2253      	movs	r2, #83	; 0x53
 8011372:	2101      	movs	r1, #1
 8011374:	2002      	movs	r0, #2
 8011376:	f7fd fa3f 	bl	800e7f8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_ENDPOINT_HANDLE_UNKNOWN, endpoint, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_ENDPOINT_HANDLE_UNKNOWN);
 801137a:	2353      	movs	r3, #83	; 0x53
 801137c:	e032      	b.n	80113e4 <_ux_hcd_stm32_transfer_abort+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801137e:	f3ef 8310 	mrs	r3, PRIMASK
 8011382:	617b      	str	r3, [r7, #20]
    return(posture);
 8011384:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8011386:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011388:	b672      	cpsid	i
    return(int_posture);
 801138a:	693b      	ldr	r3, [r7, #16]
    }

    UX_DISABLE
 801138c:	61bb      	str	r3, [r7, #24]

    /* Halt the host channel.  */
    HAL_HCD_HC_Halt(hcd_stm32 -> hcd_handle, ed -> ux_stm32_ed_channel);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011392:	69fb      	ldr	r3, [r7, #28]
 8011394:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8011398:	4619      	mov	r1, r3
 801139a:	4610      	mov	r0, r2
 801139c:	f7f0 fb4c 	bl	8001a38 <HAL_HCD_HC_Halt>

    /* Save the transfer status in the ED.  */
    ed -> ux_stm32_ed_status = UX_HCD_STM32_ED_STATUS_ABORTED;
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	2202      	movs	r2, #2
 80113a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    /* Finish current transfer.  */
    _ux_hcd_stm32_request_trans_finish(hcd_stm32, ed);
 80113a8:	69f9      	ldr	r1, [r7, #28]
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f7ff ff15 	bl	80111da <_ux_hcd_stm32_request_trans_finish>

    /* Update the transfer status in linked transfer requests.  */
    transfer = ed -> ux_stm32_ed_transfer_request;
 80113b0:	69fb      	ldr	r3, [r7, #28]
 80113b2:	689b      	ldr	r3, [r3, #8]
 80113b4:	627b      	str	r3, [r7, #36]	; 0x24
    while(transfer)
 80113b6:	e005      	b.n	80113c4 <_ux_hcd_stm32_transfer_abort+0x70>
    {

        /* Set transfer status to aborted.  */
        transfer -> ux_transfer_request_status = UX_TRANSFER_STATUS_ABORT;
 80113b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ba:	2204      	movs	r2, #4
 80113bc:	601a      	str	r2, [r3, #0]

        /* Get next transfer linked.  */
        transfer = transfer -> ux_transfer_request_next_transfer_request;
 80113be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113c2:	627b      	str	r3, [r7, #36]	; 0x24
    while(transfer)
 80113c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d1f6      	bne.n	80113b8 <_ux_hcd_stm32_transfer_abort+0x64>
    }

    /* No transfer on going.  */
    ed -> ux_stm32_ed_transfer_request = UX_NULL;
 80113ca:	69fb      	ldr	r3, [r7, #28]
 80113cc:	2200      	movs	r2, #0
 80113ce:	609a      	str	r2, [r3, #8]
 80113d0:	69bb      	ldr	r3, [r7, #24]
 80113d2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	f383 8810 	msr	PRIMASK, r3
}
 80113da:	bf00      	nop
    UX_RESTORE

#if !defined(UX_HOST_STANDALONE)

    /* Wait for the controller to finish the current frame processing.  */
    _ux_utility_delay_ms(1);
 80113dc:	2001      	movs	r0, #1
 80113de:	f7fd fadf 	bl	800e9a0 <_ux_utility_delay_ms>
    if (ed -> ux_stm32_ed_setup)
        _ux_utility_memory_free(ed -> ux_stm32_ed_setup);
#endif /* !defined(UX_HOST_STANDALONE) */

    /* Return successful completion.  */
    return(UX_SUCCESS);
 80113e2:	2300      	movs	r3, #0
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	3728      	adds	r7, #40	; 0x28
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}

080113ec <MX_USBX_Host_Init>:
 * @brief  Application USBX Host Initialization.
 * @param  memory_ptr: memory pointer
 * @retval status
 */
UINT MX_USBX_Host_Init(VOID *memory_ptr)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b08e      	sub	sp, #56	; 0x38
 80113f0:	af08      	add	r7, sp, #32
 80113f2:	6078      	str	r0, [r7, #4]
	UINT ret = UX_SUCCESS;
 80113f4:	2300      	movs	r3, #0
 80113f6:	617b      	str	r3, [r7, #20]
	UCHAR *pointer;
	TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	613b      	str	r3, [r7, #16]
	/* USER CODE BEGIN MX_USBX_Host_Init0 */

	/* USER CODE END MX_USBX_Host_Init0 */

	/* Allocate the stack for USBX Memory */
	if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 80113fc:	f107 010c 	add.w	r1, r7, #12
 8011400:	2300      	movs	r3, #0
 8011402:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8011406:	6938      	ldr	r0, [r7, #16]
 8011408:	f7fa fb54 	bl	800bab4 <_txe_byte_allocate>
 801140c:	4603      	mov	r3, r0
 801140e:	2b00      	cmp	r3, #0
 8011410:	d001      	beq.n	8011416 <MX_USBX_Host_Init+0x2a>
			USBX_HOST_MEMORY_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
	{
		/* USER CODE BEGIN USBX_ALLOCATE_STACK_ERORR */
		return TX_POOL_ERROR;
 8011412:	2302      	movs	r3, #2
 8011414:	e08c      	b.n	8011530 <MX_USBX_Host_Init+0x144>
		/* USER CODE END USBX_ALLOCATE_STACK_ERORR */
	}

	/* Initialize USBX Memory */
	if (ux_system_initialize(pointer, USBX_HOST_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8011416:	68f8      	ldr	r0, [r7, #12]
 8011418:	2300      	movs	r3, #0
 801141a:	2200      	movs	r2, #0
 801141c:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8011420:	f7fd fa0c 	bl	800e83c <_ux_system_initialize>
 8011424:	4603      	mov	r3, r0
 8011426:	2b00      	cmp	r3, #0
 8011428:	d001      	beq.n	801142e <MX_USBX_Host_Init+0x42>
	{
		/* USER CODE BEGIN USBX_SYSTEM_INITIALIZE_ERORR */
		return UX_ERROR;
 801142a:	23ff      	movs	r3, #255	; 0xff
 801142c:	e080      	b.n	8011530 <MX_USBX_Host_Init+0x144>
		/* USER CODE END USBX_SYSTEM_INITIALIZE_ERORR */
	}

	/* Install the host portion of USBX */
	if (ux_host_stack_initialize(ux_host_event_callback) != UX_SUCCESS)
 801142e:	4842      	ldr	r0, [pc, #264]	; (8011538 <MX_USBX_Host_Init+0x14c>)
 8011430:	f7fc fb44 	bl	800dabc <_ux_host_stack_initialize>
 8011434:	4603      	mov	r3, r0
 8011436:	2b00      	cmp	r3, #0
 8011438:	d001      	beq.n	801143e <MX_USBX_Host_Init+0x52>
	{
		/* USER CODE BEGIN USBX_HOST_INITIALIZE_ERORR */
		return UX_ERROR;
 801143a:	23ff      	movs	r3, #255	; 0xff
 801143c:	e078      	b.n	8011530 <MX_USBX_Host_Init+0x144>
		/* USER CODE END USBX_HOST_INITIALIZE_ERORR */
	}

	/* Register a callback error function */
	ux_utility_error_callback_register(&ux_host_error_callback);
 801143e:	483f      	ldr	r0, [pc, #252]	; (801153c <MX_USBX_Host_Init+0x150>)
 8011440:	f7fd fb00 	bl	800ea44 <_ux_utility_error_callback_register>

	/* Initialize the host cdc acm class */
	if ((ux_host_stack_class_register(_ux_system_host_class_cdc_acm_name,
 8011444:	493e      	ldr	r1, [pc, #248]	; (8011540 <MX_USBX_Host_Init+0x154>)
 8011446:	483f      	ldr	r0, [pc, #252]	; (8011544 <MX_USBX_Host_Init+0x158>)
 8011448:	f7fb fcfe 	bl	800ce48 <_ux_host_stack_class_register>
 801144c:	4603      	mov	r3, r0
 801144e:	2b00      	cmp	r3, #0
 8011450:	d001      	beq.n	8011456 <MX_USBX_Host_Init+0x6a>
			ux_host_class_cdc_acm_entry)) != UX_SUCCESS)
	{
		/* USER CODE BEGIN USBX_HOST_CDC_ACM_REGISTER_ERORR */
		return UX_ERROR;
 8011452:	23ff      	movs	r3, #255	; 0xff
 8011454:	e06c      	b.n	8011530 <MX_USBX_Host_Init+0x144>
		/* USER CODE END USBX_HOST_CDC_ACM_REGISTER_ERORR */
	}

	/* Allocate the stack for host application main thread */
	if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_HOST_APP_THREAD_STACK_SIZE,
 8011456:	f107 010c 	add.w	r1, r7, #12
 801145a:	2300      	movs	r3, #0
 801145c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011460:	6938      	ldr	r0, [r7, #16]
 8011462:	f7fa fb27 	bl	800bab4 <_txe_byte_allocate>
 8011466:	4603      	mov	r3, r0
 8011468:	2b00      	cmp	r3, #0
 801146a:	d001      	beq.n	8011470 <MX_USBX_Host_Init+0x84>
			TX_NO_WAIT) != TX_SUCCESS)
	{
		/* USER CODE BEGIN MAIN_THREAD_ALLOCATE_STACK_ERORR */
		return TX_POOL_ERROR;
 801146c:	2302      	movs	r3, #2
 801146e:	e05f      	b.n	8011530 <MX_USBX_Host_Init+0x144>
		/* USER CODE END MAIN_THREAD_ALLOCATE_STACK_ERORR */
	}

	/* Create the host application main thread */
	if (tx_thread_create(&ux_host_app_thread, UX_HOST_APP_THREAD_NAME, app_ux_host_thread_entry,
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	22b0      	movs	r2, #176	; 0xb0
 8011474:	9206      	str	r2, [sp, #24]
 8011476:	2201      	movs	r2, #1
 8011478:	9205      	str	r2, [sp, #20]
 801147a:	2200      	movs	r2, #0
 801147c:	9204      	str	r2, [sp, #16]
 801147e:	220a      	movs	r2, #10
 8011480:	9203      	str	r2, [sp, #12]
 8011482:	220a      	movs	r2, #10
 8011484:	9202      	str	r2, [sp, #8]
 8011486:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801148a:	9201      	str	r2, [sp, #4]
 801148c:	9300      	str	r3, [sp, #0]
 801148e:	2300      	movs	r3, #0
 8011490:	4a2d      	ldr	r2, [pc, #180]	; (8011548 <MX_USBX_Host_Init+0x15c>)
 8011492:	492e      	ldr	r1, [pc, #184]	; (801154c <MX_USBX_Host_Init+0x160>)
 8011494:	482e      	ldr	r0, [pc, #184]	; (8011550 <MX_USBX_Host_Init+0x164>)
 8011496:	f7fa ff9d 	bl	800c3d4 <_txe_thread_create>
 801149a:	4603      	mov	r3, r0
 801149c:	2b00      	cmp	r3, #0
 801149e:	d001      	beq.n	80114a4 <MX_USBX_Host_Init+0xb8>
			0, pointer, UX_HOST_APP_THREAD_STACK_SIZE, UX_HOST_APP_THREAD_PRIO,
			UX_HOST_APP_THREAD_PREEMPTION_THRESHOLD, UX_HOST_APP_THREAD_TIME_SLICE,
			UX_HOST_APP_THREAD_START_OPTION) != TX_SUCCESS)
	{
		/* USER CODE BEGIN MAIN_THREAD_CREATE_ERORR */
		return TX_THREAD_ERROR;
 80114a0:	230e      	movs	r3, #14
 80114a2:	e045      	b.n	8011530 <MX_USBX_Host_Init+0x144>
		/* USER CODE END MAIN_THREAD_CREATE_ERORR */
	}

	/* USER CODE BEGIN MX_USBX_Host_Init1 */
	/* Create the CDC Receive Thread */
	tx_byte_allocate(byte_pool, (VOID **)&pointer, 1024, TX_NO_WAIT);
 80114a4:	f107 010c 	add.w	r1, r7, #12
 80114a8:	2300      	movs	r3, #0
 80114aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80114ae:	6938      	ldr	r0, [r7, #16]
 80114b0:	f7fa fb00 	bl	800bab4 <_txe_byte_allocate>
	tx_thread_create(&cdc_acm_receive_thread, "CDC Receive Thread", cdc_acm_receive_thread_entry, 0, pointer, 1024, 30, 30, TX_NO_TIME_SLICE, TX_AUTO_START);
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	22b0      	movs	r2, #176	; 0xb0
 80114b8:	9206      	str	r2, [sp, #24]
 80114ba:	2201      	movs	r2, #1
 80114bc:	9205      	str	r2, [sp, #20]
 80114be:	2200      	movs	r2, #0
 80114c0:	9204      	str	r2, [sp, #16]
 80114c2:	221e      	movs	r2, #30
 80114c4:	9203      	str	r2, [sp, #12]
 80114c6:	221e      	movs	r2, #30
 80114c8:	9202      	str	r2, [sp, #8]
 80114ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80114ce:	9201      	str	r2, [sp, #4]
 80114d0:	9300      	str	r3, [sp, #0]
 80114d2:	2300      	movs	r3, #0
 80114d4:	4a1f      	ldr	r2, [pc, #124]	; (8011554 <MX_USBX_Host_Init+0x168>)
 80114d6:	4920      	ldr	r1, [pc, #128]	; (8011558 <MX_USBX_Host_Init+0x16c>)
 80114d8:	4820      	ldr	r0, [pc, #128]	; (801155c <MX_USBX_Host_Init+0x170>)
 80114da:	f7fa ff7b 	bl	800c3d4 <_txe_thread_create>

	/* Create the CDC Send Thread */
	tx_byte_allocate(byte_pool, (VOID **)&pointer, 1024, TX_NO_WAIT);
 80114de:	f107 010c 	add.w	r1, r7, #12
 80114e2:	2300      	movs	r3, #0
 80114e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80114e8:	6938      	ldr	r0, [r7, #16]
 80114ea:	f7fa fae3 	bl	800bab4 <_txe_byte_allocate>
	tx_thread_create(&cdc_acm_send_thread, "CDC Send Thread", cdc_acm_send_thread_entry, 0, pointer, 1024, 15, 15, TX_NO_TIME_SLICE, TX_AUTO_START);
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	22b0      	movs	r2, #176	; 0xb0
 80114f2:	9206      	str	r2, [sp, #24]
 80114f4:	2201      	movs	r2, #1
 80114f6:	9205      	str	r2, [sp, #20]
 80114f8:	2200      	movs	r2, #0
 80114fa:	9204      	str	r2, [sp, #16]
 80114fc:	220f      	movs	r2, #15
 80114fe:	9203      	str	r2, [sp, #12]
 8011500:	220f      	movs	r2, #15
 8011502:	9202      	str	r2, [sp, #8]
 8011504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011508:	9201      	str	r2, [sp, #4]
 801150a:	9300      	str	r3, [sp, #0]
 801150c:	2300      	movs	r3, #0
 801150e:	4a14      	ldr	r2, [pc, #80]	; (8011560 <MX_USBX_Host_Init+0x174>)
 8011510:	4914      	ldr	r1, [pc, #80]	; (8011564 <MX_USBX_Host_Init+0x178>)
 8011512:	4815      	ldr	r0, [pc, #84]	; (8011568 <MX_USBX_Host_Init+0x17c>)
 8011514:	f7fa ff5e 	bl	800c3d4 <_txe_thread_create>

	/* Create the Event Flags and the UART Mutex */
	tx_event_flags_create(&cdc_acm_eventflag, "Event Flag");
 8011518:	2224      	movs	r2, #36	; 0x24
 801151a:	4914      	ldr	r1, [pc, #80]	; (801156c <MX_USBX_Host_Init+0x180>)
 801151c:	4814      	ldr	r0, [pc, #80]	; (8011570 <MX_USBX_Host_Init+0x184>)
 801151e:	f7fa fbdd 	bl	800bcdc <_txe_event_flags_create>
	tx_mutex_create(&cdc_acm_uart_mutex, "UART Mutex", TX_INHERIT);
 8011522:	2334      	movs	r3, #52	; 0x34
 8011524:	2201      	movs	r2, #1
 8011526:	4913      	ldr	r1, [pc, #76]	; (8011574 <MX_USBX_Host_Init+0x188>)
 8011528:	4813      	ldr	r0, [pc, #76]	; (8011578 <MX_USBX_Host_Init+0x18c>)
 801152a:	f7fa fced 	bl	800bf08 <_txe_mutex_create>

	/* USER CODE END MX_USBX_Host_Init1 */

	return ret;
 801152e:	697b      	ldr	r3, [r7, #20]
}
 8011530:	4618      	mov	r0, r3
 8011532:	3718      	adds	r7, #24
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}
 8011538:	080115b5 	.word	0x080115b5
 801153c:	080116bd 	.word	0x080116bd
 8011540:	0800f9d9 	.word	0x0800f9d9
 8011544:	24000014 	.word	0x24000014
 8011548:	0801157d 	.word	0x0801157d
 801154c:	080129e8 	.word	0x080129e8
 8011550:	24005784 	.word	0x24005784
 8011554:	080117b1 	.word	0x080117b1
 8011558:	08012a04 	.word	0x08012a04
 801155c:	240058e4 	.word	0x240058e4
 8011560:	0801170d 	.word	0x0801170d
 8011564:	08012a18 	.word	0x08012a18
 8011568:	24005834 	.word	0x24005834
 801156c:	08012a28 	.word	0x08012a28
 8011570:	24005994 	.word	0x24005994
 8011574:	08012a34 	.word	0x08012a34
 8011578:	240059b8 	.word	0x240059b8

0801157c <app_ux_host_thread_entry>:
 * @brief  Function implementing app_ux_host_thread_entry.
 * @param  thread_input: User thread input parameter.
 * @retval none
 */
static VOID app_ux_host_thread_entry(ULONG thread_input)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b082      	sub	sp, #8
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN app_ux_host_thread_entry */
	/* Initialize the USB Peripheral */
	MX_USB_OTG_HS_HCD_Init();
 8011584:	f7ef fd74 	bl	8001070 <MX_USB_OTG_HS_HCD_Init>

	/* Link the USB Peripheral to the USBX Host Controller Driver */
	ux_host_stack_hcd_register(_ux_system_host_hcd_stm32_name, _ux_hcd_stm32_initialize, USB_OTG_HS_PERIPH_BASE, (ULONG)&hhcd_USB_OTG_HS);
 8011588:	4b06      	ldr	r3, [pc, #24]	; (80115a4 <app_ux_host_thread_entry+0x28>)
 801158a:	4a07      	ldr	r2, [pc, #28]	; (80115a8 <app_ux_host_thread_entry+0x2c>)
 801158c:	4907      	ldr	r1, [pc, #28]	; (80115ac <app_ux_host_thread_entry+0x30>)
 801158e:	4808      	ldr	r0, [pc, #32]	; (80115b0 <app_ux_host_thread_entry+0x34>)
 8011590:	f7fc fa18 	bl	800d9c4 <_ux_host_stack_hcd_register>

	/* Start the Peripheral */
	HAL_HCD_Start(&hhcd_USB_OTG_HS);
 8011594:	4803      	ldr	r0, [pc, #12]	; (80115a4 <app_ux_host_thread_entry+0x28>)
 8011596:	f7f0 fcec 	bl	8001f72 <HAL_HCD_Start>

	/* USER CODE END app_ux_host_thread_entry */
}
 801159a:	bf00      	nop
 801159c:	3708      	adds	r7, #8
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	24004e34 	.word	0x24004e34
 80115a8:	40040000 	.word	0x40040000
 80115ac:	08010911 	.word	0x08010911
 80115b0:	2400002c 	.word	0x2400002c

080115b4 <ux_host_event_callback>:
 * @param  current_class: Pointer to class.
 * @param  current_instance: Pointer to class instance.
 * @retval status
 */
UINT ux_host_event_callback(ULONG event, UX_HOST_CLASS *current_class, VOID *current_instance)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b086      	sub	sp, #24
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	60f8      	str	r0, [r7, #12]
 80115bc:	60b9      	str	r1, [r7, #8]
 80115be:	607a      	str	r2, [r7, #4]
	UINT status = UX_SUCCESS;
 80115c0:	2300      	movs	r3, #0
 80115c2:	617b      	str	r3, [r7, #20]
	/* USER CODE BEGIN ux_host_event_callback0 */
	UX_PARAMETER_NOT_USED(current_class);
	UX_PARAMETER_NOT_USED(current_instance);
	/* USER CODE END ux_host_event_callback0 */

	switch (event)
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	2b82      	cmp	r3, #130	; 0x82
 80115c8:	d059      	beq.n	801167e <ux_host_event_callback+0xca>
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	2b82      	cmp	r3, #130	; 0x82
 80115ce:	d858      	bhi.n	8011682 <ux_host_event_callback+0xce>
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	2b81      	cmp	r3, #129	; 0x81
 80115d4:	d057      	beq.n	8011686 <ux_host_event_callback+0xd2>
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	2b81      	cmp	r3, #129	; 0x81
 80115da:	d852      	bhi.n	8011682 <ux_host_event_callback+0xce>
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	2b01      	cmp	r3, #1
 80115e0:	d003      	beq.n	80115ea <ux_host_event_callback+0x36>
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	2b02      	cmp	r3, #2
 80115e6:	d031      	beq.n	801164c <ux_host_event_callback+0x98>

			/* USER CODE BEGIN EVENT_DEFAULT */

			/* USER CODE END EVENT_DEFAULT */

			break;
 80115e8:	e04b      	b.n	8011682 <ux_host_event_callback+0xce>
			if(current_class->ux_host_class_entry_function == ux_host_class_cdc_acm_entry)
 80115ea:	68bb      	ldr	r3, [r7, #8]
 80115ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115ee:	4a2b      	ldr	r2, [pc, #172]	; (801169c <ux_host_event_callback+0xe8>)
 80115f0:	4293      	cmp	r3, r2
 80115f2:	d14a      	bne.n	801168a <ux_host_event_callback+0xd6>
				if(cdc_acm == UX_NULL)
 80115f4:	4b2a      	ldr	r3, [pc, #168]	; (80116a0 <ux_host_event_callback+0xec>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d146      	bne.n	801168a <ux_host_event_callback+0xd6>
					cdc_acm = (UX_HOST_CLASS_CDC_ACM *)current_instance;
 80115fc:	4a28      	ldr	r2, [pc, #160]	; (80116a0 <ux_host_event_callback+0xec>)
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6013      	str	r3, [r2, #0]
					if(cdc_acm->ux_host_class_cdc_acm_bulk_in_endpoint == UX_NULL)
 8011602:	4b27      	ldr	r3, [pc, #156]	; (80116a0 <ux_host_event_callback+0xec>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	68db      	ldr	r3, [r3, #12]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d103      	bne.n	8011614 <ux_host_event_callback+0x60>
						cdc_acm = UX_NULL;
 801160c:	4b24      	ldr	r3, [pc, #144]	; (80116a0 <ux_host_event_callback+0xec>)
 801160e:	2200      	movs	r2, #0
 8011610:	601a      	str	r2, [r3, #0]
			break;
 8011612:	e03a      	b.n	801168a <ux_host_event_callback+0xd6>
						tx_mutex_get(&cdc_acm_uart_mutex, TX_WAIT_FOREVER);
 8011614:	f04f 31ff 	mov.w	r1, #4294967295
 8011618:	4822      	ldr	r0, [pc, #136]	; (80116a4 <ux_host_event_callback+0xf0>)
 801161a:	f7fa fd13 	bl	800c044 <_txe_mutex_get>
						printf("Device Connected \r\n");
 801161e:	4822      	ldr	r0, [pc, #136]	; (80116a8 <ux_host_event_callback+0xf4>)
 8011620:	f000 fa86 	bl	8011b30 <puts>
						printf("PID: %#x ", (UINT)cdc_acm -> ux_host_class_cdc_acm_device -> ux_device_descriptor.idProduct);
 8011624:	4b1e      	ldr	r3, [pc, #120]	; (80116a0 <ux_host_event_callback+0xec>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	689b      	ldr	r3, [r3, #8]
 801162a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801162c:	4619      	mov	r1, r3
 801162e:	481f      	ldr	r0, [pc, #124]	; (80116ac <ux_host_event_callback+0xf8>)
 8011630:	f000 fa10 	bl	8011a54 <iprintf>
						printf("VID: %#x \r\n", (UINT)cdc_acm -> ux_host_class_cdc_acm_device -> ux_device_descriptor.idVendor);
 8011634:	4b1a      	ldr	r3, [pc, #104]	; (80116a0 <ux_host_event_callback+0xec>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	689b      	ldr	r3, [r3, #8]
 801163a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801163c:	4619      	mov	r1, r3
 801163e:	481c      	ldr	r0, [pc, #112]	; (80116b0 <ux_host_event_callback+0xfc>)
 8011640:	f000 fa08 	bl	8011a54 <iprintf>
						tx_mutex_put(&cdc_acm_uart_mutex);
 8011644:	4817      	ldr	r0, [pc, #92]	; (80116a4 <ux_host_event_callback+0xf0>)
 8011646:	f7fa fd57 	bl	800c0f8 <_txe_mutex_put>
			break;
 801164a:	e01e      	b.n	801168a <ux_host_event_callback+0xd6>
			if((VOID*)cdc_acm == current_instance)
 801164c:	4b14      	ldr	r3, [pc, #80]	; (80116a0 <ux_host_event_callback+0xec>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	687a      	ldr	r2, [r7, #4]
 8011652:	429a      	cmp	r2, r3
 8011654:	d11b      	bne.n	801168e <ux_host_event_callback+0xda>
				cdc_acm = UX_NULL;
 8011656:	4b12      	ldr	r3, [pc, #72]	; (80116a0 <ux_host_event_callback+0xec>)
 8011658:	2200      	movs	r2, #0
 801165a:	601a      	str	r2, [r3, #0]
				tx_mutex_get(&cdc_acm_uart_mutex, TX_WAIT_FOREVER);
 801165c:	f04f 31ff 	mov.w	r1, #4294967295
 8011660:	4810      	ldr	r0, [pc, #64]	; (80116a4 <ux_host_event_callback+0xf0>)
 8011662:	f7fa fcef 	bl	800c044 <_txe_mutex_get>
				printf("Device Disconnected \r\n");
 8011666:	4813      	ldr	r0, [pc, #76]	; (80116b4 <ux_host_event_callback+0x100>)
 8011668:	f000 fa62 	bl	8011b30 <puts>
				tx_mutex_put(&cdc_acm_uart_mutex);
 801166c:	480d      	ldr	r0, [pc, #52]	; (80116a4 <ux_host_event_callback+0xf0>)
 801166e:	f7fa fd43 	bl	800c0f8 <_txe_mutex_put>
				tx_event_flags_set(&cdc_acm_eventflag, 0x01, TX_OR);
 8011672:	2200      	movs	r2, #0
 8011674:	2101      	movs	r1, #1
 8011676:	4810      	ldr	r0, [pc, #64]	; (80116b8 <ux_host_event_callback+0x104>)
 8011678:	f7fa fc18 	bl	800beac <_txe_event_flags_set>
			break;
 801167c:	e007      	b.n	801168e <ux_host_event_callback+0xda>
			break;
 801167e:	bf00      	nop
 8011680:	e006      	b.n	8011690 <ux_host_event_callback+0xdc>
			break;
 8011682:	bf00      	nop
 8011684:	e004      	b.n	8011690 <ux_host_event_callback+0xdc>
			break;
 8011686:	bf00      	nop
 8011688:	e002      	b.n	8011690 <ux_host_event_callback+0xdc>
			break;
 801168a:	bf00      	nop
 801168c:	e000      	b.n	8011690 <ux_host_event_callback+0xdc>
			break;
 801168e:	bf00      	nop

	/* USER CODE BEGIN ux_host_event_callback1 */

	/* USER CODE END ux_host_event_callback1 */

	return status;
 8011690:	697b      	ldr	r3, [r7, #20]
}
 8011692:	4618      	mov	r0, r3
 8011694:	3718      	adds	r7, #24
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}
 801169a:	bf00      	nop
 801169c:	0800f9d9 	.word	0x0800f9d9
 80116a0:	240059ec 	.word	0x240059ec
 80116a4:	240059b8 	.word	0x240059b8
 80116a8:	08012a40 	.word	0x08012a40
 80116ac:	08012a54 	.word	0x08012a54
 80116b0:	08012a60 	.word	0x08012a60
 80116b4:	08012a6c 	.word	0x08012a6c
 80116b8:	24005994 	.word	0x24005994

080116bc <ux_host_error_callback>:
 * @param  system_context: system context code.
 * @param  error_code: error event code.
 * @retval Status
 */
VOID ux_host_error_callback(UINT system_level, UINT system_context, UINT error_code)
{
 80116bc:	b480      	push	{r7}
 80116be:	b085      	sub	sp, #20
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	60f8      	str	r0, [r7, #12]
 80116c4:	60b9      	str	r1, [r7, #8]
 80116c6:	607a      	str	r2, [r7, #4]
	/* USER CODE BEGIN ux_host_error_callback0 */
	UX_PARAMETER_NOT_USED(system_level);
	UX_PARAMETER_NOT_USED(system_context);
	/* USER CODE END ux_host_error_callback0 */

	switch (error_code)
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2b44      	cmp	r3, #68	; 0x44
 80116cc:	d003      	beq.n	80116d6 <ux_host_error_callback+0x1a>
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	2b5f      	cmp	r3, #95	; 0x5f
 80116d2:	d002      	beq.n	80116da <ux_host_error_callback+0x1e>

			/* USER CODE BEGIN ERROR_DEFAULT */

			/* USER CODE END ERROR_DEFAULT */

			break;
 80116d4:	e002      	b.n	80116dc <ux_host_error_callback+0x20>
			break;
 80116d6:	bf00      	nop
 80116d8:	e000      	b.n	80116dc <ux_host_error_callback+0x20>
			break;
 80116da:	bf00      	nop
	}

	/* USER CODE BEGIN ux_host_error_callback1 */

	/* USER CODE END ux_host_error_callback1 */
}
 80116dc:	bf00      	nop
 80116de:	3714      	adds	r7, #20
 80116e0:	46bd      	mov	sp, r7
 80116e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e6:	4770      	bx	lr

080116e8 <__io_putchar>:

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b082      	sub	sp, #8
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFF);
 80116f0:	1d39      	adds	r1, r7, #4
 80116f2:	23ff      	movs	r3, #255	; 0xff
 80116f4:	2201      	movs	r2, #1
 80116f6:	4804      	ldr	r0, [pc, #16]	; (8011708 <__io_putchar+0x20>)
 80116f8:	f7f4 fe9c 	bl	8006434 <HAL_UART_Transmit>
	return ch;
 80116fc:	687b      	ldr	r3, [r7, #4]
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3708      	adds	r7, #8
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}
 8011706:	bf00      	nop
 8011708:	24004da0 	.word	0x24004da0

0801170c <cdc_acm_send_thread_entry>:

/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
VOID cdc_acm_send_thread_entry(ULONG thread_input)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b086      	sub	sp, #24
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
	/* Local Variables */
	UINT status;
	UCHAR UserTxBuffer[] = "10";
 8011714:	4a21      	ldr	r2, [pc, #132]	; (801179c <cdc_acm_send_thread_entry+0x90>)
 8011716:	f107 030c 	add.w	r3, r7, #12
 801171a:	6812      	ldr	r2, [r2, #0]
 801171c:	4611      	mov	r1, r2
 801171e:	8019      	strh	r1, [r3, #0]
 8011720:	3302      	adds	r3, #2
 8011722:	0c12      	lsrs	r2, r2, #16
 8011724:	701a      	strb	r2, [r3, #0]
	ULONG tx_actual_length;
	uint8_t nibble = 0;
 8011726:	2300      	movs	r3, #0
 8011728:	75fb      	strb	r3, [r7, #23]

	/* Infinite Loop */
	while(1)
	{
		/* Check if the CDC Class is available */
		if((cdc_acm != UX_NULL) && (cdc_acm->ux_host_class_cdc_acm_state == UX_HOST_CLASS_INSTANCE_LIVE))
 801172a:	4b1d      	ldr	r3, [pc, #116]	; (80117a0 <cdc_acm_send_thread_entry+0x94>)
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d030      	beq.n	8011794 <cdc_acm_send_thread_entry+0x88>
 8011732:	4b1b      	ldr	r3, [pc, #108]	; (80117a0 <cdc_acm_send_thread_entry+0x94>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	6a1b      	ldr	r3, [r3, #32]
 8011738:	2b01      	cmp	r3, #1
 801173a:	d12b      	bne.n	8011794 <cdc_acm_send_thread_entry+0x88>
		{
			/* Start sending data and store it results */
			status = _ux_host_class_cdc_acm_write(cdc_acm, &UserTxBuffer[nibble], 1, &tx_actual_length);
 801173c:	4b18      	ldr	r3, [pc, #96]	; (80117a0 <cdc_acm_send_thread_entry+0x94>)
 801173e:	6818      	ldr	r0, [r3, #0]
 8011740:	7dfb      	ldrb	r3, [r7, #23]
 8011742:	f107 020c 	add.w	r2, r7, #12
 8011746:	18d1      	adds	r1, r2, r3
 8011748:	f107 0308 	add.w	r3, r7, #8
 801174c:	2201      	movs	r2, #1
 801174e:	f7fe fb4b 	bl	800fde8 <_ux_host_class_cdc_acm_write>
 8011752:	6138      	str	r0, [r7, #16]

			tx_mutex_get(&cdc_acm_uart_mutex, TX_WAIT_FOREVER);
 8011754:	f04f 31ff 	mov.w	r1, #4294967295
 8011758:	4812      	ldr	r0, [pc, #72]	; (80117a4 <cdc_acm_send_thread_entry+0x98>)
 801175a:	f7fa fc73 	bl	800c044 <_txe_mutex_get>
			if (status == UX_SUCCESS)
 801175e:	693b      	ldr	r3, [r7, #16]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d109      	bne.n	8011778 <cdc_acm_send_thread_entry+0x6c>
				printf("Data sent: %c\r\n", UserTxBuffer[nibble]);
 8011764:	7dfb      	ldrb	r3, [r7, #23]
 8011766:	3318      	adds	r3, #24
 8011768:	443b      	add	r3, r7
 801176a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 801176e:	4619      	mov	r1, r3
 8011770:	480d      	ldr	r0, [pc, #52]	; (80117a8 <cdc_acm_send_thread_entry+0x9c>)
 8011772:	f000 f96f 	bl	8011a54 <iprintf>
 8011776:	e002      	b.n	801177e <cdc_acm_send_thread_entry+0x72>
			else
				printf("Unable to send data\r\n");
 8011778:	480c      	ldr	r0, [pc, #48]	; (80117ac <cdc_acm_send_thread_entry+0xa0>)
 801177a:	f000 f9d9 	bl	8011b30 <puts>
			tx_mutex_put(&cdc_acm_uart_mutex);
 801177e:	4809      	ldr	r0, [pc, #36]	; (80117a4 <cdc_acm_send_thread_entry+0x98>)
 8011780:	f7fa fcba 	bl	800c0f8 <_txe_mutex_put>

			/* Invert the nibble variable */
			nibble ^= 1;
 8011784:	7dfb      	ldrb	r3, [r7, #23]
 8011786:	f083 0301 	eor.w	r3, r3, #1
 801178a:	75fb      	strb	r3, [r7, #23]

			/* Wait 2 seconds for the next transmission */
			tx_thread_sleep(200);
 801178c:	20c8      	movs	r0, #200	; 0xc8
 801178e:	f7f9 fa7b 	bl	800ac88 <_tx_thread_sleep>
 8011792:	e002      	b.n	801179a <cdc_acm_send_thread_entry+0x8e>
		}
		else
		{
			tx_thread_sleep(1);
 8011794:	2001      	movs	r0, #1
 8011796:	f7f9 fa77 	bl	800ac88 <_tx_thread_sleep>
		if((cdc_acm != UX_NULL) && (cdc_acm->ux_host_class_cdc_acm_state == UX_HOST_CLASS_INSTANCE_LIVE))
 801179a:	e7c6      	b.n	801172a <cdc_acm_send_thread_entry+0x1e>
 801179c:	08012aac 	.word	0x08012aac
 80117a0:	240059ec 	.word	0x240059ec
 80117a4:	240059b8 	.word	0x240059b8
 80117a8:	08012a84 	.word	0x08012a84
 80117ac:	08012a94 	.word	0x08012a94

080117b0 <cdc_acm_receive_thread_entry>:
		}
	}
}

VOID cdc_acm_receive_thread_entry(ULONG thread_input)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b088      	sub	sp, #32
 80117b4:	af02      	add	r7, sp, #8
 80117b6:	6078      	str	r0, [r7, #4]

	/* Infinite Loop */
	while(1)
	{
		/* Check if the CDC Class is available */
		if((cdc_acm != UX_NULL) && (cdc_acm->ux_host_class_cdc_acm_state == UX_HOST_CLASS_INSTANCE_LIVE))
 80117b8:	4b33      	ldr	r3, [pc, #204]	; (8011888 <cdc_acm_receive_thread_entry+0xd8>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d05d      	beq.n	801187c <cdc_acm_receive_thread_entry+0xcc>
 80117c0:	4b31      	ldr	r3, [pc, #196]	; (8011888 <cdc_acm_receive_thread_entry+0xd8>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	6a1b      	ldr	r3, [r3, #32]
 80117c6:	2b01      	cmp	r3, #1
 80117c8:	d158      	bne.n	801187c <cdc_acm_receive_thread_entry+0xcc>
		{
			/* Check if the reception was already started */
			if(cdc_acm_reception.ux_host_class_cdc_acm_reception_state != UX_HOST_CLASS_CDC_ACM_RECEPTION_STATE_STARTED)
 80117ca:	4b30      	ldr	r3, [pc, #192]	; (801188c <cdc_acm_receive_thread_entry+0xdc>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	2b01      	cmp	r3, #1
 80117d0:	d031      	beq.n	8011836 <cdc_acm_receive_thread_entry+0x86>
			{
				/* Configure the reception parameters */
				cdc_acm_reception.ux_host_class_cdc_acm_reception_block_size = 64;
 80117d2:	4b2e      	ldr	r3, [pc, #184]	; (801188c <cdc_acm_receive_thread_entry+0xdc>)
 80117d4:	2240      	movs	r2, #64	; 0x40
 80117d6:	605a      	str	r2, [r3, #4]
				cdc_acm_reception.ux_host_class_cdc_acm_reception_data_buffer = (UCHAR *)UserRxBuffer;
 80117d8:	4b2c      	ldr	r3, [pc, #176]	; (801188c <cdc_acm_receive_thread_entry+0xdc>)
 80117da:	4a2d      	ldr	r2, [pc, #180]	; (8011890 <cdc_acm_receive_thread_entry+0xe0>)
 80117dc:	609a      	str	r2, [r3, #8]
				cdc_acm_reception.ux_host_class_cdc_acm_reception_data_buffer_size = APP_RX_DATA_SIZE;
 80117de:	4b2b      	ldr	r3, [pc, #172]	; (801188c <cdc_acm_receive_thread_entry+0xdc>)
 80117e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80117e4:	60da      	str	r2, [r3, #12]
				cdc_acm_reception.ux_host_class_cdc_acm_reception_callback = cdc_acm_reception_callback;
 80117e6:	4b29      	ldr	r3, [pc, #164]	; (801188c <cdc_acm_receive_thread_entry+0xdc>)
 80117e8:	4a2a      	ldr	r2, [pc, #168]	; (8011894 <cdc_acm_receive_thread_entry+0xe4>)
 80117ea:	619a      	str	r2, [r3, #24]

				/* Start the recpetion and store it status */
				status = ux_host_class_cdc_acm_reception_start(cdc_acm, &cdc_acm_reception);
 80117ec:	4b26      	ldr	r3, [pc, #152]	; (8011888 <cdc_acm_receive_thread_entry+0xd8>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	4926      	ldr	r1, [pc, #152]	; (801188c <cdc_acm_receive_thread_entry+0xdc>)
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7fe fa7c 	bl	800fcf0 <_ux_host_class_cdc_acm_reception_start>
 80117f8:	6138      	str	r0, [r7, #16]

				if (status == UX_SUCCESS)
 80117fa:	693b      	ldr	r3, [r7, #16]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d10b      	bne.n	8011818 <cdc_acm_receive_thread_entry+0x68>
				{
					tx_mutex_get(&cdc_acm_uart_mutex, TX_WAIT_FOREVER);
 8011800:	f04f 31ff 	mov.w	r1, #4294967295
 8011804:	4824      	ldr	r0, [pc, #144]	; (8011898 <cdc_acm_receive_thread_entry+0xe8>)
 8011806:	f7fa fc1d 	bl	800c044 <_txe_mutex_get>
					printf("Ready to receive data\r\n");
 801180a:	4824      	ldr	r0, [pc, #144]	; (801189c <cdc_acm_receive_thread_entry+0xec>)
 801180c:	f000 f990 	bl	8011b30 <puts>
					tx_mutex_put(&cdc_acm_uart_mutex);
 8011810:	4821      	ldr	r0, [pc, #132]	; (8011898 <cdc_acm_receive_thread_entry+0xe8>)
 8011812:	f7fa fc71 	bl	800c0f8 <_txe_mutex_put>
			if(cdc_acm_reception.ux_host_class_cdc_acm_reception_state != UX_HOST_CLASS_CDC_ACM_RECEPTION_STATE_STARTED)
 8011816:	e035      	b.n	8011884 <cdc_acm_receive_thread_entry+0xd4>
				}
				else
				{
					tx_mutex_get(&cdc_acm_uart_mutex, TX_WAIT_FOREVER);
 8011818:	f04f 31ff 	mov.w	r1, #4294967295
 801181c:	481e      	ldr	r0, [pc, #120]	; (8011898 <cdc_acm_receive_thread_entry+0xe8>)
 801181e:	f7fa fc11 	bl	800c044 <_txe_mutex_get>
					printf("Unable to start reception\r\n");
 8011822:	481f      	ldr	r0, [pc, #124]	; (80118a0 <cdc_acm_receive_thread_entry+0xf0>)
 8011824:	f000 f984 	bl	8011b30 <puts>
					tx_mutex_put(&cdc_acm_uart_mutex);
 8011828:	481b      	ldr	r0, [pc, #108]	; (8011898 <cdc_acm_receive_thread_entry+0xe8>)
 801182a:	f7fa fc65 	bl	800c0f8 <_txe_mutex_put>
					/* Wait 100 ms until try to start the reception again */
					tx_thread_sleep(10);
 801182e:	200a      	movs	r0, #10
 8011830:	f7f9 fa2a 	bl	800ac88 <_tx_thread_sleep>
			if(cdc_acm_reception.ux_host_class_cdc_acm_reception_state != UX_HOST_CLASS_CDC_ACM_RECEPTION_STATE_STARTED)
 8011834:	e026      	b.n	8011884 <cdc_acm_receive_thread_entry+0xd4>
				}
			}
			/* Reception already started */
			else if(cdc_acm_reception.ux_host_class_cdc_acm_reception_state == UX_HOST_CLASS_CDC_ACM_RECEPTION_STATE_STARTED)
 8011836:	4b15      	ldr	r3, [pc, #84]	; (801188c <cdc_acm_receive_thread_entry+0xdc>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	2b01      	cmp	r3, #1
 801183c:	d122      	bne.n	8011884 <cdc_acm_receive_thread_entry+0xd4>
			{
				/* Wait for a data to be received */
				tx_event_flags_get(&cdc_acm_eventflag, 0x01, TX_OR_CLEAR, &events, TX_WAIT_FOREVER);
 801183e:	f107 030c 	add.w	r3, r7, #12
 8011842:	f04f 32ff 	mov.w	r2, #4294967295
 8011846:	9200      	str	r2, [sp, #0]
 8011848:	2201      	movs	r2, #1
 801184a:	2101      	movs	r1, #1
 801184c:	4815      	ldr	r0, [pc, #84]	; (80118a4 <cdc_acm_receive_thread_entry+0xf4>)
 801184e:	f7fa fad7 	bl	800be00 <_txe_event_flags_get>

				/* Print the received data through UART */
				printf("Data received: ");
 8011852:	4815      	ldr	r0, [pc, #84]	; (80118a8 <cdc_acm_receive_thread_entry+0xf8>)
 8011854:	f000 f8fe 	bl	8011a54 <iprintf>
				for(uint16_t count = 0; count < block_reception_count; count++){
 8011858:	2300      	movs	r3, #0
 801185a:	82fb      	strh	r3, [r7, #22]
 801185c:	e008      	b.n	8011870 <cdc_acm_receive_thread_entry+0xc0>
					printf("%c", UserRxBuffer[count]);
 801185e:	8afb      	ldrh	r3, [r7, #22]
 8011860:	4a0b      	ldr	r2, [pc, #44]	; (8011890 <cdc_acm_receive_thread_entry+0xe0>)
 8011862:	5cd3      	ldrb	r3, [r2, r3]
 8011864:	4618      	mov	r0, r3
 8011866:	f000 f907 	bl	8011a78 <putchar>
				for(uint16_t count = 0; count < block_reception_count; count++){
 801186a:	8afb      	ldrh	r3, [r7, #22]
 801186c:	3301      	adds	r3, #1
 801186e:	82fb      	strh	r3, [r7, #22]
 8011870:	8afa      	ldrh	r2, [r7, #22]
 8011872:	4b0e      	ldr	r3, [pc, #56]	; (80118ac <cdc_acm_receive_thread_entry+0xfc>)
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	429a      	cmp	r2, r3
 8011878:	d3f1      	bcc.n	801185e <cdc_acm_receive_thread_entry+0xae>
			if(cdc_acm_reception.ux_host_class_cdc_acm_reception_state != UX_HOST_CLASS_CDC_ACM_RECEPTION_STATE_STARTED)
 801187a:	e003      	b.n	8011884 <cdc_acm_receive_thread_entry+0xd4>
				}
			}
		}
		else
			tx_thread_sleep(10);
 801187c:	200a      	movs	r0, #10
 801187e:	f7f9 fa03 	bl	800ac88 <_tx_thread_sleep>
 8011882:	e799      	b.n	80117b8 <cdc_acm_receive_thread_entry+0x8>
			if(cdc_acm_reception.ux_host_class_cdc_acm_reception_state != UX_HOST_CLASS_CDC_ACM_RECEPTION_STATE_STARTED)
 8011884:	bf00      	nop
		if((cdc_acm != UX_NULL) && (cdc_acm->ux_host_class_cdc_acm_state == UX_HOST_CLASS_INSTANCE_LIVE))
 8011886:	e797      	b.n	80117b8 <cdc_acm_receive_thread_entry+0x8>
 8011888:	240059ec 	.word	0x240059ec
 801188c:	240059f0 	.word	0x240059f0
 8011890:	24005a0c 	.word	0x24005a0c
 8011894:	080118b1 	.word	0x080118b1
 8011898:	240059b8 	.word	0x240059b8
 801189c:	08012ab0 	.word	0x08012ab0
 80118a0:	08012ac8 	.word	0x08012ac8
 80118a4:	24005994 	.word	0x24005994
 80118a8:	08012ae4 	.word	0x08012ae4
 80118ac:	24005e0c 	.word	0x24005e0c

080118b0 <cdc_acm_reception_callback>:
	}
}

VOID cdc_acm_reception_callback(struct UX_HOST_CLASS_CDC_ACM_STRUCT *cdc_acm,
		UINT status, UCHAR *reception_buffer, ULONG reception_size)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b084      	sub	sp, #16
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	60f8      	str	r0, [r7, #12]
 80118b8:	60b9      	str	r1, [r7, #8]
 80118ba:	607a      	str	r2, [r7, #4]
 80118bc:	603b      	str	r3, [r7, #0]
	/* Set the reception pointer to the beginning of the Rx Buffer */
	cdc_acm_reception.ux_host_class_cdc_acm_reception_data_head = cdc_acm_reception.ux_host_class_cdc_acm_reception_data_buffer;
 80118be:	4b0a      	ldr	r3, [pc, #40]	; (80118e8 <cdc_acm_reception_callback+0x38>)
 80118c0:	689b      	ldr	r3, [r3, #8]
 80118c2:	4a09      	ldr	r2, [pc, #36]	; (80118e8 <cdc_acm_reception_callback+0x38>)
 80118c4:	6113      	str	r3, [r2, #16]
	/* Store the reception size in a global variable */
	block_reception_count = reception_size;
 80118c6:	4a09      	ldr	r2, [pc, #36]	; (80118ec <cdc_acm_reception_callback+0x3c>)
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	6013      	str	r3, [r2, #0]

	/* Set NEW_RECEIVED_DATA flag */
	if (tx_event_flags_set(&cdc_acm_eventflag, 0x01, TX_OR) != TX_SUCCESS)
 80118cc:	2200      	movs	r2, #0
 80118ce:	2101      	movs	r1, #1
 80118d0:	4807      	ldr	r0, [pc, #28]	; (80118f0 <cdc_acm_reception_callback+0x40>)
 80118d2:	f7fa faeb 	bl	800beac <_txe_event_flags_set>
 80118d6:	4603      	mov	r3, r0
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d001      	beq.n	80118e0 <cdc_acm_reception_callback+0x30>
	{
		Error_Handler();
 80118dc:	f7ef f940 	bl	8000b60 <Error_Handler>
	}
}
 80118e0:	bf00      	nop
 80118e2:	3710      	adds	r7, #16
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}
 80118e8:	240059f0 	.word	0x240059f0
 80118ec:	24005e0c 	.word	0x24005e0c
 80118f0:	24005994 	.word	0x24005994

080118f4 <std>:
 80118f4:	2300      	movs	r3, #0
 80118f6:	b510      	push	{r4, lr}
 80118f8:	4604      	mov	r4, r0
 80118fa:	e9c0 3300 	strd	r3, r3, [r0]
 80118fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011902:	6083      	str	r3, [r0, #8]
 8011904:	8181      	strh	r1, [r0, #12]
 8011906:	6643      	str	r3, [r0, #100]	; 0x64
 8011908:	81c2      	strh	r2, [r0, #14]
 801190a:	6183      	str	r3, [r0, #24]
 801190c:	4619      	mov	r1, r3
 801190e:	2208      	movs	r2, #8
 8011910:	305c      	adds	r0, #92	; 0x5c
 8011912:	f000 f9ed 	bl	8011cf0 <memset>
 8011916:	4b05      	ldr	r3, [pc, #20]	; (801192c <std+0x38>)
 8011918:	6263      	str	r3, [r4, #36]	; 0x24
 801191a:	4b05      	ldr	r3, [pc, #20]	; (8011930 <std+0x3c>)
 801191c:	62a3      	str	r3, [r4, #40]	; 0x28
 801191e:	4b05      	ldr	r3, [pc, #20]	; (8011934 <std+0x40>)
 8011920:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011922:	4b05      	ldr	r3, [pc, #20]	; (8011938 <std+0x44>)
 8011924:	6224      	str	r4, [r4, #32]
 8011926:	6323      	str	r3, [r4, #48]	; 0x30
 8011928:	bd10      	pop	{r4, pc}
 801192a:	bf00      	nop
 801192c:	08011b41 	.word	0x08011b41
 8011930:	08011b63 	.word	0x08011b63
 8011934:	08011b9b 	.word	0x08011b9b
 8011938:	08011bbf 	.word	0x08011bbf

0801193c <stdio_exit_handler>:
 801193c:	4a02      	ldr	r2, [pc, #8]	; (8011948 <stdio_exit_handler+0xc>)
 801193e:	4903      	ldr	r1, [pc, #12]	; (801194c <stdio_exit_handler+0x10>)
 8011940:	4803      	ldr	r0, [pc, #12]	; (8011950 <stdio_exit_handler+0x14>)
 8011942:	f000 b869 	b.w	8011a18 <_fwalk_sglue>
 8011946:	bf00      	nop
 8011948:	24000070 	.word	0x24000070
 801194c:	08012689 	.word	0x08012689
 8011950:	2400007c 	.word	0x2400007c

08011954 <cleanup_stdio>:
 8011954:	6841      	ldr	r1, [r0, #4]
 8011956:	4b0c      	ldr	r3, [pc, #48]	; (8011988 <cleanup_stdio+0x34>)
 8011958:	4299      	cmp	r1, r3
 801195a:	b510      	push	{r4, lr}
 801195c:	4604      	mov	r4, r0
 801195e:	d001      	beq.n	8011964 <cleanup_stdio+0x10>
 8011960:	f000 fe92 	bl	8012688 <_fflush_r>
 8011964:	68a1      	ldr	r1, [r4, #8]
 8011966:	4b09      	ldr	r3, [pc, #36]	; (801198c <cleanup_stdio+0x38>)
 8011968:	4299      	cmp	r1, r3
 801196a:	d002      	beq.n	8011972 <cleanup_stdio+0x1e>
 801196c:	4620      	mov	r0, r4
 801196e:	f000 fe8b 	bl	8012688 <_fflush_r>
 8011972:	68e1      	ldr	r1, [r4, #12]
 8011974:	4b06      	ldr	r3, [pc, #24]	; (8011990 <cleanup_stdio+0x3c>)
 8011976:	4299      	cmp	r1, r3
 8011978:	d004      	beq.n	8011984 <cleanup_stdio+0x30>
 801197a:	4620      	mov	r0, r4
 801197c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011980:	f000 be82 	b.w	8012688 <_fflush_r>
 8011984:	bd10      	pop	{r4, pc}
 8011986:	bf00      	nop
 8011988:	24005e10 	.word	0x24005e10
 801198c:	24005e78 	.word	0x24005e78
 8011990:	24005ee0 	.word	0x24005ee0

08011994 <global_stdio_init.part.0>:
 8011994:	b510      	push	{r4, lr}
 8011996:	4b0b      	ldr	r3, [pc, #44]	; (80119c4 <global_stdio_init.part.0+0x30>)
 8011998:	4c0b      	ldr	r4, [pc, #44]	; (80119c8 <global_stdio_init.part.0+0x34>)
 801199a:	4a0c      	ldr	r2, [pc, #48]	; (80119cc <global_stdio_init.part.0+0x38>)
 801199c:	601a      	str	r2, [r3, #0]
 801199e:	4620      	mov	r0, r4
 80119a0:	2200      	movs	r2, #0
 80119a2:	2104      	movs	r1, #4
 80119a4:	f7ff ffa6 	bl	80118f4 <std>
 80119a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80119ac:	2201      	movs	r2, #1
 80119ae:	2109      	movs	r1, #9
 80119b0:	f7ff ffa0 	bl	80118f4 <std>
 80119b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80119b8:	2202      	movs	r2, #2
 80119ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119be:	2112      	movs	r1, #18
 80119c0:	f7ff bf98 	b.w	80118f4 <std>
 80119c4:	24005f48 	.word	0x24005f48
 80119c8:	24005e10 	.word	0x24005e10
 80119cc:	0801193d 	.word	0x0801193d

080119d0 <__sfp_lock_acquire>:
 80119d0:	4801      	ldr	r0, [pc, #4]	; (80119d8 <__sfp_lock_acquire+0x8>)
 80119d2:	f000 ba05 	b.w	8011de0 <__retarget_lock_acquire_recursive>
 80119d6:	bf00      	nop
 80119d8:	24005f51 	.word	0x24005f51

080119dc <__sfp_lock_release>:
 80119dc:	4801      	ldr	r0, [pc, #4]	; (80119e4 <__sfp_lock_release+0x8>)
 80119de:	f000 ba00 	b.w	8011de2 <__retarget_lock_release_recursive>
 80119e2:	bf00      	nop
 80119e4:	24005f51 	.word	0x24005f51

080119e8 <__sinit>:
 80119e8:	b510      	push	{r4, lr}
 80119ea:	4604      	mov	r4, r0
 80119ec:	f7ff fff0 	bl	80119d0 <__sfp_lock_acquire>
 80119f0:	6a23      	ldr	r3, [r4, #32]
 80119f2:	b11b      	cbz	r3, 80119fc <__sinit+0x14>
 80119f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119f8:	f7ff bff0 	b.w	80119dc <__sfp_lock_release>
 80119fc:	4b04      	ldr	r3, [pc, #16]	; (8011a10 <__sinit+0x28>)
 80119fe:	6223      	str	r3, [r4, #32]
 8011a00:	4b04      	ldr	r3, [pc, #16]	; (8011a14 <__sinit+0x2c>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d1f5      	bne.n	80119f4 <__sinit+0xc>
 8011a08:	f7ff ffc4 	bl	8011994 <global_stdio_init.part.0>
 8011a0c:	e7f2      	b.n	80119f4 <__sinit+0xc>
 8011a0e:	bf00      	nop
 8011a10:	08011955 	.word	0x08011955
 8011a14:	24005f48 	.word	0x24005f48

08011a18 <_fwalk_sglue>:
 8011a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a1c:	4607      	mov	r7, r0
 8011a1e:	4688      	mov	r8, r1
 8011a20:	4614      	mov	r4, r2
 8011a22:	2600      	movs	r6, #0
 8011a24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a28:	f1b9 0901 	subs.w	r9, r9, #1
 8011a2c:	d505      	bpl.n	8011a3a <_fwalk_sglue+0x22>
 8011a2e:	6824      	ldr	r4, [r4, #0]
 8011a30:	2c00      	cmp	r4, #0
 8011a32:	d1f7      	bne.n	8011a24 <_fwalk_sglue+0xc>
 8011a34:	4630      	mov	r0, r6
 8011a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a3a:	89ab      	ldrh	r3, [r5, #12]
 8011a3c:	2b01      	cmp	r3, #1
 8011a3e:	d907      	bls.n	8011a50 <_fwalk_sglue+0x38>
 8011a40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011a44:	3301      	adds	r3, #1
 8011a46:	d003      	beq.n	8011a50 <_fwalk_sglue+0x38>
 8011a48:	4629      	mov	r1, r5
 8011a4a:	4638      	mov	r0, r7
 8011a4c:	47c0      	blx	r8
 8011a4e:	4306      	orrs	r6, r0
 8011a50:	3568      	adds	r5, #104	; 0x68
 8011a52:	e7e9      	b.n	8011a28 <_fwalk_sglue+0x10>

08011a54 <iprintf>:
 8011a54:	b40f      	push	{r0, r1, r2, r3}
 8011a56:	b507      	push	{r0, r1, r2, lr}
 8011a58:	4906      	ldr	r1, [pc, #24]	; (8011a74 <iprintf+0x20>)
 8011a5a:	ab04      	add	r3, sp, #16
 8011a5c:	6808      	ldr	r0, [r1, #0]
 8011a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a62:	6881      	ldr	r1, [r0, #8]
 8011a64:	9301      	str	r3, [sp, #4]
 8011a66:	f000 fadf 	bl	8012028 <_vfiprintf_r>
 8011a6a:	b003      	add	sp, #12
 8011a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a70:	b004      	add	sp, #16
 8011a72:	4770      	bx	lr
 8011a74:	240000c8 	.word	0x240000c8

08011a78 <putchar>:
 8011a78:	4b02      	ldr	r3, [pc, #8]	; (8011a84 <putchar+0xc>)
 8011a7a:	4601      	mov	r1, r0
 8011a7c:	6818      	ldr	r0, [r3, #0]
 8011a7e:	6882      	ldr	r2, [r0, #8]
 8011a80:	f000 be8c 	b.w	801279c <_putc_r>
 8011a84:	240000c8 	.word	0x240000c8

08011a88 <_puts_r>:
 8011a88:	6a03      	ldr	r3, [r0, #32]
 8011a8a:	b570      	push	{r4, r5, r6, lr}
 8011a8c:	6884      	ldr	r4, [r0, #8]
 8011a8e:	4605      	mov	r5, r0
 8011a90:	460e      	mov	r6, r1
 8011a92:	b90b      	cbnz	r3, 8011a98 <_puts_r+0x10>
 8011a94:	f7ff ffa8 	bl	80119e8 <__sinit>
 8011a98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a9a:	07db      	lsls	r3, r3, #31
 8011a9c:	d405      	bmi.n	8011aaa <_puts_r+0x22>
 8011a9e:	89a3      	ldrh	r3, [r4, #12]
 8011aa0:	0598      	lsls	r0, r3, #22
 8011aa2:	d402      	bmi.n	8011aaa <_puts_r+0x22>
 8011aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011aa6:	f000 f99b 	bl	8011de0 <__retarget_lock_acquire_recursive>
 8011aaa:	89a3      	ldrh	r3, [r4, #12]
 8011aac:	0719      	lsls	r1, r3, #28
 8011aae:	d513      	bpl.n	8011ad8 <_puts_r+0x50>
 8011ab0:	6923      	ldr	r3, [r4, #16]
 8011ab2:	b18b      	cbz	r3, 8011ad8 <_puts_r+0x50>
 8011ab4:	3e01      	subs	r6, #1
 8011ab6:	68a3      	ldr	r3, [r4, #8]
 8011ab8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011abc:	3b01      	subs	r3, #1
 8011abe:	60a3      	str	r3, [r4, #8]
 8011ac0:	b9e9      	cbnz	r1, 8011afe <_puts_r+0x76>
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	da2e      	bge.n	8011b24 <_puts_r+0x9c>
 8011ac6:	4622      	mov	r2, r4
 8011ac8:	210a      	movs	r1, #10
 8011aca:	4628      	mov	r0, r5
 8011acc:	f000 f87b 	bl	8011bc6 <__swbuf_r>
 8011ad0:	3001      	adds	r0, #1
 8011ad2:	d007      	beq.n	8011ae4 <_puts_r+0x5c>
 8011ad4:	250a      	movs	r5, #10
 8011ad6:	e007      	b.n	8011ae8 <_puts_r+0x60>
 8011ad8:	4621      	mov	r1, r4
 8011ada:	4628      	mov	r0, r5
 8011adc:	f000 f8b0 	bl	8011c40 <__swsetup_r>
 8011ae0:	2800      	cmp	r0, #0
 8011ae2:	d0e7      	beq.n	8011ab4 <_puts_r+0x2c>
 8011ae4:	f04f 35ff 	mov.w	r5, #4294967295
 8011ae8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011aea:	07da      	lsls	r2, r3, #31
 8011aec:	d405      	bmi.n	8011afa <_puts_r+0x72>
 8011aee:	89a3      	ldrh	r3, [r4, #12]
 8011af0:	059b      	lsls	r3, r3, #22
 8011af2:	d402      	bmi.n	8011afa <_puts_r+0x72>
 8011af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011af6:	f000 f974 	bl	8011de2 <__retarget_lock_release_recursive>
 8011afa:	4628      	mov	r0, r5
 8011afc:	bd70      	pop	{r4, r5, r6, pc}
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	da04      	bge.n	8011b0c <_puts_r+0x84>
 8011b02:	69a2      	ldr	r2, [r4, #24]
 8011b04:	429a      	cmp	r2, r3
 8011b06:	dc06      	bgt.n	8011b16 <_puts_r+0x8e>
 8011b08:	290a      	cmp	r1, #10
 8011b0a:	d004      	beq.n	8011b16 <_puts_r+0x8e>
 8011b0c:	6823      	ldr	r3, [r4, #0]
 8011b0e:	1c5a      	adds	r2, r3, #1
 8011b10:	6022      	str	r2, [r4, #0]
 8011b12:	7019      	strb	r1, [r3, #0]
 8011b14:	e7cf      	b.n	8011ab6 <_puts_r+0x2e>
 8011b16:	4622      	mov	r2, r4
 8011b18:	4628      	mov	r0, r5
 8011b1a:	f000 f854 	bl	8011bc6 <__swbuf_r>
 8011b1e:	3001      	adds	r0, #1
 8011b20:	d1c9      	bne.n	8011ab6 <_puts_r+0x2e>
 8011b22:	e7df      	b.n	8011ae4 <_puts_r+0x5c>
 8011b24:	6823      	ldr	r3, [r4, #0]
 8011b26:	250a      	movs	r5, #10
 8011b28:	1c5a      	adds	r2, r3, #1
 8011b2a:	6022      	str	r2, [r4, #0]
 8011b2c:	701d      	strb	r5, [r3, #0]
 8011b2e:	e7db      	b.n	8011ae8 <_puts_r+0x60>

08011b30 <puts>:
 8011b30:	4b02      	ldr	r3, [pc, #8]	; (8011b3c <puts+0xc>)
 8011b32:	4601      	mov	r1, r0
 8011b34:	6818      	ldr	r0, [r3, #0]
 8011b36:	f7ff bfa7 	b.w	8011a88 <_puts_r>
 8011b3a:	bf00      	nop
 8011b3c:	240000c8 	.word	0x240000c8

08011b40 <__sread>:
 8011b40:	b510      	push	{r4, lr}
 8011b42:	460c      	mov	r4, r1
 8011b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b48:	f000 f8fc 	bl	8011d44 <_read_r>
 8011b4c:	2800      	cmp	r0, #0
 8011b4e:	bfab      	itete	ge
 8011b50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011b52:	89a3      	ldrhlt	r3, [r4, #12]
 8011b54:	181b      	addge	r3, r3, r0
 8011b56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011b5a:	bfac      	ite	ge
 8011b5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8011b5e:	81a3      	strhlt	r3, [r4, #12]
 8011b60:	bd10      	pop	{r4, pc}

08011b62 <__swrite>:
 8011b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b66:	461f      	mov	r7, r3
 8011b68:	898b      	ldrh	r3, [r1, #12]
 8011b6a:	05db      	lsls	r3, r3, #23
 8011b6c:	4605      	mov	r5, r0
 8011b6e:	460c      	mov	r4, r1
 8011b70:	4616      	mov	r6, r2
 8011b72:	d505      	bpl.n	8011b80 <__swrite+0x1e>
 8011b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b78:	2302      	movs	r3, #2
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	f000 f8d0 	bl	8011d20 <_lseek_r>
 8011b80:	89a3      	ldrh	r3, [r4, #12]
 8011b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b8a:	81a3      	strh	r3, [r4, #12]
 8011b8c:	4632      	mov	r2, r6
 8011b8e:	463b      	mov	r3, r7
 8011b90:	4628      	mov	r0, r5
 8011b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b96:	f000 b8e7 	b.w	8011d68 <_write_r>

08011b9a <__sseek>:
 8011b9a:	b510      	push	{r4, lr}
 8011b9c:	460c      	mov	r4, r1
 8011b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ba2:	f000 f8bd 	bl	8011d20 <_lseek_r>
 8011ba6:	1c43      	adds	r3, r0, #1
 8011ba8:	89a3      	ldrh	r3, [r4, #12]
 8011baa:	bf15      	itete	ne
 8011bac:	6560      	strne	r0, [r4, #84]	; 0x54
 8011bae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011bb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011bb6:	81a3      	strheq	r3, [r4, #12]
 8011bb8:	bf18      	it	ne
 8011bba:	81a3      	strhne	r3, [r4, #12]
 8011bbc:	bd10      	pop	{r4, pc}

08011bbe <__sclose>:
 8011bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bc2:	f000 b89d 	b.w	8011d00 <_close_r>

08011bc6 <__swbuf_r>:
 8011bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bc8:	460e      	mov	r6, r1
 8011bca:	4614      	mov	r4, r2
 8011bcc:	4605      	mov	r5, r0
 8011bce:	b118      	cbz	r0, 8011bd8 <__swbuf_r+0x12>
 8011bd0:	6a03      	ldr	r3, [r0, #32]
 8011bd2:	b90b      	cbnz	r3, 8011bd8 <__swbuf_r+0x12>
 8011bd4:	f7ff ff08 	bl	80119e8 <__sinit>
 8011bd8:	69a3      	ldr	r3, [r4, #24]
 8011bda:	60a3      	str	r3, [r4, #8]
 8011bdc:	89a3      	ldrh	r3, [r4, #12]
 8011bde:	071a      	lsls	r2, r3, #28
 8011be0:	d525      	bpl.n	8011c2e <__swbuf_r+0x68>
 8011be2:	6923      	ldr	r3, [r4, #16]
 8011be4:	b31b      	cbz	r3, 8011c2e <__swbuf_r+0x68>
 8011be6:	6823      	ldr	r3, [r4, #0]
 8011be8:	6922      	ldr	r2, [r4, #16]
 8011bea:	1a98      	subs	r0, r3, r2
 8011bec:	6963      	ldr	r3, [r4, #20]
 8011bee:	b2f6      	uxtb	r6, r6
 8011bf0:	4283      	cmp	r3, r0
 8011bf2:	4637      	mov	r7, r6
 8011bf4:	dc04      	bgt.n	8011c00 <__swbuf_r+0x3a>
 8011bf6:	4621      	mov	r1, r4
 8011bf8:	4628      	mov	r0, r5
 8011bfa:	f000 fd45 	bl	8012688 <_fflush_r>
 8011bfe:	b9e0      	cbnz	r0, 8011c3a <__swbuf_r+0x74>
 8011c00:	68a3      	ldr	r3, [r4, #8]
 8011c02:	3b01      	subs	r3, #1
 8011c04:	60a3      	str	r3, [r4, #8]
 8011c06:	6823      	ldr	r3, [r4, #0]
 8011c08:	1c5a      	adds	r2, r3, #1
 8011c0a:	6022      	str	r2, [r4, #0]
 8011c0c:	701e      	strb	r6, [r3, #0]
 8011c0e:	6962      	ldr	r2, [r4, #20]
 8011c10:	1c43      	adds	r3, r0, #1
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d004      	beq.n	8011c20 <__swbuf_r+0x5a>
 8011c16:	89a3      	ldrh	r3, [r4, #12]
 8011c18:	07db      	lsls	r3, r3, #31
 8011c1a:	d506      	bpl.n	8011c2a <__swbuf_r+0x64>
 8011c1c:	2e0a      	cmp	r6, #10
 8011c1e:	d104      	bne.n	8011c2a <__swbuf_r+0x64>
 8011c20:	4621      	mov	r1, r4
 8011c22:	4628      	mov	r0, r5
 8011c24:	f000 fd30 	bl	8012688 <_fflush_r>
 8011c28:	b938      	cbnz	r0, 8011c3a <__swbuf_r+0x74>
 8011c2a:	4638      	mov	r0, r7
 8011c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c2e:	4621      	mov	r1, r4
 8011c30:	4628      	mov	r0, r5
 8011c32:	f000 f805 	bl	8011c40 <__swsetup_r>
 8011c36:	2800      	cmp	r0, #0
 8011c38:	d0d5      	beq.n	8011be6 <__swbuf_r+0x20>
 8011c3a:	f04f 37ff 	mov.w	r7, #4294967295
 8011c3e:	e7f4      	b.n	8011c2a <__swbuf_r+0x64>

08011c40 <__swsetup_r>:
 8011c40:	b538      	push	{r3, r4, r5, lr}
 8011c42:	4b2a      	ldr	r3, [pc, #168]	; (8011cec <__swsetup_r+0xac>)
 8011c44:	4605      	mov	r5, r0
 8011c46:	6818      	ldr	r0, [r3, #0]
 8011c48:	460c      	mov	r4, r1
 8011c4a:	b118      	cbz	r0, 8011c54 <__swsetup_r+0x14>
 8011c4c:	6a03      	ldr	r3, [r0, #32]
 8011c4e:	b90b      	cbnz	r3, 8011c54 <__swsetup_r+0x14>
 8011c50:	f7ff feca 	bl	80119e8 <__sinit>
 8011c54:	89a3      	ldrh	r3, [r4, #12]
 8011c56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c5a:	0718      	lsls	r0, r3, #28
 8011c5c:	d422      	bmi.n	8011ca4 <__swsetup_r+0x64>
 8011c5e:	06d9      	lsls	r1, r3, #27
 8011c60:	d407      	bmi.n	8011c72 <__swsetup_r+0x32>
 8011c62:	2309      	movs	r3, #9
 8011c64:	602b      	str	r3, [r5, #0]
 8011c66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011c6a:	81a3      	strh	r3, [r4, #12]
 8011c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c70:	e034      	b.n	8011cdc <__swsetup_r+0x9c>
 8011c72:	0758      	lsls	r0, r3, #29
 8011c74:	d512      	bpl.n	8011c9c <__swsetup_r+0x5c>
 8011c76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c78:	b141      	cbz	r1, 8011c8c <__swsetup_r+0x4c>
 8011c7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c7e:	4299      	cmp	r1, r3
 8011c80:	d002      	beq.n	8011c88 <__swsetup_r+0x48>
 8011c82:	4628      	mov	r0, r5
 8011c84:	f000 f8ae 	bl	8011de4 <_free_r>
 8011c88:	2300      	movs	r3, #0
 8011c8a:	6363      	str	r3, [r4, #52]	; 0x34
 8011c8c:	89a3      	ldrh	r3, [r4, #12]
 8011c8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011c92:	81a3      	strh	r3, [r4, #12]
 8011c94:	2300      	movs	r3, #0
 8011c96:	6063      	str	r3, [r4, #4]
 8011c98:	6923      	ldr	r3, [r4, #16]
 8011c9a:	6023      	str	r3, [r4, #0]
 8011c9c:	89a3      	ldrh	r3, [r4, #12]
 8011c9e:	f043 0308 	orr.w	r3, r3, #8
 8011ca2:	81a3      	strh	r3, [r4, #12]
 8011ca4:	6923      	ldr	r3, [r4, #16]
 8011ca6:	b94b      	cbnz	r3, 8011cbc <__swsetup_r+0x7c>
 8011ca8:	89a3      	ldrh	r3, [r4, #12]
 8011caa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011cb2:	d003      	beq.n	8011cbc <__swsetup_r+0x7c>
 8011cb4:	4621      	mov	r1, r4
 8011cb6:	4628      	mov	r0, r5
 8011cb8:	f000 fd34 	bl	8012724 <__smakebuf_r>
 8011cbc:	89a0      	ldrh	r0, [r4, #12]
 8011cbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011cc2:	f010 0301 	ands.w	r3, r0, #1
 8011cc6:	d00a      	beq.n	8011cde <__swsetup_r+0x9e>
 8011cc8:	2300      	movs	r3, #0
 8011cca:	60a3      	str	r3, [r4, #8]
 8011ccc:	6963      	ldr	r3, [r4, #20]
 8011cce:	425b      	negs	r3, r3
 8011cd0:	61a3      	str	r3, [r4, #24]
 8011cd2:	6923      	ldr	r3, [r4, #16]
 8011cd4:	b943      	cbnz	r3, 8011ce8 <__swsetup_r+0xa8>
 8011cd6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011cda:	d1c4      	bne.n	8011c66 <__swsetup_r+0x26>
 8011cdc:	bd38      	pop	{r3, r4, r5, pc}
 8011cde:	0781      	lsls	r1, r0, #30
 8011ce0:	bf58      	it	pl
 8011ce2:	6963      	ldrpl	r3, [r4, #20]
 8011ce4:	60a3      	str	r3, [r4, #8]
 8011ce6:	e7f4      	b.n	8011cd2 <__swsetup_r+0x92>
 8011ce8:	2000      	movs	r0, #0
 8011cea:	e7f7      	b.n	8011cdc <__swsetup_r+0x9c>
 8011cec:	240000c8 	.word	0x240000c8

08011cf0 <memset>:
 8011cf0:	4402      	add	r2, r0
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	d100      	bne.n	8011cfa <memset+0xa>
 8011cf8:	4770      	bx	lr
 8011cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8011cfe:	e7f9      	b.n	8011cf4 <memset+0x4>

08011d00 <_close_r>:
 8011d00:	b538      	push	{r3, r4, r5, lr}
 8011d02:	4d06      	ldr	r5, [pc, #24]	; (8011d1c <_close_r+0x1c>)
 8011d04:	2300      	movs	r3, #0
 8011d06:	4604      	mov	r4, r0
 8011d08:	4608      	mov	r0, r1
 8011d0a:	602b      	str	r3, [r5, #0]
 8011d0c:	f7ef f817 	bl	8000d3e <_close>
 8011d10:	1c43      	adds	r3, r0, #1
 8011d12:	d102      	bne.n	8011d1a <_close_r+0x1a>
 8011d14:	682b      	ldr	r3, [r5, #0]
 8011d16:	b103      	cbz	r3, 8011d1a <_close_r+0x1a>
 8011d18:	6023      	str	r3, [r4, #0]
 8011d1a:	bd38      	pop	{r3, r4, r5, pc}
 8011d1c:	24005f4c 	.word	0x24005f4c

08011d20 <_lseek_r>:
 8011d20:	b538      	push	{r3, r4, r5, lr}
 8011d22:	4d07      	ldr	r5, [pc, #28]	; (8011d40 <_lseek_r+0x20>)
 8011d24:	4604      	mov	r4, r0
 8011d26:	4608      	mov	r0, r1
 8011d28:	4611      	mov	r1, r2
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	602a      	str	r2, [r5, #0]
 8011d2e:	461a      	mov	r2, r3
 8011d30:	f7ef f82c 	bl	8000d8c <_lseek>
 8011d34:	1c43      	adds	r3, r0, #1
 8011d36:	d102      	bne.n	8011d3e <_lseek_r+0x1e>
 8011d38:	682b      	ldr	r3, [r5, #0]
 8011d3a:	b103      	cbz	r3, 8011d3e <_lseek_r+0x1e>
 8011d3c:	6023      	str	r3, [r4, #0]
 8011d3e:	bd38      	pop	{r3, r4, r5, pc}
 8011d40:	24005f4c 	.word	0x24005f4c

08011d44 <_read_r>:
 8011d44:	b538      	push	{r3, r4, r5, lr}
 8011d46:	4d07      	ldr	r5, [pc, #28]	; (8011d64 <_read_r+0x20>)
 8011d48:	4604      	mov	r4, r0
 8011d4a:	4608      	mov	r0, r1
 8011d4c:	4611      	mov	r1, r2
 8011d4e:	2200      	movs	r2, #0
 8011d50:	602a      	str	r2, [r5, #0]
 8011d52:	461a      	mov	r2, r3
 8011d54:	f7ee ffba 	bl	8000ccc <_read>
 8011d58:	1c43      	adds	r3, r0, #1
 8011d5a:	d102      	bne.n	8011d62 <_read_r+0x1e>
 8011d5c:	682b      	ldr	r3, [r5, #0]
 8011d5e:	b103      	cbz	r3, 8011d62 <_read_r+0x1e>
 8011d60:	6023      	str	r3, [r4, #0]
 8011d62:	bd38      	pop	{r3, r4, r5, pc}
 8011d64:	24005f4c 	.word	0x24005f4c

08011d68 <_write_r>:
 8011d68:	b538      	push	{r3, r4, r5, lr}
 8011d6a:	4d07      	ldr	r5, [pc, #28]	; (8011d88 <_write_r+0x20>)
 8011d6c:	4604      	mov	r4, r0
 8011d6e:	4608      	mov	r0, r1
 8011d70:	4611      	mov	r1, r2
 8011d72:	2200      	movs	r2, #0
 8011d74:	602a      	str	r2, [r5, #0]
 8011d76:	461a      	mov	r2, r3
 8011d78:	f7ee ffc5 	bl	8000d06 <_write>
 8011d7c:	1c43      	adds	r3, r0, #1
 8011d7e:	d102      	bne.n	8011d86 <_write_r+0x1e>
 8011d80:	682b      	ldr	r3, [r5, #0]
 8011d82:	b103      	cbz	r3, 8011d86 <_write_r+0x1e>
 8011d84:	6023      	str	r3, [r4, #0]
 8011d86:	bd38      	pop	{r3, r4, r5, pc}
 8011d88:	24005f4c 	.word	0x24005f4c

08011d8c <__errno>:
 8011d8c:	4b01      	ldr	r3, [pc, #4]	; (8011d94 <__errno+0x8>)
 8011d8e:	6818      	ldr	r0, [r3, #0]
 8011d90:	4770      	bx	lr
 8011d92:	bf00      	nop
 8011d94:	240000c8 	.word	0x240000c8

08011d98 <__libc_init_array>:
 8011d98:	b570      	push	{r4, r5, r6, lr}
 8011d9a:	4d0d      	ldr	r5, [pc, #52]	; (8011dd0 <__libc_init_array+0x38>)
 8011d9c:	4c0d      	ldr	r4, [pc, #52]	; (8011dd4 <__libc_init_array+0x3c>)
 8011d9e:	1b64      	subs	r4, r4, r5
 8011da0:	10a4      	asrs	r4, r4, #2
 8011da2:	2600      	movs	r6, #0
 8011da4:	42a6      	cmp	r6, r4
 8011da6:	d109      	bne.n	8011dbc <__libc_init_array+0x24>
 8011da8:	4d0b      	ldr	r5, [pc, #44]	; (8011dd8 <__libc_init_array+0x40>)
 8011daa:	4c0c      	ldr	r4, [pc, #48]	; (8011ddc <__libc_init_array+0x44>)
 8011dac:	f000 fd5c 	bl	8012868 <_init>
 8011db0:	1b64      	subs	r4, r4, r5
 8011db2:	10a4      	asrs	r4, r4, #2
 8011db4:	2600      	movs	r6, #0
 8011db6:	42a6      	cmp	r6, r4
 8011db8:	d105      	bne.n	8011dc6 <__libc_init_array+0x2e>
 8011dba:	bd70      	pop	{r4, r5, r6, pc}
 8011dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dc0:	4798      	blx	r3
 8011dc2:	3601      	adds	r6, #1
 8011dc4:	e7ee      	b.n	8011da4 <__libc_init_array+0xc>
 8011dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dca:	4798      	blx	r3
 8011dcc:	3601      	adds	r6, #1
 8011dce:	e7f2      	b.n	8011db6 <__libc_init_array+0x1e>
 8011dd0:	08012b68 	.word	0x08012b68
 8011dd4:	08012b68 	.word	0x08012b68
 8011dd8:	08012b68 	.word	0x08012b68
 8011ddc:	08012b6c 	.word	0x08012b6c

08011de0 <__retarget_lock_acquire_recursive>:
 8011de0:	4770      	bx	lr

08011de2 <__retarget_lock_release_recursive>:
 8011de2:	4770      	bx	lr

08011de4 <_free_r>:
 8011de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011de6:	2900      	cmp	r1, #0
 8011de8:	d044      	beq.n	8011e74 <_free_r+0x90>
 8011dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dee:	9001      	str	r0, [sp, #4]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	f1a1 0404 	sub.w	r4, r1, #4
 8011df6:	bfb8      	it	lt
 8011df8:	18e4      	addlt	r4, r4, r3
 8011dfa:	f000 f8df 	bl	8011fbc <__malloc_lock>
 8011dfe:	4a1e      	ldr	r2, [pc, #120]	; (8011e78 <_free_r+0x94>)
 8011e00:	9801      	ldr	r0, [sp, #4]
 8011e02:	6813      	ldr	r3, [r2, #0]
 8011e04:	b933      	cbnz	r3, 8011e14 <_free_r+0x30>
 8011e06:	6063      	str	r3, [r4, #4]
 8011e08:	6014      	str	r4, [r2, #0]
 8011e0a:	b003      	add	sp, #12
 8011e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e10:	f000 b8da 	b.w	8011fc8 <__malloc_unlock>
 8011e14:	42a3      	cmp	r3, r4
 8011e16:	d908      	bls.n	8011e2a <_free_r+0x46>
 8011e18:	6825      	ldr	r5, [r4, #0]
 8011e1a:	1961      	adds	r1, r4, r5
 8011e1c:	428b      	cmp	r3, r1
 8011e1e:	bf01      	itttt	eq
 8011e20:	6819      	ldreq	r1, [r3, #0]
 8011e22:	685b      	ldreq	r3, [r3, #4]
 8011e24:	1949      	addeq	r1, r1, r5
 8011e26:	6021      	streq	r1, [r4, #0]
 8011e28:	e7ed      	b.n	8011e06 <_free_r+0x22>
 8011e2a:	461a      	mov	r2, r3
 8011e2c:	685b      	ldr	r3, [r3, #4]
 8011e2e:	b10b      	cbz	r3, 8011e34 <_free_r+0x50>
 8011e30:	42a3      	cmp	r3, r4
 8011e32:	d9fa      	bls.n	8011e2a <_free_r+0x46>
 8011e34:	6811      	ldr	r1, [r2, #0]
 8011e36:	1855      	adds	r5, r2, r1
 8011e38:	42a5      	cmp	r5, r4
 8011e3a:	d10b      	bne.n	8011e54 <_free_r+0x70>
 8011e3c:	6824      	ldr	r4, [r4, #0]
 8011e3e:	4421      	add	r1, r4
 8011e40:	1854      	adds	r4, r2, r1
 8011e42:	42a3      	cmp	r3, r4
 8011e44:	6011      	str	r1, [r2, #0]
 8011e46:	d1e0      	bne.n	8011e0a <_free_r+0x26>
 8011e48:	681c      	ldr	r4, [r3, #0]
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	6053      	str	r3, [r2, #4]
 8011e4e:	440c      	add	r4, r1
 8011e50:	6014      	str	r4, [r2, #0]
 8011e52:	e7da      	b.n	8011e0a <_free_r+0x26>
 8011e54:	d902      	bls.n	8011e5c <_free_r+0x78>
 8011e56:	230c      	movs	r3, #12
 8011e58:	6003      	str	r3, [r0, #0]
 8011e5a:	e7d6      	b.n	8011e0a <_free_r+0x26>
 8011e5c:	6825      	ldr	r5, [r4, #0]
 8011e5e:	1961      	adds	r1, r4, r5
 8011e60:	428b      	cmp	r3, r1
 8011e62:	bf04      	itt	eq
 8011e64:	6819      	ldreq	r1, [r3, #0]
 8011e66:	685b      	ldreq	r3, [r3, #4]
 8011e68:	6063      	str	r3, [r4, #4]
 8011e6a:	bf04      	itt	eq
 8011e6c:	1949      	addeq	r1, r1, r5
 8011e6e:	6021      	streq	r1, [r4, #0]
 8011e70:	6054      	str	r4, [r2, #4]
 8011e72:	e7ca      	b.n	8011e0a <_free_r+0x26>
 8011e74:	b003      	add	sp, #12
 8011e76:	bd30      	pop	{r4, r5, pc}
 8011e78:	24005f54 	.word	0x24005f54

08011e7c <sbrk_aligned>:
 8011e7c:	b570      	push	{r4, r5, r6, lr}
 8011e7e:	4e0e      	ldr	r6, [pc, #56]	; (8011eb8 <sbrk_aligned+0x3c>)
 8011e80:	460c      	mov	r4, r1
 8011e82:	6831      	ldr	r1, [r6, #0]
 8011e84:	4605      	mov	r5, r0
 8011e86:	b911      	cbnz	r1, 8011e8e <sbrk_aligned+0x12>
 8011e88:	f000 fcde 	bl	8012848 <_sbrk_r>
 8011e8c:	6030      	str	r0, [r6, #0]
 8011e8e:	4621      	mov	r1, r4
 8011e90:	4628      	mov	r0, r5
 8011e92:	f000 fcd9 	bl	8012848 <_sbrk_r>
 8011e96:	1c43      	adds	r3, r0, #1
 8011e98:	d00a      	beq.n	8011eb0 <sbrk_aligned+0x34>
 8011e9a:	1cc4      	adds	r4, r0, #3
 8011e9c:	f024 0403 	bic.w	r4, r4, #3
 8011ea0:	42a0      	cmp	r0, r4
 8011ea2:	d007      	beq.n	8011eb4 <sbrk_aligned+0x38>
 8011ea4:	1a21      	subs	r1, r4, r0
 8011ea6:	4628      	mov	r0, r5
 8011ea8:	f000 fcce 	bl	8012848 <_sbrk_r>
 8011eac:	3001      	adds	r0, #1
 8011eae:	d101      	bne.n	8011eb4 <sbrk_aligned+0x38>
 8011eb0:	f04f 34ff 	mov.w	r4, #4294967295
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	bd70      	pop	{r4, r5, r6, pc}
 8011eb8:	24005f58 	.word	0x24005f58

08011ebc <_malloc_r>:
 8011ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ec0:	1ccd      	adds	r5, r1, #3
 8011ec2:	f025 0503 	bic.w	r5, r5, #3
 8011ec6:	3508      	adds	r5, #8
 8011ec8:	2d0c      	cmp	r5, #12
 8011eca:	bf38      	it	cc
 8011ecc:	250c      	movcc	r5, #12
 8011ece:	2d00      	cmp	r5, #0
 8011ed0:	4607      	mov	r7, r0
 8011ed2:	db01      	blt.n	8011ed8 <_malloc_r+0x1c>
 8011ed4:	42a9      	cmp	r1, r5
 8011ed6:	d905      	bls.n	8011ee4 <_malloc_r+0x28>
 8011ed8:	230c      	movs	r3, #12
 8011eda:	603b      	str	r3, [r7, #0]
 8011edc:	2600      	movs	r6, #0
 8011ede:	4630      	mov	r0, r6
 8011ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ee4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011fb8 <_malloc_r+0xfc>
 8011ee8:	f000 f868 	bl	8011fbc <__malloc_lock>
 8011eec:	f8d8 3000 	ldr.w	r3, [r8]
 8011ef0:	461c      	mov	r4, r3
 8011ef2:	bb5c      	cbnz	r4, 8011f4c <_malloc_r+0x90>
 8011ef4:	4629      	mov	r1, r5
 8011ef6:	4638      	mov	r0, r7
 8011ef8:	f7ff ffc0 	bl	8011e7c <sbrk_aligned>
 8011efc:	1c43      	adds	r3, r0, #1
 8011efe:	4604      	mov	r4, r0
 8011f00:	d155      	bne.n	8011fae <_malloc_r+0xf2>
 8011f02:	f8d8 4000 	ldr.w	r4, [r8]
 8011f06:	4626      	mov	r6, r4
 8011f08:	2e00      	cmp	r6, #0
 8011f0a:	d145      	bne.n	8011f98 <_malloc_r+0xdc>
 8011f0c:	2c00      	cmp	r4, #0
 8011f0e:	d048      	beq.n	8011fa2 <_malloc_r+0xe6>
 8011f10:	6823      	ldr	r3, [r4, #0]
 8011f12:	4631      	mov	r1, r6
 8011f14:	4638      	mov	r0, r7
 8011f16:	eb04 0903 	add.w	r9, r4, r3
 8011f1a:	f000 fc95 	bl	8012848 <_sbrk_r>
 8011f1e:	4581      	cmp	r9, r0
 8011f20:	d13f      	bne.n	8011fa2 <_malloc_r+0xe6>
 8011f22:	6821      	ldr	r1, [r4, #0]
 8011f24:	1a6d      	subs	r5, r5, r1
 8011f26:	4629      	mov	r1, r5
 8011f28:	4638      	mov	r0, r7
 8011f2a:	f7ff ffa7 	bl	8011e7c <sbrk_aligned>
 8011f2e:	3001      	adds	r0, #1
 8011f30:	d037      	beq.n	8011fa2 <_malloc_r+0xe6>
 8011f32:	6823      	ldr	r3, [r4, #0]
 8011f34:	442b      	add	r3, r5
 8011f36:	6023      	str	r3, [r4, #0]
 8011f38:	f8d8 3000 	ldr.w	r3, [r8]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d038      	beq.n	8011fb2 <_malloc_r+0xf6>
 8011f40:	685a      	ldr	r2, [r3, #4]
 8011f42:	42a2      	cmp	r2, r4
 8011f44:	d12b      	bne.n	8011f9e <_malloc_r+0xe2>
 8011f46:	2200      	movs	r2, #0
 8011f48:	605a      	str	r2, [r3, #4]
 8011f4a:	e00f      	b.n	8011f6c <_malloc_r+0xb0>
 8011f4c:	6822      	ldr	r2, [r4, #0]
 8011f4e:	1b52      	subs	r2, r2, r5
 8011f50:	d41f      	bmi.n	8011f92 <_malloc_r+0xd6>
 8011f52:	2a0b      	cmp	r2, #11
 8011f54:	d917      	bls.n	8011f86 <_malloc_r+0xca>
 8011f56:	1961      	adds	r1, r4, r5
 8011f58:	42a3      	cmp	r3, r4
 8011f5a:	6025      	str	r5, [r4, #0]
 8011f5c:	bf18      	it	ne
 8011f5e:	6059      	strne	r1, [r3, #4]
 8011f60:	6863      	ldr	r3, [r4, #4]
 8011f62:	bf08      	it	eq
 8011f64:	f8c8 1000 	streq.w	r1, [r8]
 8011f68:	5162      	str	r2, [r4, r5]
 8011f6a:	604b      	str	r3, [r1, #4]
 8011f6c:	4638      	mov	r0, r7
 8011f6e:	f104 060b 	add.w	r6, r4, #11
 8011f72:	f000 f829 	bl	8011fc8 <__malloc_unlock>
 8011f76:	f026 0607 	bic.w	r6, r6, #7
 8011f7a:	1d23      	adds	r3, r4, #4
 8011f7c:	1af2      	subs	r2, r6, r3
 8011f7e:	d0ae      	beq.n	8011ede <_malloc_r+0x22>
 8011f80:	1b9b      	subs	r3, r3, r6
 8011f82:	50a3      	str	r3, [r4, r2]
 8011f84:	e7ab      	b.n	8011ede <_malloc_r+0x22>
 8011f86:	42a3      	cmp	r3, r4
 8011f88:	6862      	ldr	r2, [r4, #4]
 8011f8a:	d1dd      	bne.n	8011f48 <_malloc_r+0x8c>
 8011f8c:	f8c8 2000 	str.w	r2, [r8]
 8011f90:	e7ec      	b.n	8011f6c <_malloc_r+0xb0>
 8011f92:	4623      	mov	r3, r4
 8011f94:	6864      	ldr	r4, [r4, #4]
 8011f96:	e7ac      	b.n	8011ef2 <_malloc_r+0x36>
 8011f98:	4634      	mov	r4, r6
 8011f9a:	6876      	ldr	r6, [r6, #4]
 8011f9c:	e7b4      	b.n	8011f08 <_malloc_r+0x4c>
 8011f9e:	4613      	mov	r3, r2
 8011fa0:	e7cc      	b.n	8011f3c <_malloc_r+0x80>
 8011fa2:	230c      	movs	r3, #12
 8011fa4:	603b      	str	r3, [r7, #0]
 8011fa6:	4638      	mov	r0, r7
 8011fa8:	f000 f80e 	bl	8011fc8 <__malloc_unlock>
 8011fac:	e797      	b.n	8011ede <_malloc_r+0x22>
 8011fae:	6025      	str	r5, [r4, #0]
 8011fb0:	e7dc      	b.n	8011f6c <_malloc_r+0xb0>
 8011fb2:	605b      	str	r3, [r3, #4]
 8011fb4:	deff      	udf	#255	; 0xff
 8011fb6:	bf00      	nop
 8011fb8:	24005f54 	.word	0x24005f54

08011fbc <__malloc_lock>:
 8011fbc:	4801      	ldr	r0, [pc, #4]	; (8011fc4 <__malloc_lock+0x8>)
 8011fbe:	f7ff bf0f 	b.w	8011de0 <__retarget_lock_acquire_recursive>
 8011fc2:	bf00      	nop
 8011fc4:	24005f50 	.word	0x24005f50

08011fc8 <__malloc_unlock>:
 8011fc8:	4801      	ldr	r0, [pc, #4]	; (8011fd0 <__malloc_unlock+0x8>)
 8011fca:	f7ff bf0a 	b.w	8011de2 <__retarget_lock_release_recursive>
 8011fce:	bf00      	nop
 8011fd0:	24005f50 	.word	0x24005f50

08011fd4 <__sfputc_r>:
 8011fd4:	6893      	ldr	r3, [r2, #8]
 8011fd6:	3b01      	subs	r3, #1
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	b410      	push	{r4}
 8011fdc:	6093      	str	r3, [r2, #8]
 8011fde:	da08      	bge.n	8011ff2 <__sfputc_r+0x1e>
 8011fe0:	6994      	ldr	r4, [r2, #24]
 8011fe2:	42a3      	cmp	r3, r4
 8011fe4:	db01      	blt.n	8011fea <__sfputc_r+0x16>
 8011fe6:	290a      	cmp	r1, #10
 8011fe8:	d103      	bne.n	8011ff2 <__sfputc_r+0x1e>
 8011fea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fee:	f7ff bdea 	b.w	8011bc6 <__swbuf_r>
 8011ff2:	6813      	ldr	r3, [r2, #0]
 8011ff4:	1c58      	adds	r0, r3, #1
 8011ff6:	6010      	str	r0, [r2, #0]
 8011ff8:	7019      	strb	r1, [r3, #0]
 8011ffa:	4608      	mov	r0, r1
 8011ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012000:	4770      	bx	lr

08012002 <__sfputs_r>:
 8012002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012004:	4606      	mov	r6, r0
 8012006:	460f      	mov	r7, r1
 8012008:	4614      	mov	r4, r2
 801200a:	18d5      	adds	r5, r2, r3
 801200c:	42ac      	cmp	r4, r5
 801200e:	d101      	bne.n	8012014 <__sfputs_r+0x12>
 8012010:	2000      	movs	r0, #0
 8012012:	e007      	b.n	8012024 <__sfputs_r+0x22>
 8012014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012018:	463a      	mov	r2, r7
 801201a:	4630      	mov	r0, r6
 801201c:	f7ff ffda 	bl	8011fd4 <__sfputc_r>
 8012020:	1c43      	adds	r3, r0, #1
 8012022:	d1f3      	bne.n	801200c <__sfputs_r+0xa>
 8012024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012028 <_vfiprintf_r>:
 8012028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801202c:	460d      	mov	r5, r1
 801202e:	b09d      	sub	sp, #116	; 0x74
 8012030:	4614      	mov	r4, r2
 8012032:	4698      	mov	r8, r3
 8012034:	4606      	mov	r6, r0
 8012036:	b118      	cbz	r0, 8012040 <_vfiprintf_r+0x18>
 8012038:	6a03      	ldr	r3, [r0, #32]
 801203a:	b90b      	cbnz	r3, 8012040 <_vfiprintf_r+0x18>
 801203c:	f7ff fcd4 	bl	80119e8 <__sinit>
 8012040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012042:	07d9      	lsls	r1, r3, #31
 8012044:	d405      	bmi.n	8012052 <_vfiprintf_r+0x2a>
 8012046:	89ab      	ldrh	r3, [r5, #12]
 8012048:	059a      	lsls	r2, r3, #22
 801204a:	d402      	bmi.n	8012052 <_vfiprintf_r+0x2a>
 801204c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801204e:	f7ff fec7 	bl	8011de0 <__retarget_lock_acquire_recursive>
 8012052:	89ab      	ldrh	r3, [r5, #12]
 8012054:	071b      	lsls	r3, r3, #28
 8012056:	d501      	bpl.n	801205c <_vfiprintf_r+0x34>
 8012058:	692b      	ldr	r3, [r5, #16]
 801205a:	b99b      	cbnz	r3, 8012084 <_vfiprintf_r+0x5c>
 801205c:	4629      	mov	r1, r5
 801205e:	4630      	mov	r0, r6
 8012060:	f7ff fdee 	bl	8011c40 <__swsetup_r>
 8012064:	b170      	cbz	r0, 8012084 <_vfiprintf_r+0x5c>
 8012066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012068:	07dc      	lsls	r4, r3, #31
 801206a:	d504      	bpl.n	8012076 <_vfiprintf_r+0x4e>
 801206c:	f04f 30ff 	mov.w	r0, #4294967295
 8012070:	b01d      	add	sp, #116	; 0x74
 8012072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012076:	89ab      	ldrh	r3, [r5, #12]
 8012078:	0598      	lsls	r0, r3, #22
 801207a:	d4f7      	bmi.n	801206c <_vfiprintf_r+0x44>
 801207c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801207e:	f7ff feb0 	bl	8011de2 <__retarget_lock_release_recursive>
 8012082:	e7f3      	b.n	801206c <_vfiprintf_r+0x44>
 8012084:	2300      	movs	r3, #0
 8012086:	9309      	str	r3, [sp, #36]	; 0x24
 8012088:	2320      	movs	r3, #32
 801208a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801208e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012092:	2330      	movs	r3, #48	; 0x30
 8012094:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012248 <_vfiprintf_r+0x220>
 8012098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801209c:	f04f 0901 	mov.w	r9, #1
 80120a0:	4623      	mov	r3, r4
 80120a2:	469a      	mov	sl, r3
 80120a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120a8:	b10a      	cbz	r2, 80120ae <_vfiprintf_r+0x86>
 80120aa:	2a25      	cmp	r2, #37	; 0x25
 80120ac:	d1f9      	bne.n	80120a2 <_vfiprintf_r+0x7a>
 80120ae:	ebba 0b04 	subs.w	fp, sl, r4
 80120b2:	d00b      	beq.n	80120cc <_vfiprintf_r+0xa4>
 80120b4:	465b      	mov	r3, fp
 80120b6:	4622      	mov	r2, r4
 80120b8:	4629      	mov	r1, r5
 80120ba:	4630      	mov	r0, r6
 80120bc:	f7ff ffa1 	bl	8012002 <__sfputs_r>
 80120c0:	3001      	adds	r0, #1
 80120c2:	f000 80a9 	beq.w	8012218 <_vfiprintf_r+0x1f0>
 80120c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120c8:	445a      	add	r2, fp
 80120ca:	9209      	str	r2, [sp, #36]	; 0x24
 80120cc:	f89a 3000 	ldrb.w	r3, [sl]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	f000 80a1 	beq.w	8012218 <_vfiprintf_r+0x1f0>
 80120d6:	2300      	movs	r3, #0
 80120d8:	f04f 32ff 	mov.w	r2, #4294967295
 80120dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120e0:	f10a 0a01 	add.w	sl, sl, #1
 80120e4:	9304      	str	r3, [sp, #16]
 80120e6:	9307      	str	r3, [sp, #28]
 80120e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120ec:	931a      	str	r3, [sp, #104]	; 0x68
 80120ee:	4654      	mov	r4, sl
 80120f0:	2205      	movs	r2, #5
 80120f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120f6:	4854      	ldr	r0, [pc, #336]	; (8012248 <_vfiprintf_r+0x220>)
 80120f8:	f7ee fa2a 	bl	8000550 <memchr>
 80120fc:	9a04      	ldr	r2, [sp, #16]
 80120fe:	b9d8      	cbnz	r0, 8012138 <_vfiprintf_r+0x110>
 8012100:	06d1      	lsls	r1, r2, #27
 8012102:	bf44      	itt	mi
 8012104:	2320      	movmi	r3, #32
 8012106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801210a:	0713      	lsls	r3, r2, #28
 801210c:	bf44      	itt	mi
 801210e:	232b      	movmi	r3, #43	; 0x2b
 8012110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012114:	f89a 3000 	ldrb.w	r3, [sl]
 8012118:	2b2a      	cmp	r3, #42	; 0x2a
 801211a:	d015      	beq.n	8012148 <_vfiprintf_r+0x120>
 801211c:	9a07      	ldr	r2, [sp, #28]
 801211e:	4654      	mov	r4, sl
 8012120:	2000      	movs	r0, #0
 8012122:	f04f 0c0a 	mov.w	ip, #10
 8012126:	4621      	mov	r1, r4
 8012128:	f811 3b01 	ldrb.w	r3, [r1], #1
 801212c:	3b30      	subs	r3, #48	; 0x30
 801212e:	2b09      	cmp	r3, #9
 8012130:	d94d      	bls.n	80121ce <_vfiprintf_r+0x1a6>
 8012132:	b1b0      	cbz	r0, 8012162 <_vfiprintf_r+0x13a>
 8012134:	9207      	str	r2, [sp, #28]
 8012136:	e014      	b.n	8012162 <_vfiprintf_r+0x13a>
 8012138:	eba0 0308 	sub.w	r3, r0, r8
 801213c:	fa09 f303 	lsl.w	r3, r9, r3
 8012140:	4313      	orrs	r3, r2
 8012142:	9304      	str	r3, [sp, #16]
 8012144:	46a2      	mov	sl, r4
 8012146:	e7d2      	b.n	80120ee <_vfiprintf_r+0xc6>
 8012148:	9b03      	ldr	r3, [sp, #12]
 801214a:	1d19      	adds	r1, r3, #4
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	9103      	str	r1, [sp, #12]
 8012150:	2b00      	cmp	r3, #0
 8012152:	bfbb      	ittet	lt
 8012154:	425b      	neglt	r3, r3
 8012156:	f042 0202 	orrlt.w	r2, r2, #2
 801215a:	9307      	strge	r3, [sp, #28]
 801215c:	9307      	strlt	r3, [sp, #28]
 801215e:	bfb8      	it	lt
 8012160:	9204      	strlt	r2, [sp, #16]
 8012162:	7823      	ldrb	r3, [r4, #0]
 8012164:	2b2e      	cmp	r3, #46	; 0x2e
 8012166:	d10c      	bne.n	8012182 <_vfiprintf_r+0x15a>
 8012168:	7863      	ldrb	r3, [r4, #1]
 801216a:	2b2a      	cmp	r3, #42	; 0x2a
 801216c:	d134      	bne.n	80121d8 <_vfiprintf_r+0x1b0>
 801216e:	9b03      	ldr	r3, [sp, #12]
 8012170:	1d1a      	adds	r2, r3, #4
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	9203      	str	r2, [sp, #12]
 8012176:	2b00      	cmp	r3, #0
 8012178:	bfb8      	it	lt
 801217a:	f04f 33ff 	movlt.w	r3, #4294967295
 801217e:	3402      	adds	r4, #2
 8012180:	9305      	str	r3, [sp, #20]
 8012182:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012258 <_vfiprintf_r+0x230>
 8012186:	7821      	ldrb	r1, [r4, #0]
 8012188:	2203      	movs	r2, #3
 801218a:	4650      	mov	r0, sl
 801218c:	f7ee f9e0 	bl	8000550 <memchr>
 8012190:	b138      	cbz	r0, 80121a2 <_vfiprintf_r+0x17a>
 8012192:	9b04      	ldr	r3, [sp, #16]
 8012194:	eba0 000a 	sub.w	r0, r0, sl
 8012198:	2240      	movs	r2, #64	; 0x40
 801219a:	4082      	lsls	r2, r0
 801219c:	4313      	orrs	r3, r2
 801219e:	3401      	adds	r4, #1
 80121a0:	9304      	str	r3, [sp, #16]
 80121a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121a6:	4829      	ldr	r0, [pc, #164]	; (801224c <_vfiprintf_r+0x224>)
 80121a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121ac:	2206      	movs	r2, #6
 80121ae:	f7ee f9cf 	bl	8000550 <memchr>
 80121b2:	2800      	cmp	r0, #0
 80121b4:	d03f      	beq.n	8012236 <_vfiprintf_r+0x20e>
 80121b6:	4b26      	ldr	r3, [pc, #152]	; (8012250 <_vfiprintf_r+0x228>)
 80121b8:	bb1b      	cbnz	r3, 8012202 <_vfiprintf_r+0x1da>
 80121ba:	9b03      	ldr	r3, [sp, #12]
 80121bc:	3307      	adds	r3, #7
 80121be:	f023 0307 	bic.w	r3, r3, #7
 80121c2:	3308      	adds	r3, #8
 80121c4:	9303      	str	r3, [sp, #12]
 80121c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121c8:	443b      	add	r3, r7
 80121ca:	9309      	str	r3, [sp, #36]	; 0x24
 80121cc:	e768      	b.n	80120a0 <_vfiprintf_r+0x78>
 80121ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80121d2:	460c      	mov	r4, r1
 80121d4:	2001      	movs	r0, #1
 80121d6:	e7a6      	b.n	8012126 <_vfiprintf_r+0xfe>
 80121d8:	2300      	movs	r3, #0
 80121da:	3401      	adds	r4, #1
 80121dc:	9305      	str	r3, [sp, #20]
 80121de:	4619      	mov	r1, r3
 80121e0:	f04f 0c0a 	mov.w	ip, #10
 80121e4:	4620      	mov	r0, r4
 80121e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121ea:	3a30      	subs	r2, #48	; 0x30
 80121ec:	2a09      	cmp	r2, #9
 80121ee:	d903      	bls.n	80121f8 <_vfiprintf_r+0x1d0>
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d0c6      	beq.n	8012182 <_vfiprintf_r+0x15a>
 80121f4:	9105      	str	r1, [sp, #20]
 80121f6:	e7c4      	b.n	8012182 <_vfiprintf_r+0x15a>
 80121f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80121fc:	4604      	mov	r4, r0
 80121fe:	2301      	movs	r3, #1
 8012200:	e7f0      	b.n	80121e4 <_vfiprintf_r+0x1bc>
 8012202:	ab03      	add	r3, sp, #12
 8012204:	9300      	str	r3, [sp, #0]
 8012206:	462a      	mov	r2, r5
 8012208:	4b12      	ldr	r3, [pc, #72]	; (8012254 <_vfiprintf_r+0x22c>)
 801220a:	a904      	add	r1, sp, #16
 801220c:	4630      	mov	r0, r6
 801220e:	f3af 8000 	nop.w
 8012212:	4607      	mov	r7, r0
 8012214:	1c78      	adds	r0, r7, #1
 8012216:	d1d6      	bne.n	80121c6 <_vfiprintf_r+0x19e>
 8012218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801221a:	07d9      	lsls	r1, r3, #31
 801221c:	d405      	bmi.n	801222a <_vfiprintf_r+0x202>
 801221e:	89ab      	ldrh	r3, [r5, #12]
 8012220:	059a      	lsls	r2, r3, #22
 8012222:	d402      	bmi.n	801222a <_vfiprintf_r+0x202>
 8012224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012226:	f7ff fddc 	bl	8011de2 <__retarget_lock_release_recursive>
 801222a:	89ab      	ldrh	r3, [r5, #12]
 801222c:	065b      	lsls	r3, r3, #25
 801222e:	f53f af1d 	bmi.w	801206c <_vfiprintf_r+0x44>
 8012232:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012234:	e71c      	b.n	8012070 <_vfiprintf_r+0x48>
 8012236:	ab03      	add	r3, sp, #12
 8012238:	9300      	str	r3, [sp, #0]
 801223a:	462a      	mov	r2, r5
 801223c:	4b05      	ldr	r3, [pc, #20]	; (8012254 <_vfiprintf_r+0x22c>)
 801223e:	a904      	add	r1, sp, #16
 8012240:	4630      	mov	r0, r6
 8012242:	f000 f879 	bl	8012338 <_printf_i>
 8012246:	e7e4      	b.n	8012212 <_vfiprintf_r+0x1ea>
 8012248:	08012b2c 	.word	0x08012b2c
 801224c:	08012b36 	.word	0x08012b36
 8012250:	00000000 	.word	0x00000000
 8012254:	08012003 	.word	0x08012003
 8012258:	08012b32 	.word	0x08012b32

0801225c <_printf_common>:
 801225c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012260:	4616      	mov	r6, r2
 8012262:	4699      	mov	r9, r3
 8012264:	688a      	ldr	r2, [r1, #8]
 8012266:	690b      	ldr	r3, [r1, #16]
 8012268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801226c:	4293      	cmp	r3, r2
 801226e:	bfb8      	it	lt
 8012270:	4613      	movlt	r3, r2
 8012272:	6033      	str	r3, [r6, #0]
 8012274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012278:	4607      	mov	r7, r0
 801227a:	460c      	mov	r4, r1
 801227c:	b10a      	cbz	r2, 8012282 <_printf_common+0x26>
 801227e:	3301      	adds	r3, #1
 8012280:	6033      	str	r3, [r6, #0]
 8012282:	6823      	ldr	r3, [r4, #0]
 8012284:	0699      	lsls	r1, r3, #26
 8012286:	bf42      	ittt	mi
 8012288:	6833      	ldrmi	r3, [r6, #0]
 801228a:	3302      	addmi	r3, #2
 801228c:	6033      	strmi	r3, [r6, #0]
 801228e:	6825      	ldr	r5, [r4, #0]
 8012290:	f015 0506 	ands.w	r5, r5, #6
 8012294:	d106      	bne.n	80122a4 <_printf_common+0x48>
 8012296:	f104 0a19 	add.w	sl, r4, #25
 801229a:	68e3      	ldr	r3, [r4, #12]
 801229c:	6832      	ldr	r2, [r6, #0]
 801229e:	1a9b      	subs	r3, r3, r2
 80122a0:	42ab      	cmp	r3, r5
 80122a2:	dc26      	bgt.n	80122f2 <_printf_common+0x96>
 80122a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80122a8:	1e13      	subs	r3, r2, #0
 80122aa:	6822      	ldr	r2, [r4, #0]
 80122ac:	bf18      	it	ne
 80122ae:	2301      	movne	r3, #1
 80122b0:	0692      	lsls	r2, r2, #26
 80122b2:	d42b      	bmi.n	801230c <_printf_common+0xb0>
 80122b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80122b8:	4649      	mov	r1, r9
 80122ba:	4638      	mov	r0, r7
 80122bc:	47c0      	blx	r8
 80122be:	3001      	adds	r0, #1
 80122c0:	d01e      	beq.n	8012300 <_printf_common+0xa4>
 80122c2:	6823      	ldr	r3, [r4, #0]
 80122c4:	6922      	ldr	r2, [r4, #16]
 80122c6:	f003 0306 	and.w	r3, r3, #6
 80122ca:	2b04      	cmp	r3, #4
 80122cc:	bf02      	ittt	eq
 80122ce:	68e5      	ldreq	r5, [r4, #12]
 80122d0:	6833      	ldreq	r3, [r6, #0]
 80122d2:	1aed      	subeq	r5, r5, r3
 80122d4:	68a3      	ldr	r3, [r4, #8]
 80122d6:	bf0c      	ite	eq
 80122d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80122dc:	2500      	movne	r5, #0
 80122de:	4293      	cmp	r3, r2
 80122e0:	bfc4      	itt	gt
 80122e2:	1a9b      	subgt	r3, r3, r2
 80122e4:	18ed      	addgt	r5, r5, r3
 80122e6:	2600      	movs	r6, #0
 80122e8:	341a      	adds	r4, #26
 80122ea:	42b5      	cmp	r5, r6
 80122ec:	d11a      	bne.n	8012324 <_printf_common+0xc8>
 80122ee:	2000      	movs	r0, #0
 80122f0:	e008      	b.n	8012304 <_printf_common+0xa8>
 80122f2:	2301      	movs	r3, #1
 80122f4:	4652      	mov	r2, sl
 80122f6:	4649      	mov	r1, r9
 80122f8:	4638      	mov	r0, r7
 80122fa:	47c0      	blx	r8
 80122fc:	3001      	adds	r0, #1
 80122fe:	d103      	bne.n	8012308 <_printf_common+0xac>
 8012300:	f04f 30ff 	mov.w	r0, #4294967295
 8012304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012308:	3501      	adds	r5, #1
 801230a:	e7c6      	b.n	801229a <_printf_common+0x3e>
 801230c:	18e1      	adds	r1, r4, r3
 801230e:	1c5a      	adds	r2, r3, #1
 8012310:	2030      	movs	r0, #48	; 0x30
 8012312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012316:	4422      	add	r2, r4
 8012318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801231c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012320:	3302      	adds	r3, #2
 8012322:	e7c7      	b.n	80122b4 <_printf_common+0x58>
 8012324:	2301      	movs	r3, #1
 8012326:	4622      	mov	r2, r4
 8012328:	4649      	mov	r1, r9
 801232a:	4638      	mov	r0, r7
 801232c:	47c0      	blx	r8
 801232e:	3001      	adds	r0, #1
 8012330:	d0e6      	beq.n	8012300 <_printf_common+0xa4>
 8012332:	3601      	adds	r6, #1
 8012334:	e7d9      	b.n	80122ea <_printf_common+0x8e>
	...

08012338 <_printf_i>:
 8012338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801233c:	7e0f      	ldrb	r7, [r1, #24]
 801233e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012340:	2f78      	cmp	r7, #120	; 0x78
 8012342:	4691      	mov	r9, r2
 8012344:	4680      	mov	r8, r0
 8012346:	460c      	mov	r4, r1
 8012348:	469a      	mov	sl, r3
 801234a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801234e:	d807      	bhi.n	8012360 <_printf_i+0x28>
 8012350:	2f62      	cmp	r7, #98	; 0x62
 8012352:	d80a      	bhi.n	801236a <_printf_i+0x32>
 8012354:	2f00      	cmp	r7, #0
 8012356:	f000 80d4 	beq.w	8012502 <_printf_i+0x1ca>
 801235a:	2f58      	cmp	r7, #88	; 0x58
 801235c:	f000 80c0 	beq.w	80124e0 <_printf_i+0x1a8>
 8012360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012368:	e03a      	b.n	80123e0 <_printf_i+0xa8>
 801236a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801236e:	2b15      	cmp	r3, #21
 8012370:	d8f6      	bhi.n	8012360 <_printf_i+0x28>
 8012372:	a101      	add	r1, pc, #4	; (adr r1, 8012378 <_printf_i+0x40>)
 8012374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012378:	080123d1 	.word	0x080123d1
 801237c:	080123e5 	.word	0x080123e5
 8012380:	08012361 	.word	0x08012361
 8012384:	08012361 	.word	0x08012361
 8012388:	08012361 	.word	0x08012361
 801238c:	08012361 	.word	0x08012361
 8012390:	080123e5 	.word	0x080123e5
 8012394:	08012361 	.word	0x08012361
 8012398:	08012361 	.word	0x08012361
 801239c:	08012361 	.word	0x08012361
 80123a0:	08012361 	.word	0x08012361
 80123a4:	080124e9 	.word	0x080124e9
 80123a8:	08012411 	.word	0x08012411
 80123ac:	080124a3 	.word	0x080124a3
 80123b0:	08012361 	.word	0x08012361
 80123b4:	08012361 	.word	0x08012361
 80123b8:	0801250b 	.word	0x0801250b
 80123bc:	08012361 	.word	0x08012361
 80123c0:	08012411 	.word	0x08012411
 80123c4:	08012361 	.word	0x08012361
 80123c8:	08012361 	.word	0x08012361
 80123cc:	080124ab 	.word	0x080124ab
 80123d0:	682b      	ldr	r3, [r5, #0]
 80123d2:	1d1a      	adds	r2, r3, #4
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	602a      	str	r2, [r5, #0]
 80123d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80123dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80123e0:	2301      	movs	r3, #1
 80123e2:	e09f      	b.n	8012524 <_printf_i+0x1ec>
 80123e4:	6820      	ldr	r0, [r4, #0]
 80123e6:	682b      	ldr	r3, [r5, #0]
 80123e8:	0607      	lsls	r7, r0, #24
 80123ea:	f103 0104 	add.w	r1, r3, #4
 80123ee:	6029      	str	r1, [r5, #0]
 80123f0:	d501      	bpl.n	80123f6 <_printf_i+0xbe>
 80123f2:	681e      	ldr	r6, [r3, #0]
 80123f4:	e003      	b.n	80123fe <_printf_i+0xc6>
 80123f6:	0646      	lsls	r6, r0, #25
 80123f8:	d5fb      	bpl.n	80123f2 <_printf_i+0xba>
 80123fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80123fe:	2e00      	cmp	r6, #0
 8012400:	da03      	bge.n	801240a <_printf_i+0xd2>
 8012402:	232d      	movs	r3, #45	; 0x2d
 8012404:	4276      	negs	r6, r6
 8012406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801240a:	485a      	ldr	r0, [pc, #360]	; (8012574 <_printf_i+0x23c>)
 801240c:	230a      	movs	r3, #10
 801240e:	e012      	b.n	8012436 <_printf_i+0xfe>
 8012410:	682b      	ldr	r3, [r5, #0]
 8012412:	6820      	ldr	r0, [r4, #0]
 8012414:	1d19      	adds	r1, r3, #4
 8012416:	6029      	str	r1, [r5, #0]
 8012418:	0605      	lsls	r5, r0, #24
 801241a:	d501      	bpl.n	8012420 <_printf_i+0xe8>
 801241c:	681e      	ldr	r6, [r3, #0]
 801241e:	e002      	b.n	8012426 <_printf_i+0xee>
 8012420:	0641      	lsls	r1, r0, #25
 8012422:	d5fb      	bpl.n	801241c <_printf_i+0xe4>
 8012424:	881e      	ldrh	r6, [r3, #0]
 8012426:	4853      	ldr	r0, [pc, #332]	; (8012574 <_printf_i+0x23c>)
 8012428:	2f6f      	cmp	r7, #111	; 0x6f
 801242a:	bf0c      	ite	eq
 801242c:	2308      	moveq	r3, #8
 801242e:	230a      	movne	r3, #10
 8012430:	2100      	movs	r1, #0
 8012432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012436:	6865      	ldr	r5, [r4, #4]
 8012438:	60a5      	str	r5, [r4, #8]
 801243a:	2d00      	cmp	r5, #0
 801243c:	bfa2      	ittt	ge
 801243e:	6821      	ldrge	r1, [r4, #0]
 8012440:	f021 0104 	bicge.w	r1, r1, #4
 8012444:	6021      	strge	r1, [r4, #0]
 8012446:	b90e      	cbnz	r6, 801244c <_printf_i+0x114>
 8012448:	2d00      	cmp	r5, #0
 801244a:	d04b      	beq.n	80124e4 <_printf_i+0x1ac>
 801244c:	4615      	mov	r5, r2
 801244e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012452:	fb03 6711 	mls	r7, r3, r1, r6
 8012456:	5dc7      	ldrb	r7, [r0, r7]
 8012458:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801245c:	4637      	mov	r7, r6
 801245e:	42bb      	cmp	r3, r7
 8012460:	460e      	mov	r6, r1
 8012462:	d9f4      	bls.n	801244e <_printf_i+0x116>
 8012464:	2b08      	cmp	r3, #8
 8012466:	d10b      	bne.n	8012480 <_printf_i+0x148>
 8012468:	6823      	ldr	r3, [r4, #0]
 801246a:	07de      	lsls	r6, r3, #31
 801246c:	d508      	bpl.n	8012480 <_printf_i+0x148>
 801246e:	6923      	ldr	r3, [r4, #16]
 8012470:	6861      	ldr	r1, [r4, #4]
 8012472:	4299      	cmp	r1, r3
 8012474:	bfde      	ittt	le
 8012476:	2330      	movle	r3, #48	; 0x30
 8012478:	f805 3c01 	strble.w	r3, [r5, #-1]
 801247c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012480:	1b52      	subs	r2, r2, r5
 8012482:	6122      	str	r2, [r4, #16]
 8012484:	f8cd a000 	str.w	sl, [sp]
 8012488:	464b      	mov	r3, r9
 801248a:	aa03      	add	r2, sp, #12
 801248c:	4621      	mov	r1, r4
 801248e:	4640      	mov	r0, r8
 8012490:	f7ff fee4 	bl	801225c <_printf_common>
 8012494:	3001      	adds	r0, #1
 8012496:	d14a      	bne.n	801252e <_printf_i+0x1f6>
 8012498:	f04f 30ff 	mov.w	r0, #4294967295
 801249c:	b004      	add	sp, #16
 801249e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124a2:	6823      	ldr	r3, [r4, #0]
 80124a4:	f043 0320 	orr.w	r3, r3, #32
 80124a8:	6023      	str	r3, [r4, #0]
 80124aa:	4833      	ldr	r0, [pc, #204]	; (8012578 <_printf_i+0x240>)
 80124ac:	2778      	movs	r7, #120	; 0x78
 80124ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80124b2:	6823      	ldr	r3, [r4, #0]
 80124b4:	6829      	ldr	r1, [r5, #0]
 80124b6:	061f      	lsls	r7, r3, #24
 80124b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80124bc:	d402      	bmi.n	80124c4 <_printf_i+0x18c>
 80124be:	065f      	lsls	r7, r3, #25
 80124c0:	bf48      	it	mi
 80124c2:	b2b6      	uxthmi	r6, r6
 80124c4:	07df      	lsls	r7, r3, #31
 80124c6:	bf48      	it	mi
 80124c8:	f043 0320 	orrmi.w	r3, r3, #32
 80124cc:	6029      	str	r1, [r5, #0]
 80124ce:	bf48      	it	mi
 80124d0:	6023      	strmi	r3, [r4, #0]
 80124d2:	b91e      	cbnz	r6, 80124dc <_printf_i+0x1a4>
 80124d4:	6823      	ldr	r3, [r4, #0]
 80124d6:	f023 0320 	bic.w	r3, r3, #32
 80124da:	6023      	str	r3, [r4, #0]
 80124dc:	2310      	movs	r3, #16
 80124de:	e7a7      	b.n	8012430 <_printf_i+0xf8>
 80124e0:	4824      	ldr	r0, [pc, #144]	; (8012574 <_printf_i+0x23c>)
 80124e2:	e7e4      	b.n	80124ae <_printf_i+0x176>
 80124e4:	4615      	mov	r5, r2
 80124e6:	e7bd      	b.n	8012464 <_printf_i+0x12c>
 80124e8:	682b      	ldr	r3, [r5, #0]
 80124ea:	6826      	ldr	r6, [r4, #0]
 80124ec:	6961      	ldr	r1, [r4, #20]
 80124ee:	1d18      	adds	r0, r3, #4
 80124f0:	6028      	str	r0, [r5, #0]
 80124f2:	0635      	lsls	r5, r6, #24
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	d501      	bpl.n	80124fc <_printf_i+0x1c4>
 80124f8:	6019      	str	r1, [r3, #0]
 80124fa:	e002      	b.n	8012502 <_printf_i+0x1ca>
 80124fc:	0670      	lsls	r0, r6, #25
 80124fe:	d5fb      	bpl.n	80124f8 <_printf_i+0x1c0>
 8012500:	8019      	strh	r1, [r3, #0]
 8012502:	2300      	movs	r3, #0
 8012504:	6123      	str	r3, [r4, #16]
 8012506:	4615      	mov	r5, r2
 8012508:	e7bc      	b.n	8012484 <_printf_i+0x14c>
 801250a:	682b      	ldr	r3, [r5, #0]
 801250c:	1d1a      	adds	r2, r3, #4
 801250e:	602a      	str	r2, [r5, #0]
 8012510:	681d      	ldr	r5, [r3, #0]
 8012512:	6862      	ldr	r2, [r4, #4]
 8012514:	2100      	movs	r1, #0
 8012516:	4628      	mov	r0, r5
 8012518:	f7ee f81a 	bl	8000550 <memchr>
 801251c:	b108      	cbz	r0, 8012522 <_printf_i+0x1ea>
 801251e:	1b40      	subs	r0, r0, r5
 8012520:	6060      	str	r0, [r4, #4]
 8012522:	6863      	ldr	r3, [r4, #4]
 8012524:	6123      	str	r3, [r4, #16]
 8012526:	2300      	movs	r3, #0
 8012528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801252c:	e7aa      	b.n	8012484 <_printf_i+0x14c>
 801252e:	6923      	ldr	r3, [r4, #16]
 8012530:	462a      	mov	r2, r5
 8012532:	4649      	mov	r1, r9
 8012534:	4640      	mov	r0, r8
 8012536:	47d0      	blx	sl
 8012538:	3001      	adds	r0, #1
 801253a:	d0ad      	beq.n	8012498 <_printf_i+0x160>
 801253c:	6823      	ldr	r3, [r4, #0]
 801253e:	079b      	lsls	r3, r3, #30
 8012540:	d413      	bmi.n	801256a <_printf_i+0x232>
 8012542:	68e0      	ldr	r0, [r4, #12]
 8012544:	9b03      	ldr	r3, [sp, #12]
 8012546:	4298      	cmp	r0, r3
 8012548:	bfb8      	it	lt
 801254a:	4618      	movlt	r0, r3
 801254c:	e7a6      	b.n	801249c <_printf_i+0x164>
 801254e:	2301      	movs	r3, #1
 8012550:	4632      	mov	r2, r6
 8012552:	4649      	mov	r1, r9
 8012554:	4640      	mov	r0, r8
 8012556:	47d0      	blx	sl
 8012558:	3001      	adds	r0, #1
 801255a:	d09d      	beq.n	8012498 <_printf_i+0x160>
 801255c:	3501      	adds	r5, #1
 801255e:	68e3      	ldr	r3, [r4, #12]
 8012560:	9903      	ldr	r1, [sp, #12]
 8012562:	1a5b      	subs	r3, r3, r1
 8012564:	42ab      	cmp	r3, r5
 8012566:	dcf2      	bgt.n	801254e <_printf_i+0x216>
 8012568:	e7eb      	b.n	8012542 <_printf_i+0x20a>
 801256a:	2500      	movs	r5, #0
 801256c:	f104 0619 	add.w	r6, r4, #25
 8012570:	e7f5      	b.n	801255e <_printf_i+0x226>
 8012572:	bf00      	nop
 8012574:	08012b3d 	.word	0x08012b3d
 8012578:	08012b4e 	.word	0x08012b4e

0801257c <__sflush_r>:
 801257c:	898a      	ldrh	r2, [r1, #12]
 801257e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012582:	4605      	mov	r5, r0
 8012584:	0710      	lsls	r0, r2, #28
 8012586:	460c      	mov	r4, r1
 8012588:	d458      	bmi.n	801263c <__sflush_r+0xc0>
 801258a:	684b      	ldr	r3, [r1, #4]
 801258c:	2b00      	cmp	r3, #0
 801258e:	dc05      	bgt.n	801259c <__sflush_r+0x20>
 8012590:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012592:	2b00      	cmp	r3, #0
 8012594:	dc02      	bgt.n	801259c <__sflush_r+0x20>
 8012596:	2000      	movs	r0, #0
 8012598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801259c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801259e:	2e00      	cmp	r6, #0
 80125a0:	d0f9      	beq.n	8012596 <__sflush_r+0x1a>
 80125a2:	2300      	movs	r3, #0
 80125a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80125a8:	682f      	ldr	r7, [r5, #0]
 80125aa:	6a21      	ldr	r1, [r4, #32]
 80125ac:	602b      	str	r3, [r5, #0]
 80125ae:	d032      	beq.n	8012616 <__sflush_r+0x9a>
 80125b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80125b2:	89a3      	ldrh	r3, [r4, #12]
 80125b4:	075a      	lsls	r2, r3, #29
 80125b6:	d505      	bpl.n	80125c4 <__sflush_r+0x48>
 80125b8:	6863      	ldr	r3, [r4, #4]
 80125ba:	1ac0      	subs	r0, r0, r3
 80125bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80125be:	b10b      	cbz	r3, 80125c4 <__sflush_r+0x48>
 80125c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80125c2:	1ac0      	subs	r0, r0, r3
 80125c4:	2300      	movs	r3, #0
 80125c6:	4602      	mov	r2, r0
 80125c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80125ca:	6a21      	ldr	r1, [r4, #32]
 80125cc:	4628      	mov	r0, r5
 80125ce:	47b0      	blx	r6
 80125d0:	1c43      	adds	r3, r0, #1
 80125d2:	89a3      	ldrh	r3, [r4, #12]
 80125d4:	d106      	bne.n	80125e4 <__sflush_r+0x68>
 80125d6:	6829      	ldr	r1, [r5, #0]
 80125d8:	291d      	cmp	r1, #29
 80125da:	d82b      	bhi.n	8012634 <__sflush_r+0xb8>
 80125dc:	4a29      	ldr	r2, [pc, #164]	; (8012684 <__sflush_r+0x108>)
 80125de:	410a      	asrs	r2, r1
 80125e0:	07d6      	lsls	r6, r2, #31
 80125e2:	d427      	bmi.n	8012634 <__sflush_r+0xb8>
 80125e4:	2200      	movs	r2, #0
 80125e6:	6062      	str	r2, [r4, #4]
 80125e8:	04d9      	lsls	r1, r3, #19
 80125ea:	6922      	ldr	r2, [r4, #16]
 80125ec:	6022      	str	r2, [r4, #0]
 80125ee:	d504      	bpl.n	80125fa <__sflush_r+0x7e>
 80125f0:	1c42      	adds	r2, r0, #1
 80125f2:	d101      	bne.n	80125f8 <__sflush_r+0x7c>
 80125f4:	682b      	ldr	r3, [r5, #0]
 80125f6:	b903      	cbnz	r3, 80125fa <__sflush_r+0x7e>
 80125f8:	6560      	str	r0, [r4, #84]	; 0x54
 80125fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80125fc:	602f      	str	r7, [r5, #0]
 80125fe:	2900      	cmp	r1, #0
 8012600:	d0c9      	beq.n	8012596 <__sflush_r+0x1a>
 8012602:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012606:	4299      	cmp	r1, r3
 8012608:	d002      	beq.n	8012610 <__sflush_r+0x94>
 801260a:	4628      	mov	r0, r5
 801260c:	f7ff fbea 	bl	8011de4 <_free_r>
 8012610:	2000      	movs	r0, #0
 8012612:	6360      	str	r0, [r4, #52]	; 0x34
 8012614:	e7c0      	b.n	8012598 <__sflush_r+0x1c>
 8012616:	2301      	movs	r3, #1
 8012618:	4628      	mov	r0, r5
 801261a:	47b0      	blx	r6
 801261c:	1c41      	adds	r1, r0, #1
 801261e:	d1c8      	bne.n	80125b2 <__sflush_r+0x36>
 8012620:	682b      	ldr	r3, [r5, #0]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d0c5      	beq.n	80125b2 <__sflush_r+0x36>
 8012626:	2b1d      	cmp	r3, #29
 8012628:	d001      	beq.n	801262e <__sflush_r+0xb2>
 801262a:	2b16      	cmp	r3, #22
 801262c:	d101      	bne.n	8012632 <__sflush_r+0xb6>
 801262e:	602f      	str	r7, [r5, #0]
 8012630:	e7b1      	b.n	8012596 <__sflush_r+0x1a>
 8012632:	89a3      	ldrh	r3, [r4, #12]
 8012634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012638:	81a3      	strh	r3, [r4, #12]
 801263a:	e7ad      	b.n	8012598 <__sflush_r+0x1c>
 801263c:	690f      	ldr	r7, [r1, #16]
 801263e:	2f00      	cmp	r7, #0
 8012640:	d0a9      	beq.n	8012596 <__sflush_r+0x1a>
 8012642:	0793      	lsls	r3, r2, #30
 8012644:	680e      	ldr	r6, [r1, #0]
 8012646:	bf08      	it	eq
 8012648:	694b      	ldreq	r3, [r1, #20]
 801264a:	600f      	str	r7, [r1, #0]
 801264c:	bf18      	it	ne
 801264e:	2300      	movne	r3, #0
 8012650:	eba6 0807 	sub.w	r8, r6, r7
 8012654:	608b      	str	r3, [r1, #8]
 8012656:	f1b8 0f00 	cmp.w	r8, #0
 801265a:	dd9c      	ble.n	8012596 <__sflush_r+0x1a>
 801265c:	6a21      	ldr	r1, [r4, #32]
 801265e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012660:	4643      	mov	r3, r8
 8012662:	463a      	mov	r2, r7
 8012664:	4628      	mov	r0, r5
 8012666:	47b0      	blx	r6
 8012668:	2800      	cmp	r0, #0
 801266a:	dc06      	bgt.n	801267a <__sflush_r+0xfe>
 801266c:	89a3      	ldrh	r3, [r4, #12]
 801266e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012672:	81a3      	strh	r3, [r4, #12]
 8012674:	f04f 30ff 	mov.w	r0, #4294967295
 8012678:	e78e      	b.n	8012598 <__sflush_r+0x1c>
 801267a:	4407      	add	r7, r0
 801267c:	eba8 0800 	sub.w	r8, r8, r0
 8012680:	e7e9      	b.n	8012656 <__sflush_r+0xda>
 8012682:	bf00      	nop
 8012684:	dfbffffe 	.word	0xdfbffffe

08012688 <_fflush_r>:
 8012688:	b538      	push	{r3, r4, r5, lr}
 801268a:	690b      	ldr	r3, [r1, #16]
 801268c:	4605      	mov	r5, r0
 801268e:	460c      	mov	r4, r1
 8012690:	b913      	cbnz	r3, 8012698 <_fflush_r+0x10>
 8012692:	2500      	movs	r5, #0
 8012694:	4628      	mov	r0, r5
 8012696:	bd38      	pop	{r3, r4, r5, pc}
 8012698:	b118      	cbz	r0, 80126a2 <_fflush_r+0x1a>
 801269a:	6a03      	ldr	r3, [r0, #32]
 801269c:	b90b      	cbnz	r3, 80126a2 <_fflush_r+0x1a>
 801269e:	f7ff f9a3 	bl	80119e8 <__sinit>
 80126a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d0f3      	beq.n	8012692 <_fflush_r+0xa>
 80126aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80126ac:	07d0      	lsls	r0, r2, #31
 80126ae:	d404      	bmi.n	80126ba <_fflush_r+0x32>
 80126b0:	0599      	lsls	r1, r3, #22
 80126b2:	d402      	bmi.n	80126ba <_fflush_r+0x32>
 80126b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126b6:	f7ff fb93 	bl	8011de0 <__retarget_lock_acquire_recursive>
 80126ba:	4628      	mov	r0, r5
 80126bc:	4621      	mov	r1, r4
 80126be:	f7ff ff5d 	bl	801257c <__sflush_r>
 80126c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126c4:	07da      	lsls	r2, r3, #31
 80126c6:	4605      	mov	r5, r0
 80126c8:	d4e4      	bmi.n	8012694 <_fflush_r+0xc>
 80126ca:	89a3      	ldrh	r3, [r4, #12]
 80126cc:	059b      	lsls	r3, r3, #22
 80126ce:	d4e1      	bmi.n	8012694 <_fflush_r+0xc>
 80126d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126d2:	f7ff fb86 	bl	8011de2 <__retarget_lock_release_recursive>
 80126d6:	e7dd      	b.n	8012694 <_fflush_r+0xc>

080126d8 <__swhatbuf_r>:
 80126d8:	b570      	push	{r4, r5, r6, lr}
 80126da:	460c      	mov	r4, r1
 80126dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126e0:	2900      	cmp	r1, #0
 80126e2:	b096      	sub	sp, #88	; 0x58
 80126e4:	4615      	mov	r5, r2
 80126e6:	461e      	mov	r6, r3
 80126e8:	da0d      	bge.n	8012706 <__swhatbuf_r+0x2e>
 80126ea:	89a3      	ldrh	r3, [r4, #12]
 80126ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80126f0:	f04f 0100 	mov.w	r1, #0
 80126f4:	bf0c      	ite	eq
 80126f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80126fa:	2340      	movne	r3, #64	; 0x40
 80126fc:	2000      	movs	r0, #0
 80126fe:	6031      	str	r1, [r6, #0]
 8012700:	602b      	str	r3, [r5, #0]
 8012702:	b016      	add	sp, #88	; 0x58
 8012704:	bd70      	pop	{r4, r5, r6, pc}
 8012706:	466a      	mov	r2, sp
 8012708:	f000 f87c 	bl	8012804 <_fstat_r>
 801270c:	2800      	cmp	r0, #0
 801270e:	dbec      	blt.n	80126ea <__swhatbuf_r+0x12>
 8012710:	9901      	ldr	r1, [sp, #4]
 8012712:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012716:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801271a:	4259      	negs	r1, r3
 801271c:	4159      	adcs	r1, r3
 801271e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012722:	e7eb      	b.n	80126fc <__swhatbuf_r+0x24>

08012724 <__smakebuf_r>:
 8012724:	898b      	ldrh	r3, [r1, #12]
 8012726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012728:	079d      	lsls	r5, r3, #30
 801272a:	4606      	mov	r6, r0
 801272c:	460c      	mov	r4, r1
 801272e:	d507      	bpl.n	8012740 <__smakebuf_r+0x1c>
 8012730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012734:	6023      	str	r3, [r4, #0]
 8012736:	6123      	str	r3, [r4, #16]
 8012738:	2301      	movs	r3, #1
 801273a:	6163      	str	r3, [r4, #20]
 801273c:	b002      	add	sp, #8
 801273e:	bd70      	pop	{r4, r5, r6, pc}
 8012740:	ab01      	add	r3, sp, #4
 8012742:	466a      	mov	r2, sp
 8012744:	f7ff ffc8 	bl	80126d8 <__swhatbuf_r>
 8012748:	9900      	ldr	r1, [sp, #0]
 801274a:	4605      	mov	r5, r0
 801274c:	4630      	mov	r0, r6
 801274e:	f7ff fbb5 	bl	8011ebc <_malloc_r>
 8012752:	b948      	cbnz	r0, 8012768 <__smakebuf_r+0x44>
 8012754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012758:	059a      	lsls	r2, r3, #22
 801275a:	d4ef      	bmi.n	801273c <__smakebuf_r+0x18>
 801275c:	f023 0303 	bic.w	r3, r3, #3
 8012760:	f043 0302 	orr.w	r3, r3, #2
 8012764:	81a3      	strh	r3, [r4, #12]
 8012766:	e7e3      	b.n	8012730 <__smakebuf_r+0xc>
 8012768:	89a3      	ldrh	r3, [r4, #12]
 801276a:	6020      	str	r0, [r4, #0]
 801276c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012770:	81a3      	strh	r3, [r4, #12]
 8012772:	9b00      	ldr	r3, [sp, #0]
 8012774:	6163      	str	r3, [r4, #20]
 8012776:	9b01      	ldr	r3, [sp, #4]
 8012778:	6120      	str	r0, [r4, #16]
 801277a:	b15b      	cbz	r3, 8012794 <__smakebuf_r+0x70>
 801277c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012780:	4630      	mov	r0, r6
 8012782:	f000 f851 	bl	8012828 <_isatty_r>
 8012786:	b128      	cbz	r0, 8012794 <__smakebuf_r+0x70>
 8012788:	89a3      	ldrh	r3, [r4, #12]
 801278a:	f023 0303 	bic.w	r3, r3, #3
 801278e:	f043 0301 	orr.w	r3, r3, #1
 8012792:	81a3      	strh	r3, [r4, #12]
 8012794:	89a3      	ldrh	r3, [r4, #12]
 8012796:	431d      	orrs	r5, r3
 8012798:	81a5      	strh	r5, [r4, #12]
 801279a:	e7cf      	b.n	801273c <__smakebuf_r+0x18>

0801279c <_putc_r>:
 801279c:	b570      	push	{r4, r5, r6, lr}
 801279e:	460d      	mov	r5, r1
 80127a0:	4614      	mov	r4, r2
 80127a2:	4606      	mov	r6, r0
 80127a4:	b118      	cbz	r0, 80127ae <_putc_r+0x12>
 80127a6:	6a03      	ldr	r3, [r0, #32]
 80127a8:	b90b      	cbnz	r3, 80127ae <_putc_r+0x12>
 80127aa:	f7ff f91d 	bl	80119e8 <__sinit>
 80127ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80127b0:	07d8      	lsls	r0, r3, #31
 80127b2:	d405      	bmi.n	80127c0 <_putc_r+0x24>
 80127b4:	89a3      	ldrh	r3, [r4, #12]
 80127b6:	0599      	lsls	r1, r3, #22
 80127b8:	d402      	bmi.n	80127c0 <_putc_r+0x24>
 80127ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127bc:	f7ff fb10 	bl	8011de0 <__retarget_lock_acquire_recursive>
 80127c0:	68a3      	ldr	r3, [r4, #8]
 80127c2:	3b01      	subs	r3, #1
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	60a3      	str	r3, [r4, #8]
 80127c8:	da05      	bge.n	80127d6 <_putc_r+0x3a>
 80127ca:	69a2      	ldr	r2, [r4, #24]
 80127cc:	4293      	cmp	r3, r2
 80127ce:	db12      	blt.n	80127f6 <_putc_r+0x5a>
 80127d0:	b2eb      	uxtb	r3, r5
 80127d2:	2b0a      	cmp	r3, #10
 80127d4:	d00f      	beq.n	80127f6 <_putc_r+0x5a>
 80127d6:	6823      	ldr	r3, [r4, #0]
 80127d8:	1c5a      	adds	r2, r3, #1
 80127da:	6022      	str	r2, [r4, #0]
 80127dc:	701d      	strb	r5, [r3, #0]
 80127de:	b2ed      	uxtb	r5, r5
 80127e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80127e2:	07da      	lsls	r2, r3, #31
 80127e4:	d405      	bmi.n	80127f2 <_putc_r+0x56>
 80127e6:	89a3      	ldrh	r3, [r4, #12]
 80127e8:	059b      	lsls	r3, r3, #22
 80127ea:	d402      	bmi.n	80127f2 <_putc_r+0x56>
 80127ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127ee:	f7ff faf8 	bl	8011de2 <__retarget_lock_release_recursive>
 80127f2:	4628      	mov	r0, r5
 80127f4:	bd70      	pop	{r4, r5, r6, pc}
 80127f6:	4629      	mov	r1, r5
 80127f8:	4622      	mov	r2, r4
 80127fa:	4630      	mov	r0, r6
 80127fc:	f7ff f9e3 	bl	8011bc6 <__swbuf_r>
 8012800:	4605      	mov	r5, r0
 8012802:	e7ed      	b.n	80127e0 <_putc_r+0x44>

08012804 <_fstat_r>:
 8012804:	b538      	push	{r3, r4, r5, lr}
 8012806:	4d07      	ldr	r5, [pc, #28]	; (8012824 <_fstat_r+0x20>)
 8012808:	2300      	movs	r3, #0
 801280a:	4604      	mov	r4, r0
 801280c:	4608      	mov	r0, r1
 801280e:	4611      	mov	r1, r2
 8012810:	602b      	str	r3, [r5, #0]
 8012812:	f7ee faa0 	bl	8000d56 <_fstat>
 8012816:	1c43      	adds	r3, r0, #1
 8012818:	d102      	bne.n	8012820 <_fstat_r+0x1c>
 801281a:	682b      	ldr	r3, [r5, #0]
 801281c:	b103      	cbz	r3, 8012820 <_fstat_r+0x1c>
 801281e:	6023      	str	r3, [r4, #0]
 8012820:	bd38      	pop	{r3, r4, r5, pc}
 8012822:	bf00      	nop
 8012824:	24005f4c 	.word	0x24005f4c

08012828 <_isatty_r>:
 8012828:	b538      	push	{r3, r4, r5, lr}
 801282a:	4d06      	ldr	r5, [pc, #24]	; (8012844 <_isatty_r+0x1c>)
 801282c:	2300      	movs	r3, #0
 801282e:	4604      	mov	r4, r0
 8012830:	4608      	mov	r0, r1
 8012832:	602b      	str	r3, [r5, #0]
 8012834:	f7ee fa9f 	bl	8000d76 <_isatty>
 8012838:	1c43      	adds	r3, r0, #1
 801283a:	d102      	bne.n	8012842 <_isatty_r+0x1a>
 801283c:	682b      	ldr	r3, [r5, #0]
 801283e:	b103      	cbz	r3, 8012842 <_isatty_r+0x1a>
 8012840:	6023      	str	r3, [r4, #0]
 8012842:	bd38      	pop	{r3, r4, r5, pc}
 8012844:	24005f4c 	.word	0x24005f4c

08012848 <_sbrk_r>:
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	4d06      	ldr	r5, [pc, #24]	; (8012864 <_sbrk_r+0x1c>)
 801284c:	2300      	movs	r3, #0
 801284e:	4604      	mov	r4, r0
 8012850:	4608      	mov	r0, r1
 8012852:	602b      	str	r3, [r5, #0]
 8012854:	f7ee faa8 	bl	8000da8 <_sbrk>
 8012858:	1c43      	adds	r3, r0, #1
 801285a:	d102      	bne.n	8012862 <_sbrk_r+0x1a>
 801285c:	682b      	ldr	r3, [r5, #0]
 801285e:	b103      	cbz	r3, 8012862 <_sbrk_r+0x1a>
 8012860:	6023      	str	r3, [r4, #0]
 8012862:	bd38      	pop	{r3, r4, r5, pc}
 8012864:	24005f4c 	.word	0x24005f4c

08012868 <_init>:
 8012868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801286a:	bf00      	nop
 801286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801286e:	bc08      	pop	{r3}
 8012870:	469e      	mov	lr, r3
 8012872:	4770      	bx	lr

08012874 <_fini>:
 8012874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012876:	bf00      	nop
 8012878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801287a:	bc08      	pop	{r3}
 801287c:	469e      	mov	lr, r3
 801287e:	4770      	bx	lr
